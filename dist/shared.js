/*! For license information please see shared.js.LICENSE.txt */
(()=>{var e,t={187:e=>{"use strict";function t(e,t,n){n=n||2;var o,s,i,u,c,h,d,v=t&&t.length,g=v?t[0]*n:e.length,m=r(e,0,g,n,!0),y=[];if(!m||m.next===m.prev)return y;if(v&&(m=function(e,t,n,a){var o,s,i,u=[];for(o=0,s=t.length;o<s;o++)(i=r(e,t[o]*a,o<s-1?t[o+1]*a:e.length,a,!1))===i.next&&(i.steiner=!0),u.push(f(i));for(u.sort(l),o=0;o<u.length;o++)n=p(u[o],n);return n}(e,t,m,n)),e.length>80*n){o=i=e[0],s=u=e[1];for(var b=n;b<g;b+=n)(c=e[b])<o&&(o=c),(h=e[b+1])<s&&(s=h),c>i&&(i=c),h>u&&(u=h);d=0!==(d=Math.max(i-o,u-s))?32767/d:0}return a(m,y,n,o,s,d,0),y}function r(e,t,r,n,a){var o,s;if(a===O(e,t,r,n)>0)for(o=t;o<r;o+=n)s=T(o,e[o],e[o+1],s);else for(o=r-n;o>=t;o-=n)s=T(o,e[o],e[o+1],s);return s&&m(s,s.next)&&(k(s),s=s.next),s}function n(e,t){if(!e)return e;t||(t=e);var r,n=e;do{if(r=!1,n.steiner||!m(n,n.next)&&0!==g(n.prev,n,n.next))n=n.next;else{if(k(n),(n=t=n.prev)===n.next)break;r=!0}}while(r||n!==t);return t}function a(e,t,r,l,p,c,f){if(e){!f&&c&&function(e,t,r,n){var a=e;do{0===a.z&&(a.z=h(a.x,a.y,t,r,n)),a.prevZ=a.prev,a.nextZ=a.next,a=a.next}while(a!==e);a.prevZ.nextZ=null,a.prevZ=null,function(e){var t,r,n,a,o,s,i,u,l=1;do{for(r=e,e=null,o=null,s=0;r;){for(s++,n=r,i=0,t=0;t<l&&(i++,n=n.nextZ);t++);for(u=l;i>0||u>0&&n;)0!==i&&(0===u||!n||r.z<=n.z)?(a=r,r=r.nextZ,i--):(a=n,n=n.nextZ,u--),o?o.nextZ=a:e=a,a.prevZ=o,o=a;r=n}o.nextZ=null,l*=2}while(s>1)}(a)}(e,l,p,c);for(var d,v,g=e;e.prev!==e.next;)if(d=e.prev,v=e.next,c?s(e,l,p,c):o(e))t.push(d.i/r|0),t.push(e.i/r|0),t.push(v.i/r|0),k(e),e=v.next,g=v.next;else if((e=v)===g){f?1===f?a(e=i(n(e),t,r),t,r,l,p,c,2):2===f&&u(e,t,r,l,p,c):a(n(e),t,r,l,p,c,1);break}}}function o(e){var t=e.prev,r=e,n=e.next;if(g(t,r,n)>=0)return!1;for(var a=t.x,o=r.x,s=n.x,i=t.y,u=r.y,l=n.y,p=a<o?a<s?a:s:o<s?o:s,c=i<u?i<l?i:l:u<l?u:l,h=a>o?a>s?a:s:o>s?o:s,f=i>u?i>l?i:l:u>l?u:l,v=n.next;v!==t;){if(v.x>=p&&v.x<=h&&v.y>=c&&v.y<=f&&d(a,i,o,u,s,l,v.x,v.y)&&g(v.prev,v,v.next)>=0)return!1;v=v.next}return!0}function s(e,t,r,n){var a=e.prev,o=e,s=e.next;if(g(a,o,s)>=0)return!1;for(var i=a.x,u=o.x,l=s.x,p=a.y,c=o.y,f=s.y,v=i<u?i<l?i:l:u<l?u:l,m=p<c?p<f?p:f:c<f?c:f,y=i>u?i>l?i:l:u>l?u:l,b=p>c?p>f?p:f:c>f?c:f,x=h(v,m,t,r,n),S=h(y,b,t,r,n),M=e.prevZ,T=e.nextZ;M&&M.z>=x&&T&&T.z<=S;){if(M.x>=v&&M.x<=y&&M.y>=m&&M.y<=b&&M!==a&&M!==s&&d(i,p,u,c,l,f,M.x,M.y)&&g(M.prev,M,M.next)>=0)return!1;if(M=M.prevZ,T.x>=v&&T.x<=y&&T.y>=m&&T.y<=b&&T!==a&&T!==s&&d(i,p,u,c,l,f,T.x,T.y)&&g(T.prev,T,T.next)>=0)return!1;T=T.nextZ}for(;M&&M.z>=x;){if(M.x>=v&&M.x<=y&&M.y>=m&&M.y<=b&&M!==a&&M!==s&&d(i,p,u,c,l,f,M.x,M.y)&&g(M.prev,M,M.next)>=0)return!1;M=M.prevZ}for(;T&&T.z<=S;){if(T.x>=v&&T.x<=y&&T.y>=m&&T.y<=b&&T!==a&&T!==s&&d(i,p,u,c,l,f,T.x,T.y)&&g(T.prev,T,T.next)>=0)return!1;T=T.nextZ}return!0}function i(e,t,r){var a=e;do{var o=a.prev,s=a.next.next;!m(o,s)&&y(o,a,a.next,s)&&S(o,s)&&S(s,o)&&(t.push(o.i/r|0),t.push(a.i/r|0),t.push(s.i/r|0),k(a),k(a.next),a=e=s),a=a.next}while(a!==e);return n(a)}function u(e,t,r,o,s,i){var u=e;do{for(var l=u.next.next;l!==u.prev;){if(u.i!==l.i&&v(u,l)){var p=M(u,l);return u=n(u,u.next),p=n(p,p.next),a(u,t,r,o,s,i,0),void a(p,t,r,o,s,i,0)}l=l.next}u=u.next}while(u!==e)}function l(e,t){return e.x-t.x}function p(e,t){var r=function(e,t){var r,n=t,a=e.x,o=e.y,s=-1/0;do{if(o<=n.y&&o>=n.next.y&&n.next.y!==n.y){var i=n.x+(o-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(i<=a&&i>s&&(s=i,r=n.x<n.next.x?n:n.next,i===a))return r}n=n.next}while(n!==t);if(!r)return null;var u,l=r,p=r.x,h=r.y,f=1/0;n=r;do{a>=n.x&&n.x>=p&&a!==n.x&&d(o<h?a:s,o,p,h,o<h?s:a,o,n.x,n.y)&&(u=Math.abs(o-n.y)/(a-n.x),S(n,e)&&(u<f||u===f&&(n.x>r.x||n.x===r.x&&c(r,n)))&&(r=n,f=u)),n=n.next}while(n!==l);return r}(e,t);if(!r)return t;var a=M(r,e);return n(a,a.next),n(r,r.next)}function c(e,t){return g(e.prev,e,t.prev)<0&&g(t.next,e,e.next)<0}function h(e,t,r,n,a){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-r)*a|0)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-n)*a|0)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function f(e){var t=e,r=e;do{(t.x<r.x||t.x===r.x&&t.y<r.y)&&(r=t),t=t.next}while(t!==e);return r}function d(e,t,r,n,a,o,s,i){return(a-s)*(t-i)>=(e-s)*(o-i)&&(e-s)*(n-i)>=(r-s)*(t-i)&&(r-s)*(o-i)>=(a-s)*(n-i)}function v(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var r=e;do{if(r.i!==e.i&&r.next.i!==e.i&&r.i!==t.i&&r.next.i!==t.i&&y(r,r.next,e,t))return!0;r=r.next}while(r!==e);return!1}(e,t)&&(S(e,t)&&S(t,e)&&function(e,t){var r=e,n=!1,a=(e.x+t.x)/2,o=(e.y+t.y)/2;do{r.y>o!=r.next.y>o&&r.next.y!==r.y&&a<(r.next.x-r.x)*(o-r.y)/(r.next.y-r.y)+r.x&&(n=!n),r=r.next}while(r!==e);return n}(e,t)&&(g(e.prev,e,t.prev)||g(e,t.prev,t))||m(e,t)&&g(e.prev,e,e.next)>0&&g(t.prev,t,t.next)>0)}function g(e,t,r){return(t.y-e.y)*(r.x-t.x)-(t.x-e.x)*(r.y-t.y)}function m(e,t){return e.x===t.x&&e.y===t.y}function y(e,t,r,n){var a=x(g(e,t,r)),o=x(g(e,t,n)),s=x(g(r,n,e)),i=x(g(r,n,t));return a!==o&&s!==i||!(0!==a||!b(e,r,t))||!(0!==o||!b(e,n,t))||!(0!==s||!b(r,e,n))||!(0!==i||!b(r,t,n))}function b(e,t,r){return t.x<=Math.max(e.x,r.x)&&t.x>=Math.min(e.x,r.x)&&t.y<=Math.max(e.y,r.y)&&t.y>=Math.min(e.y,r.y)}function x(e){return e>0?1:e<0?-1:0}function S(e,t){return g(e.prev,e,e.next)<0?g(e,t,e.next)>=0&&g(e,e.prev,t)>=0:g(e,t,e.prev)<0||g(e,e.next,t)<0}function M(e,t){var r=new U(e.i,e.x,e.y),n=new U(t.i,t.x,t.y),a=e.next,o=t.prev;return e.next=t,t.prev=e,r.next=a,a.prev=r,n.next=r,r.prev=n,o.next=n,n.prev=o,n}function T(e,t,r,n){var a=new U(e,t,r);return n?(a.next=n.next,a.prev=n,n.next.prev=a,n.next=a):(a.prev=a,a.next=a),a}function k(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function U(e,t,r){this.i=e,this.x=t,this.y=r,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function O(e,t,r,n){for(var a=0,o=t,s=r-n;o<r;o+=n)a+=(e[s]-e[o])*(e[o+1]+e[s+1]),s=o;return a}e.exports=t,e.exports.default=t,t.deviation=function(e,t,r,n){var a=t&&t.length,o=a?t[0]*r:e.length,s=Math.abs(O(e,0,o,r));if(a)for(var i=0,u=t.length;i<u;i++){var l=t[i]*r,p=i<u-1?t[i+1]*r:e.length;s-=Math.abs(O(e,l,p,r))}var c=0;for(i=0;i<n.length;i+=3){var h=n[i]*r,f=n[i+1]*r,d=n[i+2]*r;c+=Math.abs((e[h]-e[d])*(e[f+1]-e[h+1])-(e[h]-e[f])*(e[d+1]-e[h+1]))}return 0===s&&0===c?0:Math.abs((c-s)/s)},t.flatten=function(e){for(var t=e[0][0].length,r={vertices:[],holes:[],dimensions:t},n=0,a=0;a<e.length;a++){for(var o=0;o<e[a].length;o++)for(var s=0;s<t;s++)r.vertices.push(e[a][o][s]);a>0&&(n+=e[a-1].length,r.holes.push(n))}return r}},887:(e,t,r)=>{"use strict";r.r(t),r.d(t,{glMatrix:()=>n,mat2:()=>a,mat2d:()=>o,mat3:()=>s,mat4:()=>i,quat:()=>p,quat2:()=>c,vec2:()=>h,vec3:()=>u,vec4:()=>l});var n={};r.r(n),r.d(n,{ARRAY_TYPE:()=>d,EPSILON:()=>f,RANDOM:()=>v,equals:()=>b,setMatrixArrayType:()=>g,toRadian:()=>y});var a={};r.r(a),r.d(a,{LDU:()=>F,add:()=>P,adjoint:()=>R,clone:()=>S,copy:()=>M,create:()=>x,determinant:()=>w,equals:()=>z,exactEquals:()=>H,frob:()=>B,fromRotation:()=>I,fromScaling:()=>A,fromValues:()=>k,identity:()=>T,invert:()=>E,mul:()=>_,multiply:()=>L,multiplyScalar:()=>q,multiplyScalarAndAdd:()=>W,rotate:()=>C,scale:()=>D,set:()=>U,str:()=>G,sub:()=>X,subtract:()=>N,transpose:()=>O});var o={};r.r(o),r.d(o,{add:()=>le,clone:()=>Z,copy:()=>j,create:()=>V,determinant:()=>$,equals:()=>de,exactEquals:()=>fe,frob:()=>ue,fromRotation:()=>ae,fromScaling:()=>oe,fromTranslation:()=>se,fromValues:()=>Q,identity:()=>Y,invert:()=>J,mul:()=>ve,multiply:()=>ee,multiplyScalar:()=>ce,multiplyScalarAndAdd:()=>he,rotate:()=>te,scale:()=>re,set:()=>K,str:()=>ie,sub:()=>ge,subtract:()=>pe,translate:()=>ne});var s={};r.r(s),r.d(s,{add:()=>ze,adjoint:()=>Oe,clone:()=>be,copy:()=>xe,create:()=>me,determinant:()=>Ee,equals:()=>Ve,exactEquals:()=>Xe,frob:()=>He,fromMat2d:()=>Ge,fromMat4:()=>ye,fromQuat:()=>Be,fromRotation:()=>Ie,fromScaling:()=>Ae,fromTranslation:()=>De,fromValues:()=>Se,identity:()=>Te,invert:()=>Ue,mul:()=>Ze,multiply:()=>Re,multiplyScalar:()=>We,multiplyScalarAndAdd:()=>_e,normalFromMat4:()=>Fe,projection:()=>Pe,rotate:()=>Le,scale:()=>Ce,set:()=>Me,str:()=>Ne,sub:()=>je,subtract:()=>qe,translate:()=>we,transpose:()=>ke});var i={};r.r(i),r.d(i,{add:()=>Pt,adjoint:()=>nt,clone:()=>Qe,copy:()=>Ke,create:()=>Ye,determinant:()=>at,equals:()=>Wt,exactEquals:()=>qt,frob:()=>Ft,fromQuat:()=>Ut,fromQuat2:()=>bt,fromRotation:()=>dt,fromRotationTranslation:()=>yt,fromRotationTranslationScale:()=>Tt,fromRotationTranslationScaleOrigin:()=>kt,fromScaling:()=>ft,fromTranslation:()=>ht,fromValues:()=>Je,fromXRotation:()=>vt,fromYRotation:()=>gt,fromZRotation:()=>mt,frustum:()=>Ot,getRotation:()=>Mt,getScaling:()=>St,getTranslation:()=>xt,identity:()=>et,invert:()=>rt,lookAt:()=>At,mul:()=>_t,multiply:()=>ot,multiplyScalar:()=>Ht,multiplyScalarAndAdd:()=>zt,ortho:()=>Dt,orthoNO:()=>Ct,orthoZO:()=>It,perspective:()=>Rt,perspectiveFromFieldOfView:()=>Lt,perspectiveNO:()=>Et,perspectiveZO:()=>wt,rotate:()=>ut,rotateX:()=>lt,rotateY:()=>pt,rotateZ:()=>ct,scale:()=>it,set:()=>$e,str:()=>Bt,sub:()=>Xt,subtract:()=>Nt,targetTo:()=>Gt,translate:()=>st,transpose:()=>tt});var u={};r.r(u),r.d(u,{add:()=>Jt,angle:()=>Er,bezier:()=>br,ceil:()=>rr,clone:()=>Zt,copy:()=>Qt,create:()=>Vt,cross:()=>gr,dist:()=>Br,distance:()=>lr,div:()=>Gr,divide:()=>tr,dot:()=>vr,equals:()=>Cr,exactEquals:()=>Lr,floor:()=>nr,forEach:()=>Hr,fromValues:()=>Yt,hermite:()=>yr,inverse:()=>fr,len:()=>Pr,length:()=>jt,lerp:()=>mr,max:()=>or,min:()=>ar,mul:()=>Ar,multiply:()=>er,negate:()=>hr,normalize:()=>dr,random:()=>xr,rotateX:()=>kr,rotateY:()=>Ur,rotateZ:()=>Or,round:()=>sr,scale:()=>ir,scaleAndAdd:()=>ur,set:()=>Kt,sqrDist:()=>Fr,sqrLen:()=>Nr,squaredDistance:()=>pr,squaredLength:()=>cr,str:()=>wr,sub:()=>Ir,subtract:()=>$t,transformMat3:()=>Mr,transformMat4:()=>Sr,transformQuat:()=>Tr,zero:()=>Rr});var l={};r.r(l),r.d(l,{add:()=>Vr,ceil:()=>Qr,clone:()=>qr,copy:()=>_r,create:()=>zr,cross:()=>hn,dist:()=>kn,distance:()=>nn,div:()=>Tn,divide:()=>Yr,dot:()=>cn,equals:()=>xn,exactEquals:()=>bn,floor:()=>Kr,forEach:()=>Rn,fromValues:()=>Wr,inverse:()=>ln,len:()=>On,length:()=>on,lerp:()=>fn,max:()=>$r,min:()=>Jr,mul:()=>Mn,multiply:()=>jr,negate:()=>un,normalize:()=>pn,random:()=>dn,round:()=>en,scale:()=>tn,scaleAndAdd:()=>rn,set:()=>Xr,sqrDist:()=>Un,sqrLen:()=>En,squaredDistance:()=>an,squaredLength:()=>sn,str:()=>yn,sub:()=>Sn,subtract:()=>Zr,transformMat4:()=>vn,transformQuat:()=>gn,zero:()=>mn});var p={};r.r(p),r.d(p,{add:()=>oa,calculateW:()=>Pn,clone:()=>ta,conjugate:()=>Xn,copy:()=>na,create:()=>wn,dot:()=>ua,equals:()=>ga,exactEquals:()=>va,exp:()=>Nn,fromEuler:()=>Zn,fromMat3:()=>Vn,fromValues:()=>ra,getAngle:()=>In,getAxisAngle:()=>Dn,identity:()=>Ln,invert:()=>_n,len:()=>ca,length:()=>pa,lerp:()=>la,ln:()=>Hn,mul:()=>sa,multiply:()=>An,normalize:()=>da,pow:()=>zn,random:()=>Wn,rotateX:()=>Gn,rotateY:()=>Bn,rotateZ:()=>Fn,rotationTo:()=>ma,scale:()=>ia,set:()=>aa,setAxes:()=>ba,setAxisAngle:()=>Cn,slerp:()=>qn,sqlerp:()=>ya,sqrLen:()=>fa,squaredLength:()=>ha,str:()=>jn});var c={};r.r(c),r.d(c,{add:()=>Wa,clone:()=>Sa,conjugate:()=>Qa,copy:()=>Ra,create:()=>xa,dot:()=>Za,equals:()=>ao,exactEquals:()=>no,fromMat4:()=>Ea,fromRotation:()=>Oa,fromRotationTranslation:()=>ka,fromRotationTranslationValues:()=>Ta,fromTranslation:()=>Ua,fromValues:()=>Ma,getDual:()=>Da,getReal:()=>Ca,getTranslation:()=>Ga,identity:()=>wa,invert:()=>Ya,len:()=>Ja,length:()=>Ka,lerp:()=>ja,mul:()=>Xa,multiply:()=>_a,normalize:()=>to,rotateAroundAxis:()=>qa,rotateByQuatAppend:()=>Ha,rotateByQuatPrepend:()=>za,rotateX:()=>Fa,rotateY:()=>Pa,rotateZ:()=>Na,scale:()=>Va,set:()=>La,setDual:()=>Aa,setReal:()=>Ia,sqrLen:()=>eo,squaredLength:()=>$a,str:()=>ro,translate:()=>Ba});var h={};r.r(h),r.d(h,{add:()=>po,angle:()=>Po,ceil:()=>vo,clone:()=>so,copy:()=>uo,create:()=>oo,cross:()=>Lo,dist:()=>Zo,distance:()=>Mo,div:()=>Vo,divide:()=>fo,dot:()=>wo,equals:()=>qo,exactEquals:()=>zo,floor:()=>go,forEach:()=>Qo,fromValues:()=>io,inverse:()=>Eo,len:()=>Wo,length:()=>ko,lerp:()=>Co,max:()=>yo,min:()=>mo,mul:()=>Xo,multiply:()=>ho,negate:()=>Oo,normalize:()=>Ro,random:()=>Do,rotate:()=>Fo,round:()=>bo,scale:()=>xo,scaleAndAdd:()=>So,set:()=>lo,sqrDist:()=>jo,sqrLen:()=>Yo,squaredDistance:()=>To,squaredLength:()=>Uo,str:()=>Ho,sub:()=>_o,subtract:()=>co,transformMat2:()=>Io,transformMat2d:()=>Ao,transformMat3:()=>Go,transformMat4:()=>Bo,zero:()=>No});var f=1e-6,d="undefined"!=typeof Float32Array?Float32Array:Array,v=Math.random;function g(e){d=e}var m=Math.PI/180;function y(e){return e*m}function b(e,t){return Math.abs(e-t)<=f*Math.max(1,Math.abs(e),Math.abs(t))}function x(){var e=new d(4);return d!=Float32Array&&(e[1]=0,e[2]=0),e[0]=1,e[3]=1,e}function S(e){var t=new d(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function M(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function T(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e}function k(e,t,r,n){var a=new d(4);return a[0]=e,a[1]=t,a[2]=r,a[3]=n,a}function U(e,t,r,n,a){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e}function O(e,t){if(e===t){var r=t[1];e[1]=t[2],e[2]=r}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e}function E(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=r*o-a*n;return s?(s=1/s,e[0]=o*s,e[1]=-n*s,e[2]=-a*s,e[3]=r*s,e):null}function R(e,t){var r=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=r,e}function w(e){return e[0]*e[3]-e[2]*e[1]}function L(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=r[0],u=r[1],l=r[2],p=r[3];return e[0]=n*i+o*u,e[1]=a*i+s*u,e[2]=n*l+o*p,e[3]=a*l+s*p,e}function C(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=Math.sin(r),u=Math.cos(r);return e[0]=n*u+o*i,e[1]=a*u+s*i,e[2]=n*-i+o*u,e[3]=a*-i+s*u,e}function D(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=r[0],u=r[1];return e[0]=n*i,e[1]=a*i,e[2]=o*u,e[3]=s*u,e}function I(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=n,e[1]=r,e[2]=-r,e[3]=n,e}function A(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e}function G(e){return"mat2("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}function B(e){return Math.hypot(e[0],e[1],e[2],e[3])}function F(e,t,r,n){return e[2]=n[2]/n[0],r[0]=n[0],r[1]=n[1],r[3]=n[3]-e[2]*r[1],[e,t,r]}function P(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function N(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e}function H(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}function z(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=t[0],i=t[1],u=t[2],l=t[3];return Math.abs(r-s)<=f*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(n-i)<=f*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(a-u)<=f*Math.max(1,Math.abs(a),Math.abs(u))&&Math.abs(o-l)<=f*Math.max(1,Math.abs(o),Math.abs(l))}function q(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function W(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e[3]=t[3]+r[3]*n,e}Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});var _=L,X=N;function V(){var e=new d(6);return d!=Float32Array&&(e[1]=0,e[2]=0,e[4]=0,e[5]=0),e[0]=1,e[3]=1,e}function Z(e){var t=new d(6);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}function j(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}function Y(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e}function Q(e,t,r,n,a,o){var s=new d(6);return s[0]=e,s[1]=t,s[2]=r,s[3]=n,s[4]=a,s[5]=o,s}function K(e,t,r,n,a,o,s){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e[4]=o,e[5]=s,e}function J(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=r*o-n*a;return u?(u=1/u,e[0]=o*u,e[1]=-n*u,e[2]=-a*u,e[3]=r*u,e[4]=(a*i-o*s)*u,e[5]=(n*s-r*i)*u,e):null}function $(e){return e[0]*e[3]-e[1]*e[2]}function ee(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=r[0],p=r[1],c=r[2],h=r[3],f=r[4],d=r[5];return e[0]=n*l+o*p,e[1]=a*l+s*p,e[2]=n*c+o*h,e[3]=a*c+s*h,e[4]=n*f+o*d+i,e[5]=a*f+s*d+u,e}function te(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=Math.sin(r),p=Math.cos(r);return e[0]=n*p+o*l,e[1]=a*p+s*l,e[2]=n*-l+o*p,e[3]=a*-l+s*p,e[4]=i,e[5]=u,e}function re(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=r[0],p=r[1];return e[0]=n*l,e[1]=a*l,e[2]=o*p,e[3]=s*p,e[4]=i,e[5]=u,e}function ne(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=r[0],p=r[1];return e[0]=n,e[1]=a,e[2]=o,e[3]=s,e[4]=n*l+o*p+i,e[5]=a*l+s*p+u,e}function ae(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=n,e[1]=r,e[2]=-r,e[3]=n,e[4]=0,e[5]=0,e}function oe(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e[4]=0,e[5]=0,e}function se(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0],e[5]=t[1],e}function ie(e){return"mat2d("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+")"}function ue(e){return Math.hypot(e[0],e[1],e[2],e[3],e[4],e[5],1)}function le(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e}function pe(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e}function ce(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e}function he(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e[3]=t[3]+r[3]*n,e[4]=t[4]+r[4]*n,e[5]=t[5]+r[5]*n,e}function fe(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]}function de(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=e[4],i=e[5],u=t[0],l=t[1],p=t[2],c=t[3],h=t[4],d=t[5];return Math.abs(r-u)<=f*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(n-l)<=f*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(a-p)<=f*Math.max(1,Math.abs(a),Math.abs(p))&&Math.abs(o-c)<=f*Math.max(1,Math.abs(o),Math.abs(c))&&Math.abs(s-h)<=f*Math.max(1,Math.abs(s),Math.abs(h))&&Math.abs(i-d)<=f*Math.max(1,Math.abs(i),Math.abs(d))}var ve=ee,ge=pe;function me(){var e=new d(9);return d!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[5]=0,e[6]=0,e[7]=0),e[0]=1,e[4]=1,e[8]=1,e}function ye(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function be(e){var t=new d(9);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function xe(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function Se(e,t,r,n,a,o,s,i,u){var l=new d(9);return l[0]=e,l[1]=t,l[2]=r,l[3]=n,l[4]=a,l[5]=o,l[6]=s,l[7]=i,l[8]=u,l}function Me(e,t,r,n,a,o,s,i,u,l){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e[4]=o,e[5]=s,e[6]=i,e[7]=u,e[8]=l,e}function Te(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function ke(e,t){if(e===t){var r=t[1],n=t[2],a=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=n,e[7]=a}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function Ue(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=t[6],l=t[7],p=t[8],c=p*s-i*l,h=-p*o+i*u,f=l*o-s*u,d=r*c+n*h+a*f;return d?(d=1/d,e[0]=c*d,e[1]=(-p*n+a*l)*d,e[2]=(i*n-a*s)*d,e[3]=h*d,e[4]=(p*r-a*u)*d,e[5]=(-i*r+a*o)*d,e[6]=f*d,e[7]=(-l*r+n*u)*d,e[8]=(s*r-n*o)*d,e):null}function Oe(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=t[6],l=t[7],p=t[8];return e[0]=s*p-i*l,e[1]=a*l-n*p,e[2]=n*i-a*s,e[3]=i*u-o*p,e[4]=r*p-a*u,e[5]=a*o-r*i,e[6]=o*l-s*u,e[7]=n*u-r*l,e[8]=r*s-n*o,e}function Ee(e){var t=e[0],r=e[1],n=e[2],a=e[3],o=e[4],s=e[5],i=e[6],u=e[7],l=e[8];return t*(l*o-s*u)+r*(-l*a+s*i)+n*(u*a-o*i)}function Re(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=t[6],p=t[7],c=t[8],h=r[0],f=r[1],d=r[2],v=r[3],g=r[4],m=r[5],y=r[6],b=r[7],x=r[8];return e[0]=h*n+f*s+d*l,e[1]=h*a+f*i+d*p,e[2]=h*o+f*u+d*c,e[3]=v*n+g*s+m*l,e[4]=v*a+g*i+m*p,e[5]=v*o+g*u+m*c,e[6]=y*n+b*s+x*l,e[7]=y*a+b*i+x*p,e[8]=y*o+b*u+x*c,e}function we(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=t[6],p=t[7],c=t[8],h=r[0],f=r[1];return e[0]=n,e[1]=a,e[2]=o,e[3]=s,e[4]=i,e[5]=u,e[6]=h*n+f*s+l,e[7]=h*a+f*i+p,e[8]=h*o+f*u+c,e}function Le(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=t[6],p=t[7],c=t[8],h=Math.sin(r),f=Math.cos(r);return e[0]=f*n+h*s,e[1]=f*a+h*i,e[2]=f*o+h*u,e[3]=f*s-h*n,e[4]=f*i-h*a,e[5]=f*u-h*o,e[6]=l,e[7]=p,e[8]=c,e}function Ce(e,t,r){var n=r[0],a=r[1];return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=a*t[3],e[4]=a*t[4],e[5]=a*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function De(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e}function Ie(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=n,e[1]=r,e[2]=0,e[3]=-r,e[4]=n,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Ae(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Ge(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e}function Be(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=r+r,i=n+n,u=a+a,l=r*s,p=n*s,c=n*i,h=a*s,f=a*i,d=a*u,v=o*s,g=o*i,m=o*u;return e[0]=1-c-d,e[3]=p-m,e[6]=h+g,e[1]=p+m,e[4]=1-l-d,e[7]=f-v,e[2]=h-g,e[5]=f+v,e[8]=1-l-c,e}function Fe(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=t[6],l=t[7],p=t[8],c=t[9],h=t[10],f=t[11],d=t[12],v=t[13],g=t[14],m=t[15],y=r*i-n*s,b=r*u-a*s,x=r*l-o*s,S=n*u-a*i,M=n*l-o*i,T=a*l-o*u,k=p*v-c*d,U=p*g-h*d,O=p*m-f*d,E=c*g-h*v,R=c*m-f*v,w=h*m-f*g,L=y*w-b*R+x*E+S*O-M*U+T*k;return L?(L=1/L,e[0]=(i*w-u*R+l*E)*L,e[1]=(u*O-s*w-l*U)*L,e[2]=(s*R-i*O+l*k)*L,e[3]=(a*R-n*w-o*E)*L,e[4]=(r*w-a*O+o*U)*L,e[5]=(n*O-r*R-o*k)*L,e[6]=(v*T-g*M+m*S)*L,e[7]=(g*x-d*T-m*b)*L,e[8]=(d*M-v*x+m*y)*L,e):null}function Pe(e,t,r){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/r,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function Ne(e){return"mat3("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+")"}function He(e){return Math.hypot(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8])}function ze(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e}function qe(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e}function We(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e}function _e(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e[3]=t[3]+r[3]*n,e[4]=t[4]+r[4]*n,e[5]=t[5]+r[5]*n,e[6]=t[6]+r[6]*n,e[7]=t[7]+r[7]*n,e[8]=t[8]+r[8]*n,e}function Xe(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]}function Ve(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=e[4],i=e[5],u=e[6],l=e[7],p=e[8],c=t[0],h=t[1],d=t[2],v=t[3],g=t[4],m=t[5],y=t[6],b=t[7],x=t[8];return Math.abs(r-c)<=f*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(n-h)<=f*Math.max(1,Math.abs(n),Math.abs(h))&&Math.abs(a-d)<=f*Math.max(1,Math.abs(a),Math.abs(d))&&Math.abs(o-v)<=f*Math.max(1,Math.abs(o),Math.abs(v))&&Math.abs(s-g)<=f*Math.max(1,Math.abs(s),Math.abs(g))&&Math.abs(i-m)<=f*Math.max(1,Math.abs(i),Math.abs(m))&&Math.abs(u-y)<=f*Math.max(1,Math.abs(u),Math.abs(y))&&Math.abs(l-b)<=f*Math.max(1,Math.abs(l),Math.abs(b))&&Math.abs(p-x)<=f*Math.max(1,Math.abs(p),Math.abs(x))}var Ze=Re,je=qe;function Ye(){var e=new d(16);return d!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function Qe(e){var t=new d(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Ke(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function Je(e,t,r,n,a,o,s,i,u,l,p,c,h,f,v,g){var m=new d(16);return m[0]=e,m[1]=t,m[2]=r,m[3]=n,m[4]=a,m[5]=o,m[6]=s,m[7]=i,m[8]=u,m[9]=l,m[10]=p,m[11]=c,m[12]=h,m[13]=f,m[14]=v,m[15]=g,m}function $e(e,t,r,n,a,o,s,i,u,l,p,c,h,f,d,v,g){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e[4]=o,e[5]=s,e[6]=i,e[7]=u,e[8]=l,e[9]=p,e[10]=c,e[11]=h,e[12]=f,e[13]=d,e[14]=v,e[15]=g,e}function et(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function tt(e,t){if(e===t){var r=t[1],n=t[2],a=t[3],o=t[6],s=t[7],i=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=n,e[9]=o,e[11]=t[14],e[12]=a,e[13]=s,e[14]=i}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function rt(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=t[6],l=t[7],p=t[8],c=t[9],h=t[10],f=t[11],d=t[12],v=t[13],g=t[14],m=t[15],y=r*i-n*s,b=r*u-a*s,x=r*l-o*s,S=n*u-a*i,M=n*l-o*i,T=a*l-o*u,k=p*v-c*d,U=p*g-h*d,O=p*m-f*d,E=c*g-h*v,R=c*m-f*v,w=h*m-f*g,L=y*w-b*R+x*E+S*O-M*U+T*k;return L?(L=1/L,e[0]=(i*w-u*R+l*E)*L,e[1]=(a*R-n*w-o*E)*L,e[2]=(v*T-g*M+m*S)*L,e[3]=(h*M-c*T-f*S)*L,e[4]=(u*O-s*w-l*U)*L,e[5]=(r*w-a*O+o*U)*L,e[6]=(g*x-d*T-m*b)*L,e[7]=(p*T-h*x+f*b)*L,e[8]=(s*R-i*O+l*k)*L,e[9]=(n*O-r*R-o*k)*L,e[10]=(d*M-v*x+m*y)*L,e[11]=(c*x-p*M-f*y)*L,e[12]=(i*U-s*E-u*k)*L,e[13]=(r*E-n*U+a*k)*L,e[14]=(v*b-d*S-g*y)*L,e[15]=(p*S-c*b+h*y)*L,e):null}function nt(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=t[6],l=t[7],p=t[8],c=t[9],h=t[10],f=t[11],d=t[12],v=t[13],g=t[14],m=t[15];return e[0]=i*(h*m-f*g)-c*(u*m-l*g)+v*(u*f-l*h),e[1]=-(n*(h*m-f*g)-c*(a*m-o*g)+v*(a*f-o*h)),e[2]=n*(u*m-l*g)-i*(a*m-o*g)+v*(a*l-o*u),e[3]=-(n*(u*f-l*h)-i*(a*f-o*h)+c*(a*l-o*u)),e[4]=-(s*(h*m-f*g)-p*(u*m-l*g)+d*(u*f-l*h)),e[5]=r*(h*m-f*g)-p*(a*m-o*g)+d*(a*f-o*h),e[6]=-(r*(u*m-l*g)-s*(a*m-o*g)+d*(a*l-o*u)),e[7]=r*(u*f-l*h)-s*(a*f-o*h)+p*(a*l-o*u),e[8]=s*(c*m-f*v)-p*(i*m-l*v)+d*(i*f-l*c),e[9]=-(r*(c*m-f*v)-p*(n*m-o*v)+d*(n*f-o*c)),e[10]=r*(i*m-l*v)-s*(n*m-o*v)+d*(n*l-o*i),e[11]=-(r*(i*f-l*c)-s*(n*f-o*c)+p*(n*l-o*i)),e[12]=-(s*(c*g-h*v)-p*(i*g-u*v)+d*(i*h-u*c)),e[13]=r*(c*g-h*v)-p*(n*g-a*v)+d*(n*h-a*c),e[14]=-(r*(i*g-u*v)-s*(n*g-a*v)+d*(n*u-a*i)),e[15]=r*(i*h-u*c)-s*(n*h-a*c)+p*(n*u-a*i),e}function at(e){var t=e[0],r=e[1],n=e[2],a=e[3],o=e[4],s=e[5],i=e[6],u=e[7],l=e[8],p=e[9],c=e[10],h=e[11],f=e[12],d=e[13],v=e[14],g=e[15];return(t*s-r*o)*(c*g-h*v)-(t*i-n*o)*(p*g-h*d)+(t*u-a*o)*(p*v-c*d)+(r*i-n*s)*(l*g-h*f)-(r*u-a*s)*(l*v-c*f)+(n*u-a*i)*(l*d-p*f)}function ot(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=t[6],p=t[7],c=t[8],h=t[9],f=t[10],d=t[11],v=t[12],g=t[13],m=t[14],y=t[15],b=r[0],x=r[1],S=r[2],M=r[3];return e[0]=b*n+x*i+S*c+M*v,e[1]=b*a+x*u+S*h+M*g,e[2]=b*o+x*l+S*f+M*m,e[3]=b*s+x*p+S*d+M*y,b=r[4],x=r[5],S=r[6],M=r[7],e[4]=b*n+x*i+S*c+M*v,e[5]=b*a+x*u+S*h+M*g,e[6]=b*o+x*l+S*f+M*m,e[7]=b*s+x*p+S*d+M*y,b=r[8],x=r[9],S=r[10],M=r[11],e[8]=b*n+x*i+S*c+M*v,e[9]=b*a+x*u+S*h+M*g,e[10]=b*o+x*l+S*f+M*m,e[11]=b*s+x*p+S*d+M*y,b=r[12],x=r[13],S=r[14],M=r[15],e[12]=b*n+x*i+S*c+M*v,e[13]=b*a+x*u+S*h+M*g,e[14]=b*o+x*l+S*f+M*m,e[15]=b*s+x*p+S*d+M*y,e}function st(e,t,r){var n,a,o,s,i,u,l,p,c,h,f,d,v=r[0],g=r[1],m=r[2];return t===e?(e[12]=t[0]*v+t[4]*g+t[8]*m+t[12],e[13]=t[1]*v+t[5]*g+t[9]*m+t[13],e[14]=t[2]*v+t[6]*g+t[10]*m+t[14],e[15]=t[3]*v+t[7]*g+t[11]*m+t[15]):(n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=t[6],p=t[7],c=t[8],h=t[9],f=t[10],d=t[11],e[0]=n,e[1]=a,e[2]=o,e[3]=s,e[4]=i,e[5]=u,e[6]=l,e[7]=p,e[8]=c,e[9]=h,e[10]=f,e[11]=d,e[12]=n*v+i*g+c*m+t[12],e[13]=a*v+u*g+h*m+t[13],e[14]=o*v+l*g+f*m+t[14],e[15]=s*v+p*g+d*m+t[15]),e}function it(e,t,r){var n=r[0],a=r[1],o=r[2];return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*a,e[5]=t[5]*a,e[6]=t[6]*a,e[7]=t[7]*a,e[8]=t[8]*o,e[9]=t[9]*o,e[10]=t[10]*o,e[11]=t[11]*o,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function ut(e,t,r,n){var a,o,s,i,u,l,p,c,h,d,v,g,m,y,b,x,S,M,T,k,U,O,E,R,w=n[0],L=n[1],C=n[2],D=Math.hypot(w,L,C);return D<f?null:(w*=D=1/D,L*=D,C*=D,a=Math.sin(r),s=1-(o=Math.cos(r)),i=t[0],u=t[1],l=t[2],p=t[3],c=t[4],h=t[5],d=t[6],v=t[7],g=t[8],m=t[9],y=t[10],b=t[11],x=w*w*s+o,S=L*w*s+C*a,M=C*w*s-L*a,T=w*L*s-C*a,k=L*L*s+o,U=C*L*s+w*a,O=w*C*s+L*a,E=L*C*s-w*a,R=C*C*s+o,e[0]=i*x+c*S+g*M,e[1]=u*x+h*S+m*M,e[2]=l*x+d*S+y*M,e[3]=p*x+v*S+b*M,e[4]=i*T+c*k+g*U,e[5]=u*T+h*k+m*U,e[6]=l*T+d*k+y*U,e[7]=p*T+v*k+b*U,e[8]=i*O+c*E+g*R,e[9]=u*O+h*E+m*R,e[10]=l*O+d*E+y*R,e[11]=p*O+v*E+b*R,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function lt(e,t,r){var n=Math.sin(r),a=Math.cos(r),o=t[4],s=t[5],i=t[6],u=t[7],l=t[8],p=t[9],c=t[10],h=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=o*a+l*n,e[5]=s*a+p*n,e[6]=i*a+c*n,e[7]=u*a+h*n,e[8]=l*a-o*n,e[9]=p*a-s*n,e[10]=c*a-i*n,e[11]=h*a-u*n,e}function pt(e,t,r){var n=Math.sin(r),a=Math.cos(r),o=t[0],s=t[1],i=t[2],u=t[3],l=t[8],p=t[9],c=t[10],h=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*a-l*n,e[1]=s*a-p*n,e[2]=i*a-c*n,e[3]=u*a-h*n,e[8]=o*n+l*a,e[9]=s*n+p*a,e[10]=i*n+c*a,e[11]=u*n+h*a,e}function ct(e,t,r){var n=Math.sin(r),a=Math.cos(r),o=t[0],s=t[1],i=t[2],u=t[3],l=t[4],p=t[5],c=t[6],h=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*a+l*n,e[1]=s*a+p*n,e[2]=i*a+c*n,e[3]=u*a+h*n,e[4]=l*a-o*n,e[5]=p*a-s*n,e[6]=c*a-i*n,e[7]=h*a-u*n,e}function ht(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}function ft(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function dt(e,t,r){var n,a,o,s=r[0],i=r[1],u=r[2],l=Math.hypot(s,i,u);return l<f?null:(s*=l=1/l,i*=l,u*=l,n=Math.sin(t),o=1-(a=Math.cos(t)),e[0]=s*s*o+a,e[1]=i*s*o+u*n,e[2]=u*s*o-i*n,e[3]=0,e[4]=s*i*o-u*n,e[5]=i*i*o+a,e[6]=u*i*o+s*n,e[7]=0,e[8]=s*u*o+i*n,e[9]=i*u*o-s*n,e[10]=u*u*o+a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e)}function vt(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=n,e[6]=r,e[7]=0,e[8]=0,e[9]=-r,e[10]=n,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function gt(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=n,e[1]=0,e[2]=-r,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=r,e[9]=0,e[10]=n,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function mt(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=n,e[1]=r,e[2]=0,e[3]=0,e[4]=-r,e[5]=n,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function yt(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=n+n,u=a+a,l=o+o,p=n*i,c=n*u,h=n*l,f=a*u,d=a*l,v=o*l,g=s*i,m=s*u,y=s*l;return e[0]=1-(f+v),e[1]=c+y,e[2]=h-m,e[3]=0,e[4]=c-y,e[5]=1-(p+v),e[6]=d+g,e[7]=0,e[8]=h+m,e[9]=d-g,e[10]=1-(p+f),e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function bt(e,t){var r=new d(3),n=-t[0],a=-t[1],o=-t[2],s=t[3],i=t[4],u=t[5],l=t[6],p=t[7],c=n*n+a*a+o*o+s*s;return c>0?(r[0]=2*(i*s+p*n+u*o-l*a)/c,r[1]=2*(u*s+p*a+l*n-i*o)/c,r[2]=2*(l*s+p*o+i*a-u*n)/c):(r[0]=2*(i*s+p*n+u*o-l*a),r[1]=2*(u*s+p*a+l*n-i*o),r[2]=2*(l*s+p*o+i*a-u*n)),yt(e,t,r),e}function xt(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function St(e,t){var r=t[0],n=t[1],a=t[2],o=t[4],s=t[5],i=t[6],u=t[8],l=t[9],p=t[10];return e[0]=Math.hypot(r,n,a),e[1]=Math.hypot(o,s,i),e[2]=Math.hypot(u,l,p),e}function Mt(e,t){var r=new d(3);St(r,t);var n=1/r[0],a=1/r[1],o=1/r[2],s=t[0]*n,i=t[1]*a,u=t[2]*o,l=t[4]*n,p=t[5]*a,c=t[6]*o,h=t[8]*n,f=t[9]*a,v=t[10]*o,g=s+p+v,m=0;return g>0?(m=2*Math.sqrt(g+1),e[3]=.25*m,e[0]=(c-f)/m,e[1]=(h-u)/m,e[2]=(i-l)/m):s>p&&s>v?(m=2*Math.sqrt(1+s-p-v),e[3]=(c-f)/m,e[0]=.25*m,e[1]=(i+l)/m,e[2]=(h+u)/m):p>v?(m=2*Math.sqrt(1+p-s-v),e[3]=(h-u)/m,e[0]=(i+l)/m,e[1]=.25*m,e[2]=(c+f)/m):(m=2*Math.sqrt(1+v-s-p),e[3]=(i-l)/m,e[0]=(h+u)/m,e[1]=(c+f)/m,e[2]=.25*m),e}function Tt(e,t,r,n){var a=t[0],o=t[1],s=t[2],i=t[3],u=a+a,l=o+o,p=s+s,c=a*u,h=a*l,f=a*p,d=o*l,v=o*p,g=s*p,m=i*u,y=i*l,b=i*p,x=n[0],S=n[1],M=n[2];return e[0]=(1-(d+g))*x,e[1]=(h+b)*x,e[2]=(f-y)*x,e[3]=0,e[4]=(h-b)*S,e[5]=(1-(c+g))*S,e[6]=(v+m)*S,e[7]=0,e[8]=(f+y)*M,e[9]=(v-m)*M,e[10]=(1-(c+d))*M,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function kt(e,t,r,n,a){var o=t[0],s=t[1],i=t[2],u=t[3],l=o+o,p=s+s,c=i+i,h=o*l,f=o*p,d=o*c,v=s*p,g=s*c,m=i*c,y=u*l,b=u*p,x=u*c,S=n[0],M=n[1],T=n[2],k=a[0],U=a[1],O=a[2],E=(1-(v+m))*S,R=(f+x)*S,w=(d-b)*S,L=(f-x)*M,C=(1-(h+m))*M,D=(g+y)*M,I=(d+b)*T,A=(g-y)*T,G=(1-(h+v))*T;return e[0]=E,e[1]=R,e[2]=w,e[3]=0,e[4]=L,e[5]=C,e[6]=D,e[7]=0,e[8]=I,e[9]=A,e[10]=G,e[11]=0,e[12]=r[0]+k-(E*k+L*U+I*O),e[13]=r[1]+U-(R*k+C*U+A*O),e[14]=r[2]+O-(w*k+D*U+G*O),e[15]=1,e}function Ut(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=r+r,i=n+n,u=a+a,l=r*s,p=n*s,c=n*i,h=a*s,f=a*i,d=a*u,v=o*s,g=o*i,m=o*u;return e[0]=1-c-d,e[1]=p+m,e[2]=h-g,e[3]=0,e[4]=p-m,e[5]=1-l-d,e[6]=f+v,e[7]=0,e[8]=h+g,e[9]=f-v,e[10]=1-l-c,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Ot(e,t,r,n,a,o,s){var i=1/(r-t),u=1/(a-n),l=1/(o-s);return e[0]=2*o*i,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=2*o*u,e[6]=0,e[7]=0,e[8]=(r+t)*i,e[9]=(a+n)*u,e[10]=(s+o)*l,e[11]=-1,e[12]=0,e[13]=0,e[14]=s*o*2*l,e[15]=0,e}function Et(e,t,r,n,a){var o,s=1/Math.tan(t/2);return e[0]=s/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=a&&a!==1/0?(o=1/(n-a),e[10]=(a+n)*o,e[14]=2*a*n*o):(e[10]=-1,e[14]=-2*n),e}var Rt=Et;function wt(e,t,r,n,a){var o,s=1/Math.tan(t/2);return e[0]=s/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=a&&a!==1/0?(o=1/(n-a),e[10]=a*o,e[14]=a*n*o):(e[10]=-1,e[14]=-n),e}function Lt(e,t,r,n){var a=Math.tan(t.upDegrees*Math.PI/180),o=Math.tan(t.downDegrees*Math.PI/180),s=Math.tan(t.leftDegrees*Math.PI/180),i=Math.tan(t.rightDegrees*Math.PI/180),u=2/(s+i),l=2/(a+o);return e[0]=u,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=l,e[6]=0,e[7]=0,e[8]=-(s-i)*u*.5,e[9]=(a-o)*l*.5,e[10]=n/(r-n),e[11]=-1,e[12]=0,e[13]=0,e[14]=n*r/(r-n),e[15]=0,e}function Ct(e,t,r,n,a,o,s){var i=1/(t-r),u=1/(n-a),l=1/(o-s);return e[0]=-2*i,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*l,e[11]=0,e[12]=(t+r)*i,e[13]=(a+n)*u,e[14]=(s+o)*l,e[15]=1,e}var Dt=Ct;function It(e,t,r,n,a,o,s){var i=1/(t-r),u=1/(n-a),l=1/(o-s);return e[0]=-2*i,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=l,e[11]=0,e[12]=(t+r)*i,e[13]=(a+n)*u,e[14]=o*l,e[15]=1,e}function At(e,t,r,n){var a,o,s,i,u,l,p,c,h,d,v=t[0],g=t[1],m=t[2],y=n[0],b=n[1],x=n[2],S=r[0],M=r[1],T=r[2];return Math.abs(v-S)<f&&Math.abs(g-M)<f&&Math.abs(m-T)<f?et(e):(p=v-S,c=g-M,h=m-T,a=b*(h*=d=1/Math.hypot(p,c,h))-x*(c*=d),o=x*(p*=d)-y*h,s=y*c-b*p,(d=Math.hypot(a,o,s))?(a*=d=1/d,o*=d,s*=d):(a=0,o=0,s=0),i=c*s-h*o,u=h*a-p*s,l=p*o-c*a,(d=Math.hypot(i,u,l))?(i*=d=1/d,u*=d,l*=d):(i=0,u=0,l=0),e[0]=a,e[1]=i,e[2]=p,e[3]=0,e[4]=o,e[5]=u,e[6]=c,e[7]=0,e[8]=s,e[9]=l,e[10]=h,e[11]=0,e[12]=-(a*v+o*g+s*m),e[13]=-(i*v+u*g+l*m),e[14]=-(p*v+c*g+h*m),e[15]=1,e)}function Gt(e,t,r,n){var a=t[0],o=t[1],s=t[2],i=n[0],u=n[1],l=n[2],p=a-r[0],c=o-r[1],h=s-r[2],f=p*p+c*c+h*h;f>0&&(p*=f=1/Math.sqrt(f),c*=f,h*=f);var d=u*h-l*c,v=l*p-i*h,g=i*c-u*p;return(f=d*d+v*v+g*g)>0&&(d*=f=1/Math.sqrt(f),v*=f,g*=f),e[0]=d,e[1]=v,e[2]=g,e[3]=0,e[4]=c*g-h*v,e[5]=h*d-p*g,e[6]=p*v-c*d,e[7]=0,e[8]=p,e[9]=c,e[10]=h,e[11]=0,e[12]=a,e[13]=o,e[14]=s,e[15]=1,e}function Bt(e){return"mat4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+", "+e[9]+", "+e[10]+", "+e[11]+", "+e[12]+", "+e[13]+", "+e[14]+", "+e[15]+")"}function Ft(e){return Math.hypot(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15])}function Pt(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e}function Nt(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e}function Ht(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e}function zt(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e[3]=t[3]+r[3]*n,e[4]=t[4]+r[4]*n,e[5]=t[5]+r[5]*n,e[6]=t[6]+r[6]*n,e[7]=t[7]+r[7]*n,e[8]=t[8]+r[8]*n,e[9]=t[9]+r[9]*n,e[10]=t[10]+r[10]*n,e[11]=t[11]+r[11]*n,e[12]=t[12]+r[12]*n,e[13]=t[13]+r[13]*n,e[14]=t[14]+r[14]*n,e[15]=t[15]+r[15]*n,e}function qt(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}function Wt(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=e[4],i=e[5],u=e[6],l=e[7],p=e[8],c=e[9],h=e[10],d=e[11],v=e[12],g=e[13],m=e[14],y=e[15],b=t[0],x=t[1],S=t[2],M=t[3],T=t[4],k=t[5],U=t[6],O=t[7],E=t[8],R=t[9],w=t[10],L=t[11],C=t[12],D=t[13],I=t[14],A=t[15];return Math.abs(r-b)<=f*Math.max(1,Math.abs(r),Math.abs(b))&&Math.abs(n-x)<=f*Math.max(1,Math.abs(n),Math.abs(x))&&Math.abs(a-S)<=f*Math.max(1,Math.abs(a),Math.abs(S))&&Math.abs(o-M)<=f*Math.max(1,Math.abs(o),Math.abs(M))&&Math.abs(s-T)<=f*Math.max(1,Math.abs(s),Math.abs(T))&&Math.abs(i-k)<=f*Math.max(1,Math.abs(i),Math.abs(k))&&Math.abs(u-U)<=f*Math.max(1,Math.abs(u),Math.abs(U))&&Math.abs(l-O)<=f*Math.max(1,Math.abs(l),Math.abs(O))&&Math.abs(p-E)<=f*Math.max(1,Math.abs(p),Math.abs(E))&&Math.abs(c-R)<=f*Math.max(1,Math.abs(c),Math.abs(R))&&Math.abs(h-w)<=f*Math.max(1,Math.abs(h),Math.abs(w))&&Math.abs(d-L)<=f*Math.max(1,Math.abs(d),Math.abs(L))&&Math.abs(v-C)<=f*Math.max(1,Math.abs(v),Math.abs(C))&&Math.abs(g-D)<=f*Math.max(1,Math.abs(g),Math.abs(D))&&Math.abs(m-I)<=f*Math.max(1,Math.abs(m),Math.abs(I))&&Math.abs(y-A)<=f*Math.max(1,Math.abs(y),Math.abs(A))}var _t=ot,Xt=Nt;function Vt(){var e=new d(3);return d!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function Zt(e){var t=new d(3);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function jt(e){var t=e[0],r=e[1],n=e[2];return Math.hypot(t,r,n)}function Yt(e,t,r){var n=new d(3);return n[0]=e,n[1]=t,n[2]=r,n}function Qt(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function Kt(e,t,r,n){return e[0]=t,e[1]=r,e[2]=n,e}function Jt(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e}function $t(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e}function er(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e}function tr(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e}function rr(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e}function nr(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e}function ar(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e[2]=Math.min(t[2],r[2]),e}function or(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e[2]=Math.max(t[2],r[2]),e}function sr(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e}function ir(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function ur(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e}function lr(e,t){var r=t[0]-e[0],n=t[1]-e[1],a=t[2]-e[2];return Math.hypot(r,n,a)}function pr(e,t){var r=t[0]-e[0],n=t[1]-e[1],a=t[2]-e[2];return r*r+n*n+a*a}function cr(e){var t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n}function hr(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function fr(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function dr(e,t){var r=t[0],n=t[1],a=t[2],o=r*r+n*n+a*a;return o>0&&(o=1/Math.sqrt(o)),e[0]=t[0]*o,e[1]=t[1]*o,e[2]=t[2]*o,e}function vr(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function gr(e,t,r){var n=t[0],a=t[1],o=t[2],s=r[0],i=r[1],u=r[2];return e[0]=a*u-o*i,e[1]=o*s-n*u,e[2]=n*i-a*s,e}function mr(e,t,r,n){var a=t[0],o=t[1],s=t[2];return e[0]=a+n*(r[0]-a),e[1]=o+n*(r[1]-o),e[2]=s+n*(r[2]-s),e}function yr(e,t,r,n,a,o){var s=o*o,i=s*(2*o-3)+1,u=s*(o-2)+o,l=s*(o-1),p=s*(3-2*o);return e[0]=t[0]*i+r[0]*u+n[0]*l+a[0]*p,e[1]=t[1]*i+r[1]*u+n[1]*l+a[1]*p,e[2]=t[2]*i+r[2]*u+n[2]*l+a[2]*p,e}function br(e,t,r,n,a,o){var s=1-o,i=s*s,u=o*o,l=i*s,p=3*o*i,c=3*u*s,h=u*o;return e[0]=t[0]*l+r[0]*p+n[0]*c+a[0]*h,e[1]=t[1]*l+r[1]*p+n[1]*c+a[1]*h,e[2]=t[2]*l+r[2]*p+n[2]*c+a[2]*h,e}function xr(e,t){t=t||1;var r=2*v()*Math.PI,n=2*v()-1,a=Math.sqrt(1-n*n)*t;return e[0]=Math.cos(r)*a,e[1]=Math.sin(r)*a,e[2]=n*t,e}function Sr(e,t,r){var n=t[0],a=t[1],o=t[2],s=r[3]*n+r[7]*a+r[11]*o+r[15];return s=s||1,e[0]=(r[0]*n+r[4]*a+r[8]*o+r[12])/s,e[1]=(r[1]*n+r[5]*a+r[9]*o+r[13])/s,e[2]=(r[2]*n+r[6]*a+r[10]*o+r[14])/s,e}function Mr(e,t,r){var n=t[0],a=t[1],o=t[2];return e[0]=n*r[0]+a*r[3]+o*r[6],e[1]=n*r[1]+a*r[4]+o*r[7],e[2]=n*r[2]+a*r[5]+o*r[8],e}function Tr(e,t,r){var n=r[0],a=r[1],o=r[2],s=r[3],i=t[0],u=t[1],l=t[2],p=a*l-o*u,c=o*i-n*l,h=n*u-a*i,f=a*h-o*c,d=o*p-n*h,v=n*c-a*p,g=2*s;return p*=g,c*=g,h*=g,f*=2,d*=2,v*=2,e[0]=i+p+f,e[1]=u+c+d,e[2]=l+h+v,e}function kr(e,t,r,n){var a=[],o=[];return a[0]=t[0]-r[0],a[1]=t[1]-r[1],a[2]=t[2]-r[2],o[0]=a[0],o[1]=a[1]*Math.cos(n)-a[2]*Math.sin(n),o[2]=a[1]*Math.sin(n)+a[2]*Math.cos(n),e[0]=o[0]+r[0],e[1]=o[1]+r[1],e[2]=o[2]+r[2],e}function Ur(e,t,r,n){var a=[],o=[];return a[0]=t[0]-r[0],a[1]=t[1]-r[1],a[2]=t[2]-r[2],o[0]=a[2]*Math.sin(n)+a[0]*Math.cos(n),o[1]=a[1],o[2]=a[2]*Math.cos(n)-a[0]*Math.sin(n),e[0]=o[0]+r[0],e[1]=o[1]+r[1],e[2]=o[2]+r[2],e}function Or(e,t,r,n){var a=[],o=[];return a[0]=t[0]-r[0],a[1]=t[1]-r[1],a[2]=t[2]-r[2],o[0]=a[0]*Math.cos(n)-a[1]*Math.sin(n),o[1]=a[0]*Math.sin(n)+a[1]*Math.cos(n),o[2]=a[2],e[0]=o[0]+r[0],e[1]=o[1]+r[1],e[2]=o[2]+r[2],e}function Er(e,t){var r=e[0],n=e[1],a=e[2],o=t[0],s=t[1],i=t[2],u=Math.sqrt(r*r+n*n+a*a)*Math.sqrt(o*o+s*s+i*i),l=u&&vr(e,t)/u;return Math.acos(Math.min(Math.max(l,-1),1))}function Rr(e){return e[0]=0,e[1]=0,e[2]=0,e}function wr(e){return"vec3("+e[0]+", "+e[1]+", "+e[2]+")"}function Lr(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}function Cr(e,t){var r=e[0],n=e[1],a=e[2],o=t[0],s=t[1],i=t[2];return Math.abs(r-o)<=f*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(n-s)<=f*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(a-i)<=f*Math.max(1,Math.abs(a),Math.abs(i))}var Dr,Ir=$t,Ar=er,Gr=tr,Br=lr,Fr=pr,Pr=jt,Nr=cr,Hr=(Dr=Vt(),function(e,t,r,n,a,o){var s,i;for(t||(t=3),r||(r=0),i=n?Math.min(n*t+r,e.length):e.length,s=r;s<i;s+=t)Dr[0]=e[s],Dr[1]=e[s+1],Dr[2]=e[s+2],a(Dr,Dr,o),e[s]=Dr[0],e[s+1]=Dr[1],e[s+2]=Dr[2];return e});function zr(){var e=new d(4);return d!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e}function qr(e){var t=new d(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function Wr(e,t,r,n){var a=new d(4);return a[0]=e,a[1]=t,a[2]=r,a[3]=n,a}function _r(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function Xr(e,t,r,n,a){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e}function Vr(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function Zr(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e}function jr(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e[3]=t[3]*r[3],e}function Yr(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e[3]=t[3]/r[3],e}function Qr(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e}function Kr(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e}function Jr(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e[2]=Math.min(t[2],r[2]),e[3]=Math.min(t[3],r[3]),e}function $r(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e[2]=Math.max(t[2],r[2]),e[3]=Math.max(t[3],r[3]),e}function en(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e}function tn(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function rn(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e[3]=t[3]+r[3]*n,e}function nn(e,t){var r=t[0]-e[0],n=t[1]-e[1],a=t[2]-e[2],o=t[3]-e[3];return Math.hypot(r,n,a,o)}function an(e,t){var r=t[0]-e[0],n=t[1]-e[1],a=t[2]-e[2],o=t[3]-e[3];return r*r+n*n+a*a+o*o}function on(e){var t=e[0],r=e[1],n=e[2],a=e[3];return Math.hypot(t,r,n,a)}function sn(e){var t=e[0],r=e[1],n=e[2],a=e[3];return t*t+r*r+n*n+a*a}function un(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}function ln(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}function pn(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=r*r+n*n+a*a+o*o;return s>0&&(s=1/Math.sqrt(s)),e[0]=r*s,e[1]=n*s,e[2]=a*s,e[3]=o*s,e}function cn(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function hn(e,t,r,n){var a=r[0]*n[1]-r[1]*n[0],o=r[0]*n[2]-r[2]*n[0],s=r[0]*n[3]-r[3]*n[0],i=r[1]*n[2]-r[2]*n[1],u=r[1]*n[3]-r[3]*n[1],l=r[2]*n[3]-r[3]*n[2],p=t[0],c=t[1],h=t[2],f=t[3];return e[0]=c*l-h*u+f*i,e[1]=-p*l+h*s-f*o,e[2]=p*u-c*s+f*a,e[3]=-p*i+c*o-h*a,e}function fn(e,t,r,n){var a=t[0],o=t[1],s=t[2],i=t[3];return e[0]=a+n*(r[0]-a),e[1]=o+n*(r[1]-o),e[2]=s+n*(r[2]-s),e[3]=i+n*(r[3]-i),e}function dn(e,t){var r,n,a,o,s,i;t=t||1;do{s=(r=2*v()-1)*r+(n=2*v()-1)*n}while(s>=1);do{i=(a=2*v()-1)*a+(o=2*v()-1)*o}while(i>=1);var u=Math.sqrt((1-s)/i);return e[0]=t*r,e[1]=t*n,e[2]=t*a*u,e[3]=t*o*u,e}function vn(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3];return e[0]=r[0]*n+r[4]*a+r[8]*o+r[12]*s,e[1]=r[1]*n+r[5]*a+r[9]*o+r[13]*s,e[2]=r[2]*n+r[6]*a+r[10]*o+r[14]*s,e[3]=r[3]*n+r[7]*a+r[11]*o+r[15]*s,e}function gn(e,t,r){var n=t[0],a=t[1],o=t[2],s=r[0],i=r[1],u=r[2],l=r[3],p=l*n+i*o-u*a,c=l*a+u*n-s*o,h=l*o+s*a-i*n,f=-s*n-i*a-u*o;return e[0]=p*l+f*-s+c*-u-h*-i,e[1]=c*l+f*-i+h*-s-p*-u,e[2]=h*l+f*-u+p*-i-c*-s,e[3]=t[3],e}function mn(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e}function yn(e){return"vec4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}function bn(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}function xn(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=t[0],i=t[1],u=t[2],l=t[3];return Math.abs(r-s)<=f*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(n-i)<=f*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(a-u)<=f*Math.max(1,Math.abs(a),Math.abs(u))&&Math.abs(o-l)<=f*Math.max(1,Math.abs(o),Math.abs(l))}var Sn=Zr,Mn=jr,Tn=Yr,kn=nn,Un=an,On=on,En=sn,Rn=function(){var e=zr();return function(t,r,n,a,o,s){var i,u;for(r||(r=4),n||(n=0),u=a?Math.min(a*r+n,t.length):t.length,i=n;i<u;i+=r)e[0]=t[i],e[1]=t[i+1],e[2]=t[i+2],e[3]=t[i+3],o(e,e,s),t[i]=e[0],t[i+1]=e[1],t[i+2]=e[2],t[i+3]=e[3];return t}}();function wn(){var e=new d(4);return d!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e[3]=1,e}function Ln(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function Cn(e,t,r){r*=.5;var n=Math.sin(r);return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=Math.cos(r),e}function Dn(e,t){var r=2*Math.acos(t[3]),n=Math.sin(r/2);return n>f?(e[0]=t[0]/n,e[1]=t[1]/n,e[2]=t[2]/n):(e[0]=1,e[1]=0,e[2]=0),r}function In(e,t){var r=ua(e,t);return Math.acos(2*r*r-1)}function An(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=r[0],u=r[1],l=r[2],p=r[3];return e[0]=n*p+s*i+a*l-o*u,e[1]=a*p+s*u+o*i-n*l,e[2]=o*p+s*l+n*u-a*i,e[3]=s*p-n*i-a*u-o*l,e}function Gn(e,t,r){r*=.5;var n=t[0],a=t[1],o=t[2],s=t[3],i=Math.sin(r),u=Math.cos(r);return e[0]=n*u+s*i,e[1]=a*u+o*i,e[2]=o*u-a*i,e[3]=s*u-n*i,e}function Bn(e,t,r){r*=.5;var n=t[0],a=t[1],o=t[2],s=t[3],i=Math.sin(r),u=Math.cos(r);return e[0]=n*u-o*i,e[1]=a*u+s*i,e[2]=o*u+n*i,e[3]=s*u-a*i,e}function Fn(e,t,r){r*=.5;var n=t[0],a=t[1],o=t[2],s=t[3],i=Math.sin(r),u=Math.cos(r);return e[0]=n*u+a*i,e[1]=a*u-n*i,e[2]=o*u+s*i,e[3]=s*u-o*i,e}function Pn(e,t){var r=t[0],n=t[1],a=t[2];return e[0]=r,e[1]=n,e[2]=a,e[3]=Math.sqrt(Math.abs(1-r*r-n*n-a*a)),e}function Nn(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=Math.sqrt(r*r+n*n+a*a),i=Math.exp(o),u=s>0?i*Math.sin(s)/s:0;return e[0]=r*u,e[1]=n*u,e[2]=a*u,e[3]=i*Math.cos(s),e}function Hn(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=Math.sqrt(r*r+n*n+a*a),i=s>0?Math.atan2(s,o)/s:0;return e[0]=r*i,e[1]=n*i,e[2]=a*i,e[3]=.5*Math.log(r*r+n*n+a*a+o*o),e}function zn(e,t,r){return Hn(e,t),ia(e,e,r),Nn(e,e),e}function qn(e,t,r,n){var a,o,s,i,u,l=t[0],p=t[1],c=t[2],h=t[3],d=r[0],v=r[1],g=r[2],m=r[3];return(o=l*d+p*v+c*g+h*m)<0&&(o=-o,d=-d,v=-v,g=-g,m=-m),1-o>f?(a=Math.acos(o),s=Math.sin(a),i=Math.sin((1-n)*a)/s,u=Math.sin(n*a)/s):(i=1-n,u=n),e[0]=i*l+u*d,e[1]=i*p+u*v,e[2]=i*c+u*g,e[3]=i*h+u*m,e}function Wn(e){var t=v(),r=v(),n=v(),a=Math.sqrt(1-t),o=Math.sqrt(t);return e[0]=a*Math.sin(2*Math.PI*r),e[1]=a*Math.cos(2*Math.PI*r),e[2]=o*Math.sin(2*Math.PI*n),e[3]=o*Math.cos(2*Math.PI*n),e}function _n(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=r*r+n*n+a*a+o*o,i=s?1/s:0;return e[0]=-r*i,e[1]=-n*i,e[2]=-a*i,e[3]=o*i,e}function Xn(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function Vn(e,t){var r,n=t[0]+t[4]+t[8];if(n>0)r=Math.sqrt(n+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{var a=0;t[4]>t[0]&&(a=1),t[8]>t[3*a+a]&&(a=2);var o=(a+1)%3,s=(a+2)%3;r=Math.sqrt(t[3*a+a]-t[3*o+o]-t[3*s+s]+1),e[a]=.5*r,r=.5/r,e[3]=(t[3*o+s]-t[3*s+o])*r,e[o]=(t[3*o+a]+t[3*a+o])*r,e[s]=(t[3*s+a]+t[3*a+s])*r}return e}function Zn(e,t,r,n){var a=.5*Math.PI/180;t*=a,r*=a,n*=a;var o=Math.sin(t),s=Math.cos(t),i=Math.sin(r),u=Math.cos(r),l=Math.sin(n),p=Math.cos(n);return e[0]=o*u*p-s*i*l,e[1]=s*i*p+o*u*l,e[2]=s*u*l-o*i*p,e[3]=s*u*p+o*i*l,e}function jn(e){return"quat("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}var Yn,Qn,Kn,Jn,$n,ea,ta=qr,ra=Wr,na=_r,aa=Xr,oa=Vr,sa=An,ia=tn,ua=cn,la=fn,pa=on,ca=pa,ha=sn,fa=ha,da=pn,va=bn,ga=xn,ma=(Yn=Vt(),Qn=Yt(1,0,0),Kn=Yt(0,1,0),function(e,t,r){var n=vr(t,r);return n<-.999999?(gr(Yn,Qn,t),Pr(Yn)<1e-6&&gr(Yn,Kn,t),dr(Yn,Yn),Cn(e,Yn,Math.PI),e):n>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(gr(Yn,t,r),e[0]=Yn[0],e[1]=Yn[1],e[2]=Yn[2],e[3]=1+n,da(e,e))}),ya=(Jn=wn(),$n=wn(),function(e,t,r,n,a,o){return qn(Jn,t,a,o),qn($n,r,n,o),qn(e,Jn,$n,2*o*(1-o)),e}),ba=(ea=me(),function(e,t,r,n){return ea[0]=r[0],ea[3]=r[1],ea[6]=r[2],ea[1]=n[0],ea[4]=n[1],ea[7]=n[2],ea[2]=-t[0],ea[5]=-t[1],ea[8]=-t[2],da(e,Vn(e,ea))});function xa(){var e=new d(8);return d!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[4]=0,e[5]=0,e[6]=0,e[7]=0),e[3]=1,e}function Sa(e){var t=new d(8);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t}function Ma(e,t,r,n,a,o,s,i){var u=new d(8);return u[0]=e,u[1]=t,u[2]=r,u[3]=n,u[4]=a,u[5]=o,u[6]=s,u[7]=i,u}function Ta(e,t,r,n,a,o,s){var i=new d(8);i[0]=e,i[1]=t,i[2]=r,i[3]=n;var u=.5*a,l=.5*o,p=.5*s;return i[4]=u*n+l*r-p*t,i[5]=l*n+p*e-u*r,i[6]=p*n+u*t-l*e,i[7]=-u*e-l*t-p*r,i}function ka(e,t,r){var n=.5*r[0],a=.5*r[1],o=.5*r[2],s=t[0],i=t[1],u=t[2],l=t[3];return e[0]=s,e[1]=i,e[2]=u,e[3]=l,e[4]=n*l+a*u-o*i,e[5]=a*l+o*s-n*u,e[6]=o*l+n*i-a*s,e[7]=-n*s-a*i-o*u,e}function Ua(e,t){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=.5*t[0],e[5]=.5*t[1],e[6]=.5*t[2],e[7]=0,e}function Oa(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}function Ea(e,t){var r=wn();Mt(r,t);var n=new d(3);return xt(n,t),ka(e,r,n),e}function Ra(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}function wa(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}function La(e,t,r,n,a,o,s,i,u){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e[4]=o,e[5]=s,e[6]=i,e[7]=u,e}var Ca=na;function Da(e,t){return e[0]=t[4],e[1]=t[5],e[2]=t[6],e[3]=t[7],e}var Ia=na;function Aa(e,t){return e[4]=t[0],e[5]=t[1],e[6]=t[2],e[7]=t[3],e}function Ga(e,t){var r=t[4],n=t[5],a=t[6],o=t[7],s=-t[0],i=-t[1],u=-t[2],l=t[3];return e[0]=2*(r*l+o*s+n*u-a*i),e[1]=2*(n*l+o*i+a*s-r*u),e[2]=2*(a*l+o*u+r*i-n*s),e}function Ba(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=.5*r[0],u=.5*r[1],l=.5*r[2],p=t[4],c=t[5],h=t[6],f=t[7];return e[0]=n,e[1]=a,e[2]=o,e[3]=s,e[4]=s*i+a*l-o*u+p,e[5]=s*u+o*i-n*l+c,e[6]=s*l+n*u-a*i+h,e[7]=-n*i-a*u-o*l+f,e}function Fa(e,t,r){var n=-t[0],a=-t[1],o=-t[2],s=t[3],i=t[4],u=t[5],l=t[6],p=t[7],c=i*s+p*n+u*o-l*a,h=u*s+p*a+l*n-i*o,f=l*s+p*o+i*a-u*n,d=p*s-i*n-u*a-l*o;return Gn(e,t,r),n=e[0],a=e[1],o=e[2],s=e[3],e[4]=c*s+d*n+h*o-f*a,e[5]=h*s+d*a+f*n-c*o,e[6]=f*s+d*o+c*a-h*n,e[7]=d*s-c*n-h*a-f*o,e}function Pa(e,t,r){var n=-t[0],a=-t[1],o=-t[2],s=t[3],i=t[4],u=t[5],l=t[6],p=t[7],c=i*s+p*n+u*o-l*a,h=u*s+p*a+l*n-i*o,f=l*s+p*o+i*a-u*n,d=p*s-i*n-u*a-l*o;return Bn(e,t,r),n=e[0],a=e[1],o=e[2],s=e[3],e[4]=c*s+d*n+h*o-f*a,e[5]=h*s+d*a+f*n-c*o,e[6]=f*s+d*o+c*a-h*n,e[7]=d*s-c*n-h*a-f*o,e}function Na(e,t,r){var n=-t[0],a=-t[1],o=-t[2],s=t[3],i=t[4],u=t[5],l=t[6],p=t[7],c=i*s+p*n+u*o-l*a,h=u*s+p*a+l*n-i*o,f=l*s+p*o+i*a-u*n,d=p*s-i*n-u*a-l*o;return Fn(e,t,r),n=e[0],a=e[1],o=e[2],s=e[3],e[4]=c*s+d*n+h*o-f*a,e[5]=h*s+d*a+f*n-c*o,e[6]=f*s+d*o+c*a-h*n,e[7]=d*s-c*n-h*a-f*o,e}function Ha(e,t,r){var n=r[0],a=r[1],o=r[2],s=r[3],i=t[0],u=t[1],l=t[2],p=t[3];return e[0]=i*s+p*n+u*o-l*a,e[1]=u*s+p*a+l*n-i*o,e[2]=l*s+p*o+i*a-u*n,e[3]=p*s-i*n-u*a-l*o,i=t[4],u=t[5],l=t[6],p=t[7],e[4]=i*s+p*n+u*o-l*a,e[5]=u*s+p*a+l*n-i*o,e[6]=l*s+p*o+i*a-u*n,e[7]=p*s-i*n-u*a-l*o,e}function za(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=r[0],u=r[1],l=r[2],p=r[3];return e[0]=n*p+s*i+a*l-o*u,e[1]=a*p+s*u+o*i-n*l,e[2]=o*p+s*l+n*u-a*i,e[3]=s*p-n*i-a*u-o*l,i=r[4],u=r[5],l=r[6],p=r[7],e[4]=n*p+s*i+a*l-o*u,e[5]=a*p+s*u+o*i-n*l,e[6]=o*p+s*l+n*u-a*i,e[7]=s*p-n*i-a*u-o*l,e}function qa(e,t,r,n){if(Math.abs(n)<f)return Ra(e,t);var a=Math.hypot(r[0],r[1],r[2]);n*=.5;var o=Math.sin(n),s=o*r[0]/a,i=o*r[1]/a,u=o*r[2]/a,l=Math.cos(n),p=t[0],c=t[1],h=t[2],d=t[3];e[0]=p*l+d*s+c*u-h*i,e[1]=c*l+d*i+h*s-p*u,e[2]=h*l+d*u+p*i-c*s,e[3]=d*l-p*s-c*i-h*u;var v=t[4],g=t[5],m=t[6],y=t[7];return e[4]=v*l+y*s+g*u-m*i,e[5]=g*l+y*i+m*s-v*u,e[6]=m*l+y*u+v*i-g*s,e[7]=y*l-v*s-g*i-m*u,e}function Wa(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e}function _a(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=r[4],u=r[5],l=r[6],p=r[7],c=t[4],h=t[5],f=t[6],d=t[7],v=r[0],g=r[1],m=r[2],y=r[3];return e[0]=n*y+s*v+a*m-o*g,e[1]=a*y+s*g+o*v-n*m,e[2]=o*y+s*m+n*g-a*v,e[3]=s*y-n*v-a*g-o*m,e[4]=n*p+s*i+a*l-o*u+c*y+d*v+h*m-f*g,e[5]=a*p+s*u+o*i-n*l+h*y+d*g+f*v-c*m,e[6]=o*p+s*l+n*u-a*i+f*y+d*m+c*g-h*v,e[7]=s*p-n*i-a*u-o*l+d*y-c*v-h*g-f*m,e}var Xa=_a;function Va(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e}var Za=ua;function ja(e,t,r,n){var a=1-n;return Za(t,r)<0&&(n=-n),e[0]=t[0]*a+r[0]*n,e[1]=t[1]*a+r[1]*n,e[2]=t[2]*a+r[2]*n,e[3]=t[3]*a+r[3]*n,e[4]=t[4]*a+r[4]*n,e[5]=t[5]*a+r[5]*n,e[6]=t[6]*a+r[6]*n,e[7]=t[7]*a+r[7]*n,e}function Ya(e,t){var r=$a(t);return e[0]=-t[0]/r,e[1]=-t[1]/r,e[2]=-t[2]/r,e[3]=t[3]/r,e[4]=-t[4]/r,e[5]=-t[5]/r,e[6]=-t[6]/r,e[7]=t[7]/r,e}function Qa(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=t[7],e}var Ka=pa,Ja=Ka,$a=ha,eo=$a;function to(e,t){var r=$a(t);if(r>0){r=Math.sqrt(r);var n=t[0]/r,a=t[1]/r,o=t[2]/r,s=t[3]/r,i=t[4],u=t[5],l=t[6],p=t[7],c=n*i+a*u+o*l+s*p;e[0]=n,e[1]=a,e[2]=o,e[3]=s,e[4]=(i-n*c)/r,e[5]=(u-a*c)/r,e[6]=(l-o*c)/r,e[7]=(p-s*c)/r}return e}function ro(e){return"quat2("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+")"}function no(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]}function ao(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=e[4],i=e[5],u=e[6],l=e[7],p=t[0],c=t[1],h=t[2],d=t[3],v=t[4],g=t[5],m=t[6],y=t[7];return Math.abs(r-p)<=f*Math.max(1,Math.abs(r),Math.abs(p))&&Math.abs(n-c)<=f*Math.max(1,Math.abs(n),Math.abs(c))&&Math.abs(a-h)<=f*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(o-d)<=f*Math.max(1,Math.abs(o),Math.abs(d))&&Math.abs(s-v)<=f*Math.max(1,Math.abs(s),Math.abs(v))&&Math.abs(i-g)<=f*Math.max(1,Math.abs(i),Math.abs(g))&&Math.abs(u-m)<=f*Math.max(1,Math.abs(u),Math.abs(m))&&Math.abs(l-y)<=f*Math.max(1,Math.abs(l),Math.abs(y))}function oo(){var e=new d(2);return d!=Float32Array&&(e[0]=0,e[1]=0),e}function so(e){var t=new d(2);return t[0]=e[0],t[1]=e[1],t}function io(e,t){var r=new d(2);return r[0]=e,r[1]=t,r}function uo(e,t){return e[0]=t[0],e[1]=t[1],e}function lo(e,t,r){return e[0]=t,e[1]=r,e}function po(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e}function co(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e}function ho(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e}function fo(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e}function vo(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e}function go(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e}function mo(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e}function yo(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e}function bo(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e}function xo(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e}function So(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e}function Mo(e,t){var r=t[0]-e[0],n=t[1]-e[1];return Math.hypot(r,n)}function To(e,t){var r=t[0]-e[0],n=t[1]-e[1];return r*r+n*n}function ko(e){var t=e[0],r=e[1];return Math.hypot(t,r)}function Uo(e){var t=e[0],r=e[1];return t*t+r*r}function Oo(e,t){return e[0]=-t[0],e[1]=-t[1],e}function Eo(e,t){return e[0]=1/t[0],e[1]=1/t[1],e}function Ro(e,t){var r=t[0],n=t[1],a=r*r+n*n;return a>0&&(a=1/Math.sqrt(a)),e[0]=t[0]*a,e[1]=t[1]*a,e}function wo(e,t){return e[0]*t[0]+e[1]*t[1]}function Lo(e,t,r){var n=t[0]*r[1]-t[1]*r[0];return e[0]=e[1]=0,e[2]=n,e}function Co(e,t,r,n){var a=t[0],o=t[1];return e[0]=a+n*(r[0]-a),e[1]=o+n*(r[1]-o),e}function Do(e,t){t=t||1;var r=2*v()*Math.PI;return e[0]=Math.cos(r)*t,e[1]=Math.sin(r)*t,e}function Io(e,t,r){var n=t[0],a=t[1];return e[0]=r[0]*n+r[2]*a,e[1]=r[1]*n+r[3]*a,e}function Ao(e,t,r){var n=t[0],a=t[1];return e[0]=r[0]*n+r[2]*a+r[4],e[1]=r[1]*n+r[3]*a+r[5],e}function Go(e,t,r){var n=t[0],a=t[1];return e[0]=r[0]*n+r[3]*a+r[6],e[1]=r[1]*n+r[4]*a+r[7],e}function Bo(e,t,r){var n=t[0],a=t[1];return e[0]=r[0]*n+r[4]*a+r[12],e[1]=r[1]*n+r[5]*a+r[13],e}function Fo(e,t,r,n){var a=t[0]-r[0],o=t[1]-r[1],s=Math.sin(n),i=Math.cos(n);return e[0]=a*i-o*s+r[0],e[1]=a*s+o*i+r[1],e}function Po(e,t){var r=e[0],n=e[1],a=t[0],o=t[1],s=Math.sqrt(r*r+n*n)*Math.sqrt(a*a+o*o),i=s&&(r*a+n*o)/s;return Math.acos(Math.min(Math.max(i,-1),1))}function No(e){return e[0]=0,e[1]=0,e}function Ho(e){return"vec2("+e[0]+", "+e[1]+")"}function zo(e,t){return e[0]===t[0]&&e[1]===t[1]}function qo(e,t){var r=e[0],n=e[1],a=t[0],o=t[1];return Math.abs(r-a)<=f*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(n-o)<=f*Math.max(1,Math.abs(n),Math.abs(o))}var Wo=ko,_o=co,Xo=ho,Vo=fo,Zo=Mo,jo=To,Yo=Uo,Qo=function(){var e=oo();return function(t,r,n,a,o,s){var i,u;for(r||(r=2),n||(n=0),u=a?Math.min(a*r+n,t.length):t.length,i=n;i<u;i+=r)e[0]=t[i],e[1]=t[i+1],o(e,e,s),t[i]=e[0],t[i+1]=e[1];return t}}()},422:(e,t,r)=>{"use strict";var n,a;r.r(t),r.d(t,{BoundingBox:()=>E,Font:()=>hn,Glyph:()=>be,Path:()=>R,_parse:()=>ie,default:()=>Fn,load:()=>Gn,loadSync:()=>Bn,parse:()=>An}),String.prototype.codePointAt||(a=function(e){if(null==this)throw TypeError();var t=String(this),r=t.length,n=e?Number(e):0;if(n!=n&&(n=0),!(n<0||n>=r)){var a,o=t.charCodeAt(n);return o>=55296&&o<=56319&&r>n+1&&(a=t.charCodeAt(n+1))>=56320&&a<=57343?1024*(o-55296)+a-56320+65536:o}},(n=function(){try{var e={},t=Object.defineProperty,r=t(e,e,e)&&t}catch(e){}return r}())?n(String.prototype,"codePointAt",{value:a,configurable:!0,writable:!0}):String.prototype.codePointAt=a);function o(){this.table=new Uint16Array(16),this.trans=new Uint16Array(288)}function s(e,t){this.source=e,this.sourceIndex=0,this.tag=0,this.bitcount=0,this.dest=t,this.destLen=0,this.ltree=new o,this.dtree=new o}var i=new o,u=new o,l=new Uint8Array(30),p=new Uint16Array(30),c=new Uint8Array(30),h=new Uint16Array(30),f=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),d=new o,v=new Uint8Array(320);function g(e,t,r,n){var a,o;for(a=0;a<r;++a)e[a]=0;for(a=0;a<30-r;++a)e[a+r]=a/r|0;for(o=n,a=0;a<30;++a)t[a]=o,o+=1<<e[a]}var m=new Uint16Array(16);function y(e,t,r,n){var a,o;for(a=0;a<16;++a)e.table[a]=0;for(a=0;a<n;++a)e.table[t[r+a]]++;for(e.table[0]=0,o=0,a=0;a<16;++a)m[a]=o,o+=e.table[a];for(a=0;a<n;++a)t[r+a]&&(e.trans[m[t[r+a]]++]=a)}function b(e){e.bitcount--||(e.tag=e.source[e.sourceIndex++],e.bitcount=7);var t=1&e.tag;return e.tag>>>=1,t}function x(e,t,r){if(!t)return r;for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;var n=e.tag&65535>>>16-t;return e.tag>>>=t,e.bitcount-=t,n+r}function S(e,t){for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;var r=0,n=0,a=0,o=e.tag;do{n=2*n+(1&o),o>>>=1,++a,r+=t.table[a],n-=t.table[a]}while(n>=0);return e.tag=o,e.bitcount-=a,t.trans[r+n]}function M(e,t,r){var n,a,o,s,i,u;for(n=x(e,5,257),a=x(e,5,1),o=x(e,4,4),s=0;s<19;++s)v[s]=0;for(s=0;s<o;++s){var l=x(e,3,0);v[f[s]]=l}for(y(d,v,0,19),i=0;i<n+a;){var p=S(e,d);switch(p){case 16:var c=v[i-1];for(u=x(e,2,3);u;--u)v[i++]=c;break;case 17:for(u=x(e,3,3);u;--u)v[i++]=0;break;case 18:for(u=x(e,7,11);u;--u)v[i++]=0;break;default:v[i++]=p}}y(t,v,0,n),y(r,v,n,a)}function T(e,t,r){for(;;){var n,a,o,s,i=S(e,t);if(256===i)return 0;if(i<256)e.dest[e.destLen++]=i;else for(n=x(e,l[i-=257],p[i]),a=S(e,r),s=o=e.destLen-x(e,c[a],h[a]);s<o+n;++s)e.dest[e.destLen++]=e.dest[s]}}function k(e){for(var t,r;e.bitcount>8;)e.sourceIndex--,e.bitcount-=8;if((t=256*(t=e.source[e.sourceIndex+1])+e.source[e.sourceIndex])!==(65535&~(256*e.source[e.sourceIndex+3]+e.source[e.sourceIndex+2])))return-3;for(e.sourceIndex+=4,r=t;r;--r)e.dest[e.destLen++]=e.source[e.sourceIndex++];return e.bitcount=0,0}!function(e,t){var r;for(r=0;r<7;++r)e.table[r]=0;for(e.table[7]=24,e.table[8]=152,e.table[9]=112,r=0;r<24;++r)e.trans[r]=256+r;for(r=0;r<144;++r)e.trans[24+r]=r;for(r=0;r<8;++r)e.trans[168+r]=280+r;for(r=0;r<112;++r)e.trans[176+r]=144+r;for(r=0;r<5;++r)t.table[r]=0;for(t.table[5]=32,r=0;r<32;++r)t.trans[r]=r}(i,u),g(l,p,4,3),g(c,h,2,1),l[28]=0,p[28]=258;var U=function(e,t){var r,n,a=new s(e,t);do{switch(r=b(a),x(a,2,0)){case 0:n=k(a);break;case 1:n=T(a,i,u);break;case 2:M(a,a.ltree,a.dtree),n=T(a,a.ltree,a.dtree);break;default:n=-3}if(0!==n)throw new Error("Data error")}while(!r);return a.destLen<a.dest.length?"function"==typeof a.dest.slice?a.dest.slice(0,a.destLen):a.dest.subarray(0,a.destLen):a.dest};function O(e,t,r,n,a){return Math.pow(1-a,3)*e+3*Math.pow(1-a,2)*a*t+3*(1-a)*Math.pow(a,2)*r+Math.pow(a,3)*n}function E(){this.x1=Number.NaN,this.y1=Number.NaN,this.x2=Number.NaN,this.y2=Number.NaN}function R(){this.commands=[],this.fill="black",this.stroke=null,this.strokeWidth=1}function w(e){throw new Error(e)}function L(e,t){e||w(t)}E.prototype.isEmpty=function(){return isNaN(this.x1)||isNaN(this.y1)||isNaN(this.x2)||isNaN(this.y2)},E.prototype.addPoint=function(e,t){"number"==typeof e&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=e,this.x2=e),e<this.x1&&(this.x1=e),e>this.x2&&(this.x2=e)),"number"==typeof t&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=t,this.y2=t),t<this.y1&&(this.y1=t),t>this.y2&&(this.y2=t))},E.prototype.addX=function(e){this.addPoint(e,null)},E.prototype.addY=function(e){this.addPoint(null,e)},E.prototype.addBezier=function(e,t,r,n,a,o,s,i){var u=[e,t],l=[r,n],p=[a,o],c=[s,i];this.addPoint(e,t),this.addPoint(s,i);for(var h=0;h<=1;h++){var f=6*u[h]-12*l[h]+6*p[h],d=-3*u[h]+9*l[h]-9*p[h]+3*c[h],v=3*l[h]-3*u[h];if(0!==d){var g=Math.pow(f,2)-4*v*d;if(!(g<0)){var m=(-f+Math.sqrt(g))/(2*d);0<m&&m<1&&(0===h&&this.addX(O(u[h],l[h],p[h],c[h],m)),1===h&&this.addY(O(u[h],l[h],p[h],c[h],m)));var y=(-f-Math.sqrt(g))/(2*d);0<y&&y<1&&(0===h&&this.addX(O(u[h],l[h],p[h],c[h],y)),1===h&&this.addY(O(u[h],l[h],p[h],c[h],y)))}}else{if(0===f)continue;var b=-v/f;0<b&&b<1&&(0===h&&this.addX(O(u[h],l[h],p[h],c[h],b)),1===h&&this.addY(O(u[h],l[h],p[h],c[h],b)))}}},E.prototype.addQuad=function(e,t,r,n,a,o){var s=e+2/3*(r-e),i=t+2/3*(n-t),u=s+1/3*(a-e),l=i+1/3*(o-t);this.addBezier(e,t,s,i,u,l,a,o)},R.prototype.moveTo=function(e,t){this.commands.push({type:"M",x:e,y:t})},R.prototype.lineTo=function(e,t){this.commands.push({type:"L",x:e,y:t})},R.prototype.curveTo=R.prototype.bezierCurveTo=function(e,t,r,n,a,o){this.commands.push({type:"C",x1:e,y1:t,x2:r,y2:n,x:a,y:o})},R.prototype.quadTo=R.prototype.quadraticCurveTo=function(e,t,r,n){this.commands.push({type:"Q",x1:e,y1:t,x:r,y:n})},R.prototype.close=R.prototype.closePath=function(){this.commands.push({type:"Z"})},R.prototype.extend=function(e){if(e.commands)e=e.commands;else if(e instanceof E){var t=e;return this.moveTo(t.x1,t.y1),this.lineTo(t.x2,t.y1),this.lineTo(t.x2,t.y2),this.lineTo(t.x1,t.y2),void this.close()}Array.prototype.push.apply(this.commands,e)},R.prototype.getBoundingBox=function(){for(var e=new E,t=0,r=0,n=0,a=0,o=0;o<this.commands.length;o++){var s=this.commands[o];switch(s.type){case"M":e.addPoint(s.x,s.y),t=n=s.x,r=a=s.y;break;case"L":e.addPoint(s.x,s.y),n=s.x,a=s.y;break;case"Q":e.addQuad(n,a,s.x1,s.y1,s.x,s.y),n=s.x,a=s.y;break;case"C":e.addBezier(n,a,s.x1,s.y1,s.x2,s.y2,s.x,s.y),n=s.x,a=s.y;break;case"Z":n=t,a=r;break;default:throw new Error("Unexpected path command "+s.type)}}return e.isEmpty()&&e.addPoint(0,0),e},R.prototype.draw=function(e){e.beginPath();for(var t=0;t<this.commands.length;t+=1){var r=this.commands[t];"M"===r.type?e.moveTo(r.x,r.y):"L"===r.type?e.lineTo(r.x,r.y):"C"===r.type?e.bezierCurveTo(r.x1,r.y1,r.x2,r.y2,r.x,r.y):"Q"===r.type?e.quadraticCurveTo(r.x1,r.y1,r.x,r.y):"Z"===r.type&&e.closePath()}this.fill&&(e.fillStyle=this.fill,e.fill()),this.stroke&&(e.strokeStyle=this.stroke,e.lineWidth=this.strokeWidth,e.stroke())},R.prototype.toPathData=function(e){function t(t){return Math.round(t)===t?""+Math.round(t):t.toFixed(e)}function r(){for(var e=arguments,r="",n=0;n<arguments.length;n+=1){var a=e[n];a>=0&&n>0&&(r+=" "),r+=t(a)}return r}e=void 0!==e?e:2;for(var n="",a=0;a<this.commands.length;a+=1){var o=this.commands[a];"M"===o.type?n+="M"+r(o.x,o.y):"L"===o.type?n+="L"+r(o.x,o.y):"C"===o.type?n+="C"+r(o.x1,o.y1,o.x2,o.y2,o.x,o.y):"Q"===o.type?n+="Q"+r(o.x1,o.y1,o.x,o.y):"Z"===o.type&&(n+="Z")}return n},R.prototype.toSVG=function(e){var t='<path d="';return t+=this.toPathData(e),t+='"',this.fill&&"black"!==this.fill&&(null===this.fill?t+=' fill="none"':t+=' fill="'+this.fill+'"'),this.stroke&&(t+=' stroke="'+this.stroke+'" stroke-width="'+this.strokeWidth+'"'),t+"/>"},R.prototype.toDOMElement=function(e){var t=this.toPathData(e),r=document.createElementNS("http://www.w3.org/2000/svg","path");return r.setAttribute("d",t),r};var C={fail:w,argument:L,assert:L},D=2147483648,I={},A={},G={};function B(e){return function(){return e}}A.BYTE=function(e){return C.argument(e>=0&&e<=255,"Byte value should be between 0 and 255."),[e]},G.BYTE=B(1),A.CHAR=function(e){return[e.charCodeAt(0)]},G.CHAR=B(1),A.CHARARRAY=function(e){void 0===e&&(e="",console.warn("Undefined CHARARRAY encountered and treated as an empty string. This is probably caused by a missing glyph name."));for(var t=[],r=0;r<e.length;r+=1)t[r]=e.charCodeAt(r);return t},G.CHARARRAY=function(e){return void 0===e?0:e.length},A.USHORT=function(e){return[e>>8&255,255&e]},G.USHORT=B(2),A.SHORT=function(e){return e>=32768&&(e=-(65536-e)),[e>>8&255,255&e]},G.SHORT=B(2),A.UINT24=function(e){return[e>>16&255,e>>8&255,255&e]},G.UINT24=B(3),A.ULONG=function(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]},G.ULONG=B(4),A.LONG=function(e){return e>=D&&(e=-(2*D-e)),[e>>24&255,e>>16&255,e>>8&255,255&e]},G.LONG=B(4),A.FIXED=A.ULONG,G.FIXED=G.ULONG,A.FWORD=A.SHORT,G.FWORD=G.SHORT,A.UFWORD=A.USHORT,G.UFWORD=G.USHORT,A.LONGDATETIME=function(e){return[0,0,0,0,e>>24&255,e>>16&255,e>>8&255,255&e]},G.LONGDATETIME=B(8),A.TAG=function(e){return C.argument(4===e.length,"Tag should be exactly 4 ASCII characters."),[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]},G.TAG=B(4),A.Card8=A.BYTE,G.Card8=G.BYTE,A.Card16=A.USHORT,G.Card16=G.USHORT,A.OffSize=A.BYTE,G.OffSize=G.BYTE,A.SID=A.USHORT,G.SID=G.USHORT,A.NUMBER=function(e){return e>=-107&&e<=107?[e+139]:e>=108&&e<=1131?[247+((e-=108)>>8),255&e]:e>=-1131&&e<=-108?[251+((e=-e-108)>>8),255&e]:e>=-32768&&e<=32767?A.NUMBER16(e):A.NUMBER32(e)},G.NUMBER=function(e){return A.NUMBER(e).length},A.NUMBER16=function(e){return[28,e>>8&255,255&e]},G.NUMBER16=B(3),A.NUMBER32=function(e){return[29,e>>24&255,e>>16&255,e>>8&255,255&e]},G.NUMBER32=B(5),A.REAL=function(e){var t=e.toString(),r=/\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(t);if(r){var n=parseFloat("1e"+((r[2]?+r[2]:0)+r[1].length));t=(Math.round(e*n)/n).toString()}for(var a="",o=0,s=t.length;o<s;o+=1){var i=t[o];a+="e"===i?"-"===t[++o]?"c":"b":"."===i?"a":"-"===i?"e":i}for(var u=[30],l=0,p=(a+=1&a.length?"f":"ff").length;l<p;l+=2)u.push(parseInt(a.substr(l,2),16));return u},G.REAL=function(e){return A.REAL(e).length},A.NAME=A.CHARARRAY,G.NAME=G.CHARARRAY,A.STRING=A.CHARARRAY,G.STRING=G.CHARARRAY,I.UTF8=function(e,t,r){for(var n=[],a=r,o=0;o<a;o++,t+=1)n[o]=e.getUint8(t);return String.fromCharCode.apply(null,n)},I.UTF16=function(e,t,r){for(var n=[],a=r/2,o=0;o<a;o++,t+=2)n[o]=e.getUint16(t);return String.fromCharCode.apply(null,n)},A.UTF16=function(e){for(var t=[],r=0;r<e.length;r+=1){var n=e.charCodeAt(r);t[t.length]=n>>8&255,t[t.length]=255&n}return t},G.UTF16=function(e){return 2*e.length};var F={"x-mac-croatian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ","x-mac-cyrillic":"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю","x-mac-gaelic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ","x-mac-greek":"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­","x-mac-icelandic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-inuit":"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł","x-mac-ce":"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ",macintosh:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-romanian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-turkish":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ"};I.MACSTRING=function(e,t,r,n){var a=F[n];if(void 0!==a){for(var o="",s=0;s<r;s++){var i=e.getUint8(t+s);o+=i<=127?String.fromCharCode(i):a[127&i]}return o}};var P,N="function"==typeof WeakMap&&new WeakMap;function H(e){return e>=-128&&e<=127}function z(e,t,r){for(var n=0,a=e.length;t<a&&n<64&&0===e[t];)++t,++n;return r.push(128|n-1),t}function q(e,t,r){for(var n=0,a=e.length,o=t;o<a&&n<64;){var s=e[o];if(!H(s))break;if(0===s&&o+1<a&&0===e[o+1])break;++o,++n}r.push(n-1);for(var i=t;i<o;++i)r.push(e[i]+256&255);return o}function W(e,t,r){for(var n=0,a=e.length,o=t;o<a&&n<64;){var s=e[o];if(0===s)break;if(H(s)&&o+1<a&&H(e[o+1]))break;++o,++n}r.push(64|n-1);for(var i=t;i<o;++i){var u=e[i];r.push(u+65536>>8&255,u+256&255)}return o}A.MACSTRING=function(e,t){var r=function(e){if(!P)for(var t in P={},F)P[t]=new String(t);var r=P[e];if(void 0!==r){if(N){var n=N.get(r);if(void 0!==n)return n}var a=F[e];if(void 0!==a){for(var o={},s=0;s<a.length;s++)o[a.charCodeAt(s)]=s+128;return N&&N.set(r,o),o}}}(t);if(void 0!==r){for(var n=[],a=0;a<e.length;a++){var o=e.charCodeAt(a);if(o>=128&&void 0===(o=r[o]))return;n[a]=o}return n}},G.MACSTRING=function(e,t){var r=A.MACSTRING(e,t);return void 0!==r?r.length:0},A.VARDELTAS=function(e){for(var t=0,r=[];t<e.length;){var n=e[t];t=0===n?z(e,t,r):n>=-128&&n<=127?q(e,t,r):W(e,t,r)}return r},A.INDEX=function(e){for(var t=1,r=[t],n=[],a=0;a<e.length;a+=1){var o=A.OBJECT(e[a]);Array.prototype.push.apply(n,o),t+=o.length,r.push(t)}if(0===n.length)return[0,0];for(var s=[],i=1+Math.floor(Math.log(t)/Math.log(2))/8|0,u=[void 0,A.BYTE,A.USHORT,A.UINT24,A.ULONG][i],l=0;l<r.length;l+=1){var p=u(r[l]);Array.prototype.push.apply(s,p)}return Array.prototype.concat(A.Card16(e.length),A.OffSize(i),s,n)},G.INDEX=function(e){return A.INDEX(e).length},A.DICT=function(e){for(var t=[],r=Object.keys(e),n=r.length,a=0;a<n;a+=1){var o=parseInt(r[a],0),s=e[o];t=(t=t.concat(A.OPERAND(s.value,s.type))).concat(A.OPERATOR(o))}return t},G.DICT=function(e){return A.DICT(e).length},A.OPERATOR=function(e){return e<1200?[e]:[12,e-1200]},A.OPERAND=function(e,t){var r=[];if(Array.isArray(t))for(var n=0;n<t.length;n+=1)C.argument(e.length===t.length,"Not enough arguments given for type"+t),r=r.concat(A.OPERAND(e[n],t[n]));else if("SID"===t)r=r.concat(A.NUMBER(e));else if("offset"===t)r=r.concat(A.NUMBER32(e));else if("number"===t)r=r.concat(A.NUMBER(e));else{if("real"!==t)throw new Error("Unknown operand type "+t);r=r.concat(A.REAL(e))}return r},A.OP=A.BYTE,G.OP=G.BYTE;var _="function"==typeof WeakMap&&new WeakMap;function X(e,t,r){if(t.length&&("coverageFormat"!==t[0].name||1===t[0].value))for(var n=0;n<t.length;n+=1){var a=t[n];this[a.name]=a.value}if(this.tableName=e,this.fields=t,r)for(var o=Object.keys(r),s=0;s<o.length;s+=1){var i=o[s],u=r[i];void 0!==this[i]&&(this[i]=u)}}function V(e,t,r){void 0===r&&(r=t.length);var n=new Array(t.length+1);n[0]={name:e+"Count",type:"USHORT",value:r};for(var a=0;a<t.length;a++)n[a+1]={name:e+a,type:"USHORT",value:t[a]};return n}function Z(e,t,r){var n=t.length,a=new Array(n+1);a[0]={name:e+"Count",type:"USHORT",value:n};for(var o=0;o<n;o++)a[o+1]={name:e+o,type:"TABLE",value:r(t[o],o)};return a}function j(e,t,r){var n=t.length,a=[];a[0]={name:e+"Count",type:"USHORT",value:n};for(var o=0;o<n;o++)a=a.concat(r(t[o],o));return a}function Y(e){1===e.format?X.call(this,"coverageTable",[{name:"coverageFormat",type:"USHORT",value:1}].concat(V("glyph",e.glyphs))):2===e.format?X.call(this,"coverageTable",[{name:"coverageFormat",type:"USHORT",value:2}].concat(j("rangeRecord",e.ranges,(function(e){return[{name:"startGlyphID",type:"USHORT",value:e.start},{name:"endGlyphID",type:"USHORT",value:e.end},{name:"startCoverageIndex",type:"USHORT",value:e.index}]})))):C.assert(!1,"Coverage format must be 1 or 2.")}function Q(e){X.call(this,"scriptListTable",j("scriptRecord",e,(function(e,t){var r=e.script,n=r.defaultLangSys;return C.assert(!!n,"Unable to write GSUB: script "+e.tag+" has no default language system."),[{name:"scriptTag"+t,type:"TAG",value:e.tag},{name:"script"+t,type:"TABLE",value:new X("scriptTable",[{name:"defaultLangSys",type:"TABLE",value:new X("defaultLangSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:n.reqFeatureIndex}].concat(V("featureIndex",n.featureIndexes)))}].concat(j("langSys",r.langSysRecords,(function(e,t){var r=e.langSys;return[{name:"langSysTag"+t,type:"TAG",value:e.tag},{name:"langSys"+t,type:"TABLE",value:new X("langSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:r.reqFeatureIndex}].concat(V("featureIndex",r.featureIndexes)))}]}))))}]})))}function K(e){X.call(this,"featureListTable",j("featureRecord",e,(function(e,t){var r=e.feature;return[{name:"featureTag"+t,type:"TAG",value:e.tag},{name:"feature"+t,type:"TABLE",value:new X("featureTable",[{name:"featureParams",type:"USHORT",value:r.featureParams}].concat(V("lookupListIndex",r.lookupListIndexes)))}]})))}function J(e,t){X.call(this,"lookupListTable",Z("lookup",e,(function(e){var r=t[e.lookupType];return C.assert(!!r,"Unable to write GSUB lookup type "+e.lookupType+" tables."),new X("lookupTable",[{name:"lookupType",type:"USHORT",value:e.lookupType},{name:"lookupFlag",type:"USHORT",value:e.lookupFlag}].concat(Z("subtable",e.subtables,r)))})))}A.CHARSTRING=function(e){if(_){var t=_.get(e);if(void 0!==t)return t}for(var r=[],n=e.length,a=0;a<n;a+=1){var o=e[a];r=r.concat(A[o.type](o.value))}return _&&_.set(e,r),r},G.CHARSTRING=function(e){return A.CHARSTRING(e).length},A.OBJECT=function(e){var t=A[e.type];return C.argument(void 0!==t,"No encoding function for type "+e.type),t(e.value)},G.OBJECT=function(e){var t=G[e.type];return C.argument(void 0!==t,"No sizeOf function for type "+e.type),t(e.value)},A.TABLE=function(e){for(var t=[],r=e.fields.length,n=[],a=[],o=0;o<r;o+=1){var s=e.fields[o],i=A[s.type];C.argument(void 0!==i,"No encoding function for field type "+s.type+" ("+s.name+")");var u=e[s.name];void 0===u&&(u=s.value);var l=i(u);"TABLE"===s.type?(a.push(t.length),t=t.concat([0,0]),n.push(l)):t=t.concat(l)}for(var p=0;p<n.length;p+=1){var c=a[p],h=t.length;C.argument(h<65536,"Table "+e.tableName+" too big."),t[c]=h>>8,t[c+1]=255&h,t=t.concat(n[p])}return t},G.TABLE=function(e){for(var t=0,r=e.fields.length,n=0;n<r;n+=1){var a=e.fields[n],o=G[a.type];C.argument(void 0!==o,"No sizeOf function for field type "+a.type+" ("+a.name+")");var s=e[a.name];void 0===s&&(s=a.value),t+=o(s),"TABLE"===a.type&&(t+=2)}return t},A.RECORD=A.TABLE,G.RECORD=G.TABLE,A.LITERAL=function(e){return e},G.LITERAL=function(e){return e.length},X.prototype.encode=function(){return A.TABLE(this)},X.prototype.sizeOf=function(){return G.TABLE(this)},Y.prototype=Object.create(X.prototype),Y.prototype.constructor=Y,Q.prototype=Object.create(X.prototype),Q.prototype.constructor=Q,K.prototype=Object.create(X.prototype),K.prototype.constructor=K,J.prototype=Object.create(X.prototype),J.prototype.constructor=J;var $={Table:X,Record:X,Coverage:Y,ScriptList:Q,FeatureList:K,LookupList:J,ushortList:V,tableList:Z,recordList:j};function ee(e,t){return e.getUint8(t)}function te(e,t){return e.getUint16(t,!1)}function re(e,t){return e.getUint32(t,!1)}function ne(e,t){return e.getInt16(t,!1)+e.getUint16(t+2,!1)/65535}var ae={byte:1,uShort:2,short:2,uLong:4,fixed:4,longDateTime:8,tag:4};function oe(e,t){this.data=e,this.offset=t,this.relativeOffset=0}oe.prototype.parseByte=function(){var e=this.data.getUint8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},oe.prototype.parseChar=function(){var e=this.data.getInt8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},oe.prototype.parseCard8=oe.prototype.parseByte,oe.prototype.parseUShort=function(){var e=this.data.getUint16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},oe.prototype.parseCard16=oe.prototype.parseUShort,oe.prototype.parseSID=oe.prototype.parseUShort,oe.prototype.parseOffset16=oe.prototype.parseUShort,oe.prototype.parseShort=function(){var e=this.data.getInt16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},oe.prototype.parseF2Dot14=function(){var e=this.data.getInt16(this.offset+this.relativeOffset)/16384;return this.relativeOffset+=2,e},oe.prototype.parseULong=function(){var e=re(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},oe.prototype.parseOffset32=oe.prototype.parseULong,oe.prototype.parseFixed=function(){var e=ne(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},oe.prototype.parseString=function(e){var t=this.data,r=this.offset+this.relativeOffset,n="";this.relativeOffset+=e;for(var a=0;a<e;a++)n+=String.fromCharCode(t.getUint8(r+a));return n},oe.prototype.parseTag=function(){return this.parseString(4)},oe.prototype.parseLongDateTime=function(){var e=re(this.data,this.offset+this.relativeOffset+4);return e-=2082844800,this.relativeOffset+=8,e},oe.prototype.parseVersion=function(e){var t=te(this.data,this.offset+this.relativeOffset),r=te(this.data,this.offset+this.relativeOffset+2);return this.relativeOffset+=4,void 0===e&&(e=4096),t+r/e/10},oe.prototype.skip=function(e,t){void 0===t&&(t=1),this.relativeOffset+=ae[e]*t},oe.prototype.parseULongList=function(e){void 0===e&&(e=this.parseULong());for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint32(n),n+=4;return this.relativeOffset+=4*e,t},oe.prototype.parseOffset16List=oe.prototype.parseUShortList=function(e){void 0===e&&(e=this.parseUShort());for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint16(n),n+=2;return this.relativeOffset+=2*e,t},oe.prototype.parseShortList=function(e){for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getInt16(n),n+=2;return this.relativeOffset+=2*e,t},oe.prototype.parseByteList=function(e){for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint8(n++);return this.relativeOffset+=e,t},oe.prototype.parseList=function(e,t){t||(t=e,e=this.parseUShort());for(var r=new Array(e),n=0;n<e;n++)r[n]=t.call(this);return r},oe.prototype.parseList32=function(e,t){t||(t=e,e=this.parseULong());for(var r=new Array(e),n=0;n<e;n++)r[n]=t.call(this);return r},oe.prototype.parseRecordList=function(e,t){t||(t=e,e=this.parseUShort());for(var r=new Array(e),n=Object.keys(t),a=0;a<e;a++){for(var o={},s=0;s<n.length;s++){var i=n[s],u=t[i];o[i]=u.call(this)}r[a]=o}return r},oe.prototype.parseRecordList32=function(e,t){t||(t=e,e=this.parseULong());for(var r=new Array(e),n=Object.keys(t),a=0;a<e;a++){for(var o={},s=0;s<n.length;s++){var i=n[s],u=t[i];o[i]=u.call(this)}r[a]=o}return r},oe.prototype.parseStruct=function(e){if("function"==typeof e)return e.call(this);for(var t=Object.keys(e),r={},n=0;n<t.length;n++){var a=t[n],o=e[a];r[a]=o.call(this)}return r},oe.prototype.parseValueRecord=function(e){if(void 0===e&&(e=this.parseUShort()),0!==e){var t={};return 1&e&&(t.xPlacement=this.parseShort()),2&e&&(t.yPlacement=this.parseShort()),4&e&&(t.xAdvance=this.parseShort()),8&e&&(t.yAdvance=this.parseShort()),16&e&&(t.xPlaDevice=void 0,this.parseShort()),32&e&&(t.yPlaDevice=void 0,this.parseShort()),64&e&&(t.xAdvDevice=void 0,this.parseShort()),128&e&&(t.yAdvDevice=void 0,this.parseShort()),t}},oe.prototype.parseValueRecordList=function(){for(var e=this.parseUShort(),t=this.parseUShort(),r=new Array(t),n=0;n<t;n++)r[n]=this.parseValueRecord(e);return r},oe.prototype.parsePointer=function(e){var t=this.parseOffset16();if(t>0)return new oe(this.data,this.offset+t).parseStruct(e)},oe.prototype.parsePointer32=function(e){var t=this.parseOffset32();if(t>0)return new oe(this.data,this.offset+t).parseStruct(e)},oe.prototype.parseListOfLists=function(e){for(var t=this.parseOffset16List(),r=t.length,n=this.relativeOffset,a=new Array(r),o=0;o<r;o++){var s=t[o];if(0!==s)if(this.relativeOffset=s,e){for(var i=this.parseOffset16List(),u=new Array(i.length),l=0;l<i.length;l++)this.relativeOffset=s+i[l],u[l]=e.call(this);a[o]=u}else a[o]=this.parseUShortList();else a[o]=void 0}return this.relativeOffset=n,a},oe.prototype.parseCoverage=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort(),r=this.parseUShort();if(1===t)return{format:1,glyphs:this.parseUShortList(r)};if(2===t){for(var n=new Array(r),a=0;a<r;a++)n[a]={start:this.parseUShort(),end:this.parseUShort(),index:this.parseUShort()};return{format:2,ranges:n}}throw new Error("0x"+e.toString(16)+": Coverage format must be 1 or 2.")},oe.prototype.parseClassDef=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();if(1===t)return{format:1,startGlyph:this.parseUShort(),classes:this.parseUShortList()};if(2===t)return{format:2,ranges:this.parseRecordList({start:oe.uShort,end:oe.uShort,classId:oe.uShort})};throw new Error("0x"+e.toString(16)+": ClassDef format must be 1 or 2.")},oe.list=function(e,t){return function(){return this.parseList(e,t)}},oe.list32=function(e,t){return function(){return this.parseList32(e,t)}},oe.recordList=function(e,t){return function(){return this.parseRecordList(e,t)}},oe.recordList32=function(e,t){return function(){return this.parseRecordList32(e,t)}},oe.pointer=function(e){return function(){return this.parsePointer(e)}},oe.pointer32=function(e){return function(){return this.parsePointer32(e)}},oe.tag=oe.prototype.parseTag,oe.byte=oe.prototype.parseByte,oe.uShort=oe.offset16=oe.prototype.parseUShort,oe.uShortList=oe.prototype.parseUShortList,oe.uLong=oe.offset32=oe.prototype.parseULong,oe.uLongList=oe.prototype.parseULongList,oe.struct=oe.prototype.parseStruct,oe.coverage=oe.prototype.parseCoverage,oe.classDef=oe.prototype.parseClassDef;var se={reserved:oe.uShort,reqFeatureIndex:oe.uShort,featureIndexes:oe.uShortList};oe.prototype.parseScriptList=function(){return this.parsePointer(oe.recordList({tag:oe.tag,script:oe.pointer({defaultLangSys:oe.pointer(se),langSysRecords:oe.recordList({tag:oe.tag,langSys:oe.pointer(se)})})}))||[]},oe.prototype.parseFeatureList=function(){return this.parsePointer(oe.recordList({tag:oe.tag,feature:oe.pointer({featureParams:oe.offset16,lookupListIndexes:oe.uShortList})}))||[]},oe.prototype.parseLookupList=function(e){return this.parsePointer(oe.list(oe.pointer((function(){var t=this.parseUShort();C.argument(1<=t&&t<=9,"GPOS/GSUB lookup type "+t+" unknown.");var r=this.parseUShort(),n=16&r;return{lookupType:t,lookupFlag:r,subtables:this.parseList(oe.pointer(e[t])),markFilteringSet:n?this.parseUShort():void 0}}))))||[]},oe.prototype.parseFeatureVariationsList=function(){return this.parsePointer32((function(){var e=this.parseUShort(),t=this.parseUShort();return C.argument(1===e&&t<1,"GPOS/GSUB feature variations table unknown."),this.parseRecordList32({conditionSetOffset:oe.offset32,featureTableSubstitutionOffset:oe.offset32})}))||[]};var ie={getByte:ee,getCard8:ee,getUShort:te,getCard16:te,getShort:function(e,t){return e.getInt16(t,!1)},getULong:re,getFixed:ne,getTag:function(e,t){for(var r="",n=t;n<t+4;n+=1)r+=String.fromCharCode(e.getInt8(n));return r},getOffset:function(e,t,r){for(var n=0,a=0;a<r;a+=1)n<<=8,n+=e.getUint8(t+a);return n},getBytes:function(e,t,r){for(var n=[],a=t;a<r;a+=1)n.push(e.getUint8(a));return n},bytesToString:function(e){for(var t="",r=0;r<e.length;r+=1)t+=String.fromCharCode(e[r]);return t},Parser:oe};function ue(e,t,r){e.segments.push({end:t,start:t,delta:-(t-r),offset:0,glyphIndex:r})}var le={parse:function(e,t){var r={};r.version=ie.getUShort(e,t),C.argument(0===r.version,"cmap table version should be 0."),r.numTables=ie.getUShort(e,t+2);for(var n=-1,a=r.numTables-1;a>=0;a-=1){var o=ie.getUShort(e,t+4+8*a),s=ie.getUShort(e,t+4+8*a+2);if(3===o&&(0===s||1===s||10===s)||0===o&&(0===s||1===s||2===s||3===s||4===s)){n=ie.getULong(e,t+4+8*a+4);break}}if(-1===n)throw new Error("No valid cmap sub-tables found.");var i=new ie.Parser(e,t+n);if(r.format=i.parseUShort(),12===r.format)!function(e,t){var r;t.parseUShort(),e.length=t.parseULong(),e.language=t.parseULong(),e.groupCount=r=t.parseULong(),e.glyphIndexMap={};for(var n=0;n<r;n+=1)for(var a=t.parseULong(),o=t.parseULong(),s=t.parseULong(),i=a;i<=o;i+=1)e.glyphIndexMap[i]=s,s++}(r,i);else{if(4!==r.format)throw new Error("Only format 4 and 12 cmap tables are supported (found format "+r.format+").");!function(e,t,r,n,a){var o;e.length=t.parseUShort(),e.language=t.parseUShort(),e.segCount=o=t.parseUShort()>>1,t.skip("uShort",3),e.glyphIndexMap={};for(var s=new ie.Parser(r,n+a+14),i=new ie.Parser(r,n+a+16+2*o),u=new ie.Parser(r,n+a+16+4*o),l=new ie.Parser(r,n+a+16+6*o),p=n+a+16+8*o,c=0;c<o-1;c+=1)for(var h=void 0,f=s.parseUShort(),d=i.parseUShort(),v=u.parseShort(),g=l.parseUShort(),m=d;m<=f;m+=1)0!==g?(p=l.offset+l.relativeOffset-2,p+=g,p+=2*(m-d),0!==(h=ie.getUShort(r,p))&&(h=h+v&65535)):h=m+v&65535,e.glyphIndexMap[m]=h}(r,i,e,t,n)}return r},make:function(e){var t,r=!0;for(t=e.length-1;t>0;t-=1)if(e.get(t).unicode>65535){console.log("Adding CMAP format 12 (needed!)"),r=!1;break}var n=[{name:"version",type:"USHORT",value:0},{name:"numTables",type:"USHORT",value:r?1:2},{name:"platformID",type:"USHORT",value:3},{name:"encodingID",type:"USHORT",value:1},{name:"offset",type:"ULONG",value:r?12:20}];r||(n=n.concat([{name:"cmap12PlatformID",type:"USHORT",value:3},{name:"cmap12EncodingID",type:"USHORT",value:10},{name:"cmap12Offset",type:"ULONG",value:0}])),n=n.concat([{name:"format",type:"USHORT",value:4},{name:"cmap4Length",type:"USHORT",value:0},{name:"language",type:"USHORT",value:0},{name:"segCountX2",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);var a=new $.Table("cmap",n);for(a.segments=[],t=0;t<e.length;t+=1){for(var o=e.get(t),s=0;s<o.unicodes.length;s+=1)ue(a,o.unicodes[s],t);a.segments=a.segments.sort((function(e,t){return e.start-t.start}))}!function(e){e.segments.push({end:65535,start:65535,delta:1,offset:0})}(a);var i=a.segments.length,u=0,l=[],p=[],c=[],h=[],f=[],d=[];for(t=0;t<i;t+=1){var v=a.segments[t];v.end<=65535&&v.start<=65535?(l=l.concat({name:"end_"+t,type:"USHORT",value:v.end}),p=p.concat({name:"start_"+t,type:"USHORT",value:v.start}),c=c.concat({name:"idDelta_"+t,type:"SHORT",value:v.delta}),h=h.concat({name:"idRangeOffset_"+t,type:"USHORT",value:v.offset}),void 0!==v.glyphId&&(f=f.concat({name:"glyph_"+t,type:"USHORT",value:v.glyphId}))):u+=1,r||void 0===v.glyphIndex||(d=(d=(d=d.concat({name:"cmap12Start_"+t,type:"ULONG",value:v.start})).concat({name:"cmap12End_"+t,type:"ULONG",value:v.end})).concat({name:"cmap12Glyph_"+t,type:"ULONG",value:v.glyphIndex}))}if(a.segCountX2=2*(i-u),a.searchRange=2*Math.pow(2,Math.floor(Math.log(i-u)/Math.log(2))),a.entrySelector=Math.log(a.searchRange/2)/Math.log(2),a.rangeShift=a.segCountX2-a.searchRange,a.fields=a.fields.concat(l),a.fields.push({name:"reservedPad",type:"USHORT",value:0}),a.fields=a.fields.concat(p),a.fields=a.fields.concat(c),a.fields=a.fields.concat(h),a.fields=a.fields.concat(f),a.cmap4Length=14+2*l.length+2+2*p.length+2*c.length+2*h.length+2*f.length,!r){var g=16+4*d.length;a.cmap12Offset=20+a.cmap4Length,a.fields=a.fields.concat([{name:"cmap12Format",type:"USHORT",value:12},{name:"cmap12Reserved",type:"USHORT",value:0},{name:"cmap12Length",type:"ULONG",value:g},{name:"cmap12Language",type:"ULONG",value:0},{name:"cmap12nGroups",type:"ULONG",value:d.length/3}]),a.fields=a.fields.concat(d)}return a}},pe=[".notdef","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","onesuperior","logicalnot","mu","trademark","Eth","onehalf","plusminus","Thorn","onequarter","divide","brokenbar","degree","thorn","threequarters","twosuperior","registered","minus","eth","multiply","threesuperior","copyright","Aacute","Acircumflex","Adieresis","Agrave","Aring","Atilde","Ccedilla","Eacute","Ecircumflex","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Ntilde","Oacute","Ocircumflex","Odieresis","Ograve","Otilde","Scaron","Uacute","Ucircumflex","Udieresis","Ugrave","Yacute","Ydieresis","Zcaron","aacute","acircumflex","adieresis","agrave","aring","atilde","ccedilla","eacute","ecircumflex","edieresis","egrave","iacute","icircumflex","idieresis","igrave","ntilde","oacute","ocircumflex","odieresis","ograve","otilde","scaron","uacute","ucircumflex","udieresis","ugrave","yacute","ydieresis","zcaron","exclamsmall","Hungarumlautsmall","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","266 ff","onedotenleader","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","commasuperior","threequartersemdash","periodsuperior","questionsmall","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","ffi","ffl","parenleftinferior","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","exclamdownsmall","centoldstyle","Lslashsmall","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","Dotaccentsmall","Macronsmall","figuredash","hypheninferior","Ogoneksmall","Ringsmall","Cedillasmall","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall","001.000","001.001","001.002","001.003","Black","Bold","Book","Light","Medium","Regular","Roman","Semibold"],ce=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","","endash","dagger","daggerdbl","periodcentered","","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","","questiondown","","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","","ring","cedilla","","hungarumlaut","ogonek","caron","emdash","","","","","","","","","","","","","","","","","AE","","ordfeminine","","","","","Lslash","Oslash","OE","ordmasculine","","","","","","ae","","","","dotlessi","","","lslash","oslash","oe","germandbls"],he=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclamsmall","Hungarumlautsmall","","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","commasuperior","threequartersemdash","periodsuperior","questionsmall","","asuperior","bsuperior","centsuperior","dsuperior","esuperior","","","isuperior","","","lsuperior","msuperior","nsuperior","osuperior","","","rsuperior","ssuperior","tsuperior","","ff","fi","fl","ffi","ffl","parenleftinferior","","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdownsmall","centoldstyle","Lslashsmall","","","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","","Dotaccentsmall","","","Macronsmall","","","figuredash","hypheninferior","","","Ogoneksmall","Ringsmall","Cedillasmall","","","","onequarter","onehalf","threequarters","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","","","zerosuperior","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall"],fe=[".notdef",".null","nonmarkingreturn","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quotesingle","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","grave","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","Adieresis","Aring","Ccedilla","Eacute","Ntilde","Odieresis","Udieresis","aacute","agrave","acircumflex","adieresis","atilde","aring","ccedilla","eacute","egrave","ecircumflex","edieresis","iacute","igrave","icircumflex","idieresis","ntilde","oacute","ograve","ocircumflex","odieresis","otilde","uacute","ugrave","ucircumflex","udieresis","dagger","degree","cent","sterling","section","bullet","paragraph","germandbls","registered","copyright","trademark","acute","dieresis","notequal","AE","Oslash","infinity","plusminus","lessequal","greaterequal","yen","mu","partialdiff","summation","product","pi","integral","ordfeminine","ordmasculine","Omega","ae","oslash","questiondown","exclamdown","logicalnot","radical","florin","approxequal","Delta","guillemotleft","guillemotright","ellipsis","nonbreakingspace","Agrave","Atilde","Otilde","OE","oe","endash","emdash","quotedblleft","quotedblright","quoteleft","quoteright","divide","lozenge","ydieresis","Ydieresis","fraction","currency","guilsinglleft","guilsinglright","fi","fl","daggerdbl","periodcentered","quotesinglbase","quotedblbase","perthousand","Acircumflex","Ecircumflex","Aacute","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Oacute","Ocircumflex","apple","Ograve","Uacute","Ucircumflex","Ugrave","dotlessi","circumflex","tilde","macron","breve","dotaccent","ring","cedilla","hungarumlaut","ogonek","caron","Lslash","lslash","Scaron","scaron","Zcaron","zcaron","brokenbar","Eth","eth","Yacute","yacute","Thorn","thorn","minus","multiply","onesuperior","twosuperior","threesuperior","onehalf","onequarter","threequarters","franc","Gbreve","gbreve","Idotaccent","Scedilla","scedilla","Cacute","cacute","Ccaron","ccaron","dcroat"];function de(e){this.font=e}function ve(e){this.cmap=e}function ge(e,t){this.encoding=e,this.charset=t}function me(e){switch(e.version){case 1:this.names=fe.slice();break;case 2:this.names=new Array(e.numberOfGlyphs);for(var t=0;t<e.numberOfGlyphs;t++)e.glyphNameIndex[t]<fe.length?this.names[t]=fe[e.glyphNameIndex[t]]:this.names[t]=e.names[e.glyphNameIndex[t]-fe.length];break;case 2.5:this.names=new Array(e.numberOfGlyphs);for(var r=0;r<e.numberOfGlyphs;r++)this.names[r]=fe[r+e.glyphNameIndex[r]];break;default:this.names=[]}}de.prototype.charToGlyphIndex=function(e){var t=e.codePointAt(0),r=this.font.glyphs;if(r)for(var n=0;n<r.length;n+=1)for(var a=r.get(n),o=0;o<a.unicodes.length;o+=1)if(a.unicodes[o]===t)return n;return null},ve.prototype.charToGlyphIndex=function(e){return this.cmap.glyphIndexMap[e.codePointAt(0)]||0},ge.prototype.charToGlyphIndex=function(e){var t=e.codePointAt(0),r=this.encoding[t];return this.charset.indexOf(r)},me.prototype.nameToGlyphIndex=function(e){return this.names.indexOf(e)},me.prototype.glyphIndexToName=function(e){return this.names[e]};var ye=function(e,t,r,n,a){e.beginPath(),e.moveTo(t,r),e.lineTo(n,a),e.stroke()};function be(e){this.bindConstructorValues(e)}function xe(e,t,r){Object.defineProperty(e,t,{get:function(){return e.path,e[r]},set:function(t){e[r]=t},enumerable:!0,configurable:!0})}function Se(e,t){if(this.font=e,this.glyphs={},Array.isArray(t))for(var r=0;r<t.length;r++){var n=t[r];n.path.unitsPerEm=e.unitsPerEm,this.glyphs[r]=n}this.length=t&&t.length||0}be.prototype.bindConstructorValues=function(e){var t,r;this.index=e.index||0,this.name=e.name||null,this.unicode=e.unicode||void 0,this.unicodes=e.unicodes||void 0!==e.unicode?[e.unicode]:[],"xMin"in e&&(this.xMin=e.xMin),"yMin"in e&&(this.yMin=e.yMin),"xMax"in e&&(this.xMax=e.xMax),"yMax"in e&&(this.yMax=e.yMax),"advanceWidth"in e&&(this.advanceWidth=e.advanceWidth),Object.defineProperty(this,"path",(t=e.path,r=t||new R,{configurable:!0,get:function(){return"function"==typeof r&&(r=r()),r},set:function(e){r=e}}))},be.prototype.addUnicode=function(e){0===this.unicodes.length&&(this.unicode=e),this.unicodes.push(e)},be.prototype.getBoundingBox=function(){return this.path.getBoundingBox()},be.prototype.getPath=function(e,t,r,n,a){var o,s;e=void 0!==e?e:0,t=void 0!==t?t:0,r=void 0!==r?r:72,n||(n={});var i=n.xScale,u=n.yScale;if(n.hinting&&a&&a.hinting&&(s=this.path&&a.hinting.exec(this,r)),s)o=a.hinting.getCommands(s),e=Math.round(e),t=Math.round(t),i=u=1;else{o=this.path.commands;var l=1/(this.path.unitsPerEm||1e3)*r;void 0===i&&(i=l),void 0===u&&(u=l)}for(var p=new R,c=0;c<o.length;c+=1){var h=o[c];"M"===h.type?p.moveTo(e+h.x*i,t+-h.y*u):"L"===h.type?p.lineTo(e+h.x*i,t+-h.y*u):"Q"===h.type?p.quadraticCurveTo(e+h.x1*i,t+-h.y1*u,e+h.x*i,t+-h.y*u):"C"===h.type?p.curveTo(e+h.x1*i,t+-h.y1*u,e+h.x2*i,t+-h.y2*u,e+h.x*i,t+-h.y*u):"Z"===h.type&&p.closePath()}return p},be.prototype.getContours=function(){if(void 0===this.points)return[];for(var e=[],t=[],r=0;r<this.points.length;r+=1){var n=this.points[r];t.push(n),n.lastPointOfContour&&(e.push(t),t=[])}return C.argument(0===t.length,"There are still points left in the current contour."),e},be.prototype.getMetrics=function(){for(var e=this.path.commands,t=[],r=[],n=0;n<e.length;n+=1){var a=e[n];"Z"!==a.type&&(t.push(a.x),r.push(a.y)),"Q"!==a.type&&"C"!==a.type||(t.push(a.x1),r.push(a.y1)),"C"===a.type&&(t.push(a.x2),r.push(a.y2))}var o={xMin:Math.min.apply(null,t),yMin:Math.min.apply(null,r),xMax:Math.max.apply(null,t),yMax:Math.max.apply(null,r),leftSideBearing:this.leftSideBearing};return isFinite(o.xMin)||(o.xMin=0),isFinite(o.xMax)||(o.xMax=this.advanceWidth),isFinite(o.yMin)||(o.yMin=0),isFinite(o.yMax)||(o.yMax=0),o.rightSideBearing=this.advanceWidth-o.leftSideBearing-(o.xMax-o.xMin),o},be.prototype.draw=function(e,t,r,n,a){this.getPath(t,r,n,a).draw(e)},be.prototype.drawPoints=function(e,t,r,n){function a(t,r,n,a){e.beginPath();for(var o=0;o<t.length;o+=1)e.moveTo(r+t[o].x*a,n+t[o].y*a),e.arc(r+t[o].x*a,n+t[o].y*a,2,0,2*Math.PI,!1);e.closePath(),e.fill()}t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:24;for(var o=1/this.path.unitsPerEm*n,s=[],i=[],u=this.path,l=0;l<u.commands.length;l+=1){var p=u.commands[l];void 0!==p.x&&s.push({x:p.x,y:-p.y}),void 0!==p.x1&&i.push({x:p.x1,y:-p.y1}),void 0!==p.x2&&i.push({x:p.x2,y:-p.y2})}e.fillStyle="blue",a(s,t,r,o),e.fillStyle="red",a(i,t,r,o)},be.prototype.drawMetrics=function(e,t,r,n){var a;t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:24,a=1/this.path.unitsPerEm*n,e.lineWidth=1,e.strokeStyle="black",ye(e,t,-1e4,t,1e4),ye(e,-1e4,r,1e4,r);var o=this.xMin||0,s=this.yMin||0,i=this.xMax||0,u=this.yMax||0,l=this.advanceWidth||0;e.strokeStyle="blue",ye(e,t+o*a,-1e4,t+o*a,1e4),ye(e,t+i*a,-1e4,t+i*a,1e4),ye(e,-1e4,r+-s*a,1e4,r+-s*a),ye(e,-1e4,r+-u*a,1e4,r+-u*a),e.strokeStyle="green",ye(e,t+l*a,-1e4,t+l*a,1e4)},Se.prototype.get=function(e){if(void 0===this.glyphs[e]){this.font._push(e),"function"==typeof this.glyphs[e]&&(this.glyphs[e]=this.glyphs[e]());var t=this.glyphs[e],r=this.font._IndexToUnicodeMap[e];if(r)for(var n=0;n<r.unicodes.length;n++)t.addUnicode(r.unicodes[n]);this.font.cffEncoding?this.font.isCIDFont?t.name="gid"+e:t.name=this.font.cffEncoding.charset[e]:this.font.glyphNames.names&&(t.name=this.font.glyphNames.glyphIndexToName(e)),this.glyphs[e].advanceWidth=this.font._hmtxTableData[e].advanceWidth,this.glyphs[e].leftSideBearing=this.font._hmtxTableData[e].leftSideBearing}else"function"==typeof this.glyphs[e]&&(this.glyphs[e]=this.glyphs[e]());return this.glyphs[e]},Se.prototype.push=function(e,t){this.glyphs[e]=t,this.length++};var Me={GlyphSet:Se,glyphLoader:function(e,t){return new be({index:t,font:e})},ttfGlyphLoader:function(e,t,r,n,a,o){return function(){var s=new be({index:t,font:e});return s.path=function(){r(s,n,a);var t=o(e.glyphs,s);return t.unitsPerEm=e.unitsPerEm,t},xe(s,"xMin","_xMin"),xe(s,"xMax","_xMax"),xe(s,"yMin","_yMin"),xe(s,"yMax","_yMax"),s}},cffGlyphLoader:function(e,t,r,n){return function(){var a=new be({index:t,font:e});return a.path=function(){var t=r(e,a,n);return t.unitsPerEm=e.unitsPerEm,t},a}}};function Te(e,t){if(e===t)return!0;if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r+=1)if(!Te(e[r],t[r]))return!1;return!0}return!1}function ke(e){return e.length<1240?107:e.length<33900?1131:32768}function Ue(e,t,r){var n,a,o=[],s=[],i=ie.getCard16(e,t);if(0!==i){var u=ie.getByte(e,t+2);n=t+(i+1)*u+2;for(var l=t+3,p=0;p<i+1;p+=1)o.push(ie.getOffset(e,l,u)),l+=u;a=n+o[i]}else a=t+2;for(var c=0;c<o.length-1;c+=1){var h=ie.getBytes(e,n+o[c],n+o[c+1]);r&&(h=r(h)),s.push(h)}return{objects:s,startOffset:t,endOffset:a}}function Oe(e,t){if(28===t)return e.parseByte()<<8|e.parseByte();if(29===t)return e.parseByte()<<24|e.parseByte()<<16|e.parseByte()<<8|e.parseByte();if(30===t)return function(e){for(var t="",r=["0","1","2","3","4","5","6","7","8","9",".","E","E-",null,"-"];;){var n=e.parseByte(),a=n>>4,o=15&n;if(15===a)break;if(t+=r[a],15===o)break;t+=r[o]}return parseFloat(t)}(e);if(t>=32&&t<=246)return t-139;if(t>=247&&t<=250)return 256*(t-247)+e.parseByte()+108;if(t>=251&&t<=254)return 256*-(t-251)-e.parseByte()-108;throw new Error("Invalid b0 "+t)}function Ee(e,t,r){t=void 0!==t?t:0;var n=new ie.Parser(e,t),a=[],o=[];for(r=void 0!==r?r:e.length;n.relativeOffset<r;){var s=n.parseByte();s<=21?(12===s&&(s=1200+n.parseByte()),a.push([s,o]),o=[]):o.push(Oe(n,s))}return function(e){for(var t={},r=0;r<e.length;r+=1){var n,a=e[r][0],o=e[r][1];if(n=1===o.length?o[0]:o,t.hasOwnProperty(a)&&!isNaN(t[a]))throw new Error("Object "+t+" already has key "+a);t[a]=n}return t}(a)}function Re(e,t){return t<=390?pe[t]:e[t-391]}function we(e,t,r){for(var n,a={},o=0;o<t.length;o+=1){var s=t[o];if(Array.isArray(s.type)){var i=[];i.length=s.type.length;for(var u=0;u<s.type.length;u++)void 0===(n=void 0!==e[s.op]?e[s.op][u]:void 0)&&(n=void 0!==s.value&&void 0!==s.value[u]?s.value[u]:null),"SID"===s.type[u]&&(n=Re(r,n)),i[u]=n;a[s.name]=i}else void 0===(n=e[s.op])&&(n=void 0!==s.value?s.value:null),"SID"===s.type&&(n=Re(r,n)),a[s.name]=n}return a}var Le=[{name:"version",op:0,type:"SID"},{name:"notice",op:1,type:"SID"},{name:"copyright",op:1200,type:"SID"},{name:"fullName",op:2,type:"SID"},{name:"familyName",op:3,type:"SID"},{name:"weight",op:4,type:"SID"},{name:"isFixedPitch",op:1201,type:"number",value:0},{name:"italicAngle",op:1202,type:"number",value:0},{name:"underlinePosition",op:1203,type:"number",value:-100},{name:"underlineThickness",op:1204,type:"number",value:50},{name:"paintType",op:1205,type:"number",value:0},{name:"charstringType",op:1206,type:"number",value:2},{name:"fontMatrix",op:1207,type:["real","real","real","real","real","real"],value:[.001,0,0,.001,0,0]},{name:"uniqueId",op:13,type:"number"},{name:"fontBBox",op:5,type:["number","number","number","number"],value:[0,0,0,0]},{name:"strokeWidth",op:1208,type:"number",value:0},{name:"xuid",op:14,type:[],value:null},{name:"charset",op:15,type:"offset",value:0},{name:"encoding",op:16,type:"offset",value:0},{name:"charStrings",op:17,type:"offset",value:0},{name:"private",op:18,type:["number","offset"],value:[0,0]},{name:"ros",op:1230,type:["SID","SID","number"]},{name:"cidFontVersion",op:1231,type:"number",value:0},{name:"cidFontRevision",op:1232,type:"number",value:0},{name:"cidFontType",op:1233,type:"number",value:0},{name:"cidCount",op:1234,type:"number",value:8720},{name:"uidBase",op:1235,type:"number"},{name:"fdArray",op:1236,type:"offset"},{name:"fdSelect",op:1237,type:"offset"},{name:"fontName",op:1238,type:"SID"}],Ce=[{name:"subrs",op:19,type:"offset",value:0},{name:"defaultWidthX",op:20,type:"number",value:0},{name:"nominalWidthX",op:21,type:"number",value:0}];function De(e,t){return we(Ee(e,0,e.byteLength),Le,t)}function Ie(e,t,r,n){return we(Ee(e,t,r),Ce,n)}function Ae(e,t,r,n){for(var a=[],o=0;o<r.length;o+=1){var s=De(new DataView(new Uint8Array(r[o]).buffer),n);s._subrs=[],s._subrsBias=0,s._defaultWidthX=0,s._nominalWidthX=0;var i=s.private[0],u=s.private[1];if(0!==i&&0!==u){var l=Ie(e,u+t,i,n);if(s._defaultWidthX=l.defaultWidthX,s._nominalWidthX=l.nominalWidthX,0!==l.subrs){var p=Ue(e,u+l.subrs+t);s._subrs=p.objects,s._subrsBias=ke(s._subrs)}s._privateDict=l}a.push(s)}return a}function Ge(e,t,r){var n,a,o,s,i,u,l,p,c=new R,h=[],f=0,d=!1,v=!1,g=0,m=0;if(e.isCIDFont){var y=e.tables.cff.topDict._fdSelect[t.index],b=e.tables.cff.topDict._fdArray[y];i=b._subrs,u=b._subrsBias,l=b._defaultWidthX,p=b._nominalWidthX}else i=e.tables.cff.topDict._subrs,u=e.tables.cff.topDict._subrsBias,l=e.tables.cff.topDict._defaultWidthX,p=e.tables.cff.topDict._nominalWidthX;var x=l;function S(e,t){v&&c.closePath(),c.moveTo(e,t),v=!0}function M(){h.length%2!=0&&!d&&(x=h.shift()+p),f+=h.length>>1,h.length=0,d=!0}return function r(l){for(var y,b,T,k,U,O,E,R,w,L,C,D,I=0;I<l.length;){var A=l[I];switch(I+=1,A){case 1:case 3:case 18:case 23:M();break;case 4:h.length>1&&!d&&(x=h.shift()+p,d=!0),m+=h.pop(),S(g,m);break;case 5:for(;h.length>0;)g+=h.shift(),m+=h.shift(),c.lineTo(g,m);break;case 6:for(;h.length>0&&(g+=h.shift(),c.lineTo(g,m),0!==h.length);)m+=h.shift(),c.lineTo(g,m);break;case 7:for(;h.length>0&&(m+=h.shift(),c.lineTo(g,m),0!==h.length);)g+=h.shift(),c.lineTo(g,m);break;case 8:for(;h.length>0;)n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s+h.shift(),c.curveTo(n,a,o,s,g,m);break;case 10:U=h.pop()+u,(O=i[U])&&r(O);break;case 11:return;case 12:switch(A=l[I],I+=1,A){case 35:n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),E=o+h.shift(),R=s+h.shift(),w=E+h.shift(),L=R+h.shift(),C=w+h.shift(),D=L+h.shift(),g=C+h.shift(),m=D+h.shift(),h.shift(),c.curveTo(n,a,o,s,E,R),c.curveTo(w,L,C,D,g,m);break;case 34:n=g+h.shift(),a=m,o=n+h.shift(),s=a+h.shift(),E=o+h.shift(),R=s,w=E+h.shift(),L=s,C=w+h.shift(),D=m,g=C+h.shift(),c.curveTo(n,a,o,s,E,R),c.curveTo(w,L,C,D,g,m);break;case 36:n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),E=o+h.shift(),R=s,w=E+h.shift(),L=s,C=w+h.shift(),D=L+h.shift(),g=C+h.shift(),c.curveTo(n,a,o,s,E,R),c.curveTo(w,L,C,D,g,m);break;case 37:n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),E=o+h.shift(),R=s+h.shift(),w=E+h.shift(),L=R+h.shift(),C=w+h.shift(),D=L+h.shift(),Math.abs(C-g)>Math.abs(D-m)?g=C+h.shift():m=D+h.shift(),c.curveTo(n,a,o,s,E,R),c.curveTo(w,L,C,D,g,m);break;default:console.log("Glyph "+t.index+": unknown operator 1200"+A),h.length=0}break;case 14:h.length>0&&!d&&(x=h.shift()+p,d=!0),v&&(c.closePath(),v=!1);break;case 19:case 20:M(),I+=f+7>>3;break;case 21:h.length>2&&!d&&(x=h.shift()+p,d=!0),m+=h.pop(),S(g+=h.pop(),m);break;case 22:h.length>1&&!d&&(x=h.shift()+p,d=!0),S(g+=h.pop(),m);break;case 24:for(;h.length>2;)n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s+h.shift(),c.curveTo(n,a,o,s,g,m);g+=h.shift(),m+=h.shift(),c.lineTo(g,m);break;case 25:for(;h.length>6;)g+=h.shift(),m+=h.shift(),c.lineTo(g,m);n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s+h.shift(),c.curveTo(n,a,o,s,g,m);break;case 26:for(h.length%2&&(g+=h.shift());h.length>0;)n=g,a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o,m=s+h.shift(),c.curveTo(n,a,o,s,g,m);break;case 27:for(h.length%2&&(m+=h.shift());h.length>0;)n=g+h.shift(),a=m,o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s,c.curveTo(n,a,o,s,g,m);break;case 28:y=l[I],b=l[I+1],h.push((y<<24|b<<16)>>16),I+=2;break;case 29:U=h.pop()+e.gsubrsBias,(O=e.gsubrs[U])&&r(O);break;case 30:for(;h.length>0&&(n=g,a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s+(1===h.length?h.shift():0),c.curveTo(n,a,o,s,g,m),0!==h.length);)n=g+h.shift(),a=m,o=n+h.shift(),s=a+h.shift(),m=s+h.shift(),g=o+(1===h.length?h.shift():0),c.curveTo(n,a,o,s,g,m);break;case 31:for(;h.length>0&&(n=g+h.shift(),a=m,o=n+h.shift(),s=a+h.shift(),m=s+h.shift(),g=o+(1===h.length?h.shift():0),c.curveTo(n,a,o,s,g,m),0!==h.length);)n=g,a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s+(1===h.length?h.shift():0),c.curveTo(n,a,o,s,g,m);break;default:A<32?console.log("Glyph "+t.index+": unknown operator "+A):A<247?h.push(A-139):A<251?(y=l[I],I+=1,h.push(256*(A-247)+y+108)):A<255?(y=l[I],I+=1,h.push(256*-(A-251)-y-108)):(y=l[I],b=l[I+1],T=l[I+2],k=l[I+3],I+=4,h.push((y<<24|b<<16|T<<8|k)/65536))}}}(r),t.advanceWidth=x,c}function Be(e,t){var r,n=pe.indexOf(e);return n>=0&&(r=n),(n=t.indexOf(e))>=0?r=n+pe.length:(r=pe.length+t.length,t.push(e)),r}function Fe(e,t,r){for(var n={},a=0;a<e.length;a+=1){var o=e[a],s=t[o.name];void 0===s||Te(s,o.value)||("SID"===o.type&&(s=Be(s,r)),n[o.op]={name:o.name,type:o.type,value:s})}return n}function Pe(e,t){var r=new $.Record("Top DICT",[{name:"dict",type:"DICT",value:{}}]);return r.dict=Fe(Le,e,t),r}function Ne(e){var t=new $.Record("Top DICT INDEX",[{name:"topDicts",type:"INDEX",value:[]}]);return t.topDicts=[{name:"topDict_0",type:"TABLE",value:e}],t}function He(e){var t=[],r=e.path;t.push({name:"width",type:"NUMBER",value:e.advanceWidth});for(var n=0,a=0,o=0;o<r.commands.length;o+=1){var s=void 0,i=void 0,u=r.commands[o];if("Q"===u.type){var l=1/3,p=2/3;u={type:"C",x:u.x,y:u.y,x1:Math.round(l*n+p*u.x1),y1:Math.round(l*a+p*u.y1),x2:Math.round(l*u.x+p*u.x1),y2:Math.round(l*u.y+p*u.y1)}}if("M"===u.type)s=Math.round(u.x-n),i=Math.round(u.y-a),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rmoveto",type:"OP",value:21}),n=Math.round(u.x),a=Math.round(u.y);else if("L"===u.type)s=Math.round(u.x-n),i=Math.round(u.y-a),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rlineto",type:"OP",value:5}),n=Math.round(u.x),a=Math.round(u.y);else if("C"===u.type){var c=Math.round(u.x1-n),h=Math.round(u.y1-a),f=Math.round(u.x2-u.x1),d=Math.round(u.y2-u.y1);s=Math.round(u.x-u.x2),i=Math.round(u.y-u.y2),t.push({name:"dx1",type:"NUMBER",value:c}),t.push({name:"dy1",type:"NUMBER",value:h}),t.push({name:"dx2",type:"NUMBER",value:f}),t.push({name:"dy2",type:"NUMBER",value:d}),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rrcurveto",type:"OP",value:8}),n=Math.round(u.x),a=Math.round(u.y)}}return t.push({name:"endchar",type:"OP",value:14}),t}var ze={parse:function(e,t,r,n){r.tables.cff={};var a=function(e,t){var r={};return r.formatMajor=ie.getCard8(e,t),r.formatMinor=ie.getCard8(e,t+1),r.size=ie.getCard8(e,t+2),r.offsetSize=ie.getCard8(e,t+3),r.startOffset=t,r.endOffset=t+4,r}(e,t),o=Ue(e,a.endOffset,ie.bytesToString),s=Ue(e,o.endOffset),i=Ue(e,s.endOffset,ie.bytesToString),u=Ue(e,i.endOffset);r.gsubrs=u.objects,r.gsubrsBias=ke(r.gsubrs);var l=Ae(e,t,s.objects,i.objects);if(1!==l.length)throw new Error("CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = "+l.length);var p=l[0];if(r.tables.cff.topDict=p,p._privateDict&&(r.defaultWidthX=p._privateDict.defaultWidthX,r.nominalWidthX=p._privateDict.nominalWidthX),void 0!==p.ros[0]&&void 0!==p.ros[1]&&(r.isCIDFont=!0),r.isCIDFont){var c=p.fdArray,h=p.fdSelect;if(0===c||0===h)throw new Error("Font is marked as a CID font, but FDArray and/or FDSelect information is missing");var f=Ue(e,c+=t),d=Ae(e,t,f.objects,i.objects);p._fdArray=d,h+=t,p._fdSelect=function(e,t,r,n){var a,o=[],s=new ie.Parser(e,t),i=s.parseCard8();if(0===i)for(var u=0;u<r;u++){if((a=s.parseCard8())>=n)throw new Error("CFF table CID Font FDSelect has bad FD index value "+a+" (FD count "+n+")");o.push(a)}else{if(3!==i)throw new Error("CFF Table CID Font FDSelect table has unsupported format "+i);var l,p=s.parseCard16(),c=s.parseCard16();if(0!==c)throw new Error("CFF Table CID Font FDSelect format 3 range has bad initial GID "+c);for(var h=0;h<p;h++){if(a=s.parseCard8(),l=s.parseCard16(),a>=n)throw new Error("CFF table CID Font FDSelect has bad FD index value "+a+" (FD count "+n+")");if(l>r)throw new Error("CFF Table CID Font FDSelect format 3 range has bad GID "+l);for(;c<l;c++)o.push(a);c=l}if(l!==r)throw new Error("CFF Table CID Font FDSelect format 3 range has bad final GID "+l)}return o}(e,h,r.numGlyphs,d.length)}var v,g=t+p.private[1],m=Ie(e,g,p.private[0],i.objects);if(r.defaultWidthX=m.defaultWidthX,r.nominalWidthX=m.nominalWidthX,0!==m.subrs){var y=g+m.subrs,b=Ue(e,y);r.subrs=b.objects,r.subrsBias=ke(r.subrs)}else r.subrs=[],r.subrsBias=0;n.lowMemory?(v=function(e,t){var r,n,a=[],o=ie.getCard16(e,t);if(0!==o){var s=ie.getByte(e,t+2);r=t+(o+1)*s+2;for(var i=t+3,u=0;u<o+1;u+=1)a.push(ie.getOffset(e,i,s)),i+=s;n=r+a[o]}else n=t+2;return{offsets:a,startOffset:t,endOffset:n}}(e,t+p.charStrings),r.nGlyphs=v.offsets.length):(v=Ue(e,t+p.charStrings),r.nGlyphs=v.objects.length);var x=function(e,t,r,n){var a,o,s=new ie.Parser(e,t);r-=1;var i=[".notdef"],u=s.parseCard8();if(0===u)for(var l=0;l<r;l+=1)a=s.parseSID(),i.push(Re(n,a));else if(1===u)for(;i.length<=r;){a=s.parseSID(),o=s.parseCard8();for(var p=0;p<=o;p+=1)i.push(Re(n,a)),a+=1}else{if(2!==u)throw new Error("Unknown charset format "+u);for(;i.length<=r;){a=s.parseSID(),o=s.parseCard16();for(var c=0;c<=o;c+=1)i.push(Re(n,a)),a+=1}}return i}(e,t+p.charset,r.nGlyphs,i.objects);if(0===p.encoding?r.cffEncoding=new ge(ce,x):1===p.encoding?r.cffEncoding=new ge(he,x):r.cffEncoding=function(e,t,r){var n,a={},o=new ie.Parser(e,t),s=o.parseCard8();if(0===s)for(var i=o.parseCard8(),u=0;u<i;u+=1)a[n=o.parseCard8()]=u;else{if(1!==s)throw new Error("Unknown encoding format "+s);var l=o.parseCard8();n=1;for(var p=0;p<l;p+=1)for(var c=o.parseCard8(),h=o.parseCard8(),f=c;f<=c+h;f+=1)a[f]=n,n+=1}return new ge(a,r)}(e,t+p.encoding,x),r.encoding=r.encoding||r.cffEncoding,r.glyphs=new Me.GlyphSet(r),n.lowMemory)r._push=function(n){var a=function(e,t,r,n,a){var o=ie.getCard16(r,n),s=0;0!==o&&(s=n+(o+1)*ie.getByte(r,n+2)+2);var i=ie.getBytes(r,s+t[e],s+t[e+1]);return i}(n,v.offsets,e,t+p.charStrings);r.glyphs.push(n,Me.cffGlyphLoader(r,n,Ge,a))};else for(var S=0;S<r.nGlyphs;S+=1){var M=v.objects[S];r.glyphs.push(S,Me.cffGlyphLoader(r,S,Ge,M))}},make:function(e,t){for(var r,n=new $.Table("CFF ",[{name:"header",type:"RECORD"},{name:"nameIndex",type:"RECORD"},{name:"topDictIndex",type:"RECORD"},{name:"stringIndex",type:"RECORD"},{name:"globalSubrIndex",type:"RECORD"},{name:"charsets",type:"RECORD"},{name:"charStringsIndex",type:"RECORD"},{name:"privateDict",type:"RECORD"}]),a=1/t.unitsPerEm,o={version:t.version,fullName:t.fullName,familyName:t.familyName,weight:t.weightName,fontBBox:t.fontBBox||[0,0,0,0],fontMatrix:[a,0,0,a,0,0],charset:999,encoding:0,charStrings:999,private:[0,999]},s=[],i=1;i<e.length;i+=1)r=e.get(i),s.push(r.name);var u=[];n.header=new $.Record("Header",[{name:"major",type:"Card8",value:1},{name:"minor",type:"Card8",value:0},{name:"hdrSize",type:"Card8",value:4},{name:"major",type:"Card8",value:1}]),n.nameIndex=function(e){var t=new $.Record("Name INDEX",[{name:"names",type:"INDEX",value:[]}]);t.names=[];for(var r=0;r<e.length;r+=1)t.names.push({name:"name_"+r,type:"NAME",value:e[r]});return t}([t.postScriptName]);var l=Pe(o,u);n.topDictIndex=Ne(l),n.globalSubrIndex=new $.Record("Global Subr INDEX",[{name:"subrs",type:"INDEX",value:[]}]),n.charsets=function(e,t){for(var r=new $.Record("Charsets",[{name:"format",type:"Card8",value:0}]),n=0;n<e.length;n+=1){var a=Be(e[n],t);r.fields.push({name:"glyph_"+n,type:"SID",value:a})}return r}(s,u),n.charStringsIndex=function(e){for(var t=new $.Record("CharStrings INDEX",[{name:"charStrings",type:"INDEX",value:[]}]),r=0;r<e.length;r+=1){var n=e.get(r),a=He(n);t.charStrings.push({name:n.name,type:"CHARSTRING",value:a})}return t}(e),n.privateDict=function(e,t){var r=new $.Record("Private DICT",[{name:"dict",type:"DICT",value:{}}]);return r.dict=Fe(Ce,{},t),r}(0,u),n.stringIndex=function(e){var t=new $.Record("String INDEX",[{name:"strings",type:"INDEX",value:[]}]);t.strings=[];for(var r=0;r<e.length;r+=1)t.strings.push({name:"string_"+r,type:"STRING",value:e[r]});return t}(u);var p=n.header.sizeOf()+n.nameIndex.sizeOf()+n.topDictIndex.sizeOf()+n.stringIndex.sizeOf()+n.globalSubrIndex.sizeOf();return o.charset=p,o.encoding=0,o.charStrings=o.charset+n.charsets.sizeOf(),o.private[1]=o.charStrings+n.charStringsIndex.sizeOf(),l=Pe(o,u),n.topDictIndex=Ne(l),n}},qe={parse:function(e,t){var r={},n=new ie.Parser(e,t);return r.version=n.parseVersion(),r.fontRevision=Math.round(1e3*n.parseFixed())/1e3,r.checkSumAdjustment=n.parseULong(),r.magicNumber=n.parseULong(),C.argument(1594834165===r.magicNumber,"Font header has wrong magic number."),r.flags=n.parseUShort(),r.unitsPerEm=n.parseUShort(),r.created=n.parseLongDateTime(),r.modified=n.parseLongDateTime(),r.xMin=n.parseShort(),r.yMin=n.parseShort(),r.xMax=n.parseShort(),r.yMax=n.parseShort(),r.macStyle=n.parseUShort(),r.lowestRecPPEM=n.parseUShort(),r.fontDirectionHint=n.parseShort(),r.indexToLocFormat=n.parseShort(),r.glyphDataFormat=n.parseShort(),r},make:function(e){var t=Math.round((new Date).getTime()/1e3)+2082844800,r=t;return e.createdTimestamp&&(r=e.createdTimestamp+2082844800),new $.Table("head",[{name:"version",type:"FIXED",value:65536},{name:"fontRevision",type:"FIXED",value:65536},{name:"checkSumAdjustment",type:"ULONG",value:0},{name:"magicNumber",type:"ULONG",value:1594834165},{name:"flags",type:"USHORT",value:0},{name:"unitsPerEm",type:"USHORT",value:1e3},{name:"created",type:"LONGDATETIME",value:r},{name:"modified",type:"LONGDATETIME",value:t},{name:"xMin",type:"SHORT",value:0},{name:"yMin",type:"SHORT",value:0},{name:"xMax",type:"SHORT",value:0},{name:"yMax",type:"SHORT",value:0},{name:"macStyle",type:"USHORT",value:0},{name:"lowestRecPPEM",type:"USHORT",value:0},{name:"fontDirectionHint",type:"SHORT",value:2},{name:"indexToLocFormat",type:"SHORT",value:0},{name:"glyphDataFormat",type:"SHORT",value:0}],e)}},We={parse:function(e,t){var r={},n=new ie.Parser(e,t);return r.version=n.parseVersion(),r.ascender=n.parseShort(),r.descender=n.parseShort(),r.lineGap=n.parseShort(),r.advanceWidthMax=n.parseUShort(),r.minLeftSideBearing=n.parseShort(),r.minRightSideBearing=n.parseShort(),r.xMaxExtent=n.parseShort(),r.caretSlopeRise=n.parseShort(),r.caretSlopeRun=n.parseShort(),r.caretOffset=n.parseShort(),n.relativeOffset+=8,r.metricDataFormat=n.parseShort(),r.numberOfHMetrics=n.parseUShort(),r},make:function(e){return new $.Table("hhea",[{name:"version",type:"FIXED",value:65536},{name:"ascender",type:"FWORD",value:0},{name:"descender",type:"FWORD",value:0},{name:"lineGap",type:"FWORD",value:0},{name:"advanceWidthMax",type:"UFWORD",value:0},{name:"minLeftSideBearing",type:"FWORD",value:0},{name:"minRightSideBearing",type:"FWORD",value:0},{name:"xMaxExtent",type:"FWORD",value:0},{name:"caretSlopeRise",type:"SHORT",value:1},{name:"caretSlopeRun",type:"SHORT",value:0},{name:"caretOffset",type:"SHORT",value:0},{name:"reserved1",type:"SHORT",value:0},{name:"reserved2",type:"SHORT",value:0},{name:"reserved3",type:"SHORT",value:0},{name:"reserved4",type:"SHORT",value:0},{name:"metricDataFormat",type:"SHORT",value:0},{name:"numberOfHMetrics",type:"USHORT",value:0}],e)}},_e={parse:function(e,t,r,n,a,o,s){s.lowMemory?function(e,t,r,n,a){var o,s;e._hmtxTableData={};for(var i=new ie.Parser(t,r),u=0;u<a;u+=1)u<n&&(o=i.parseUShort(),s=i.parseShort()),e._hmtxTableData[u]={advanceWidth:o,leftSideBearing:s}}(e,t,r,n,a):function(e,t,r,n,a){for(var o,s,i=new ie.Parser(e,t),u=0;u<n;u+=1){u<r&&(o=i.parseUShort(),s=i.parseShort());var l=a.get(u);l.advanceWidth=o,l.leftSideBearing=s}}(t,r,n,a,o)},make:function(e){for(var t=new $.Table("hmtx",[]),r=0;r<e.length;r+=1){var n=e.get(r),a=n.advanceWidth||0,o=n.leftSideBearing||0;t.fields.push({name:"advanceWidth_"+r,type:"USHORT",value:a}),t.fields.push({name:"leftSideBearing_"+r,type:"SHORT",value:o})}return t}},Xe={make:function(e){for(var t=new $.Table("ltag",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"numTags",type:"ULONG",value:e.length}]),r="",n=12+4*e.length,a=0;a<e.length;++a){var o=r.indexOf(e[a]);o<0&&(o=r.length,r+=e[a]),t.fields.push({name:"offset "+a,type:"USHORT",value:n+o}),t.fields.push({name:"length "+a,type:"USHORT",value:e[a].length})}return t.fields.push({name:"stringPool",type:"CHARARRAY",value:r}),t},parse:function(e,t){var r=new ie.Parser(e,t),n=r.parseULong();C.argument(1===n,"Unsupported ltag table version."),r.skip("uLong",1);for(var a=r.parseULong(),o=[],s=0;s<a;s++){for(var i="",u=t+r.parseUShort(),l=r.parseUShort(),p=u;p<u+l;++p)i+=String.fromCharCode(e.getInt8(p));o.push(i)}return o}},Ve={parse:function(e,t){var r={},n=new ie.Parser(e,t);return r.version=n.parseVersion(),r.numGlyphs=n.parseUShort(),1===r.version&&(r.maxPoints=n.parseUShort(),r.maxContours=n.parseUShort(),r.maxCompositePoints=n.parseUShort(),r.maxCompositeContours=n.parseUShort(),r.maxZones=n.parseUShort(),r.maxTwilightPoints=n.parseUShort(),r.maxStorage=n.parseUShort(),r.maxFunctionDefs=n.parseUShort(),r.maxInstructionDefs=n.parseUShort(),r.maxStackElements=n.parseUShort(),r.maxSizeOfInstructions=n.parseUShort(),r.maxComponentElements=n.parseUShort(),r.maxComponentDepth=n.parseUShort()),r},make:function(e){return new $.Table("maxp",[{name:"version",type:"FIXED",value:20480},{name:"numGlyphs",type:"USHORT",value:e}])}},Ze=["copyright","fontFamily","fontSubfamily","uniqueID","fullName","version","postScriptName","trademark","manufacturer","designer","description","manufacturerURL","designerURL","license","licenseURL","reserved","preferredFamily","preferredSubfamily","compatibleFullName","sampleText","postScriptFindFontName","wwsFamily","wwsSubfamily"],je={0:"en",1:"fr",2:"de",3:"it",4:"nl",5:"sv",6:"es",7:"da",8:"pt",9:"no",10:"he",11:"ja",12:"ar",13:"fi",14:"el",15:"is",16:"mt",17:"tr",18:"hr",19:"zh-Hant",20:"ur",21:"hi",22:"th",23:"ko",24:"lt",25:"pl",26:"hu",27:"es",28:"lv",29:"se",30:"fo",31:"fa",32:"ru",33:"zh",34:"nl-BE",35:"ga",36:"sq",37:"ro",38:"cz",39:"sk",40:"si",41:"yi",42:"sr",43:"mk",44:"bg",45:"uk",46:"be",47:"uz",48:"kk",49:"az-Cyrl",50:"az-Arab",51:"hy",52:"ka",53:"mo",54:"ky",55:"tg",56:"tk",57:"mn-CN",58:"mn",59:"ps",60:"ks",61:"ku",62:"sd",63:"bo",64:"ne",65:"sa",66:"mr",67:"bn",68:"as",69:"gu",70:"pa",71:"or",72:"ml",73:"kn",74:"ta",75:"te",76:"si",77:"my",78:"km",79:"lo",80:"vi",81:"id",82:"tl",83:"ms",84:"ms-Arab",85:"am",86:"ti",87:"om",88:"so",89:"sw",90:"rw",91:"rn",92:"ny",93:"mg",94:"eo",128:"cy",129:"eu",130:"ca",131:"la",132:"qu",133:"gn",134:"ay",135:"tt",136:"ug",137:"dz",138:"jv",139:"su",140:"gl",141:"af",142:"br",143:"iu",144:"gd",145:"gv",146:"ga",147:"to",148:"el-polyton",149:"kl",150:"az",151:"nn"},Ye={0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:5,11:1,12:4,13:0,14:6,15:0,16:0,17:0,18:0,19:2,20:4,21:9,22:21,23:3,24:29,25:29,26:29,27:29,28:29,29:0,30:0,31:4,32:7,33:25,34:0,35:0,36:0,37:0,38:29,39:29,40:0,41:5,42:7,43:7,44:7,45:7,46:7,47:7,48:7,49:7,50:4,51:24,52:23,53:7,54:7,55:7,56:7,57:27,58:7,59:4,60:4,61:4,62:4,63:26,64:9,65:9,66:9,67:13,68:13,69:11,70:10,71:12,72:17,73:16,74:14,75:15,76:18,77:19,78:20,79:22,80:30,81:0,82:0,83:0,84:4,85:28,86:28,87:28,88:0,89:0,90:0,91:0,92:0,93:0,94:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:7,136:4,137:26,138:0,139:0,140:0,141:0,142:0,143:28,144:0,145:0,146:0,147:0,148:6,149:0,150:0,151:0},Qe={1078:"af",1052:"sq",1156:"gsw",1118:"am",5121:"ar-DZ",15361:"ar-BH",3073:"ar",2049:"ar-IQ",11265:"ar-JO",13313:"ar-KW",12289:"ar-LB",4097:"ar-LY",6145:"ary",8193:"ar-OM",16385:"ar-QA",1025:"ar-SA",10241:"ar-SY",7169:"aeb",14337:"ar-AE",9217:"ar-YE",1067:"hy",1101:"as",2092:"az-Cyrl",1068:"az",1133:"ba",1069:"eu",1059:"be",2117:"bn",1093:"bn-IN",8218:"bs-Cyrl",5146:"bs",1150:"br",1026:"bg",1027:"ca",3076:"zh-HK",5124:"zh-MO",2052:"zh",4100:"zh-SG",1028:"zh-TW",1155:"co",1050:"hr",4122:"hr-BA",1029:"cs",1030:"da",1164:"prs",1125:"dv",2067:"nl-BE",1043:"nl",3081:"en-AU",10249:"en-BZ",4105:"en-CA",9225:"en-029",16393:"en-IN",6153:"en-IE",8201:"en-JM",17417:"en-MY",5129:"en-NZ",13321:"en-PH",18441:"en-SG",7177:"en-ZA",11273:"en-TT",2057:"en-GB",1033:"en",12297:"en-ZW",1061:"et",1080:"fo",1124:"fil",1035:"fi",2060:"fr-BE",3084:"fr-CA",1036:"fr",5132:"fr-LU",6156:"fr-MC",4108:"fr-CH",1122:"fy",1110:"gl",1079:"ka",3079:"de-AT",1031:"de",5127:"de-LI",4103:"de-LU",2055:"de-CH",1032:"el",1135:"kl",1095:"gu",1128:"ha",1037:"he",1081:"hi",1038:"hu",1039:"is",1136:"ig",1057:"id",1117:"iu",2141:"iu-Latn",2108:"ga",1076:"xh",1077:"zu",1040:"it",2064:"it-CH",1041:"ja",1099:"kn",1087:"kk",1107:"km",1158:"quc",1159:"rw",1089:"sw",1111:"kok",1042:"ko",1088:"ky",1108:"lo",1062:"lv",1063:"lt",2094:"dsb",1134:"lb",1071:"mk",2110:"ms-BN",1086:"ms",1100:"ml",1082:"mt",1153:"mi",1146:"arn",1102:"mr",1148:"moh",1104:"mn",2128:"mn-CN",1121:"ne",1044:"nb",2068:"nn",1154:"oc",1096:"or",1123:"ps",1045:"pl",1046:"pt",2070:"pt-PT",1094:"pa",1131:"qu-BO",2155:"qu-EC",3179:"qu",1048:"ro",1047:"rm",1049:"ru",9275:"smn",4155:"smj-NO",5179:"smj",3131:"se-FI",1083:"se",2107:"se-SE",8251:"sms",6203:"sma-NO",7227:"sms",1103:"sa",7194:"sr-Cyrl-BA",3098:"sr",6170:"sr-Latn-BA",2074:"sr-Latn",1132:"nso",1074:"tn",1115:"si",1051:"sk",1060:"sl",11274:"es-AR",16394:"es-BO",13322:"es-CL",9226:"es-CO",5130:"es-CR",7178:"es-DO",12298:"es-EC",17418:"es-SV",4106:"es-GT",18442:"es-HN",2058:"es-MX",19466:"es-NI",6154:"es-PA",15370:"es-PY",10250:"es-PE",20490:"es-PR",3082:"es",1034:"es",21514:"es-US",14346:"es-UY",8202:"es-VE",2077:"sv-FI",1053:"sv",1114:"syr",1064:"tg",2143:"tzm",1097:"ta",1092:"tt",1098:"te",1054:"th",1105:"bo",1055:"tr",1090:"tk",1152:"ug",1058:"uk",1070:"hsb",1056:"ur",2115:"uz-Cyrl",1091:"uz",1066:"vi",1106:"cy",1160:"wo",1157:"sah",1144:"ii",1130:"yo"};function Ke(e,t,r){switch(e){case 0:if(65535===t)return"und";if(r)return r[t];break;case 1:return je[t];case 3:return Qe[t]}}var Je="utf-16",$e={0:"macintosh",1:"x-mac-japanese",2:"x-mac-chinesetrad",3:"x-mac-korean",6:"x-mac-greek",7:"x-mac-cyrillic",9:"x-mac-devanagai",10:"x-mac-gurmukhi",11:"x-mac-gujarati",12:"x-mac-oriya",13:"x-mac-bengali",14:"x-mac-tamil",15:"x-mac-telugu",16:"x-mac-kannada",17:"x-mac-malayalam",18:"x-mac-sinhalese",19:"x-mac-burmese",20:"x-mac-khmer",21:"x-mac-thai",22:"x-mac-lao",23:"x-mac-georgian",24:"x-mac-armenian",25:"x-mac-chinesesimp",26:"x-mac-tibetan",27:"x-mac-mongolian",28:"x-mac-ethiopic",29:"x-mac-ce",30:"x-mac-vietnamese",31:"x-mac-extarabic"},et={15:"x-mac-icelandic",17:"x-mac-turkish",18:"x-mac-croatian",24:"x-mac-ce",25:"x-mac-ce",26:"x-mac-ce",27:"x-mac-ce",28:"x-mac-ce",30:"x-mac-icelandic",37:"x-mac-romanian",38:"x-mac-ce",39:"x-mac-ce",40:"x-mac-ce",143:"x-mac-inuit",146:"x-mac-gaelic"};function tt(e,t,r){switch(e){case 0:return Je;case 1:return et[r]||$e[t];case 3:if(1===t||10===t)return Je}}function rt(e){var t={};for(var r in e)t[e[r]]=parseInt(r);return t}function nt(e,t,r,n,a,o){return new $.Record("NameRecord",[{name:"platformID",type:"USHORT",value:e},{name:"encodingID",type:"USHORT",value:t},{name:"languageID",type:"USHORT",value:r},{name:"nameID",type:"USHORT",value:n},{name:"length",type:"USHORT",value:a},{name:"offset",type:"USHORT",value:o}])}function at(e,t){var r=function(e,t){var r=e.length,n=t.length-r+1;e:for(var a=0;a<n;a++)for(;a<n;a++){for(var o=0;o<r;o++)if(t[a+o]!==e[o])continue e;return a}return-1}(e,t);if(r<0){r=t.length;for(var n=0,a=e.length;n<a;++n)t.push(e[n])}return r}var ot={parse:function(e,t,r){for(var n={},a=new ie.Parser(e,t),o=a.parseUShort(),s=a.parseUShort(),i=a.offset+a.parseUShort(),u=0;u<s;u++){var l=a.parseUShort(),p=a.parseUShort(),c=a.parseUShort(),h=a.parseUShort(),f=Ze[h]||h,d=a.parseUShort(),v=a.parseUShort(),g=Ke(l,c,r),m=tt(l,p,c);if(void 0!==m&&void 0!==g){var y;if(y=m===Je?I.UTF16(e,i+v,d):I.MACSTRING(e,i+v,d,m)){var b=n[f];void 0===b&&(b=n[f]={}),b[g]=y}}}return 1===o&&a.parseUShort(),n},make:function(e,t){var r,n=[],a={},o=rt(Ze);for(var s in e){var i=o[s];if(void 0===i&&(i=s),r=parseInt(i),isNaN(r))throw new Error('Name table entry "'+s+'" does not exist, see nameTableNames for complete list.');a[r]=e[s],n.push(r)}for(var u=rt(je),l=rt(Qe),p=[],c=[],h=0;h<n.length;h++){var f=a[r=n[h]];for(var d in f){var v=f[d],g=1,m=u[d],y=Ye[m],b=tt(g,y,m),x=A.MACSTRING(v,b);void 0===x&&(g=0,(m=t.indexOf(d))<0&&(m=t.length,t.push(d)),y=4,x=A.UTF16(v));var S=at(x,c);p.push(nt(g,y,m,r,x.length,S));var M=l[d];if(void 0!==M){var T=A.UTF16(v),k=at(T,c);p.push(nt(3,1,M,r,T.length,k))}}}p.sort((function(e,t){return e.platformID-t.platformID||e.encodingID-t.encodingID||e.languageID-t.languageID||e.nameID-t.nameID}));for(var U=new $.Table("name",[{name:"format",type:"USHORT",value:0},{name:"count",type:"USHORT",value:p.length},{name:"stringOffset",type:"USHORT",value:6+12*p.length}]),O=0;O<p.length;O++)U.fields.push({name:"record_"+O,type:"RECORD",value:p[O]});return U.fields.push({name:"strings",type:"LITERAL",value:c}),U}},st=[{begin:0,end:127},{begin:128,end:255},{begin:256,end:383},{begin:384,end:591},{begin:592,end:687},{begin:688,end:767},{begin:768,end:879},{begin:880,end:1023},{begin:11392,end:11519},{begin:1024,end:1279},{begin:1328,end:1423},{begin:1424,end:1535},{begin:42240,end:42559},{begin:1536,end:1791},{begin:1984,end:2047},{begin:2304,end:2431},{begin:2432,end:2559},{begin:2560,end:2687},{begin:2688,end:2815},{begin:2816,end:2943},{begin:2944,end:3071},{begin:3072,end:3199},{begin:3200,end:3327},{begin:3328,end:3455},{begin:3584,end:3711},{begin:3712,end:3839},{begin:4256,end:4351},{begin:6912,end:7039},{begin:4352,end:4607},{begin:7680,end:7935},{begin:7936,end:8191},{begin:8192,end:8303},{begin:8304,end:8351},{begin:8352,end:8399},{begin:8400,end:8447},{begin:8448,end:8527},{begin:8528,end:8591},{begin:8592,end:8703},{begin:8704,end:8959},{begin:8960,end:9215},{begin:9216,end:9279},{begin:9280,end:9311},{begin:9312,end:9471},{begin:9472,end:9599},{begin:9600,end:9631},{begin:9632,end:9727},{begin:9728,end:9983},{begin:9984,end:10175},{begin:12288,end:12351},{begin:12352,end:12447},{begin:12448,end:12543},{begin:12544,end:12591},{begin:12592,end:12687},{begin:43072,end:43135},{begin:12800,end:13055},{begin:13056,end:13311},{begin:44032,end:55215},{begin:55296,end:57343},{begin:67840,end:67871},{begin:19968,end:40959},{begin:57344,end:63743},{begin:12736,end:12783},{begin:64256,end:64335},{begin:64336,end:65023},{begin:65056,end:65071},{begin:65040,end:65055},{begin:65104,end:65135},{begin:65136,end:65279},{begin:65280,end:65519},{begin:65520,end:65535},{begin:3840,end:4095},{begin:1792,end:1871},{begin:1920,end:1983},{begin:3456,end:3583},{begin:4096,end:4255},{begin:4608,end:4991},{begin:5024,end:5119},{begin:5120,end:5759},{begin:5760,end:5791},{begin:5792,end:5887},{begin:6016,end:6143},{begin:6144,end:6319},{begin:10240,end:10495},{begin:40960,end:42127},{begin:5888,end:5919},{begin:66304,end:66351},{begin:66352,end:66383},{begin:66560,end:66639},{begin:118784,end:119039},{begin:119808,end:120831},{begin:1044480,end:1048573},{begin:65024,end:65039},{begin:917504,end:917631},{begin:6400,end:6479},{begin:6480,end:6527},{begin:6528,end:6623},{begin:6656,end:6687},{begin:11264,end:11359},{begin:11568,end:11647},{begin:19904,end:19967},{begin:43008,end:43055},{begin:65536,end:65663},{begin:65856,end:65935},{begin:66432,end:66463},{begin:66464,end:66527},{begin:66640,end:66687},{begin:66688,end:66735},{begin:67584,end:67647},{begin:68096,end:68191},{begin:119552,end:119647},{begin:73728,end:74751},{begin:119648,end:119679},{begin:7040,end:7103},{begin:7168,end:7247},{begin:7248,end:7295},{begin:43136,end:43231},{begin:43264,end:43311},{begin:43312,end:43359},{begin:43520,end:43615},{begin:65936,end:65999},{begin:66e3,end:66047},{begin:66208,end:66271},{begin:127024,end:127135}],it={parse:function(e,t){var r={},n=new ie.Parser(e,t);r.version=n.parseUShort(),r.xAvgCharWidth=n.parseShort(),r.usWeightClass=n.parseUShort(),r.usWidthClass=n.parseUShort(),r.fsType=n.parseUShort(),r.ySubscriptXSize=n.parseShort(),r.ySubscriptYSize=n.parseShort(),r.ySubscriptXOffset=n.parseShort(),r.ySubscriptYOffset=n.parseShort(),r.ySuperscriptXSize=n.parseShort(),r.ySuperscriptYSize=n.parseShort(),r.ySuperscriptXOffset=n.parseShort(),r.ySuperscriptYOffset=n.parseShort(),r.yStrikeoutSize=n.parseShort(),r.yStrikeoutPosition=n.parseShort(),r.sFamilyClass=n.parseShort(),r.panose=[];for(var a=0;a<10;a++)r.panose[a]=n.parseByte();return r.ulUnicodeRange1=n.parseULong(),r.ulUnicodeRange2=n.parseULong(),r.ulUnicodeRange3=n.parseULong(),r.ulUnicodeRange4=n.parseULong(),r.achVendID=String.fromCharCode(n.parseByte(),n.parseByte(),n.parseByte(),n.parseByte()),r.fsSelection=n.parseUShort(),r.usFirstCharIndex=n.parseUShort(),r.usLastCharIndex=n.parseUShort(),r.sTypoAscender=n.parseShort(),r.sTypoDescender=n.parseShort(),r.sTypoLineGap=n.parseShort(),r.usWinAscent=n.parseUShort(),r.usWinDescent=n.parseUShort(),r.version>=1&&(r.ulCodePageRange1=n.parseULong(),r.ulCodePageRange2=n.parseULong()),r.version>=2&&(r.sxHeight=n.parseShort(),r.sCapHeight=n.parseShort(),r.usDefaultChar=n.parseUShort(),r.usBreakChar=n.parseUShort(),r.usMaxContent=n.parseUShort()),r},make:function(e){return new $.Table("OS/2",[{name:"version",type:"USHORT",value:3},{name:"xAvgCharWidth",type:"SHORT",value:0},{name:"usWeightClass",type:"USHORT",value:0},{name:"usWidthClass",type:"USHORT",value:0},{name:"fsType",type:"USHORT",value:0},{name:"ySubscriptXSize",type:"SHORT",value:650},{name:"ySubscriptYSize",type:"SHORT",value:699},{name:"ySubscriptXOffset",type:"SHORT",value:0},{name:"ySubscriptYOffset",type:"SHORT",value:140},{name:"ySuperscriptXSize",type:"SHORT",value:650},{name:"ySuperscriptYSize",type:"SHORT",value:699},{name:"ySuperscriptXOffset",type:"SHORT",value:0},{name:"ySuperscriptYOffset",type:"SHORT",value:479},{name:"yStrikeoutSize",type:"SHORT",value:49},{name:"yStrikeoutPosition",type:"SHORT",value:258},{name:"sFamilyClass",type:"SHORT",value:0},{name:"bFamilyType",type:"BYTE",value:0},{name:"bSerifStyle",type:"BYTE",value:0},{name:"bWeight",type:"BYTE",value:0},{name:"bProportion",type:"BYTE",value:0},{name:"bContrast",type:"BYTE",value:0},{name:"bStrokeVariation",type:"BYTE",value:0},{name:"bArmStyle",type:"BYTE",value:0},{name:"bLetterform",type:"BYTE",value:0},{name:"bMidline",type:"BYTE",value:0},{name:"bXHeight",type:"BYTE",value:0},{name:"ulUnicodeRange1",type:"ULONG",value:0},{name:"ulUnicodeRange2",type:"ULONG",value:0},{name:"ulUnicodeRange3",type:"ULONG",value:0},{name:"ulUnicodeRange4",type:"ULONG",value:0},{name:"achVendID",type:"CHARARRAY",value:"XXXX"},{name:"fsSelection",type:"USHORT",value:0},{name:"usFirstCharIndex",type:"USHORT",value:0},{name:"usLastCharIndex",type:"USHORT",value:0},{name:"sTypoAscender",type:"SHORT",value:0},{name:"sTypoDescender",type:"SHORT",value:0},{name:"sTypoLineGap",type:"SHORT",value:0},{name:"usWinAscent",type:"USHORT",value:0},{name:"usWinDescent",type:"USHORT",value:0},{name:"ulCodePageRange1",type:"ULONG",value:0},{name:"ulCodePageRange2",type:"ULONG",value:0},{name:"sxHeight",type:"SHORT",value:0},{name:"sCapHeight",type:"SHORT",value:0},{name:"usDefaultChar",type:"USHORT",value:0},{name:"usBreakChar",type:"USHORT",value:0},{name:"usMaxContext",type:"USHORT",value:0}],e)},unicodeRanges:st,getUnicodeRange:function(e){for(var t=0;t<st.length;t+=1){var r=st[t];if(e>=r.begin&&e<r.end)return t}return-1}},ut={parse:function(e,t){var r={},n=new ie.Parser(e,t);switch(r.version=n.parseVersion(),r.italicAngle=n.parseFixed(),r.underlinePosition=n.parseShort(),r.underlineThickness=n.parseShort(),r.isFixedPitch=n.parseULong(),r.minMemType42=n.parseULong(),r.maxMemType42=n.parseULong(),r.minMemType1=n.parseULong(),r.maxMemType1=n.parseULong(),r.version){case 1:r.names=fe.slice();break;case 2:r.numberOfGlyphs=n.parseUShort(),r.glyphNameIndex=new Array(r.numberOfGlyphs);for(var a=0;a<r.numberOfGlyphs;a++)r.glyphNameIndex[a]=n.parseUShort();r.names=[];for(var o=0;o<r.numberOfGlyphs;o++)if(r.glyphNameIndex[o]>=fe.length){var s=n.parseChar();r.names.push(n.parseString(s))}break;case 2.5:r.numberOfGlyphs=n.parseUShort(),r.offset=new Array(r.numberOfGlyphs);for(var i=0;i<r.numberOfGlyphs;i++)r.offset[i]=n.parseChar()}return r},make:function(){return new $.Table("post",[{name:"version",type:"FIXED",value:196608},{name:"italicAngle",type:"FIXED",value:0},{name:"underlinePosition",type:"FWORD",value:0},{name:"underlineThickness",type:"FWORD",value:0},{name:"isFixedPitch",type:"ULONG",value:0},{name:"minMemType42",type:"ULONG",value:0},{name:"maxMemType42",type:"ULONG",value:0},{name:"minMemType1",type:"ULONG",value:0},{name:"maxMemType1",type:"ULONG",value:0}])}},lt=new Array(9);lt[1]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{substFormat:1,coverage:this.parsePointer(oe.coverage),deltaGlyphId:this.parseUShort()}:2===t?{substFormat:2,coverage:this.parsePointer(oe.coverage),substitute:this.parseOffset16List()}:void C.assert(!1,"0x"+e.toString(16)+": lookup type 1 format must be 1 or 2.")},lt[2]=function(){var e=this.parseUShort();return C.argument(1===e,"GSUB Multiple Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),sequences:this.parseListOfLists()}},lt[3]=function(){var e=this.parseUShort();return C.argument(1===e,"GSUB Alternate Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),alternateSets:this.parseListOfLists()}},lt[4]=function(){var e=this.parseUShort();return C.argument(1===e,"GSUB ligature table identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),ligatureSets:this.parseListOfLists((function(){return{ligGlyph:this.parseUShort(),components:this.parseUShortList(this.parseUShort()-1)}}))}};var pt={sequenceIndex:oe.uShort,lookupListIndex:oe.uShort};lt[5]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();if(1===t)return{substFormat:t,coverage:this.parsePointer(oe.coverage),ruleSets:this.parseListOfLists((function(){var e=this.parseUShort(),t=this.parseUShort();return{input:this.parseUShortList(e-1),lookupRecords:this.parseRecordList(t,pt)}}))};if(2===t)return{substFormat:t,coverage:this.parsePointer(oe.coverage),classDef:this.parsePointer(oe.classDef),classSets:this.parseListOfLists((function(){var e=this.parseUShort(),t=this.parseUShort();return{classes:this.parseUShortList(e-1),lookupRecords:this.parseRecordList(t,pt)}}))};if(3===t){var r=this.parseUShort(),n=this.parseUShort();return{substFormat:t,coverages:this.parseList(r,oe.pointer(oe.coverage)),lookupRecords:this.parseRecordList(n,pt)}}C.assert(!1,"0x"+e.toString(16)+": lookup type 5 format must be 1, 2 or 3.")},lt[6]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{substFormat:1,coverage:this.parsePointer(oe.coverage),chainRuleSets:this.parseListOfLists((function(){return{backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(pt)}}))}:2===t?{substFormat:2,coverage:this.parsePointer(oe.coverage),backtrackClassDef:this.parsePointer(oe.classDef),inputClassDef:this.parsePointer(oe.classDef),lookaheadClassDef:this.parsePointer(oe.classDef),chainClassSet:this.parseListOfLists((function(){return{backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(pt)}}))}:3===t?{substFormat:3,backtrackCoverage:this.parseList(oe.pointer(oe.coverage)),inputCoverage:this.parseList(oe.pointer(oe.coverage)),lookaheadCoverage:this.parseList(oe.pointer(oe.coverage)),lookupRecords:this.parseRecordList(pt)}:void C.assert(!1,"0x"+e.toString(16)+": lookup type 6 format must be 1, 2 or 3.")},lt[7]=function(){var e=this.parseUShort();C.argument(1===e,"GSUB Extension Substitution subtable identifier-format must be 1");var t=this.parseUShort(),r=new oe(this.data,this.offset+this.parseULong());return{substFormat:1,lookupType:t,extension:lt[t].call(r)}},lt[8]=function(){var e=this.parseUShort();return C.argument(1===e,"GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(oe.coverage),backtrackCoverage:this.parseList(oe.pointer(oe.coverage)),lookaheadCoverage:this.parseList(oe.pointer(oe.coverage)),substitutes:this.parseUShortList()}};var ct=new Array(9);ct[1]=function(e){return 1===e.substFormat?new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)},{name:"deltaGlyphID",type:"USHORT",value:e.deltaGlyphId}]):new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:2},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)}].concat($.ushortList("substitute",e.substitute)))},ct[2]=function(e){return C.assert(1===e.substFormat,"Lookup type 2 substFormat must be 1."),new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)}].concat($.tableList("seqSet",e.sequences,(function(e){return new $.Table("sequenceSetTable",$.ushortList("sequence",e))}))))},ct[3]=function(e){return C.assert(1===e.substFormat,"Lookup type 3 substFormat must be 1."),new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)}].concat($.tableList("altSet",e.alternateSets,(function(e){return new $.Table("alternateSetTable",$.ushortList("alternate",e))}))))},ct[4]=function(e){return C.assert(1===e.substFormat,"Lookup type 4 substFormat must be 1."),new $.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)}].concat($.tableList("ligSet",e.ligatureSets,(function(e){return new $.Table("ligatureSetTable",$.tableList("ligature",e,(function(e){return new $.Table("ligatureTable",[{name:"ligGlyph",type:"USHORT",value:e.ligGlyph}].concat($.ushortList("component",e.components,e.components.length+1)))})))}))))},ct[6]=function(e){if(1===e.substFormat){var t=new $.Table("chainContextTable",[{name:"substFormat",type:"USHORT",value:e.substFormat},{name:"coverage",type:"TABLE",value:new $.Coverage(e.coverage)}].concat($.tableList("chainRuleSet",e.chainRuleSets,(function(e){return new $.Table("chainRuleSetTable",$.tableList("chainRule",e,(function(e){var t=$.ushortList("backtrackGlyph",e.backtrack,e.backtrack.length).concat($.ushortList("inputGlyph",e.input,e.input.length+1)).concat($.ushortList("lookaheadGlyph",e.lookahead,e.lookahead.length)).concat($.ushortList("substitution",[],e.lookupRecords.length));return e.lookupRecords.forEach((function(e,r){t=t.concat({name:"sequenceIndex"+r,type:"USHORT",value:e.sequenceIndex}).concat({name:"lookupListIndex"+r,type:"USHORT",value:e.lookupListIndex})})),new $.Table("chainRuleTable",t)})))}))));return t}if(2===e.substFormat)C.assert(!1,"lookup type 6 format 2 is not yet supported.");else if(3===e.substFormat){var r=[{name:"substFormat",type:"USHORT",value:e.substFormat}];return r.push({name:"backtrackGlyphCount",type:"USHORT",value:e.backtrackCoverage.length}),e.backtrackCoverage.forEach((function(e,t){r.push({name:"backtrackCoverage"+t,type:"TABLE",value:new $.Coverage(e)})})),r.push({name:"inputGlyphCount",type:"USHORT",value:e.inputCoverage.length}),e.inputCoverage.forEach((function(e,t){r.push({name:"inputCoverage"+t,type:"TABLE",value:new $.Coverage(e)})})),r.push({name:"lookaheadGlyphCount",type:"USHORT",value:e.lookaheadCoverage.length}),e.lookaheadCoverage.forEach((function(e,t){r.push({name:"lookaheadCoverage"+t,type:"TABLE",value:new $.Coverage(e)})})),r.push({name:"substitutionCount",type:"USHORT",value:e.lookupRecords.length}),e.lookupRecords.forEach((function(e,t){r=r.concat({name:"sequenceIndex"+t,type:"USHORT",value:e.sequenceIndex}).concat({name:"lookupListIndex"+t,type:"USHORT",value:e.lookupListIndex})})),new $.Table("chainContextTable",r)}C.assert(!1,"lookup type 6 format must be 1, 2 or 3.")};var ht={parse:function(e,t){var r=new oe(e,t=t||0),n=r.parseVersion(1);return C.argument(1===n||1.1===n,"Unsupported GSUB table version."),1===n?{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(lt)}:{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(lt),variations:r.parseFeatureVariationsList()}},make:function(e){return new $.Table("GSUB",[{name:"version",type:"ULONG",value:65536},{name:"scripts",type:"TABLE",value:new $.ScriptList(e.scripts)},{name:"features",type:"TABLE",value:new $.FeatureList(e.features)},{name:"lookups",type:"TABLE",value:new $.LookupList(e.lookups,ct)}])}},ft={parse:function(e,t){var r=new ie.Parser(e,t),n=r.parseULong();C.argument(1===n,"Unsupported META table version."),r.parseULong(),r.parseULong();for(var a=r.parseULong(),o={},s=0;s<a;s++){var i=r.parseTag(),u=r.parseULong(),l=r.parseULong(),p=I.UTF8(e,t+u,l);o[i]=p}return o},make:function(e){var t=Object.keys(e).length,r="",n=16+12*t,a=new $.Table("meta",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"offset",type:"ULONG",value:n},{name:"numTags",type:"ULONG",value:t}]);for(var o in e){var s=r.length;r+=e[o],a.fields.push({name:"tag "+o,type:"TAG",value:o}),a.fields.push({name:"offset "+o,type:"ULONG",value:n+s}),a.fields.push({name:"length "+o,type:"ULONG",value:e[o].length})}return a.fields.push({name:"stringPool",type:"CHARARRAY",value:r}),a}};function dt(e){return Math.log(e)/Math.log(2)|0}function vt(e){for(;e.length%4!=0;)e.push(0);for(var t=0,r=0;r<e.length;r+=4)t+=(e[r]<<24)+(e[r+1]<<16)+(e[r+2]<<8)+e[r+3];return t%Math.pow(2,32)}function gt(e,t,r,n){return new $.Record("Table Record",[{name:"tag",type:"TAG",value:void 0!==e?e:""},{name:"checkSum",type:"ULONG",value:void 0!==t?t:0},{name:"offset",type:"ULONG",value:void 0!==r?r:0},{name:"length",type:"ULONG",value:void 0!==n?n:0}])}function mt(e){var t=new $.Table("sfnt",[{name:"version",type:"TAG",value:"OTTO"},{name:"numTables",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);t.tables=e,t.numTables=e.length;var r=Math.pow(2,dt(t.numTables));t.searchRange=16*r,t.entrySelector=dt(r),t.rangeShift=16*t.numTables-t.searchRange;for(var n=[],a=[],o=t.sizeOf()+gt().sizeOf()*t.numTables;o%4!=0;)o+=1,a.push({name:"padding",type:"BYTE",value:0});for(var s=0;s<e.length;s+=1){var i=e[s];C.argument(4===i.tableName.length,"Table name"+i.tableName+" is invalid.");var u=i.sizeOf(),l=gt(i.tableName,vt(i.encode()),o,u);for(n.push({name:l.tag+" Table Record",type:"RECORD",value:l}),a.push({name:i.tableName+" table",type:"RECORD",value:i}),o+=u,C.argument(!isNaN(o),"Something went wrong calculating the offset.");o%4!=0;)o+=1,a.push({name:"padding",type:"BYTE",value:0})}return n.sort((function(e,t){return e.value.tag>t.value.tag?1:-1})),t.fields=t.fields.concat(n),t.fields=t.fields.concat(a),t}function yt(e,t,r){for(var n=0;n<t.length;n+=1){var a=e.charToGlyphIndex(t[n]);if(a>0)return e.glyphs.get(a).getMetrics()}return r}function bt(e){for(var t=0,r=0;r<e.length;r+=1)t+=e[r];return t/e.length}var xt=function(e){for(var t,r=[],n=[],a=[],o=[],s=[],i=[],u=[],l=0,p=0,c=0,h=0,f=0,d=0;d<e.glyphs.length;d+=1){var v=e.glyphs.get(d),g=0|v.unicode;if(isNaN(v.advanceWidth))throw new Error("Glyph "+v.name+" ("+d+"): advanceWidth is not a number.");(t>g||void 0===t)&&g>0&&(t=g),l<g&&(l=g);var m=it.getUnicodeRange(g);if(m<32)p|=1<<m;else if(m<64)c|=1<<m-32;else if(m<96)h|=1<<m-64;else{if(!(m<123))throw new Error("Unicode ranges bits > 123 are reserved for internal usage");f|=1<<m-96}if(".notdef"!==v.name){var y=v.getMetrics();r.push(y.xMin),n.push(y.yMin),a.push(y.xMax),o.push(y.yMax),i.push(y.leftSideBearing),u.push(y.rightSideBearing),s.push(v.advanceWidth)}}var b={xMin:Math.min.apply(null,r),yMin:Math.min.apply(null,n),xMax:Math.max.apply(null,a),yMax:Math.max.apply(null,o),advanceWidthMax:Math.max.apply(null,s),advanceWidthAvg:bt(s),minLeftSideBearing:Math.min.apply(null,i),maxLeftSideBearing:Math.max.apply(null,i),minRightSideBearing:Math.min.apply(null,u)};b.ascender=e.ascender,b.descender=e.descender;var x=qe.make({flags:3,unitsPerEm:e.unitsPerEm,xMin:b.xMin,yMin:b.yMin,xMax:b.xMax,yMax:b.yMax,lowestRecPPEM:3,createdTimestamp:e.createdTimestamp}),S=We.make({ascender:b.ascender,descender:b.descender,advanceWidthMax:b.advanceWidthMax,minLeftSideBearing:b.minLeftSideBearing,minRightSideBearing:b.minRightSideBearing,xMaxExtent:b.maxLeftSideBearing+(b.xMax-b.xMin),numberOfHMetrics:e.glyphs.length}),M=Ve.make(e.glyphs.length),T=it.make(Object.assign({xAvgCharWidth:Math.round(b.advanceWidthAvg),usFirstCharIndex:t,usLastCharIndex:l,ulUnicodeRange1:p,ulUnicodeRange2:c,ulUnicodeRange3:h,ulUnicodeRange4:f,sTypoAscender:b.ascender,sTypoDescender:b.descender,sTypoLineGap:0,usWinAscent:b.yMax,usWinDescent:Math.abs(b.yMin),ulCodePageRange1:1,sxHeight:yt(e,"xyvw",{yMax:Math.round(b.ascender/2)}).yMax,sCapHeight:yt(e,"HIKLEFJMNTZBDPRAGOQSUVWXY",b).yMax,usDefaultChar:e.hasChar(" ")?32:0,usBreakChar:e.hasChar(" ")?32:0},e.tables.os2)),k=_e.make(e.glyphs),U=le.make(e.glyphs),O=e.getEnglishName("fontFamily"),E=e.getEnglishName("fontSubfamily"),R=O+" "+E,w=e.getEnglishName("postScriptName");w||(w=O.replace(/\s/g,"")+"-"+E);var L={};for(var C in e.names)L[C]=e.names[C];L.uniqueID||(L.uniqueID={en:e.getEnglishName("manufacturer")+":"+R}),L.postScriptName||(L.postScriptName={en:w}),L.preferredFamily||(L.preferredFamily=e.names.fontFamily),L.preferredSubfamily||(L.preferredSubfamily=e.names.fontSubfamily);var D=[],I=ot.make(L,D),A=D.length>0?Xe.make(D):void 0,G=ut.make(),B=ze.make(e.glyphs,{version:e.getEnglishName("version"),fullName:R,familyName:O,weightName:E,postScriptName:w,unitsPerEm:e.unitsPerEm,fontBBox:[0,b.yMin,b.ascender,b.advanceWidthMax]}),F=e.metas&&Object.keys(e.metas).length>0?ft.make(e.metas):void 0,P=[x,S,M,T,I,U,G,B,k];A&&P.push(A),e.tables.gsub&&P.push(ht.make(e.tables.gsub)),F&&P.push(F);for(var N=mt(P),H=vt(N.encode()),z=N.fields,q=!1,W=0;W<z.length;W+=1)if("head table"===z[W].name){z[W].value.checkSumAdjustment=2981146554-H,q=!0;break}if(!q)throw new Error("Could not find head table with checkSum to adjust.");return N};function St(e,t){for(var r=0,n=e.length-1;r<=n;){var a=r+n>>>1,o=e[a].tag;if(o===t)return a;o<t?r=a+1:n=a-1}return-r-1}function Mt(e,t){for(var r=0,n=e.length-1;r<=n;){var a=r+n>>>1,o=e[a];if(o===t)return a;o<t?r=a+1:n=a-1}return-r-1}function Tt(e,t){for(var r,n=0,a=e.length-1;n<=a;){var o=n+a>>>1,s=(r=e[o]).start;if(s===t)return r;s<t?n=o+1:a=o-1}if(n>0)return t>(r=e[n-1]).end?0:r}function kt(e,t){this.font=e,this.tableName=t}function Ut(e){kt.call(this,e,"gpos")}function Ot(e){kt.call(this,e,"gsub")}function Et(e,t){var r=e.length;if(r!==t.length)return!1;for(var n=0;n<r;n++)if(e[n]!==t[n])return!1;return!0}function Rt(e,t,r){for(var n=e.subtables,a=0;a<n.length;a++){var o=n[a];if(o.substFormat===t)return o}if(r)return n.push(r),r}function wt(e){for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n<e.length;++n)r[n]=e[n];return t}function Lt(e,t){if(!e)throw t}function Ct(e,t,r,n,a){var o;return(t&n)>0?(o=e.parseByte(),0==(t&a)&&(o=-o),o=r+o):o=(t&a)>0?r:r+e.parseShort(),o}function Dt(e,t,r){var n,a,o=new ie.Parser(t,r);if(e.numberOfContours=o.parseShort(),e._xMin=o.parseShort(),e._yMin=o.parseShort(),e._xMax=o.parseShort(),e._yMax=o.parseShort(),e.numberOfContours>0){for(var s=e.endPointIndices=[],i=0;i<e.numberOfContours;i+=1)s.push(o.parseUShort());e.instructionLength=o.parseUShort(),e.instructions=[];for(var u=0;u<e.instructionLength;u+=1)e.instructions.push(o.parseByte());var l=s[s.length-1]+1;n=[];for(var p=0;p<l;p+=1)if(a=o.parseByte(),n.push(a),(8&a)>0)for(var c=o.parseByte(),h=0;h<c;h+=1)n.push(a),p+=1;if(C.argument(n.length===l,"Bad flags."),s.length>0){var f,d=[];if(l>0){for(var v=0;v<l;v+=1)a=n[v],(f={}).onCurve=!!(1&a),f.lastPointOfContour=s.indexOf(v)>=0,d.push(f);for(var g=0,m=0;m<l;m+=1)a=n[m],(f=d[m]).x=Ct(o,a,g,2,16),g=f.x;for(var y=0,b=0;b<l;b+=1)a=n[b],(f=d[b]).y=Ct(o,a,y,4,32),y=f.y}e.points=d}else e.points=[]}else if(0===e.numberOfContours)e.points=[];else{e.isComposite=!0,e.points=[],e.components=[];for(var x=!0;x;){n=o.parseUShort();var S={glyphIndex:o.parseUShort(),xScale:1,scale01:0,scale10:0,yScale:1,dx:0,dy:0};(1&n)>0?(2&n)>0?(S.dx=o.parseShort(),S.dy=o.parseShort()):S.matchedPoints=[o.parseUShort(),o.parseUShort()]:(2&n)>0?(S.dx=o.parseChar(),S.dy=o.parseChar()):S.matchedPoints=[o.parseByte(),o.parseByte()],(8&n)>0?S.xScale=S.yScale=o.parseF2Dot14():(64&n)>0?(S.xScale=o.parseF2Dot14(),S.yScale=o.parseF2Dot14()):(128&n)>0&&(S.xScale=o.parseF2Dot14(),S.scale01=o.parseF2Dot14(),S.scale10=o.parseF2Dot14(),S.yScale=o.parseF2Dot14()),e.components.push(S),x=!!(32&n)}if(256&n){e.instructionLength=o.parseUShort(),e.instructions=[];for(var M=0;M<e.instructionLength;M+=1)e.instructions.push(o.parseByte())}}}function It(e,t){for(var r=[],n=0;n<e.length;n+=1){var a=e[n],o={x:t.xScale*a.x+t.scale01*a.y+t.dx,y:t.scale10*a.x+t.yScale*a.y+t.dy,onCurve:a.onCurve,lastPointOfContour:a.lastPointOfContour};r.push(o)}return r}function At(e){var t=new R;if(!e)return t;for(var r=function(e){for(var t=[],r=[],n=0;n<e.length;n+=1){var a=e[n];r.push(a),a.lastPointOfContour&&(t.push(r),r=[])}return C.argument(0===r.length,"There are still points left in the current contour."),t}(e),n=0;n<r.length;++n){var a=r[n],o=null,s=a[a.length-1],i=a[0];if(s.onCurve)t.moveTo(s.x,s.y);else if(i.onCurve)t.moveTo(i.x,i.y);else{var u={x:.5*(s.x+i.x),y:.5*(s.y+i.y)};t.moveTo(u.x,u.y)}for(var l=0;l<a.length;++l)if(o=s,s=i,i=a[(l+1)%a.length],s.onCurve)t.lineTo(s.x,s.y);else{var p=i;o.onCurve||(s.x,o.x,s.y,o.y),i.onCurve||(p={x:.5*(s.x+i.x),y:.5*(s.y+i.y)}),t.quadraticCurveTo(s.x,s.y,p.x,p.y)}t.closePath()}return t}function Gt(e,t){if(t.isComposite)for(var r=0;r<t.components.length;r+=1){var n=t.components[r],a=e.get(n.glyphIndex);if(a.getPath(),a.points){var o=void 0;if(void 0===n.matchedPoints)o=It(a.points,n);else{if(n.matchedPoints[0]>t.points.length-1||n.matchedPoints[1]>a.points.length-1)throw Error("Matched points out of range in "+t.name);var s=t.points[n.matchedPoints[0]],i=a.points[n.matchedPoints[1]],u={xScale:n.xScale,scale01:n.scale01,scale10:n.scale10,yScale:n.yScale,dx:0,dy:0};i=It([i],u)[0],u.dx=s.x-i.x,u.dy=s.y-i.y,o=It(a.points,u)}t.points=t.points.concat(o)}}return At(t.points)}kt.prototype={searchTag:St,binSearch:Mt,getTable:function(e){var t=this.font.tables[this.tableName];return!t&&e&&(t=this.font.tables[this.tableName]=this.createDefaultTable()),t},getScriptNames:function(){var e=this.getTable();return e?e.scripts.map((function(e){return e.tag})):[]},getDefaultScriptName:function(){var e=this.getTable();if(e){for(var t=!1,r=0;r<e.scripts.length;r++){var n=e.scripts[r].tag;if("DFLT"===n)return n;"latn"===n&&(t=!0)}return t?"latn":void 0}},getScriptTable:function(e,t){var r=this.getTable(t);if(r){e=e||"DFLT";var n=r.scripts,a=St(r.scripts,e);if(a>=0)return n[a].script;if(t){var o={tag:e,script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}};return n.splice(-1-a,0,o),o.script}}},getLangSysTable:function(e,t,r){var n=this.getScriptTable(e,r);if(n){if(!t||"dflt"===t||"DFLT"===t)return n.defaultLangSys;var a=St(n.langSysRecords,t);if(a>=0)return n.langSysRecords[a].langSys;if(r){var o={tag:t,langSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]}};return n.langSysRecords.splice(-1-a,0,o),o.langSys}}},getFeatureTable:function(e,t,r,n){var a=this.getLangSysTable(e,t,n);if(a){for(var o,s=a.featureIndexes,i=this.font.tables[this.tableName].features,u=0;u<s.length;u++)if((o=i[s[u]]).tag===r)return o.feature;if(n){var l=i.length;return C.assert(0===l||r>=i[l-1].tag,"Features must be added in alphabetical order."),o={tag:r,feature:{params:0,lookupListIndexes:[]}},i.push(o),s.push(l),o.feature}}},getLookupTables:function(e,t,r,n,a){var o=this.getFeatureTable(e,t,r,a),s=[];if(o){for(var i,u=o.lookupListIndexes,l=this.font.tables[this.tableName].lookups,p=0;p<u.length;p++)(i=l[u[p]]).lookupType===n&&s.push(i);if(0===s.length&&a){i={lookupType:n,lookupFlag:0,subtables:[],markFilteringSet:void 0};var c=l.length;return l.push(i),u.push(c),[i]}}return s},getGlyphClass:function(e,t){switch(e.format){case 1:return e.startGlyph<=t&&t<e.startGlyph+e.classes.length?e.classes[t-e.startGlyph]:0;case 2:var r=Tt(e.ranges,t);return r?r.classId:0}},getCoverageIndex:function(e,t){switch(e.format){case 1:var r=Mt(e.glyphs,t);return r>=0?r:-1;case 2:var n=Tt(e.ranges,t);return n?n.index+t-n.start:-1}},expandCoverage:function(e){if(1===e.format)return e.glyphs;for(var t=[],r=e.ranges,n=0;n<r.length;n++)for(var a=r[n],o=a.start,s=a.end,i=o;i<=s;i++)t.push(i);return t}},Ut.prototype=kt.prototype,Ut.prototype.init=function(){var e=this.getDefaultScriptName();this.defaultKerningTables=this.getKerningTables(e)},Ut.prototype.getKerningValue=function(e,t,r){for(var n=0;n<e.length;n++)for(var a=e[n].subtables,o=0;o<a.length;o++){var s=a[o],i=this.getCoverageIndex(s.coverage,t);if(!(i<0))switch(s.posFormat){case 1:for(var u=s.pairSets[i],l=0;l<u.length;l++){var p=u[l];if(p.secondGlyph===r)return p.value1&&p.value1.xAdvance||0}break;case 2:var c=this.getGlyphClass(s.classDef1,t),h=this.getGlyphClass(s.classDef2,r),f=s.classRecords[c][h];return f.value1&&f.value1.xAdvance||0}}return 0},Ut.prototype.getKerningTables=function(e,t){if(this.font.tables.gpos)return this.getLookupTables(e,t,"kern",2)},Ot.prototype=kt.prototype,Ot.prototype.createDefaultTable=function(){return{version:1,scripts:[{tag:"DFLT",script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}}],features:[],lookups:[]}},Ot.prototype.getSingle=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,1),o=0;o<a.length;o++)for(var s=a[o].subtables,i=0;i<s.length;i++){var u=s[i],l=this.expandCoverage(u.coverage),p=void 0;if(1===u.substFormat){var c=u.deltaGlyphId;for(p=0;p<l.length;p++){var h=l[p];n.push({sub:h,by:h+c})}}else{var f=u.substitute;for(p=0;p<l.length;p++)n.push({sub:l[p],by:f[p]})}}return n},Ot.prototype.getMultiple=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,2),o=0;o<a.length;o++)for(var s=a[o].subtables,i=0;i<s.length;i++){var u=s[i],l=this.expandCoverage(u.coverage),p=void 0;for(p=0;p<l.length;p++){var c=l[p],h=u.sequences[p];n.push({sub:c,by:h})}}return n},Ot.prototype.getAlternates=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,3),o=0;o<a.length;o++)for(var s=a[o].subtables,i=0;i<s.length;i++)for(var u=s[i],l=this.expandCoverage(u.coverage),p=u.alternateSets,c=0;c<l.length;c++)n.push({sub:l[c],by:p[c]});return n},Ot.prototype.getLigatures=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,4),o=0;o<a.length;o++)for(var s=a[o].subtables,i=0;i<s.length;i++)for(var u=s[i],l=this.expandCoverage(u.coverage),p=u.ligatureSets,c=0;c<l.length;c++)for(var h=l[c],f=p[c],d=0;d<f.length;d++){var v=f[d];n.push({sub:[h].concat(v.components),by:v.ligGlyph})}return n},Ot.prototype.addSingle=function(e,t,r,n){var a=Rt(this.getLookupTables(r,n,e,1,!0)[0],2,{substFormat:2,coverage:{format:1,glyphs:[]},substitute:[]});C.assert(1===a.coverage.format,"Single: unable to modify coverage table format "+a.coverage.format);var o=t.sub,s=this.binSearch(a.coverage.glyphs,o);s<0&&(s=-1-s,a.coverage.glyphs.splice(s,0,o),a.substitute.splice(s,0,0)),a.substitute[s]=t.by},Ot.prototype.addMultiple=function(e,t,r,n){C.assert(t.by instanceof Array&&t.by.length>1,'Multiple: "by" must be an array of two or more ids');var a=Rt(this.getLookupTables(r,n,e,2,!0)[0],1,{substFormat:1,coverage:{format:1,glyphs:[]},sequences:[]});C.assert(1===a.coverage.format,"Multiple: unable to modify coverage table format "+a.coverage.format);var o=t.sub,s=this.binSearch(a.coverage.glyphs,o);s<0&&(s=-1-s,a.coverage.glyphs.splice(s,0,o),a.sequences.splice(s,0,0)),a.sequences[s]=t.by},Ot.prototype.addAlternate=function(e,t,r,n){var a=Rt(this.getLookupTables(r,n,e,3,!0)[0],1,{substFormat:1,coverage:{format:1,glyphs:[]},alternateSets:[]});C.assert(1===a.coverage.format,"Alternate: unable to modify coverage table format "+a.coverage.format);var o=t.sub,s=this.binSearch(a.coverage.glyphs,o);s<0&&(s=-1-s,a.coverage.glyphs.splice(s,0,o),a.alternateSets.splice(s,0,0)),a.alternateSets[s]=t.by},Ot.prototype.addLigature=function(e,t,r,n){var a=this.getLookupTables(r,n,e,4,!0)[0],o=a.subtables[0];o||(o={substFormat:1,coverage:{format:1,glyphs:[]},ligatureSets:[]},a.subtables[0]=o),C.assert(1===o.coverage.format,"Ligature: unable to modify coverage table format "+o.coverage.format);var s=t.sub[0],i=t.sub.slice(1),u={ligGlyph:t.by,components:i},l=this.binSearch(o.coverage.glyphs,s);if(l>=0){for(var p=o.ligatureSets[l],c=0;c<p.length;c++)if(Et(p[c].components,i))return;p.push(u)}else l=-1-l,o.coverage.glyphs.splice(l,0,s),o.ligatureSets.splice(l,0,[u])},Ot.prototype.getFeature=function(e,t,r){if(/ss\d\d/.test(e))return this.getSingle(e,t,r);switch(e){case"aalt":case"salt":return this.getSingle(e,t,r).concat(this.getAlternates(e,t,r));case"dlig":case"liga":case"rlig":return this.getLigatures(e,t,r);case"ccmp":return this.getMultiple(e,t,r).concat(this.getLigatures(e,t,r));case"stch":return this.getMultiple(e,t,r)}},Ot.prototype.add=function(e,t,r,n){if(/ss\d\d/.test(e))return this.addSingle(e,t,r,n);switch(e){case"aalt":case"salt":return"number"==typeof t.by?this.addSingle(e,t,r,n):this.addAlternate(e,t,r,n);case"dlig":case"liga":case"rlig":return this.addLigature(e,t,r,n);case"ccmp":return t.by instanceof Array?this.addMultiple(e,t,r,n):this.addLigature(e,t,r,n)}};var Bt,Ft,Pt,Nt,Ht={getPath:At,parse:function(e,t,r,n,a){return a.lowMemory?function(e,t,r,n){var a=new Me.GlyphSet(n);return n._push=function(o){var s=r[o];s!==r[o+1]?a.push(o,Me.ttfGlyphLoader(n,o,Dt,e,t+s,Gt)):a.push(o,Me.glyphLoader(n,o))},a}(e,t,r,n):function(e,t,r,n){for(var a=new Me.GlyphSet(n),o=0;o<r.length-1;o+=1){var s=r[o];s!==r[o+1]?a.push(o,Me.ttfGlyphLoader(n,o,Dt,e,t+s,Gt)):a.push(o,Me.glyphLoader(n,o))}return a}(e,t,r,n)}};function zt(e){this.font=e,this.getCommands=function(e){return Ht.getPath(e).commands},this._fpgmState=this._prepState=void 0,this._errorState=0}function qt(e){return e}function Wt(e){return Math.sign(e)*Math.round(Math.abs(e))}function _t(e){return Math.sign(e)*Math.round(Math.abs(2*e))/2}function Xt(e){return Math.sign(e)*(Math.round(Math.abs(e)+.5)-.5)}function Vt(e){return Math.sign(e)*Math.ceil(Math.abs(e))}function Zt(e){return Math.sign(e)*Math.floor(Math.abs(e))}var jt=function(e){var t=this.srPeriod,r=this.srPhase,n=1;return e<0&&(e=-e,n=-1),e+=this.srThreshold-r,e=Math.trunc(e/t)*t,(e+=r)<0?r*n:e*n},Yt={x:1,y:0,axis:"x",distance:function(e,t,r,n){return(r?e.xo:e.x)-(n?t.xo:t.x)},interpolate:function(e,t,r,n){var a,o,s,i,u,l,p;if(!n||n===this)return a=e.xo-t.xo,o=e.xo-r.xo,u=t.x-t.xo,l=r.x-r.xo,0===(p=(s=Math.abs(a))+(i=Math.abs(o)))?void(e.x=e.xo+(u+l)/2):void(e.x=e.xo+(u*i+l*s)/p);a=n.distance(e,t,!0,!0),o=n.distance(e,r,!0,!0),u=n.distance(t,t,!1,!0),l=n.distance(r,r,!1,!0),0!==(p=(s=Math.abs(a))+(i=Math.abs(o)))?Yt.setRelative(e,e,(u*i+l*s)/p,n,!0):Yt.setRelative(e,e,(u+l)/2,n,!0)},normalSlope:Number.NEGATIVE_INFINITY,setRelative:function(e,t,r,n,a){if(n&&n!==this){var o=a?t.xo:t.x,s=a?t.yo:t.y,i=o+r*n.x,u=s+r*n.y;e.x=i+(e.y-u)/n.normalSlope}else e.x=(a?t.xo:t.x)+r},slope:0,touch:function(e){e.xTouched=!0},touched:function(e){return e.xTouched},untouch:function(e){e.xTouched=!1}},Qt={x:0,y:1,axis:"y",distance:function(e,t,r,n){return(r?e.yo:e.y)-(n?t.yo:t.y)},interpolate:function(e,t,r,n){var a,o,s,i,u,l,p;if(!n||n===this)return a=e.yo-t.yo,o=e.yo-r.yo,u=t.y-t.yo,l=r.y-r.yo,0===(p=(s=Math.abs(a))+(i=Math.abs(o)))?void(e.y=e.yo+(u+l)/2):void(e.y=e.yo+(u*i+l*s)/p);a=n.distance(e,t,!0,!0),o=n.distance(e,r,!0,!0),u=n.distance(t,t,!1,!0),l=n.distance(r,r,!1,!0),0!==(p=(s=Math.abs(a))+(i=Math.abs(o)))?Qt.setRelative(e,e,(u*i+l*s)/p,n,!0):Qt.setRelative(e,e,(u+l)/2,n,!0)},normalSlope:0,setRelative:function(e,t,r,n,a){if(n&&n!==this){var o=a?t.xo:t.x,s=a?t.yo:t.y,i=o+r*n.x,u=s+r*n.y;e.y=u+n.normalSlope*(e.x-i)}else e.y=(a?t.yo:t.y)+r},slope:Number.POSITIVE_INFINITY,touch:function(e){e.yTouched=!0},touched:function(e){return e.yTouched},untouch:function(e){e.yTouched=!1}};function Kt(e,t){this.x=e,this.y=t,this.axis=void 0,this.slope=t/e,this.normalSlope=-e/t,Object.freeze(this)}function Jt(e,t){var r=Math.sqrt(e*e+t*t);return t/=r,1==(e/=r)&&0===t?Yt:0===e&&1===t?Qt:new Kt(e,t)}function $t(e,t,r,n){this.x=this.xo=Math.round(64*e)/64,this.y=this.yo=Math.round(64*t)/64,this.lastPointOfContour=r,this.onCurve=n,this.prevPointOnContour=void 0,this.nextPointOnContour=void 0,this.xTouched=!1,this.yTouched=!1,Object.preventExtensions(this)}Object.freeze(Yt),Object.freeze(Qt),Kt.prototype.distance=function(e,t,r,n){return this.x*Yt.distance(e,t,r,n)+this.y*Qt.distance(e,t,r,n)},Kt.prototype.interpolate=function(e,t,r,n){var a,o,s,i,u,l,p;s=n.distance(e,t,!0,!0),i=n.distance(e,r,!0,!0),a=n.distance(t,t,!1,!0),o=n.distance(r,r,!1,!0),0!==(p=(u=Math.abs(s))+(l=Math.abs(i)))?this.setRelative(e,e,(a*l+o*u)/p,n,!0):this.setRelative(e,e,(a+o)/2,n,!0)},Kt.prototype.setRelative=function(e,t,r,n,a){n=n||this;var o=a?t.xo:t.x,s=a?t.yo:t.y,i=o+r*n.x,u=s+r*n.y,l=n.normalSlope,p=this.slope,c=e.x,h=e.y;e.x=(p*c-l*i+u-h)/(p-l),e.y=p*(e.x-c)+h},Kt.prototype.touch=function(e){e.xTouched=!0,e.yTouched=!0},$t.prototype.nextTouched=function(e){for(var t=this.nextPointOnContour;!e.touched(t)&&t!==this;)t=t.nextPointOnContour;return t},$t.prototype.prevTouched=function(e){for(var t=this.prevPointOnContour;!e.touched(t)&&t!==this;)t=t.prevPointOnContour;return t};var er=Object.freeze(new $t(0,0)),tr={cvCutIn:17/16,deltaBase:9,deltaShift:.125,loop:1,minDis:1,autoFlip:!0};function rr(e,t){switch(this.env=e,this.stack=[],this.prog=t,e){case"glyf":this.zp0=this.zp1=this.zp2=1,this.rp0=this.rp1=this.rp2=0;case"prep":this.fv=this.pv=this.dpv=Yt,this.round=Wt}}function nr(e){for(var t=e.tZone=new Array(e.gZone.length),r=0;r<t.length;r++)t[r]=new $t(0,0)}function ar(e,t){var r,n=e.prog,a=e.ip,o=1;do{if(88===(r=n[++a]))o++;else if(89===r)o--;else if(64===r)a+=n[a+1]+1;else if(65===r)a+=2*n[a+1]+1;else if(r>=176&&r<=183)a+=r-176+1;else if(r>=184&&r<=191)a+=2*(r-184+1);else if(t&&1===o&&27===r)break}while(o>0);e.ip=a}function or(e,t){exports.DEBUG&&console.log(t.step,"SVTCA["+e.axis+"]"),t.fv=t.pv=t.dpv=e}function sr(e,t){exports.DEBUG&&console.log(t.step,"SPVTCA["+e.axis+"]"),t.pv=t.dpv=e}function ir(e,t){exports.DEBUG&&console.log(t.step,"SFVTCA["+e.axis+"]"),t.fv=e}function ur(e,t){var r,n,a=t.stack,o=a.pop(),s=a.pop(),i=t.z2[o],u=t.z1[s];exports.DEBUG&&console.log("SPVTL["+e+"]",o,s),e?(r=i.y-u.y,n=u.x-i.x):(r=u.x-i.x,n=u.y-i.y),t.pv=t.dpv=Jt(r,n)}function lr(e,t){var r,n,a=t.stack,o=a.pop(),s=a.pop(),i=t.z2[o],u=t.z1[s];exports.DEBUG&&console.log("SFVTL["+e+"]",o,s),e?(r=i.y-u.y,n=u.x-i.x):(r=u.x-i.x,n=u.y-i.y),t.fv=Jt(r,n)}function pr(e){exports.DEBUG&&console.log(e.step,"POP[]"),e.stack.pop()}function cr(e,t){var r=t.stack.pop(),n=t.z0[r],a=t.fv,o=t.pv;exports.DEBUG&&console.log(t.step,"MDAP["+e+"]",r);var s=o.distance(n,er);e&&(s=t.round(s)),a.setRelative(n,er,s,o),a.touch(n),t.rp0=t.rp1=r}function hr(e,t){var r,n,a,o=t.z2,s=o.length-2;exports.DEBUG&&console.log(t.step,"IUP["+e.axis+"]");for(var i=0;i<s;i++)r=o[i],e.touched(r)||(n=r.prevTouched(e))!==r&&(n===(a=r.nextTouched(e))&&e.setRelative(r,r,e.distance(n,n,!1,!0),e,!0),e.interpolate(r,n,a,e))}function fr(e,t){for(var r=t.stack,n=e?t.rp1:t.rp2,a=(e?t.z0:t.z1)[n],o=t.fv,s=t.pv,i=t.loop,u=t.z2;i--;){var l=r.pop(),p=u[l],c=s.distance(a,a,!1,!0);o.setRelative(p,p,c,s),o.touch(p),exports.DEBUG&&console.log(t.step,(t.loop>1?"loop "+(t.loop-i)+": ":"")+"SHP["+(e?"rp1":"rp2")+"]",l)}t.loop=1}function dr(e,t){var r=t.stack,n=e?t.rp1:t.rp2,a=(e?t.z0:t.z1)[n],o=t.fv,s=t.pv,i=r.pop(),u=t.z2[t.contours[i]],l=u;exports.DEBUG&&console.log(t.step,"SHC["+e+"]",i);var p=s.distance(a,a,!1,!0);do{l!==a&&o.setRelative(l,l,p,s),l=l.nextPointOnContour}while(l!==u)}function vr(e,t){var r,n,a=t.stack,o=e?t.rp1:t.rp2,s=(e?t.z0:t.z1)[o],i=t.fv,u=t.pv,l=a.pop();switch(exports.DEBUG&&console.log(t.step,"SHZ["+e+"]",l),l){case 0:r=t.tZone;break;case 1:r=t.gZone;break;default:throw new Error("Invalid zone")}for(var p=u.distance(s,s,!1,!0),c=r.length-2,h=0;h<c;h++)n=r[h],i.setRelative(n,n,p,u)}function gr(e,t){var r=t.stack,n=r.pop()/64,a=r.pop(),o=t.z1[a],s=t.z0[t.rp0],i=t.fv,u=t.pv;i.setRelative(o,s,n,u),i.touch(o),exports.DEBUG&&console.log(t.step,"MSIRP["+e+"]",n,a),t.rp1=t.rp0,t.rp2=a,e&&(t.rp0=a)}function mr(e,t){var r=t.stack,n=r.pop(),a=r.pop(),o=t.z0[a],s=t.fv,i=t.pv,u=t.cvt[n];exports.DEBUG&&console.log(t.step,"MIAP["+e+"]",n,"(",u,")",a);var l=i.distance(o,er);e&&(Math.abs(l-u)<t.cvCutIn&&(l=u),l=t.round(l)),s.setRelative(o,er,l,i),0===t.zp0&&(o.xo=o.x,o.yo=o.y),s.touch(o),t.rp0=t.rp1=a}function yr(e,t){var r=t.stack,n=r.pop(),a=t.z2[n];exports.DEBUG&&console.log(t.step,"GC["+e+"]",n),r.push(64*t.dpv.distance(a,er,e,!1))}function br(e,t){var r=t.stack,n=r.pop(),a=r.pop(),o=t.z1[n],s=t.z0[a],i=t.dpv.distance(s,o,e,e);exports.DEBUG&&console.log(t.step,"MD["+e+"]",n,a,"->",i),t.stack.push(Math.round(64*i))}function xr(e,t){var r=t.stack,n=r.pop(),a=t.fv,o=t.pv,s=t.ppem,i=t.deltaBase+16*(e-1),u=t.deltaShift,l=t.z0;exports.DEBUG&&console.log(t.step,"DELTAP["+e+"]",n,r);for(var p=0;p<n;p++){var c=r.pop(),h=r.pop();if(i+((240&h)>>4)===s){var f=(15&h)-8;f>=0&&f++,exports.DEBUG&&console.log(t.step,"DELTAPFIX",c,"by",f*u);var d=l[c];a.setRelative(d,d,f*u,o)}}}function Sr(e,t){var r=t.stack,n=r.pop();exports.DEBUG&&console.log(t.step,"ROUND[]"),r.push(64*t.round(n/64))}function Mr(e,t){var r=t.stack,n=r.pop(),a=t.ppem,o=t.deltaBase+16*(e-1),s=t.deltaShift;exports.DEBUG&&console.log(t.step,"DELTAC["+e+"]",n,r);for(var i=0;i<n;i++){var u=r.pop(),l=r.pop();if(o+((240&l)>>4)===a){var p=(15&l)-8;p>=0&&p++;var c=p*s;exports.DEBUG&&console.log(t.step,"DELTACFIX",u,"by",c),t.cvt[u]+=c}}}function Tr(e,t){var r,n,a=t.stack,o=a.pop(),s=a.pop(),i=t.z2[o],u=t.z1[s];exports.DEBUG&&console.log(t.step,"SDPVTL["+e+"]",o,s),e?(r=i.y-u.y,n=u.x-i.x):(r=u.x-i.x,n=u.y-i.y),t.dpv=Jt(r,n)}function kr(e,t){var r=t.stack,n=t.prog,a=t.ip;exports.DEBUG&&console.log(t.step,"PUSHB["+e+"]");for(var o=0;o<e;o++)r.push(n[++a]);t.ip=a}function Ur(e,t){var r=t.ip,n=t.prog,a=t.stack;exports.DEBUG&&console.log(t.ip,"PUSHW["+e+"]");for(var o=0;o<e;o++){var s=n[++r]<<8|n[++r];32768&s&&(s=-(1+(65535^s))),a.push(s)}t.ip=r}function Or(e,t,r,n,a,o){var s,i,u,l,p=o.stack,c=e&&p.pop(),h=p.pop(),f=o.rp0,d=o.z0[f],v=o.z1[h],g=o.minDis,m=o.fv,y=o.dpv;u=(i=s=y.distance(v,d,!0,!0))>=0?1:-1,i=Math.abs(i),e&&(l=o.cvt[c],n&&Math.abs(i-l)<o.cvCutIn&&(i=l)),r&&i<g&&(i=g),n&&(i=o.round(i)),m.setRelative(v,d,u*i,y),m.touch(v),exports.DEBUG&&console.log(o.step,(e?"MIRP[":"MDRP[")+(t?"M":"m")+(r?">":"_")+(n?"R":"_")+(0===a?"Gr":1===a?"Bl":2===a?"Wh":"")+"]",e?c+"("+o.cvt[c]+","+l+")":"",h,"(d =",s,"->",u*i,")"),o.rp1=o.rp0,o.rp2=h,t&&(o.rp0=h)}function Er(e){this.char=e,this.state={},this.activeState=null}function Rr(e,t,r){this.contextName=r,this.startIndex=e,this.endOffset=t}function wr(e,t,r){this.contextName=e,this.openRange=null,this.ranges=[],this.checkStart=t,this.checkEnd=r}function Lr(e,t){this.context=e,this.index=t,this.length=e.length,this.current=e[t],this.backtrack=e.slice(0,t),this.lookahead=e.slice(t+1)}function Cr(e){this.eventId=e,this.subscribers=[]}function Dr(e){var t=this,r=["start","end","next","newToken","contextStart","contextEnd","insertToken","removeToken","removeRange","replaceToken","replaceRange","composeRUD","updateContextsRanges"];r.forEach((function(e){Object.defineProperty(t.events,e,{value:new Cr(e)})})),e&&r.forEach((function(r){var n=e[r];"function"==typeof n&&t.events[r].subscribe(n)})),["insertToken","removeToken","removeRange","replaceToken","replaceRange","composeRUD"].forEach((function(e){t.events[e].subscribe(t.updateContextsRanges)}))}function Ir(e){this.tokens=[],this.registeredContexts={},this.contextCheckers=[],this.events={},this.registeredModifiers=[],Dr.call(this,e)}function Ar(e){return/[\u0600-\u065F\u066A-\u06D2\u06FA-\u06FF]/.test(e)}function Gr(e){return/[\u0630\u0690\u0621\u0631\u0661\u0671\u0622\u0632\u0672\u0692\u06C2\u0623\u0673\u0693\u06C3\u0624\u0694\u06C4\u0625\u0675\u0695\u06C5\u06E5\u0676\u0696\u06C6\u0627\u0677\u0697\u06C7\u0648\u0688\u0698\u06C8\u0689\u0699\u06C9\u068A\u06CA\u066B\u068B\u06CB\u068C\u068D\u06CD\u06FD\u068E\u06EE\u06FE\u062F\u068F\u06CF\u06EF]/.test(e)}function Br(e){return/[\u0600-\u0605\u060C-\u060E\u0610-\u061B\u061E\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED]/.test(e)}function Fr(e){return/[A-z]/.test(e)}function Pr(e){this.font=e,this.features={}}function Nr(e){this.id=e.id,this.tag=e.tag,this.substitution=e.substitution}function Hr(e,t){if(!e)return-1;switch(t.format){case 1:return t.glyphs.indexOf(e);case 2:for(var r=t.ranges,n=0;n<r.length;n++){var a=r[n];if(e>=a.start&&e<=a.end){var o=e-a.start;return a.index+o}}break;default:return-1}return-1}function zr(e,t){return-1===Hr(e,t.coverage)?null:e+t.deltaGlyphId}function qr(e,t){var r=Hr(e,t.coverage);return-1===r?null:t.substitute[r]}function Wr(e,t){for(var r=[],n=0;n<e.length;n++){var a=e[n],o=t.current,s=Hr(o=Array.isArray(o)?o[0]:o,a);-1!==s&&r.push(s)}return r.length!==e.length?-1:r}function _r(e,t){var r=t.inputCoverage.length+t.lookaheadCoverage.length+t.backtrackCoverage.length;if(e.context.length<r)return[];var n=Wr(t.inputCoverage,e);if(-1===n)return[];var a=t.inputCoverage.length-1;if(e.lookahead.length<t.lookaheadCoverage.length)return[];for(var o=e.lookahead.slice(a);o.length&&Br(o[0].char);)o.shift();var s=new Lr(o,0),i=Wr(t.lookaheadCoverage,s),u=[].concat(e.backtrack);for(u.reverse();u.length&&Br(u[0].char);)u.shift();if(u.length<t.backtrackCoverage.length)return[];var l=new Lr(u,0),p=Wr(t.backtrackCoverage,l),c=[];if(n.length===t.inputCoverage.length&&i.length===t.lookaheadCoverage.length&&p.length===t.backtrackCoverage.length)for(var h=0;h<t.lookupRecords.length;h++)for(var f=t.lookupRecords[h].lookupListIndex,d=this.getLookupByIndex(f),v=0;v<d.subtables.length;v++){var g=d.subtables[v],m=this.getLookupMethod(d,g);if("12"===this.getSubstitutionType(d,g))for(var y=0;y<n.length;y++){var b=m(e.get(y));b&&c.push(b)}}return c}function Xr(e,t){var r,n=Hr(e.current,t.coverage);if(-1===n)return null;for(var a=t.ligatureSets[n],o=0;o<a.length;o++){r=a[o];for(var s=0;s<r.components.length&&e.lookahead[s]===r.components[s];s++)if(s===r.components.length-1)return r}return null}function Vr(e,t){var r=Hr(e,t.coverage);return-1===r?null:t.sequences[r]}zt.prototype.exec=function(e,t){if("number"!=typeof t)throw new Error("Point size is not a number!");if(!(this._errorState>2)){var r=this.font,n=this._prepState;if(!n||n.ppem!==t){var a=this._fpgmState;if(!a){rr.prototype=tr,(a=this._fpgmState=new rr("fpgm",r.tables.fpgm)).funcs=[],a.font=r,exports.DEBUG&&(console.log("---EXEC FPGM---"),a.step=-1);try{Ft(a)}catch(e){return console.log("Hinting error in FPGM:"+e),void(this._errorState=3)}}rr.prototype=a,(n=this._prepState=new rr("prep",r.tables.prep)).ppem=t;var o=r.tables.cvt;if(o)for(var s=n.cvt=new Array(o.length),i=t/r.unitsPerEm,u=0;u<o.length;u++)s[u]=o[u]*i;else n.cvt=[];exports.DEBUG&&(console.log("---EXEC PREP---"),n.step=-1);try{Ft(n)}catch(e){this._errorState<2&&console.log("Hinting error in PREP:"+e),this._errorState=2}}if(!(this._errorState>1))try{return Pt(e,n)}catch(e){return this._errorState<1&&(console.log("Hinting error:"+e),console.log("Note: further hinting errors are silenced")),void(this._errorState=1)}}},Pt=function(e,t){var r,n,a,o=t.ppem/t.font.unitsPerEm,s=o,i=e.components;if(rr.prototype=t,i){var u=t.font;n=[],r=[];for(var l=0;l<i.length;l++){var p=i[l],c=u.glyphs.get(p.glyphIndex);a=new rr("glyf",c.instructions),exports.DEBUG&&(console.log("---EXEC COMP "+l+"---"),a.step=-1),Nt(c,a,o,s);for(var h=Math.round(p.dx*o),f=Math.round(p.dy*s),d=a.gZone,v=a.contours,g=0;g<d.length;g++){var m=d[g];m.xTouched=m.yTouched=!1,m.xo=m.x=m.x+h,m.yo=m.y=m.y+f}var y=n.length;n.push.apply(n,d);for(var b=0;b<v.length;b++)r.push(v[b]+y)}e.instructions&&!a.inhibitGridFit&&((a=new rr("glyf",e.instructions)).gZone=a.z0=a.z1=a.z2=n,a.contours=r,n.push(new $t(0,0),new $t(Math.round(e.advanceWidth*o),0)),exports.DEBUG&&(console.log("---EXEC COMPOSITE---"),a.step=-1),Ft(a),n.length-=2)}else a=new rr("glyf",e.instructions),exports.DEBUG&&(console.log("---EXEC GLYPH---"),a.step=-1),Nt(e,a,o,s),n=a.gZone;return n},Nt=function(e,t,r,n){for(var a,o,s,i=e.points||[],u=i.length,l=t.gZone=t.z0=t.z1=t.z2=[],p=t.contours=[],c=0;c<u;c++)a=i[c],l[c]=new $t(a.x*r,a.y*n,a.lastPointOfContour,a.onCurve);for(var h=0;h<u;h++)a=l[h],o||(o=a,p.push(h)),a.lastPointOfContour?(a.nextPointOnContour=o,o.prevPointOnContour=a,o=void 0):(s=l[h+1],a.nextPointOnContour=s,s.prevPointOnContour=a);if(!t.inhibitGridFit){if(exports.DEBUG){console.log("PROCESSING GLYPH",t.stack);for(var f=0;f<u;f++)console.log(f,l[f].x,l[f].y)}if(l.push(new $t(0,0),new $t(Math.round(e.advanceWidth*r),0)),Ft(t),l.length-=2,exports.DEBUG){console.log("FINISHED GLYPH",t.stack);for(var d=0;d<u;d++)console.log(d,l[d].x,l[d].y)}}},Ft=function(e){var t=e.prog;if(t){var r,n=t.length;for(e.ip=0;e.ip<n;e.ip++){if(exports.DEBUG&&e.step++,!(r=Bt[t[e.ip]]))throw new Error("unknown instruction: 0x"+Number(t[e.ip]).toString(16));r(e)}}},Bt=[or.bind(void 0,Qt),or.bind(void 0,Yt),sr.bind(void 0,Qt),sr.bind(void 0,Yt),ir.bind(void 0,Qt),ir.bind(void 0,Yt),ur.bind(void 0,0),ur.bind(void 0,1),lr.bind(void 0,0),lr.bind(void 0,1),function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SPVFS[]",r,n),e.pv=e.dpv=Jt(n,r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SPVFS[]",r,n),e.fv=Jt(n,r)},function(e){var t=e.stack,r=e.pv;exports.DEBUG&&console.log(e.step,"GPV[]"),t.push(16384*r.x),t.push(16384*r.y)},function(e){var t=e.stack,r=e.fv;exports.DEBUG&&console.log(e.step,"GFV[]"),t.push(16384*r.x),t.push(16384*r.y)},function(e){e.fv=e.pv,exports.DEBUG&&console.log(e.step,"SFVTPV[]")},function(e){var t=e.stack,r=t.pop(),n=t.pop(),a=t.pop(),o=t.pop(),s=t.pop(),i=e.z0,u=e.z1,l=i[r],p=i[n],c=u[a],h=u[o],f=e.z2[s];exports.DEBUG&&console.log("ISECT[], ",r,n,a,o,s);var d=l.x,v=l.y,g=p.x,m=p.y,y=c.x,b=c.y,x=h.x,S=h.y,M=(d-g)*(b-S)-(v-m)*(y-x),T=d*m-v*g,k=y*S-b*x;f.x=(T*(y-x)-k*(d-g))/M,f.y=(T*(b-S)-k*(v-m))/M},function(e){e.rp0=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SRP0[]",e.rp0)},function(e){e.rp1=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SRP1[]",e.rp1)},function(e){e.rp2=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SRP2[]",e.rp2)},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZP0[]",t),e.zp0=t,t){case 0:e.tZone||nr(e),e.z0=e.tZone;break;case 1:e.z0=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZP1[]",t),e.zp1=t,t){case 0:e.tZone||nr(e),e.z1=e.tZone;break;case 1:e.z1=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZP2[]",t),e.zp2=t,t){case 0:e.tZone||nr(e),e.z2=e.tZone;break;case 1:e.z2=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZPS[]",t),e.zp0=e.zp1=e.zp2=t,t){case 0:e.tZone||nr(e),e.z0=e.z1=e.z2=e.tZone;break;case 1:e.z0=e.z1=e.z2=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){e.loop=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SLOOP[]",e.loop)},function(e){exports.DEBUG&&console.log(e.step,"RTG[]"),e.round=Wt},function(e){exports.DEBUG&&console.log(e.step,"RTHG[]"),e.round=Xt},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SMD[]",t),e.minDis=t/64},function(e){exports.DEBUG&&console.log(e.step,"ELSE[]"),ar(e,!1)},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"JMPR[]",t),e.ip+=t-1},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SCVTCI[]",t),e.cvCutIn=t/64},void 0,void 0,function(e){var t=e.stack;exports.DEBUG&&console.log(e.step,"DUP[]"),t.push(t[t.length-1])},pr,function(e){exports.DEBUG&&console.log(e.step,"CLEAR[]"),e.stack.length=0},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SWAP[]"),t.push(r),t.push(n)},function(e){var t=e.stack;exports.DEBUG&&console.log(e.step,"DEPTH[]"),t.push(t.length)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"CINDEX[]",r),t.push(t[t.length-r])},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"MINDEX[]",r),t.push(t.splice(t.length-r,1)[0])},void 0,void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"LOOPCALL[]",r,n);var a=e.ip,o=e.prog;e.prog=e.funcs[r];for(var s=0;s<n;s++)Ft(e),exports.DEBUG&&console.log(++e.step,s+1<n?"next loopcall":"done loopcall",s);e.ip=a,e.prog=o},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"CALL[]",t);var r=e.ip,n=e.prog;e.prog=e.funcs[t],Ft(e),e.ip=r,e.prog=n,exports.DEBUG&&console.log(++e.step,"returning from",t)},function(e){if("fpgm"!==e.env)throw new Error("FDEF not allowed here");var t=e.stack,r=e.prog,n=e.ip,a=t.pop(),o=n;for(exports.DEBUG&&console.log(e.step,"FDEF[]",a);45!==r[++n];);e.ip=n,e.funcs[a]=r.slice(o+1,n)},void 0,cr.bind(void 0,0),cr.bind(void 0,1),hr.bind(void 0,Qt),hr.bind(void 0,Yt),fr.bind(void 0,0),fr.bind(void 0,1),dr.bind(void 0,0),dr.bind(void 0,1),vr.bind(void 0,0),vr.bind(void 0,1),function(e){for(var t=e.stack,r=e.loop,n=e.fv,a=t.pop()/64,o=e.z2;r--;){var s=t.pop(),i=o[s];exports.DEBUG&&console.log(e.step,(e.loop>1?"loop "+(e.loop-r)+": ":"")+"SHPIX[]",s,a),n.setRelative(i,i,a),n.touch(i)}e.loop=1},function(e){for(var t=e.stack,r=e.rp1,n=e.rp2,a=e.loop,o=e.z0[r],s=e.z1[n],i=e.fv,u=e.dpv,l=e.z2;a--;){var p=t.pop(),c=l[p];exports.DEBUG&&console.log(e.step,(e.loop>1?"loop "+(e.loop-a)+": ":"")+"IP[]",p,r,"<->",n),i.interpolate(c,o,s,u),i.touch(c)}e.loop=1},gr.bind(void 0,0),gr.bind(void 0,1),function(e){for(var t=e.stack,r=e.rp0,n=e.z0[r],a=e.loop,o=e.fv,s=e.pv,i=e.z1;a--;){var u=t.pop(),l=i[u];exports.DEBUG&&console.log(e.step,(e.loop>1?"loop "+(e.loop-a)+": ":"")+"ALIGNRP[]",u),o.setRelative(l,n,0,s),o.touch(l)}e.loop=1},function(e){exports.DEBUG&&console.log(e.step,"RTDG[]"),e.round=_t},mr.bind(void 0,0),mr.bind(void 0,1),function(e){var t=e.prog,r=e.ip,n=e.stack,a=t[++r];exports.DEBUG&&console.log(e.step,"NPUSHB[]",a);for(var o=0;o<a;o++)n.push(t[++r]);e.ip=r},function(e){var t=e.ip,r=e.prog,n=e.stack,a=r[++t];exports.DEBUG&&console.log(e.step,"NPUSHW[]",a);for(var o=0;o<a;o++){var s=r[++t]<<8|r[++t];32768&s&&(s=-(1+(65535^s))),n.push(s)}e.ip=t},function(e){var t=e.stack,r=e.store;r||(r=e.store=[]);var n=t.pop(),a=t.pop();exports.DEBUG&&console.log(e.step,"WS",n,a),r[a]=n},function(e){var t=e.stack,r=e.store,n=t.pop();exports.DEBUG&&console.log(e.step,"RS",n);var a=r&&r[n]||0;t.push(a)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"WCVTP",r,n),e.cvt[n]=r/64},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"RCVT",r),t.push(64*e.cvt[r])},yr.bind(void 0,0),yr.bind(void 0,1),void 0,br.bind(void 0,0),br.bind(void 0,1),function(e){exports.DEBUG&&console.log(e.step,"MPPEM[]"),e.stack.push(e.ppem)},void 0,function(e){exports.DEBUG&&console.log(e.step,"FLIPON[]"),e.autoFlip=!0},void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"LT[]",r,n),t.push(n<r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"LTEQ[]",r,n),t.push(n<=r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"GT[]",r,n),t.push(n>r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"GTEQ[]",r,n),t.push(n>=r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"EQ[]",r,n),t.push(r===n?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"NEQ[]",r,n),t.push(r!==n?1:0)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"ODD[]",r),t.push(Math.trunc(r)%2?1:0)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"EVEN[]",r),t.push(Math.trunc(r)%2?0:1)},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"IF[]",t),t||(ar(e,!0),exports.DEBUG&&console.log(e.step,"EIF[]"))},function(e){exports.DEBUG&&console.log(e.step,"EIF[]")},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"AND[]",r,n),t.push(r&&n?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"OR[]",r,n),t.push(r||n?1:0)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"NOT[]",r),t.push(r?0:1)},xr.bind(void 0,1),function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SDB[]",t),e.deltaBase=t},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SDS[]",t),e.deltaShift=Math.pow(.5,t)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"ADD[]",r,n),t.push(n+r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SUB[]",r,n),t.push(n-r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"DIV[]",r,n),t.push(64*n/r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"MUL[]",r,n),t.push(n*r/64)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"ABS[]",r),t.push(Math.abs(r))},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"NEG[]",r),t.push(-r)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"FLOOR[]",r),t.push(64*Math.floor(r/64))},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"CEILING[]",r),t.push(64*Math.ceil(r/64))},Sr.bind(void 0,0),Sr.bind(void 0,1),Sr.bind(void 0,2),Sr.bind(void 0,3),void 0,void 0,void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"WCVTF[]",r,n),e.cvt[n]=r*e.ppem/e.font.unitsPerEm},xr.bind(void 0,2),xr.bind(void 0,3),Mr.bind(void 0,1),Mr.bind(void 0,2),Mr.bind(void 0,3),function(e){var t,r=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SROUND[]",r),e.round=jt,192&r){case 0:t=.5;break;case 64:t=1;break;case 128:t=2;break;default:throw new Error("invalid SROUND value")}switch(e.srPeriod=t,48&r){case 0:e.srPhase=0;break;case 16:e.srPhase=.25*t;break;case 32:e.srPhase=.5*t;break;case 48:e.srPhase=.75*t;break;default:throw new Error("invalid SROUND value")}r&=15,e.srThreshold=0===r?0:(r/8-.5)*t},function(e){var t,r=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"S45ROUND[]",r),e.round=jt,192&r){case 0:t=Math.sqrt(2)/2;break;case 64:t=Math.sqrt(2);break;case 128:t=2*Math.sqrt(2);break;default:throw new Error("invalid S45ROUND value")}switch(e.srPeriod=t,48&r){case 0:e.srPhase=0;break;case 16:e.srPhase=.25*t;break;case 32:e.srPhase=.5*t;break;case 48:e.srPhase=.75*t;break;default:throw new Error("invalid S45ROUND value")}r&=15,e.srThreshold=0===r?0:(r/8-.5)*t},void 0,void 0,function(e){exports.DEBUG&&console.log(e.step,"ROFF[]"),e.round=qt},void 0,function(e){exports.DEBUG&&console.log(e.step,"RUTG[]"),e.round=Vt},function(e){exports.DEBUG&&console.log(e.step,"RDTG[]"),e.round=Zt},pr,pr,void 0,void 0,void 0,void 0,void 0,function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SCANCTRL[]",t)},Tr.bind(void 0,0),Tr.bind(void 0,1),function(e){var t=e.stack,r=t.pop(),n=0;exports.DEBUG&&console.log(e.step,"GETINFO[]",r),1&r&&(n=35),32&r&&(n|=4096),t.push(n)},void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop(),a=t.pop();exports.DEBUG&&console.log(e.step,"ROLL[]"),t.push(n),t.push(r),t.push(a)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"MAX[]",r,n),t.push(Math.max(n,r))},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"MIN[]",r,n),t.push(Math.min(n,r))},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SCANTYPE[]",t)},function(e){var t=e.stack.pop(),r=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"INSTCTRL[]",t,r),t){case 1:return void(e.inhibitGridFit=!!r);case 2:return void(e.ignoreCvt=!!r);default:throw new Error("invalid INSTCTRL[] selector")}},void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,kr.bind(void 0,1),kr.bind(void 0,2),kr.bind(void 0,3),kr.bind(void 0,4),kr.bind(void 0,5),kr.bind(void 0,6),kr.bind(void 0,7),kr.bind(void 0,8),Ur.bind(void 0,1),Ur.bind(void 0,2),Ur.bind(void 0,3),Ur.bind(void 0,4),Ur.bind(void 0,5),Ur.bind(void 0,6),Ur.bind(void 0,7),Ur.bind(void 0,8),Or.bind(void 0,0,0,0,0,0),Or.bind(void 0,0,0,0,0,1),Or.bind(void 0,0,0,0,0,2),Or.bind(void 0,0,0,0,0,3),Or.bind(void 0,0,0,0,1,0),Or.bind(void 0,0,0,0,1,1),Or.bind(void 0,0,0,0,1,2),Or.bind(void 0,0,0,0,1,3),Or.bind(void 0,0,0,1,0,0),Or.bind(void 0,0,0,1,0,1),Or.bind(void 0,0,0,1,0,2),Or.bind(void 0,0,0,1,0,3),Or.bind(void 0,0,0,1,1,0),Or.bind(void 0,0,0,1,1,1),Or.bind(void 0,0,0,1,1,2),Or.bind(void 0,0,0,1,1,3),Or.bind(void 0,0,1,0,0,0),Or.bind(void 0,0,1,0,0,1),Or.bind(void 0,0,1,0,0,2),Or.bind(void 0,0,1,0,0,3),Or.bind(void 0,0,1,0,1,0),Or.bind(void 0,0,1,0,1,1),Or.bind(void 0,0,1,0,1,2),Or.bind(void 0,0,1,0,1,3),Or.bind(void 0,0,1,1,0,0),Or.bind(void 0,0,1,1,0,1),Or.bind(void 0,0,1,1,0,2),Or.bind(void 0,0,1,1,0,3),Or.bind(void 0,0,1,1,1,0),Or.bind(void 0,0,1,1,1,1),Or.bind(void 0,0,1,1,1,2),Or.bind(void 0,0,1,1,1,3),Or.bind(void 0,1,0,0,0,0),Or.bind(void 0,1,0,0,0,1),Or.bind(void 0,1,0,0,0,2),Or.bind(void 0,1,0,0,0,3),Or.bind(void 0,1,0,0,1,0),Or.bind(void 0,1,0,0,1,1),Or.bind(void 0,1,0,0,1,2),Or.bind(void 0,1,0,0,1,3),Or.bind(void 0,1,0,1,0,0),Or.bind(void 0,1,0,1,0,1),Or.bind(void 0,1,0,1,0,2),Or.bind(void 0,1,0,1,0,3),Or.bind(void 0,1,0,1,1,0),Or.bind(void 0,1,0,1,1,1),Or.bind(void 0,1,0,1,1,2),Or.bind(void 0,1,0,1,1,3),Or.bind(void 0,1,1,0,0,0),Or.bind(void 0,1,1,0,0,1),Or.bind(void 0,1,1,0,0,2),Or.bind(void 0,1,1,0,0,3),Or.bind(void 0,1,1,0,1,0),Or.bind(void 0,1,1,0,1,1),Or.bind(void 0,1,1,0,1,2),Or.bind(void 0,1,1,0,1,3),Or.bind(void 0,1,1,1,0,0),Or.bind(void 0,1,1,1,0,1),Or.bind(void 0,1,1,1,0,2),Or.bind(void 0,1,1,1,0,3),Or.bind(void 0,1,1,1,1,0),Or.bind(void 0,1,1,1,1,1),Or.bind(void 0,1,1,1,1,2),Or.bind(void 0,1,1,1,1,3)],Er.prototype.setState=function(e,t){return this.state[e]=t,this.activeState={key:e,value:this.state[e]},this.activeState},Er.prototype.getState=function(e){return this.state[e]||null},Ir.prototype.inboundIndex=function(e){return e>=0&&e<this.tokens.length},Ir.prototype.composeRUD=function(e){var t=this,r=e.map((function(e){return t[e[0]].apply(t,e.slice(1).concat(!0))})),n=function(e){return"object"==typeof e&&e.hasOwnProperty("FAIL")};if(r.every(n))return{FAIL:"composeRUD: one or more operations hasn't completed successfully",report:r.filter(n)};this.dispatch("composeRUD",[r.filter((function(e){return!n(e)}))])},Ir.prototype.replaceRange=function(e,t,r,n){t=null!==t?t:this.tokens.length;var a=r.every((function(e){return e instanceof Er}));if(!isNaN(e)&&this.inboundIndex(e)&&a){var o=this.tokens.splice.apply(this.tokens,[e,t].concat(r));return n||this.dispatch("replaceToken",[e,t,r]),[o,r]}return{FAIL:"replaceRange: invalid tokens or startIndex."}},Ir.prototype.replaceToken=function(e,t,r){if(!isNaN(e)&&this.inboundIndex(e)&&t instanceof Er){var n=this.tokens.splice(e,1,t);return r||this.dispatch("replaceToken",[e,t]),[n[0],t]}return{FAIL:"replaceToken: invalid token or index."}},Ir.prototype.removeRange=function(e,t,r){t=isNaN(t)?this.tokens.length:t;var n=this.tokens.splice(e,t);return r||this.dispatch("removeRange",[n,e,t]),n},Ir.prototype.removeToken=function(e,t){if(!isNaN(e)&&this.inboundIndex(e)){var r=this.tokens.splice(e,1);return t||this.dispatch("removeToken",[r,e]),r}return{FAIL:"removeToken: invalid token index."}},Ir.prototype.insertToken=function(e,t,r){return e.every((function(e){return e instanceof Er}))?(this.tokens.splice.apply(this.tokens,[t,0].concat(e)),r||this.dispatch("insertToken",[e,t]),e):{FAIL:"insertToken: invalid token(s)."}},Ir.prototype.registerModifier=function(e,t,r){this.events.newToken.subscribe((function(n,a){var o=[n,a],s=[n,a];if(null===t||!0===t.apply(this,o)){var i=r.apply(this,s);n.setState(e,i)}})),this.registeredModifiers.push(e)},Cr.prototype.subscribe=function(e){return"function"==typeof e?this.subscribers.push(e)-1:{FAIL:"invalid '"+this.eventId+"' event handler"}},Cr.prototype.unsubscribe=function(e){this.subscribers.splice(e,1)},Lr.prototype.setCurrentIndex=function(e){this.index=e,this.current=this.context[e],this.backtrack=this.context.slice(0,e),this.lookahead=this.context.slice(e+1)},Lr.prototype.get=function(e){switch(!0){case 0===e:return this.current;case e<0&&Math.abs(e)<=this.backtrack.length:return this.backtrack.slice(e)[0];case e>0&&e<=this.lookahead.length:return this.lookahead[e-1];default:return null}},Ir.prototype.rangeToText=function(e){if(e instanceof Rr)return this.getRangeTokens(e).map((function(e){return e.char})).join("")},Ir.prototype.getText=function(){return this.tokens.map((function(e){return e.char})).join("")},Ir.prototype.getContext=function(e){return this.registeredContexts[e]||null},Ir.prototype.on=function(e,t){var r=this.events[e];return r?r.subscribe(t):null},Ir.prototype.dispatch=function(e,t){var r=this,n=this.events[e];n instanceof Cr&&n.subscribers.forEach((function(e){e.apply(r,t||[])}))},Ir.prototype.registerContextChecker=function(e,t,r){if(this.getContext(e))return{FAIL:"context name '"+e+"' is already registered."};if("function"!=typeof t)return{FAIL:"missing context start check."};if("function"!=typeof r)return{FAIL:"missing context end check."};var n=new wr(e,t,r);return this.registeredContexts[e]=n,this.contextCheckers.push(n),n},Ir.prototype.getRangeTokens=function(e){var t=e.startIndex+e.endOffset;return[].concat(this.tokens.slice(e.startIndex,t))},Ir.prototype.getContextRanges=function(e){var t=this.getContext(e);return t?t.ranges:{FAIL:"context checker '"+e+"' is not registered."}},Ir.prototype.resetContextsRanges=function(){var e=this.registeredContexts;for(var t in e)e.hasOwnProperty(t)&&(e[t].ranges=[])},Ir.prototype.updateContextsRanges=function(){this.resetContextsRanges();for(var e=this.tokens.map((function(e){return e.char})),t=0;t<e.length;t++){var r=new Lr(e,t);this.runContextCheck(r)}this.dispatch("updateContextsRanges",[this.registeredContexts])},Ir.prototype.setEndOffset=function(e,t){var r=new Rr(this.getContext(t).openRange.startIndex,e,t),n=this.getContext(t).ranges;return r.rangeId=t+"."+n.length,n.push(r),this.getContext(t).openRange=null,r},Ir.prototype.runContextCheck=function(e){var t=this,r=e.index;this.contextCheckers.forEach((function(n){var a=n.contextName,o=t.getContext(a).openRange;if(!o&&n.checkStart(e)&&(o=new Rr(r,null,a),t.getContext(a).openRange=o,t.dispatch("contextStart",[a,r])),o&&n.checkEnd(e)){var s=r-o.startIndex+1,i=t.setEndOffset(s,a);t.dispatch("contextEnd",[a,i])}}))},Ir.prototype.tokenize=function(e){this.tokens=[],this.resetContextsRanges();var t=Array.from(e);this.dispatch("start");for(var r=0;r<t.length;r++){var n=t[r],a=new Lr(t,r);this.dispatch("next",[a]),this.runContextCheck(a);var o=new Er(n);this.tokens.push(o),this.dispatch("newToken",[o,a])}return this.dispatch("end",[this.tokens]),this.tokens},Pr.prototype.getDefaultScriptFeaturesIndexes=function(){for(var e=this.font.tables.gsub.scripts,t=0;t<e.length;t++){var r=e[t];if("DFLT"===r.tag)return r.script.defaultLangSys.featureIndexes}return[]},Pr.prototype.getScriptFeaturesIndexes=function(e){if(!this.font.tables.gsub)return[];if(!e)return this.getDefaultScriptFeaturesIndexes();for(var t=this.font.tables.gsub.scripts,r=0;r<t.length;r++){var n=t[r];if(n.tag===e&&n.script.defaultLangSys)return n.script.defaultLangSys.featureIndexes;var a=n.langSysRecords;if(a)for(var o=0;o<a.length;o++){var s=a[o];if(s.tag===e)return s.langSys.featureIndexes}}return this.getDefaultScriptFeaturesIndexes()},Pr.prototype.mapTagsToFeatures=function(e,t){for(var r={},n=0;n<e.length;n++){var a=e[n].tag,o=e[n].feature;r[a]=o}this.features[t].tags=r},Pr.prototype.getScriptFeatures=function(e){var t=this.features[e];if(this.features.hasOwnProperty(e))return t;var r=this.getScriptFeaturesIndexes(e);if(!r)return null;var n=this.font.tables.gsub;return t=r.map((function(e){return n.features[e]})),this.features[e]=t,this.mapTagsToFeatures(t,e),t},Pr.prototype.getSubstitutionType=function(e,t){return e.lookupType.toString()+t.substFormat.toString()},Pr.prototype.getLookupMethod=function(e,t){var r=this;switch(this.getSubstitutionType(e,t)){case"11":return function(e){return zr.apply(r,[e,t])};case"12":return function(e){return qr.apply(r,[e,t])};case"63":return function(e){return _r.apply(r,[e,t])};case"41":return function(e){return Xr.apply(r,[e,t])};case"21":return function(e){return Vr.apply(r,[e,t])};default:throw new Error("lookupType: "+e.lookupType+" - substFormat: "+t.substFormat+" is not yet supported")}},Pr.prototype.lookupFeature=function(e){var t=e.contextParams,r=t.index,n=this.getFeature({tag:e.tag,script:e.script});if(!n)return new Error("font '"+this.font.names.fullName.en+"' doesn't support feature '"+e.tag+"' for script '"+e.script+"'.");for(var a=this.getFeatureLookups(n),o=[].concat(t.context),s=0;s<a.length;s++)for(var i=a[s],u=this.getLookupSubtables(i),l=0;l<u.length;l++){var p=u[l],c=this.getSubstitutionType(i,p),h=this.getLookupMethod(i,p),f=void 0;switch(c){case"11":(f=h(t.current))&&o.splice(r,1,new Nr({id:11,tag:e.tag,substitution:f}));break;case"12":(f=h(t.current))&&o.splice(r,1,new Nr({id:12,tag:e.tag,substitution:f}));break;case"63":f=h(t),Array.isArray(f)&&f.length&&o.splice(r,1,new Nr({id:63,tag:e.tag,substitution:f}));break;case"41":(f=h(t))&&o.splice(r,1,new Nr({id:41,tag:e.tag,substitution:f}));break;case"21":(f=h(t.current))&&o.splice(r,1,new Nr({id:21,tag:e.tag,substitution:f}))}t=new Lr(o,r),Array.isArray(f)&&!f.length||(f=null)}return o.length?o:null},Pr.prototype.supports=function(e){if(!e.script)return!1;this.getScriptFeatures(e.script);var t=this.features.hasOwnProperty(e.script);if(!e.tag)return t;var r=this.features[e.script].some((function(t){return t.tag===e.tag}));return t&&r},Pr.prototype.getLookupSubtables=function(e){return e.subtables||null},Pr.prototype.getLookupByIndex=function(e){return this.font.tables.gsub.lookups[e]||null},Pr.prototype.getFeatureLookups=function(e){return e.lookupListIndexes.map(this.getLookupByIndex.bind(this))},Pr.prototype.getFeature=function(e){if(!this.font)return{FAIL:"No font was found"};this.features.hasOwnProperty(e.script)||this.getScriptFeatures(e.script);var t=this.features[e.script];return t?t.tags[e.tag]?this.features[e.script].tags[e.tag]:null:{FAIL:"No feature for script "+e.script}};var Zr={startCheck:function(e){var t=e.current,r=e.get(-1);return null===r&&Ar(t)||!Ar(r)&&Ar(t)},endCheck:function(e){var t=e.get(1);return null===t||!Ar(t)}},jr={startCheck:function(e){var t=e.current,r=e.get(-1);return(Ar(t)||Br(t))&&!Ar(r)},endCheck:function(e){var t=e.get(1);switch(!0){case null===t:return!0;case!Ar(t)&&!Br(t):var r=/\s/.test(t);if(!r)return!0;if(r)if(!e.lookahead.some((function(e){return Ar(e)||Br(e)})))return!0;break;default:return!1}}},Yr={11:function(e,t,r){t[r].setState(e.tag,e.substitution)},12:function(e,t,r){t[r].setState(e.tag,e.substitution)},63:function(e,t,r){e.substitution.forEach((function(n,a){t[r+a].setState(e.tag,n)}))},41:function(e,t,r){var n=t[r];n.setState(e.tag,e.substitution.ligGlyph);for(var a=e.substitution.components.length,o=0;o<a;o++)(n=t[r+o+1]).setState("deleted",!0)}};function Qr(e,t,r){e instanceof Nr&&Yr[e.id]&&Yr[e.id](e,t,r)}function Kr(e){var t=this,r="arab",n=this.featuresTags[r],a=this.tokenizer.getRangeTokens(e);if(1!==a.length){var o=new Lr(a.map((function(e){return e.getState("glyphIndex")})),0),s=new Lr(a.map((function(e){return e.char})),0);a.forEach((function(e,i){if(!Br(e.char)){o.setCurrentIndex(i),s.setCurrentIndex(i);var u,l=0;switch(function(e){for(var t=[].concat(e.backtrack),r=t.length-1;r>=0;r--){var n=t[r],a=Gr(n),o=Br(n);if(!a&&!o)return!0;if(a)return!1}return!1}(s)&&(l|=1),function(e){if(Gr(e.current))return!1;for(var t=0;t<e.lookahead.length;t++)if(!Br(e.lookahead[t]))return!0;return!1}(s)&&(l|=2),l){case 1:u="fina";break;case 2:u="init";break;case 3:u="medi"}if(-1!==n.indexOf(u)){var p=t.query.lookupFeature({tag:u,script:r,contextParams:o});if(p instanceof Error)return console.info(p.message);p.forEach((function(e,t){e instanceof Nr&&(Qr(e,a,t),o.context[t]=e.substitution)}))}}}))}}function Jr(e,t){return new Lr(e.map((function(e){return e.activeState.value})),t||0)}function $r(e){var t=this,r=this.tokenizer.getRangeTokens(e),n=Jr(r);n.context.forEach((function(e,a){n.setCurrentIndex(a);var o=t.query.lookupFeature({tag:"rlig",script:"arab",contextParams:n});o.length&&(o.forEach((function(e){return Qr(e,r,a)})),n=Jr(r))}))}var en={startCheck:function(e){var t=e.current,r=e.get(-1);return null===r&&Fr(t)||!Fr(r)&&Fr(t)},endCheck:function(e){var t=e.get(1);return null===t||!Fr(t)}};function tn(e,t){return new Lr(e.map((function(e){return e.activeState.value})),t||0)}function rn(e){var t=this,r=this.tokenizer.getRangeTokens(e),n=tn(r);n.context.forEach((function(e,a){n.setCurrentIndex(a);var o=t.query.lookupFeature({tag:"liga",script:"latn",contextParams:n});o.length&&(o.forEach((function(e){return Qr(e,r,a)})),n=tn(r))}))}function nn(e){this.baseDir=e||"ltr",this.tokenizer=new Ir,this.featuresTags={}}function an(e){var t=this.contextChecks[e+"Check"];return this.tokenizer.registerContextChecker(e,t.startCheck,t.endCheck)}function on(){return an.call(this,"latinWord"),an.call(this,"arabicWord"),an.call(this,"arabicSentence"),this.tokenizer.tokenize(this.text)}function sn(){var e=this;this.tokenizer.getContextRanges("arabicSentence").forEach((function(t){var r=e.tokenizer.getRangeTokens(t);e.tokenizer.replaceRange(t.startIndex,t.endOffset,r.reverse())}))}function un(){if(-1===this.tokenizer.registeredModifiers.indexOf("glyphIndex"))throw new Error("glyphIndex modifier is required to apply arabic presentation features.")}function ln(){var e=this;this.featuresTags.hasOwnProperty("arab")&&(un.call(this),this.tokenizer.getContextRanges("arabicWord").forEach((function(t){Kr.call(e,t)})))}function pn(){var e=this,t="arab";this.featuresTags.hasOwnProperty(t)&&-1!==this.featuresTags[t].indexOf("rlig")&&(un.call(this),this.tokenizer.getContextRanges("arabicWord").forEach((function(t){$r.call(e,t)})))}function cn(){var e=this,t="latn";this.featuresTags.hasOwnProperty(t)&&-1!==this.featuresTags[t].indexOf("liga")&&(un.call(this),this.tokenizer.getContextRanges("latinWord").forEach((function(t){rn.call(e,t)})))}function hn(e){(e=e||{}).tables=e.tables||{},e.empty||(Lt(e.familyName,"When creating a new Font object, familyName is required."),Lt(e.styleName,"When creating a new Font object, styleName is required."),Lt(e.unitsPerEm,"When creating a new Font object, unitsPerEm is required."),Lt(e.ascender,"When creating a new Font object, ascender is required."),Lt(e.descender<=0,"When creating a new Font object, negative descender value is required."),this.names={fontFamily:{en:e.familyName||" "},fontSubfamily:{en:e.styleName||" "},fullName:{en:e.fullName||e.familyName+" "+e.styleName},postScriptName:{en:e.postScriptName||(e.familyName+e.styleName).replace(/\s/g,"")},designer:{en:e.designer||" "},designerURL:{en:e.designerURL||" "},manufacturer:{en:e.manufacturer||" "},manufacturerURL:{en:e.manufacturerURL||" "},license:{en:e.license||" "},licenseURL:{en:e.licenseURL||" "},version:{en:e.version||"Version 0.1"},description:{en:e.description||" "},copyright:{en:e.copyright||" "},trademark:{en:e.trademark||" "}},this.unitsPerEm=e.unitsPerEm||1e3,this.ascender=e.ascender,this.descender=e.descender,this.createdTimestamp=e.createdTimestamp,this.tables=Object.assign(e.tables,{os2:Object.assign({usWeightClass:e.weightClass||this.usWeightClasses.MEDIUM,usWidthClass:e.widthClass||this.usWidthClasses.MEDIUM,fsSelection:e.fsSelection||this.fsSelectionValues.REGULAR},e.tables.os2)})),this.supported=!0,this.glyphs=new Me.GlyphSet(this,e.glyphs||[]),this.encoding=new de(this),this.position=new Ut(this),this.substitution=new Ot(this),this.tables=this.tables||{},this._push=null,this._hmtxTableData={},Object.defineProperty(this,"hinting",{get:function(){return this._hinting?this._hinting:"truetype"===this.outlinesFormat?this._hinting=new zt(this):void 0}})}function fn(e,t){var r=JSON.stringify(e),n=256;for(var a in t){var o=parseInt(a);if(o&&!(o<256)){if(JSON.stringify(t[a])===r)return o;n<=o&&(n=o+1)}}return t[n]=e,n}function dn(e,t,r){var n=fn(t.name,r);return[{name:"tag_"+e,type:"TAG",value:t.tag},{name:"minValue_"+e,type:"FIXED",value:t.minValue<<16},{name:"defaultValue_"+e,type:"FIXED",value:t.defaultValue<<16},{name:"maxValue_"+e,type:"FIXED",value:t.maxValue<<16},{name:"flags_"+e,type:"USHORT",value:0},{name:"nameID_"+e,type:"USHORT",value:n}]}function vn(e,t,r){var n={},a=new ie.Parser(e,t);return n.tag=a.parseTag(),n.minValue=a.parseFixed(),n.defaultValue=a.parseFixed(),n.maxValue=a.parseFixed(),a.skip("uShort",1),n.name=r[a.parseUShort()]||{},n}function gn(e,t,r,n){for(var a=[{name:"nameID_"+e,type:"USHORT",value:fn(t.name,n)},{name:"flags_"+e,type:"USHORT",value:0}],o=0;o<r.length;++o){var s=r[o].tag;a.push({name:"axis_"+e+" "+s,type:"FIXED",value:t.coordinates[s]<<16})}return a}function mn(e,t,r,n){var a={},o=new ie.Parser(e,t);a.name=n[o.parseUShort()]||{},o.skip("uShort",1),a.coordinates={};for(var s=0;s<r.length;++s)a.coordinates[r[s].tag]=o.parseFixed();return a}nn.prototype.setText=function(e){this.text=e},nn.prototype.contextChecks={latinWordCheck:en,arabicWordCheck:Zr,arabicSentenceCheck:jr},nn.prototype.registerFeatures=function(e,t){var r=this,n=t.filter((function(t){return r.query.supports({script:e,tag:t})}));this.featuresTags.hasOwnProperty(e)?this.featuresTags[e]=this.featuresTags[e].concat(n):this.featuresTags[e]=n},nn.prototype.applyFeatures=function(e,t){if(!e)throw new Error("No valid font was provided to apply features");this.query||(this.query=new Pr(e));for(var r=0;r<t.length;r++){var n=t[r];this.query.supports({script:n.script})&&this.registerFeatures(n.script,n.tags)}},nn.prototype.registerModifier=function(e,t,r){this.tokenizer.registerModifier(e,t,r)},nn.prototype.checkContextReady=function(e){return!!this.tokenizer.getContext(e)},nn.prototype.applyFeaturesToContexts=function(){this.checkContextReady("arabicWord")&&(ln.call(this),pn.call(this)),this.checkContextReady("latinWord")&&cn.call(this),this.checkContextReady("arabicSentence")&&sn.call(this)},nn.prototype.processText=function(e){this.text&&this.text===e||(this.setText(e),on.call(this),this.applyFeaturesToContexts())},nn.prototype.getBidiText=function(e){return this.processText(e),this.tokenizer.getText()},nn.prototype.getTextGlyphs=function(e){this.processText(e);for(var t=[],r=0;r<this.tokenizer.tokens.length;r++){var n=this.tokenizer.tokens[r];if(!n.state.deleted){var a=n.activeState.value;t.push(Array.isArray(a)?a[0]:a)}}return t},hn.prototype.hasChar=function(e){return null!==this.encoding.charToGlyphIndex(e)},hn.prototype.charToGlyphIndex=function(e){return this.encoding.charToGlyphIndex(e)},hn.prototype.charToGlyph=function(e){var t=this.charToGlyphIndex(e),r=this.glyphs.get(t);return r||(r=this.glyphs.get(0)),r},hn.prototype.updateFeatures=function(e){return this.defaultRenderOptions.features.map((function(t){return"latn"===t.script?{script:"latn",tags:t.tags.filter((function(t){return e[t]}))}:t}))},hn.prototype.stringToGlyphs=function(e,t){var r=this,n=new nn;n.registerModifier("glyphIndex",null,(function(e){return r.charToGlyphIndex(e.char)}));var a=t?this.updateFeatures(t.features):this.defaultRenderOptions.features;n.applyFeatures(this,a);for(var o=n.getTextGlyphs(e),s=o.length,i=new Array(s),u=this.glyphs.get(0),l=0;l<s;l+=1)i[l]=this.glyphs.get(o[l])||u;return i},hn.prototype.nameToGlyphIndex=function(e){return this.glyphNames.nameToGlyphIndex(e)},hn.prototype.nameToGlyph=function(e){var t=this.nameToGlyphIndex(e),r=this.glyphs.get(t);return r||(r=this.glyphs.get(0)),r},hn.prototype.glyphIndexToName=function(e){return this.glyphNames.glyphIndexToName?this.glyphNames.glyphIndexToName(e):""},hn.prototype.getKerningValue=function(e,t){e=e.index||e,t=t.index||t;var r=this.position.defaultKerningTables;return r?this.position.getKerningValue(r,e,t):this.kerningPairs[e+","+t]||0},hn.prototype.defaultRenderOptions={kerning:!0,features:[{script:"arab",tags:["init","medi","fina","rlig"]},{script:"latn",tags:["liga","rlig"]}]},hn.prototype.forEachGlyph=function(e,t,r,n,a,o){t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:72,a=Object.assign({},this.defaultRenderOptions,a);var s,i=1/this.unitsPerEm*n,u=this.stringToGlyphs(e,a);if(a.kerning){var l=a.script||this.position.getDefaultScriptName();s=this.position.getKerningTables(l,a.language)}for(var p=0;p<u.length;p+=1){var c=u[p];o.call(this,c,t,r,n,a),c.advanceWidth&&(t+=c.advanceWidth*i),a.kerning&&p<u.length-1&&(t+=(s?this.position.getKerningValue(s,c.index,u[p+1].index):this.getKerningValue(c,u[p+1]))*i),a.letterSpacing?t+=a.letterSpacing*n:a.tracking&&(t+=a.tracking/1e3*n)}return t},hn.prototype.getPath=function(e,t,r,n,a){var o=new R;return this.forEachGlyph(e,t,r,n,a,(function(e,t,r,n){var s=e.getPath(t,r,n,a,this);o.extend(s)})),o},hn.prototype.getPaths=function(e,t,r,n,a){var o=[];return this.forEachGlyph(e,t,r,n,a,(function(e,t,r,n){var s=e.getPath(t,r,n,a,this);o.push(s)})),o},hn.prototype.getAdvanceWidth=function(e,t,r){return this.forEachGlyph(e,0,0,t,r,(function(){}))},hn.prototype.draw=function(e,t,r,n,a,o){this.getPath(t,r,n,a,o).draw(e)},hn.prototype.drawPoints=function(e,t,r,n,a,o){this.forEachGlyph(t,r,n,a,o,(function(t,r,n,a){t.drawPoints(e,r,n,a)}))},hn.prototype.drawMetrics=function(e,t,r,n,a,o){this.forEachGlyph(t,r,n,a,o,(function(t,r,n,a){t.drawMetrics(e,r,n,a)}))},hn.prototype.getEnglishName=function(e){var t=this.names[e];if(t)return t.en},hn.prototype.validate=function(){var e=this;function t(t){var r=e.getEnglishName(t);r&&r.trim().length}t("fontFamily"),t("weightName"),t("manufacturer"),t("copyright"),t("version"),this.unitsPerEm},hn.prototype.toTables=function(){return xt(this)},hn.prototype.toBuffer=function(){return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."),this.toArrayBuffer()},hn.prototype.toArrayBuffer=function(){for(var e=this.toTables().encode(),t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n<e.length;n++)r[n]=e[n];return t},hn.prototype.download=function(e){var t=this.getEnglishName("fontFamily"),n=this.getEnglishName("fontSubfamily");e=e||t.replace(/\s/g,"")+"-"+n+".otf";var a=this.toArrayBuffer();if("undefined"!=typeof window)if(window.URL=window.URL||window.webkitURL,window.URL){var o=new DataView(a),s=new Blob([o],{type:"font/opentype"}),i=document.createElement("a");i.href=window.URL.createObjectURL(s),i.download=e;var u=document.createEvent("MouseEvents");u.initEvent("click",!0,!1),i.dispatchEvent(u)}else console.warn("Font file could not be downloaded. Try using a different browser.");else{var l=r(102),p=function(e){for(var t=new Buffer(e.byteLength),r=new Uint8Array(e),n=0;n<t.length;++n)t[n]=r[n];return t}(a);l.writeFileSync(e,p)}},hn.prototype.fsSelectionValues={ITALIC:1,UNDERSCORE:2,NEGATIVE:4,OUTLINED:8,STRIKEOUT:16,BOLD:32,REGULAR:64,USER_TYPO_METRICS:128,WWS:256,OBLIQUE:512},hn.prototype.usWidthClasses={ULTRA_CONDENSED:1,EXTRA_CONDENSED:2,CONDENSED:3,SEMI_CONDENSED:4,MEDIUM:5,SEMI_EXPANDED:6,EXPANDED:7,EXTRA_EXPANDED:8,ULTRA_EXPANDED:9},hn.prototype.usWeightClasses={THIN:100,EXTRA_LIGHT:200,LIGHT:300,NORMAL:400,MEDIUM:500,SEMI_BOLD:600,BOLD:700,EXTRA_BOLD:800,BLACK:900};var yn={make:function(e,t){var r=new $.Table("fvar",[{name:"version",type:"ULONG",value:65536},{name:"offsetToData",type:"USHORT",value:0},{name:"countSizePairs",type:"USHORT",value:2},{name:"axisCount",type:"USHORT",value:e.axes.length},{name:"axisSize",type:"USHORT",value:20},{name:"instanceCount",type:"USHORT",value:e.instances.length},{name:"instanceSize",type:"USHORT",value:4+4*e.axes.length}]);r.offsetToData=r.sizeOf();for(var n=0;n<e.axes.length;n++)r.fields=r.fields.concat(dn(n,e.axes[n],t));for(var a=0;a<e.instances.length;a++)r.fields=r.fields.concat(gn(a,e.instances[a],e.axes,t));return r},parse:function(e,t,r){var n=new ie.Parser(e,t),a=n.parseULong();C.argument(65536===a,"Unsupported fvar table version.");var o=n.parseOffset16();n.skip("uShort",1);for(var s=n.parseUShort(),i=n.parseUShort(),u=n.parseUShort(),l=n.parseUShort(),p=[],c=0;c<s;c++)p.push(vn(e,t+o+c*i,r));for(var h=[],f=t+o+s*i,d=0;d<u;d++)h.push(mn(e,f+d*l,p,r));return{axes:p,instances:h}}},bn=function(){return{coverage:this.parsePointer(oe.coverage),attachPoints:this.parseList(oe.pointer(oe.uShortList))}},xn=function(){var e=this.parseUShort();return C.argument(1===e||2===e||3===e,"Unsupported CaretValue table version."),1===e?{coordinate:this.parseShort()}:2===e?{pointindex:this.parseShort()}:3===e?{coordinate:this.parseShort()}:void 0},Sn=function(){return this.parseList(oe.pointer(xn))},Mn=function(){return{coverage:this.parsePointer(oe.coverage),ligGlyphs:this.parseList(oe.pointer(Sn))}},Tn=function(){return this.parseUShort(),this.parseList(oe.pointer(oe.coverage))},kn={parse:function(e,t){var r=new oe(e,t=t||0),n=r.parseVersion(1);C.argument(1===n||1.2===n||1.3===n,"Unsupported GDEF table version.");var a={version:n,classDef:r.parsePointer(oe.classDef),attachList:r.parsePointer(bn),ligCaretList:r.parsePointer(Mn),markAttachClassDef:r.parsePointer(oe.classDef)};return n>=1.2&&(a.markGlyphSets=r.parsePointer(Tn)),a}},Un=new Array(10);Un[1]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{posFormat:1,coverage:this.parsePointer(oe.coverage),value:this.parseValueRecord()}:2===t?{posFormat:2,coverage:this.parsePointer(oe.coverage),values:this.parseValueRecordList()}:void C.assert(!1,"0x"+e.toString(16)+": GPOS lookup type 1 format must be 1 or 2.")},Un[2]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();C.assert(1===t||2===t,"0x"+e.toString(16)+": GPOS lookup type 2 format must be 1 or 2.");var r=this.parsePointer(oe.coverage),n=this.parseUShort(),a=this.parseUShort();if(1===t)return{posFormat:t,coverage:r,valueFormat1:n,valueFormat2:a,pairSets:this.parseList(oe.pointer(oe.list((function(){return{secondGlyph:this.parseUShort(),value1:this.parseValueRecord(n),value2:this.parseValueRecord(a)}}))))};if(2===t){var o=this.parsePointer(oe.classDef),s=this.parsePointer(oe.classDef),i=this.parseUShort(),u=this.parseUShort();return{posFormat:t,coverage:r,valueFormat1:n,valueFormat2:a,classDef1:o,classDef2:s,class1Count:i,class2Count:u,classRecords:this.parseList(i,oe.list(u,(function(){return{value1:this.parseValueRecord(n),value2:this.parseValueRecord(a)}})))}}},Un[3]=function(){return{error:"GPOS Lookup 3 not supported"}},Un[4]=function(){return{error:"GPOS Lookup 4 not supported"}},Un[5]=function(){return{error:"GPOS Lookup 5 not supported"}},Un[6]=function(){return{error:"GPOS Lookup 6 not supported"}},Un[7]=function(){return{error:"GPOS Lookup 7 not supported"}},Un[8]=function(){return{error:"GPOS Lookup 8 not supported"}},Un[9]=function(){return{error:"GPOS Lookup 9 not supported"}};var On=new Array(10),En={parse:function(e,t){var r=new oe(e,t=t||0),n=r.parseVersion(1);return C.argument(1===n||1.1===n,"Unsupported GPOS table version "+n),1===n?{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(Un)}:{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(Un),variations:r.parseFeatureVariationsList()}},make:function(e){return new $.Table("GPOS",[{name:"version",type:"ULONG",value:65536},{name:"scripts",type:"TABLE",value:new $.ScriptList(e.scripts)},{name:"features",type:"TABLE",value:new $.FeatureList(e.features)},{name:"lookups",type:"TABLE",value:new $.LookupList(e.lookups,On)}])}},Rn={parse:function(e,t){var r=new ie.Parser(e,t),n=r.parseUShort();if(0===n)return function(e){var t={};e.skip("uShort");var r=e.parseUShort();C.argument(0===r,"Unsupported kern sub-table version."),e.skip("uShort",2);var n=e.parseUShort();e.skip("uShort",3);for(var a=0;a<n;a+=1){var o=e.parseUShort(),s=e.parseUShort(),i=e.parseShort();t[o+","+s]=i}return t}(r);if(1===n)return function(e){var t={};e.skip("uShort"),e.parseULong()>1&&console.warn("Only the first kern subtable is supported."),e.skip("uLong");var r=255&e.parseUShort();if(e.skip("uShort"),0===r){var n=e.parseUShort();e.skip("uShort",3);for(var a=0;a<n;a+=1){var o=e.parseUShort(),s=e.parseUShort(),i=e.parseShort();t[o+","+s]=i}}return t}(r);throw new Error("Unsupported kern table version ("+n+").")}},wn={parse:function(e,t,r,n){for(var a=new ie.Parser(e,t),o=n?a.parseUShort:a.parseULong,s=[],i=0;i<r+1;i+=1){var u=o.call(a);n&&(u*=2),s.push(u)}return s}};function Ln(e,t){r(102).readFile(e,(function(e,r){if(e)return t(e.message);t(null,wt(r))}))}function Cn(e,t){var r=new XMLHttpRequest;r.open("get",e,!0),r.responseType="arraybuffer",r.onload=function(){return r.response?t(null,r.response):t("Font could not be loaded: "+r.statusText)},r.onerror=function(){t("Font could not be loaded")},r.send()}function Dn(e,t){for(var r=[],n=12,a=0;a<t;a+=1){var o=ie.getTag(e,n),s=ie.getULong(e,n+4),i=ie.getULong(e,n+8),u=ie.getULong(e,n+12);r.push({tag:o,checksum:s,offset:i,length:u,compression:!1}),n+=16}return r}function In(e,t){if("WOFF"===t.compression){var r=new Uint8Array(e.buffer,t.offset+2,t.compressedLength-2),n=new Uint8Array(t.length);if(U(r,n),n.byteLength!==t.length)throw new Error("Decompression error: "+t.tag+" decompressed length doesn't match recorded length");return{data:new DataView(n.buffer,0),offset:0}}return{data:e,offset:t.offset}}function An(e,t){var r,n;t=null==t?{}:t;var a,o,s,i,u,l,p,c,h,f,d,v,g,m=new hn({empty:!0}),y=new DataView(e,0),b=[],x=ie.getTag(y,0);if(x===String.fromCharCode(0,1,0,0)||"true"===x||"typ1"===x)m.outlinesFormat="truetype",b=Dn(y,a=ie.getUShort(y,4));else if("OTTO"===x)m.outlinesFormat="cff",b=Dn(y,a=ie.getUShort(y,4));else{if("wOFF"!==x)throw new Error("Unsupported OpenType signature "+x);var S=ie.getTag(y,4);if(S===String.fromCharCode(0,1,0,0))m.outlinesFormat="truetype";else{if("OTTO"!==S)throw new Error("Unsupported OpenType flavor "+x);m.outlinesFormat="cff"}b=function(e,t){for(var r=[],n=44,a=0;a<t;a+=1){var o,s=ie.getTag(e,n),i=ie.getULong(e,n+4),u=ie.getULong(e,n+8),l=ie.getULong(e,n+12);o=u<l&&"WOFF",r.push({tag:s,offset:i,compression:o,compressedLength:u,length:l}),n+=20}return r}(y,a=ie.getUShort(y,12))}for(var M=0;M<a;M+=1){var T=b[M],k=void 0;switch(T.tag){case"cmap":k=In(y,T),m.tables.cmap=le.parse(k.data,k.offset),m.encoding=new ve(m.tables.cmap);break;case"cvt ":k=In(y,T),g=new ie.Parser(k.data,k.offset),m.tables.cvt=g.parseShortList(T.length/2);break;case"fvar":s=T;break;case"fpgm":k=In(y,T),g=new ie.Parser(k.data,k.offset),m.tables.fpgm=g.parseByteList(T.length);break;case"head":k=In(y,T),m.tables.head=qe.parse(k.data,k.offset),m.unitsPerEm=m.tables.head.unitsPerEm,r=m.tables.head.indexToLocFormat;break;case"hhea":k=In(y,T),m.tables.hhea=We.parse(k.data,k.offset),m.ascender=m.tables.hhea.ascender,m.descender=m.tables.hhea.descender,m.numberOfHMetrics=m.tables.hhea.numberOfHMetrics;break;case"hmtx":c=T;break;case"ltag":k=In(y,T),n=Xe.parse(k.data,k.offset);break;case"maxp":k=In(y,T),m.tables.maxp=Ve.parse(k.data,k.offset),m.numGlyphs=m.tables.maxp.numGlyphs;break;case"name":d=T;break;case"OS/2":k=In(y,T),m.tables.os2=it.parse(k.data,k.offset);break;case"post":k=In(y,T),m.tables.post=ut.parse(k.data,k.offset),m.glyphNames=new me(m.tables.post);break;case"prep":k=In(y,T),g=new ie.Parser(k.data,k.offset),m.tables.prep=g.parseByteList(T.length);break;case"glyf":i=T;break;case"loca":f=T;break;case"CFF ":o=T;break;case"kern":h=T;break;case"GDEF":u=T;break;case"GPOS":l=T;break;case"GSUB":p=T;break;case"meta":v=T}}var U=In(y,d);if(m.tables.name=ot.parse(U.data,U.offset,n),m.names=m.tables.name,i&&f){var O=0===r,E=In(y,f),R=wn.parse(E.data,E.offset,m.numGlyphs,O),w=In(y,i);m.glyphs=Ht.parse(w.data,w.offset,R,m,t)}else{if(!o)throw new Error("Font doesn't contain TrueType or CFF outlines.");var L=In(y,o);ze.parse(L.data,L.offset,m,t)}var C=In(y,c);if(_e.parse(m,C.data,C.offset,m.numberOfHMetrics,m.numGlyphs,m.glyphs,t),function(e,t){t.lowMemory?function(e){e._IndexToUnicodeMap={};for(var t=e.tables.cmap.glyphIndexMap,r=Object.keys(t),n=0;n<r.length;n+=1){var a=r[n],o=t[a];void 0===e._IndexToUnicodeMap[o]?e._IndexToUnicodeMap[o]={unicodes:[parseInt(a)]}:e._IndexToUnicodeMap[o].unicodes.push(parseInt(a))}}(e):function(e){for(var t,r=e.tables.cmap.glyphIndexMap,n=Object.keys(r),a=0;a<n.length;a+=1){var o=n[a],s=r[o];(t=e.glyphs.get(s)).addUnicode(parseInt(o))}for(var i=0;i<e.glyphs.length;i+=1)t=e.glyphs.get(i),e.cffEncoding?e.isCIDFont?t.name="gid"+i:t.name=e.cffEncoding.charset[i]:e.glyphNames.names&&(t.name=e.glyphNames.glyphIndexToName(i))}(e)}(m,t),h){var D=In(y,h);m.kerningPairs=Rn.parse(D.data,D.offset)}else m.kerningPairs={};if(u){var I=In(y,u);m.tables.gdef=kn.parse(I.data,I.offset)}if(l){var A=In(y,l);m.tables.gpos=En.parse(A.data,A.offset),m.position.init()}if(p){var G=In(y,p);m.tables.gsub=ht.parse(G.data,G.offset)}if(s){var B=In(y,s);m.tables.fvar=yn.parse(B.data,B.offset,m.names)}if(v){var F=In(y,v);m.tables.meta=ft.parse(F.data,F.offset),m.metas=m.tables.meta}return m}function Gn(e,t,r){r=null==r?{}:r;var n="undefined"!=typeof window||r.isUrl?Cn:Ln;return new Promise((function(a,o){n(e,(function(e,n){if(e){if(t)return t(e);o(e)}var s;try{s=An(n,r)}catch(e){if(t)return t(e,null);o(e)}if(t)return t(null,s);a(s)}))}))}function Bn(e,t){return An(wt(r(102).readFileSync(e)),t)}const Fn=Object.freeze({__proto__:null,Font:hn,Glyph:be,Path:R,BoundingBox:E,_parse:ie,parse:An,load:Gn,loadSync:Bn})},102:()=>{}},r={};function n(e){var a=r[e];if(void 0!==a)return a.exports;var o=r[e]={exports:{}};return t[e].call(o.exports,o,o.exports,n),o.exports}n.m=t,e=[],n.O=(t,r,a,o)=>{if(!r){var s=1/0;for(p=0;p<e.length;p++){for(var[r,a,o]=e[p],i=!0,u=0;u<r.length;u++)(!1&o||s>=o)&&Object.keys(n.O).every((e=>n.O[e](r[u])))?r.splice(u--,1):(i=!1,o<s&&(s=o));if(i){e.splice(p--,1);var l=a();void 0!==l&&(t=l)}}return t}o=o||0;for(var p=e.length;p>0&&e[p-1][2]>o;p--)e[p]=e[p-1];e[p]=[r,a,o]},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={712:0};n.O.j=t=>0===e[t];var t=(t,r)=>{var a,o,[s,i,u]=r,l=0;if(s.some((t=>0!==e[t]))){for(a in i)n.o(i,a)&&(n.m[a]=i[a]);if(u)var p=u(n)}for(t&&t(r);l<s.length;l++)o=s[l],n.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return n.O(p)},r=self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),n(187),n(422);var a=n(887);a=n.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUUsR0FBSyxLQUFPQSxFQUFFLElBQU0sS0FBT0EsRUFBRSxJQUFNLEtBQU9BLEVBQUUsSUFBTSxLQUFPQSxFQUFFLElBQU0sS0FBT0EsRUFBRSxJQUFNLEtBQU9BLEVBQUUsSUFBTSxHQUNsUCxDQVFPLFNBQVMsR0FBS0EsR0FDbkIsT0FBT25DLEtBQUs2SixNQUFNMUgsRUFBRSxHQUFJQSxFQUFFLEdBQUlBLEVBQUUsR0FBSUEsRUFBRSxHQUFJQSxFQUFFLEdBQUlBLEVBQUUsR0FBSUEsRUFBRSxHQUFJQSxFQUFFLEdBQUlBLEVBQUUsR0FBSUEsRUFBRSxHQUFJQSxFQUFFLElBQUtBLEVBQUUsSUFBS0EsRUFBRSxJQUFLQSxFQUFFLElBQUtBLEVBQUUsSUFBS0EsRUFBRSxJQUNySCxDQVVPLFNBQVMsR0FBSXVGLEVBQUt2RixFQUFHQyxHQWlCMUIsT0FoQkFzRixFQUFJLEdBQUt2RixFQUFFLEdBQUtDLEVBQUUsR0FDbEJzRixFQUFJLEdBQUt2RixFQUFFLEdBQUtDLEVBQUUsR0FDbEJzRixFQUFJLEdBQUt2RixFQUFFLEdBQUtDLEVBQUUsR0FDbEJzRixFQUFJLEdBQUt2RixFQUFFLEdBQUtDLEVBQUUsR0FDbEJzRixFQUFJLEdBQUt2RixFQUFFLEdBQUtDLEVBQUUsR0FDbEJzRixFQUFJLEdBQUt2RixFQUFFLEdBQUtDLEVBQUUsR0FDbEJzRixFQUFJLEdBQUt2RixFQUFFLEdBQUtDLEVBQUUsR0FDbEJzRixFQUFJLEdBQUt2RixFQUFFLEdBQUtDLEVBQUUsR0FDbEJzRixFQUFJLEdBQUt2RixFQUFFLEdBQUtDLEVBQUUsR0FDbEJzRixFQUFJLEdBQUt2RixFQUFFLEdBQUtDLEVBQUUsR0FDbEJzRixFQUFJLElBQU12RixFQUFFLElBQU1DLEVBQUUsSUFDcEJzRixFQUFJLElBQU12RixFQUFFLElBQU1DLEVBQUUsSUFDcEJzRixFQUFJLElBQU12RixFQUFFLElBQU1DLEVBQUUsSUFDcEJzRixFQUFJLElBQU12RixFQUFFLElBQU1DLEVBQUUsSUFDcEJzRixFQUFJLElBQU12RixFQUFFLElB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Q0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxVQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxRQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxVQUNKLEdBQUksVUFDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLFFBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLFVBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLEdBQUksS0FDSixHQUFJLEtBQ0osR0FBSSxLQUNKLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxhQUNMLElBQUssS0FDTCxJQUFLLEtBQ0wsSUFBSyxNQWVMQyxHQUFzQixDQUN0QixFQUFHLEVBQ0gsRUFBRyxFQUNILEVBQUcsRUFDSCxFQUFHLEVBQ0gsRUFBRyxFQUNILEVBQUcsRUFDSCxFQUFHLEVBQ0gsRUFBRyxFQUNILEVBQUcsRUFDSCxFQUFHLEVBQ0gsR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxHQUNKLEdBQUksRUFDSixHQUFJLEdBQ0osR0FBSSxHQUNKLEdBQUksR0FDSixHQUFJLEdBQ0osR0FBSSxHQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEdBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksR0FDSixHQUFJLEdBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEdBQ0osR0FBSSxHQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEdBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEdBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxHQUNKLEdBQUksR0FDSixHQUFJLEdBQ0osR0FBSSxHQUNKLEdBQUksR0FDSixHQUFJLEdBQ0osR0FBSSxHQUNKLEdBQUksR0FDSixHQUFJLEdBQ0osR0FBSSxHQUNKLEdBQUksR0FDSixHQUFJLEdBQ0osR0FBSSxHQUNKLEdBQUksR0FDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxHQUNKLEdBQUksR0FDSixHQUFJLEdBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLEdBQUksRUFDSixHQUFJLEVBQ0osR0FBSSxFQUNKLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssR0FDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssR0FDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxFQUNMLElBQUssRUFDTCxJQUFLLEVBQ0wsSUFBSyxHQW1CTEMsR0FBbUIsQ0FDbkIsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLE1BQ1IsS0FBUSxLQUNSLEtBQVEsUUFDUixNQUFRLFFBQ1IsS0FBUSxLQUNSLEtBQVEsUUFDUixNQUFRLFFBQ1IsTUFBUSxRQUNSLE1BQVEsUUFDUixLQUFRLFFBQ1IsS0FBUSxNQUNSLEtBQVEsUUFDUixNQUFRLFFBQ1IsS0FBUSxRQUNSLE1BQVEsUUFDUixLQUFRLE1BQ1IsTUFBUSxRQUNSLEtBQVEsUUFDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsVUFDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsUUFDUixLQUFRLFVBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsUUFDUixLQUFRLFFBQ1IsS0FBUSxLQUNSLEtBQVEsUUFDUixLQUFRLFFBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLFFBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLE1BQ1IsS0FBUSxLQUNSLEtBQVEsUUFDUixLQUFRLEtBQ1IsS0FBUSxRQUNSLE1BQVEsUUFDUixLQUFRLFFBQ1IsS0FBUSxTQUNSLE1BQVEsUUFDUixLQUFRLFFBQ1IsS0FBUSxRQUNSLE1BQVEsUUFDUixLQUFRLFFBQ1IsTUFBUSxRQUNSLE1BQVEsUUFDUixLQUFRLFFBQ1IsTUFBUSxRQUNSLEtBQVEsUUFDUixLQUFRLEtBQ1IsTUFBUSxRQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxNQUNSLEtBQVEsS0FDUixLQUFRLFFBQ1IsS0FBUSxRQUNSLEtBQVEsS0FDUixLQUFRLFFBQ1IsS0FBUSxRQUNSLEtBQVEsUUFDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLFFBQ1IsS0FBUSxLQUNSLEtBQVEsUUFDUixLQUFRLFFBQ1IsS0FBUSxRQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxVQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLFFBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsTUFDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsTUFDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsTUFDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsUUFDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxNQUNSLEtBQVEsS0FDUixLQUFRLE1BQ1IsS0FBUSxLQUNSLEtBQVEsUUFDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1IsS0FBUSxLQUNSLEtBQVEsS0FDUixLQUFRLEtBQ1Is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QUssS0FDckIsQ0FBQ3d3QyxNQUFPLElBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sTUFBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxNQUFReHdDLElBQUssT0FDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxNQUFReHdDLElBQUssT0FDckIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dDLE1BQU8sTUFBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxNQUFReHdDLElBQUssT0FDckIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dDLE1BQU8sTUFBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxNQUFReHdDLElBQUssT0FDckIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dDLE1BQU8sTUFBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxNQUFReHdDLElBQUssT0FDckIsQ0FBQ3d3QyxNQUFPLE1BQVN4d0MsSUFBSyxPQUN0QixDQUFDd3dDLE1BQU8sTUFBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxNQUFReHdDLElBQUssT0FDckIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dDLE1BQU8sTUFBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxNQUFReHdDLElBQUssT0FDckIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dDLE1BQU8sTUFBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxNQUFReHdDLElBQUssT0FDckIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dDLE1BQU8sTUFBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxNQUFReHdDLElBQUssT0FDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dDLE1BQU8sTUFBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLE1BQVN4d0MsSUFBSyxPQUN0QixDQUFDd3dDLE1BQU8sTUFBU3h3QyxJQUFLLE9BQ3RCLENBQUN3d0MsTUFBTyxNQUFTeHdDLElBQUssT0FDdEIsQ0FBQ3d3QyxNQUFPLE9BQVN4d0MsSUFBSyxRQUN0QixDQUFDd3dDLE1BQU8sT0FBU3h3QyxJQUFLLFFBQ3RCLENBQUN3d0MsTUFBTyxRQUFTeHdDLElBQUssU0FDdEIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dDLE1BQU8sT0FBU3h3QyxJQUFLLFFBQ3RCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dDLE1BQU8sTUFBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxNQUFReHdDLElBQUssT0FDckIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dDLE1BQU8sTUFBU3h3QyxJQUFLLE9BQ3RCLENBQUN3d0MsTUFBTyxNQUFTeHdDLElBQUssT0FDdEIsQ0FBQ3d3QyxNQUFPLE1BQVN4d0MsSUFBSyxPQUN0QixDQUFDd3dDLE1BQU8sTUFBU3h3QyxJQUFLLE9BQ3RCLENBQUN3d0MsTUFBTyxNQUFTeHdDLElBQUssT0FDdEIsQ0FBQ3d3QyxNQUFPLE1BQVN4d0MsSUFBSyxPQUN0QixDQUFDd3dDLE1BQU8sTUFBU3h3QyxJQUFLLE9BQ3RCLENBQUN3d0MsTUFBTyxNQUFTeHdDLElBQUssT0FDdEIsQ0FBQ3d3QyxNQUFPLE9BQVN4d0MsSUFBSyxRQUN0QixDQUFDd3dDLE1BQU8sTUFBU3h3QyxJQUFLLE9BQ3RCLENBQUN3d0MsTUFBTyxPQUFTeHdDLElBQUssUUFDdEIsQ0FBQ3d3QyxNQUFPLEtBQVF4d0MsSUFBSyxNQUNyQixDQUFDd3dDLE1BQU8sS0FBUXh3QyxJQUFLLE1BQ3JCLENBQUN3d0MsTUFBTyxLQUFReHdDLElBQUssTUFDckIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dDLE1BQU8sTUFBUXh3QyxJQUFLLE9BQ3JCLENBQUN3d0MsTUFBTyxNQUFReHdDLElBQUssT0FDckIsQ0FBQ3d3QyxNQUFPLE1BQVF4d0MsSUFBSyxPQUNyQixDQUFDd3dD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bUMsRUFBVyxHQUN0QndoQyxHQUFNb0YsVUFBSzVtQyxFQUFXLEdBQ3RCd2hDLEdBQU1vRixVQUFLNW1DLEVBQVcsR0FDdEJ3aEMsR0FBTW9GLFVBQUs1bUMsRUFBVyxHQUN0QndoQyxHQUFNb0YsVUFBSzVtQyxFQUFXLEdBQ3RCd2hDLEdBQU1vRixVQUFLNW1DLEVBQVcsR0FDdEJ3aEMsR0FBTW9GLFVBQUs1bUMsRUFBVyxHQUN0QnloQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFBSzVtQyxFQUFXLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDdEN5aEMsR0FBVW1GLFVBQUs1bUMsRUFBVyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDeWhDLEdBQVVtRixVQUFLNW1DLEVBQVcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUN0Q3loQyxHQUFVbUYsVUFB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Z0JDLEdBR3hELElBQUlDLEVBQXVCLENBQUNDLEVBQTRCeG9FLEtBQ3ZELElBR0l5bkUsRUFBVWEsR0FIVFQsRUFBVVksRUFBYUMsR0FBVzFvRSxFQUdoQmtCLEVBQUksRUFDM0IsR0FBRzJtRSxFQUFTM1EsTUFBTXhsQixHQUFnQyxJQUF4QjIyQixFQUFnQjMyQixLQUFhLENBQ3RELElBQUkrMUIsS0FBWWdCLEVBQ1pqQixFQUFvQmp6RCxFQUFFazBELEVBQWFoQixLQUNyQ0QsRUFBb0JqaUUsRUFBRWtpRSxHQUFZZ0IsRUFBWWhCLElBR2hELEdBQUdpQixFQUFTLElBQUlyZ0UsRUFBU3FnRSxFQUFRbEIsRUFDbEMsQ0FFQSxJQURHZ0IsR0FBNEJBLEVBQTJCeG9FLEdBQ3JEa0IsRUFBSTJtRSxFQUFTbG5FLE9BQVFPLElBQ3pCb25FLEVBQVVULEVBQVMzbUUsR0FDaEJzbUUsRUFBb0JqekQsRUFBRTh6RCxFQUFpQkMsSUFBWUQsRUFBZ0JDLElBQ3JFRCxFQUFnQkMsR0FBUyxLQUUxQkQsRUFBZ0JDLEdBQVcsRUFFNUIsT0FBT2QsRUFBb0JJLEVBQUV2L0QsRUFBTyxFQUdqQ3NnRSxFQUFxQkMsS0FBcUMsK0JBQUlBLEtBQXFDLGdDQUFLLEdBQzVHRCxFQUFtQmh0RCxRQUFRNHNELEVBQXFCcFgsS0FBSyxLQUFNLElBQzNEd1gsRUFBbUJwbkUsS0FBT2duRSxFQUFxQnBYLEtBQUssS0FBTXdYLEVBQW1CcG5FLEtBQUs0dkQsS0FBS3dYLFFDN0N2Rm5CLEVBQW9CLEtBQ3BCQSxFQUFvQixLQUNwQixJQUFJcUIsRUFBc0JyQixFQUFvQixLQUM5Q3FCLEVBQXNCckIsRUFBb0JJLEVBQUVpQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL25vZGVfbW9kdWxlcy9lYXJjdXQvc3JjL2VhcmN1dC5qcyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9jb21tb24uanMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vbWF0Mi5qcyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9tYXQyZC5qcyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9tYXQzLmpzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL21hdDQuanMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vdmVjMy5qcyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS92ZWM0LmpzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL3F1YXQuanMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vcXVhdDIuanMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vdmVjMi5qcyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9ub2RlX21vZHVsZXMvb3BlbnR5cGUuanMvZGlzdC9vcGVudHlwZS5tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVhcmN1dDtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBlYXJjdXQ7XG5cbmZ1bmN0aW9uIGVhcmN1dChkYXRhLCBob2xlSW5kaWNlcywgZGltKSB7XG5cbiAgICBkaW0gPSBkaW0gfHwgMjtcblxuICAgIHZhciBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aCxcbiAgICAgICAgb3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWzBdICogZGltIDogZGF0YS5sZW5ndGgsXG4gICAgICAgIG91dGVyTm9kZSA9IGxpbmtlZExpc3QoZGF0YSwgMCwgb3V0ZXJMZW4sIGRpbSwgdHJ1ZSksXG4gICAgICAgIHRyaWFuZ2xlcyA9IFtdO1xuXG4gICAgaWYgKCFvdXRlck5vZGUgfHwgb3V0ZXJOb2RlLm5leHQgPT09IG91dGVyTm9kZS5wcmV2KSByZXR1cm4gdHJpYW5nbGVzO1xuXG4gICAgdmFyIG1pblgsIG1pblksIG1heFgsIG1heFksIHgsIHksIGludlNpemU7XG5cbiAgICBpZiAoaGFzSG9sZXMpIG91dGVyTm9kZSA9IGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSk7XG5cbiAgICAvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcbiAgICBpZiAoZGF0YS5sZW5ndGggPiA4MCAqIGRpbSkge1xuICAgICAgICBtaW5YID0gbWF4WCA9IGRhdGFbMF07XG4gICAgICAgIG1pblkgPSBtYXhZID0gZGF0YVsxXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gZGltOyBpIDwgb3V0ZXJMZW47IGkgKz0gZGltKSB7XG4gICAgICAgICAgICB4ID0gZGF0YVtpXTtcbiAgICAgICAgICAgIHkgPSBkYXRhW2kgKyAxXTtcbiAgICAgICAgICAgIGlmICh4IDwgbWluWCkgbWluWCA9IHg7XG4gICAgICAgICAgICBpZiAoeSA8IG1pblkpIG1pblkgPSB5O1xuICAgICAgICAgICAgaWYgKHggPiBtYXhYKSBtYXhYID0geDtcbiAgICAgICAgICAgIGlmICh5ID4gbWF4WSkgbWF4WSA9IHk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtaW5YLCBtaW5ZIGFuZCBpbnZTaXplIGFyZSBsYXRlciB1c2VkIHRvIHRyYW5zZm9ybSBjb29yZHMgaW50byBpbnRlZ2VycyBmb3Igei1vcmRlciBjYWxjdWxhdGlvblxuICAgICAgICBpbnZTaXplID0gTWF0aC5tYXgobWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZKTtcbiAgICAgICAgaW52U2l6ZSA9IGludlNpemUgIT09IDAgPyAzMjc2NyAvIGludlNpemUgOiAwO1xuICAgIH1cblxuICAgIGVhcmN1dExpbmtlZChvdXRlck5vZGUsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAwKTtcblxuICAgIHJldHVybiB0cmlhbmdsZXM7XG59XG5cbi8vIGNyZWF0ZSBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdCBmcm9tIHBvbHlnb24gcG9pbnRzIGluIHRoZSBzcGVjaWZpZWQgd2luZGluZyBvcmRlclxuZnVuY3Rpb24gbGlua2VkTGlzdChkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGNsb2Nrd2lzZSkge1xuICAgIHZhciBpLCBsYXN0O1xuXG4gICAgaWYgKGNsb2Nrd2lzZSA9PT0gKHNpZ25lZEFyZWEoZGF0YSwgc3RhcnQsIGVuZCwgZGltKSA+IDApKSB7XG4gICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGRpbSkgbGFzdCA9IGluc2VydE5vZGUoaSwgZGF0YVtpXSwgZGF0YVtpICsgMV0sIGxhc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IGVuZCAtIGRpbTsgaSA+PSBzdGFydDsgaSAtPSBkaW0pIGxhc3QgPSBpbnNlcnROb2RlKGksIGRhdGFbaV0sIGRhdGFbaSArIDFdLCBsYXN0KTtcbiAgICB9XG5cbiAgICBpZiAobGFzdCAmJiBlcXVhbHMobGFzdCwgbGFzdC5uZXh0KSkge1xuICAgICAgICByZW1vdmVOb2RlKGxhc3QpO1xuICAgICAgICBsYXN0ID0gbGFzdC5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBsYXN0O1xufVxuXG4vLyBlbGltaW5hdGUgY29saW5lYXIgb3IgZHVwbGljYXRlIHBvaW50c1xuZnVuY3Rpb24gZmlsdGVyUG9pbnRzKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoIXN0YXJ0KSByZXR1cm4gc3RhcnQ7XG4gICAgaWYgKCFlbmQpIGVuZCA9IHN0YXJ0O1xuXG4gICAgdmFyIHAgPSBzdGFydCxcbiAgICAgICAgYWdhaW47XG4gICAgZG8ge1xuICAgICAgICBhZ2FpbiA9IGZhbHNlO1xuXG4gICAgICAgIGlmICghcC5zdGVpbmVyICYmIChlcXVhbHMocCwgcC5uZXh0KSB8fCBhcmVhKHAucHJldiwgcCwgcC5uZXh0KSA9PT0gMCkpIHtcbiAgICAgICAgICAgIHJlbW92ZU5vZGUocCk7XG4gICAgICAgICAgICBwID0gZW5kID0gcC5wcmV2O1xuICAgICAgICAgICAgaWYgKHAgPT09IHAubmV4dCkgYnJlYWs7XG4gICAgICAgICAgICBhZ2FpbiA9IHRydWU7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHAgPSBwLm5leHQ7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlIChhZ2FpbiB8fCBwICE9PSBlbmQpO1xuXG4gICAgcmV0dXJuIGVuZDtcbn1cblxuLy8gbWFpbiBlYXIgc2xpY2luZyBsb29wIHdoaWNoIHRyaWFuZ3VsYXRlcyBhIHBvbHlnb24gKGdpdmVuIGFzIGEgbGlua2VkIGxpc3QpXG5mdW5jdGlvbiBlYXJjdXRMaW5rZWQoZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgcGFzcykge1xuICAgIGlmICghZWFyKSByZXR1cm47XG5cbiAgICAvLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG4gICAgaWYgKCFwYXNzICYmIGludlNpemUpIGluZGV4Q3VydmUoZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcblxuICAgIHZhciBzdG9wID0gZWFyLFxuICAgICAgICBwcmV2LCBuZXh0O1xuXG4gICAgLy8gaXRlcmF0ZSB0aHJvdWdoIGVhcnMsIHNsaWNpbmcgdGhlbSBvbmUgYnkgb25lXG4gICAgd2hpbGUgKGVhci5wcmV2ICE9PSBlYXIubmV4dCkge1xuICAgICAgICBwcmV2ID0gZWFyLnByZXY7XG4gICAgICAgIG5leHQgPSBlYXIubmV4dDtcblxuICAgICAgICBpZiAoaW52U2l6ZSA/IGlzRWFySGFzaGVkKGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSkgOiBpc0VhcihlYXIpKSB7XG4gICAgICAgICAgICAvLyBjdXQgb2ZmIHRoZSB0cmlhbmdsZVxuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gocHJldi5pIC8gZGltIHwgMCk7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChlYXIuaSAvIGRpbSB8IDApO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gobmV4dC5pIC8gZGltIHwgMCk7XG5cbiAgICAgICAgICAgIHJlbW92ZU5vZGUoZWFyKTtcblxuICAgICAgICAgICAgLy8gc2tpcHBpbmcgdGhlIG5leHQgdmVydGV4IGxlYWRzIHRvIGxlc3Mgc2xpdmVyIHRyaWFuZ2xlc1xuICAgICAgICAgICAgZWFyID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgc3RvcCA9IG5leHQubmV4dDtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBlYXIgPSBuZXh0O1xuXG4gICAgICAgIC8vIGlmIHdlIGxvb3BlZCB0aHJvdWdoIHRoZSB3aG9sZSByZW1haW5pbmcgcG9seWdvbiBhbmQgY2FuJ3QgZmluZCBhbnkgbW9yZSBlYXJzXG4gICAgICAgIGlmIChlYXIgPT09IHN0b3ApIHtcbiAgICAgICAgICAgIC8vIHRyeSBmaWx0ZXJpbmcgcG9pbnRzIGFuZCBzbGljaW5nIGFnYWluXG4gICAgICAgICAgICBpZiAoIXBhc3MpIHtcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoZmlsdGVyUG9pbnRzKGVhciksIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAxKTtcblxuICAgICAgICAgICAgLy8gaWYgdGhpcyBkaWRuJ3Qgd29yaywgdHJ5IGN1cmluZyBhbGwgc21hbGwgc2VsZi1pbnRlcnNlY3Rpb25zIGxvY2FsbHlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFzcyA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGVhciA9IGN1cmVMb2NhbEludGVyc2VjdGlvbnMoZmlsdGVyUG9pbnRzKGVhciksIHRyaWFuZ2xlcywgZGltKTtcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMik7XG5cbiAgICAgICAgICAgIC8vIGFzIGEgbGFzdCByZXNvcnQsIHRyeSBzcGxpdHRpbmcgdGhlIHJlbWFpbmluZyBwb2x5Z29uIGludG8gdHdvXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhc3MgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBzcGxpdEVhcmN1dChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIGNoZWNrIHdoZXRoZXIgYSBwb2x5Z29uIG5vZGUgZm9ybXMgYSB2YWxpZCBlYXIgd2l0aCBhZGphY2VudCBub2Rlc1xuZnVuY3Rpb24gaXNFYXIoZWFyKSB7XG4gICAgdmFyIGEgPSBlYXIucHJldixcbiAgICAgICAgYiA9IGVhcixcbiAgICAgICAgYyA9IGVhci5uZXh0O1xuXG4gICAgaWYgKGFyZWEoYSwgYiwgYykgPj0gMCkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxuXG4gICAgLy8gbm93IG1ha2Ugc3VyZSB3ZSBkb24ndCBoYXZlIG90aGVyIHBvaW50cyBpbnNpZGUgdGhlIHBvdGVudGlhbCBlYXJcbiAgICB2YXIgYXggPSBhLngsIGJ4ID0gYi54LCBjeCA9IGMueCwgYXkgPSBhLnksIGJ5ID0gYi55LCBjeSA9IGMueTtcblxuICAgIC8vIHRyaWFuZ2xlIGJib3g7IG1pbiAmIG1heCBhcmUgY2FsY3VsYXRlZCBsaWtlIHRoaXMgZm9yIHNwZWVkXG4gICAgdmFyIHgwID0gYXggPCBieCA/IChheCA8IGN4ID8gYXggOiBjeCkgOiAoYnggPCBjeCA/IGJ4IDogY3gpLFxuICAgICAgICB5MCA9IGF5IDwgYnkgPyAoYXkgPCBjeSA/IGF5IDogY3kpIDogKGJ5IDwgY3kgPyBieSA6IGN5KSxcbiAgICAgICAgeDEgPSBheCA+IGJ4ID8gKGF4ID4gY3ggPyBheCA6IGN4KSA6IChieCA+IGN4ID8gYnggOiBjeCksXG4gICAgICAgIHkxID0gYXkgPiBieSA/IChheSA+IGN5ID8gYXkgOiBjeSkgOiAoYnkgPiBjeSA/IGJ5IDogY3kpO1xuXG4gICAgdmFyIHAgPSBjLm5leHQ7XG4gICAgd2hpbGUgKHAgIT09IGEpIHtcbiAgICAgICAgaWYgKHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJlxuICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHAueCwgcC55KSAmJlxuICAgICAgICAgICAgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc0Vhckhhc2hlZChlYXIsIG1pblgsIG1pblksIGludlNpemUpIHtcbiAgICB2YXIgYSA9IGVhci5wcmV2LFxuICAgICAgICBiID0gZWFyLFxuICAgICAgICBjID0gZWFyLm5leHQ7XG5cbiAgICBpZiAoYXJlYShhLCBiLCBjKSA+PSAwKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cbiAgICB2YXIgYXggPSBhLngsIGJ4ID0gYi54LCBjeCA9IGMueCwgYXkgPSBhLnksIGJ5ID0gYi55LCBjeSA9IGMueTtcblxuICAgIC8vIHRyaWFuZ2xlIGJib3g7IG1pbiAmIG1heCBhcmUgY2FsY3VsYXRlZCBsaWtlIHRoaXMgZm9yIHNwZWVkXG4gICAgdmFyIHgwID0gYXggPCBieCA/IChheCA8IGN4ID8gYXggOiBjeCkgOiAoYnggPCBjeCA/IGJ4IDogY3gpLFxuICAgICAgICB5MCA9IGF5IDwgYnkgPyAoYXkgPCBjeSA/IGF5IDogY3kpIDogKGJ5IDwgY3kgPyBieSA6IGN5KSxcbiAgICAgICAgeDEgPSBheCA+IGJ4ID8gKGF4ID4gY3ggPyBheCA6IGN4KSA6IChieCA+IGN4ID8gYnggOiBjeCksXG4gICAgICAgIHkxID0gYXkgPiBieSA/IChheSA+IGN5ID8gYXkgOiBjeSkgOiAoYnkgPiBjeSA/IGJ5IDogY3kpO1xuXG4gICAgLy8gei1vcmRlciByYW5nZSBmb3IgdGhlIGN1cnJlbnQgdHJpYW5nbGUgYmJveDtcbiAgICB2YXIgbWluWiA9IHpPcmRlcih4MCwgeTAsIG1pblgsIG1pblksIGludlNpemUpLFxuICAgICAgICBtYXhaID0gek9yZGVyKHgxLCB5MSwgbWluWCwgbWluWSwgaW52U2l6ZSk7XG5cbiAgICB2YXIgcCA9IGVhci5wcmV2WixcbiAgICAgICAgbiA9IGVhci5uZXh0WjtcblxuICAgIC8vIGxvb2sgZm9yIHBvaW50cyBpbnNpZGUgdGhlIHRyaWFuZ2xlIGluIGJvdGggZGlyZWN0aW9uc1xuICAgIHdoaWxlIChwICYmIHAueiA+PSBtaW5aICYmIG4gJiYgbi56IDw9IG1heFopIHtcbiAgICAgICAgaWYgKHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJiBwICE9PSBhICYmIHAgIT09IGMgJiZcbiAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBwLngsIHAueSkgJiYgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwID0gcC5wcmV2WjtcblxuICAgICAgICBpZiAobi54ID49IHgwICYmIG4ueCA8PSB4MSAmJiBuLnkgPj0geTAgJiYgbi55IDw9IHkxICYmIG4gIT09IGEgJiYgbiAhPT0gYyAmJlxuICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIG4ueCwgbi55KSAmJiBhcmVhKG4ucHJldiwgbiwgbi5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIG4gPSBuLm5leHRaO1xuICAgIH1cblxuICAgIC8vIGxvb2sgZm9yIHJlbWFpbmluZyBwb2ludHMgaW4gZGVjcmVhc2luZyB6LW9yZGVyXG4gICAgd2hpbGUgKHAgJiYgcC56ID49IG1pblopIHtcbiAgICAgICAgaWYgKHAueCA+PSB4MCAmJiBwLnggPD0geDEgJiYgcC55ID49IHkwICYmIHAueSA8PSB5MSAmJiBwICE9PSBhICYmIHAgIT09IGMgJiZcbiAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBwLngsIHAueSkgJiYgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwID0gcC5wcmV2WjtcbiAgICB9XG5cbiAgICAvLyBsb29rIGZvciByZW1haW5pbmcgcG9pbnRzIGluIGluY3JlYXNpbmcgei1vcmRlclxuICAgIHdoaWxlIChuICYmIG4ueiA8PSBtYXhaKSB7XG4gICAgICAgIGlmIChuLnggPj0geDAgJiYgbi54IDw9IHgxICYmIG4ueSA+PSB5MCAmJiBuLnkgPD0geTEgJiYgbiAhPT0gYSAmJiBuICE9PSBjICYmXG4gICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgbi54LCBuLnkpICYmIGFyZWEobi5wcmV2LCBuLCBuLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgbiA9IG4ubmV4dFo7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8vIGdvIHRocm91Z2ggYWxsIHBvbHlnb24gbm9kZXMgYW5kIGN1cmUgc21hbGwgbG9jYWwgc2VsZi1pbnRlcnNlY3Rpb25zXG5mdW5jdGlvbiBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSkge1xuICAgIHZhciBwID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICB2YXIgYSA9IHAucHJldixcbiAgICAgICAgICAgIGIgPSBwLm5leHQubmV4dDtcblxuICAgICAgICBpZiAoIWVxdWFscyhhLCBiKSAmJiBpbnRlcnNlY3RzKGEsIHAsIHAubmV4dCwgYikgJiYgbG9jYWxseUluc2lkZShhLCBiKSAmJiBsb2NhbGx5SW5zaWRlKGIsIGEpKSB7XG5cbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGEuaSAvIGRpbSB8IDApO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gocC5pIC8gZGltIHwgMCk7XG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChiLmkgLyBkaW0gfCAwKTtcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIHR3byBub2RlcyBpbnZvbHZlZFxuICAgICAgICAgICAgcmVtb3ZlTm9kZShwKTtcbiAgICAgICAgICAgIHJlbW92ZU5vZGUocC5uZXh0KTtcblxuICAgICAgICAgICAgcCA9IHN0YXJ0ID0gYjtcbiAgICAgICAgfVxuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcblxuICAgIHJldHVybiBmaWx0ZXJQb2ludHMocCk7XG59XG5cbi8vIHRyeSBzcGxpdHRpbmcgcG9seWdvbiBpbnRvIHR3byBhbmQgdHJpYW5ndWxhdGUgdGhlbSBpbmRlcGVuZGVudGx5XG5mdW5jdGlvbiBzcGxpdEVhcmN1dChzdGFydCwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUpIHtcbiAgICAvLyBsb29rIGZvciBhIHZhbGlkIGRpYWdvbmFsIHRoYXQgZGl2aWRlcyB0aGUgcG9seWdvbiBpbnRvIHR3b1xuICAgIHZhciBhID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICB2YXIgYiA9IGEubmV4dC5uZXh0O1xuICAgICAgICB3aGlsZSAoYiAhPT0gYS5wcmV2KSB7XG4gICAgICAgICAgICBpZiAoYS5pICE9PSBiLmkgJiYgaXNWYWxpZERpYWdvbmFsKGEsIGIpKSB7XG4gICAgICAgICAgICAgICAgLy8gc3BsaXQgdGhlIHBvbHlnb24gaW4gdHdvIGJ5IHRoZSBkaWFnb25hbFxuICAgICAgICAgICAgICAgIHZhciBjID0gc3BsaXRQb2x5Z29uKGEsIGIpO1xuXG4gICAgICAgICAgICAgICAgLy8gZmlsdGVyIGNvbGluZWFyIHBvaW50cyBhcm91bmQgdGhlIGN1dHNcbiAgICAgICAgICAgICAgICBhID0gZmlsdGVyUG9pbnRzKGEsIGEubmV4dCk7XG4gICAgICAgICAgICAgICAgYyA9IGZpbHRlclBvaW50cyhjLCBjLm5leHQpO1xuXG4gICAgICAgICAgICAgICAgLy8gcnVuIGVhcmN1dCBvbiBlYWNoIGhhbGZcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoYSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDApO1xuICAgICAgICAgICAgICAgIGVhcmN1dExpbmtlZChjLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYiA9IGIubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBhID0gYS5uZXh0O1xuICAgIH0gd2hpbGUgKGEgIT09IHN0YXJ0KTtcbn1cblxuLy8gbGluayBldmVyeSBob2xlIGludG8gdGhlIG91dGVyIGxvb3AsIHByb2R1Y2luZyBhIHNpbmdsZS1yaW5nIHBvbHlnb24gd2l0aG91dCBob2xlc1xuZnVuY3Rpb24gZWxpbWluYXRlSG9sZXMoZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltKSB7XG4gICAgdmFyIHF1ZXVlID0gW10sXG4gICAgICAgIGksIGxlbiwgc3RhcnQsIGVuZCwgbGlzdDtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07XG4gICAgICAgIGVuZCA9IGkgPCBsZW4gLSAxID8gaG9sZUluZGljZXNbaSArIDFdICogZGltIDogZGF0YS5sZW5ndGg7XG4gICAgICAgIGxpc3QgPSBsaW5rZWRMaXN0KGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSwgZmFsc2UpO1xuICAgICAgICBpZiAobGlzdCA9PT0gbGlzdC5uZXh0KSBsaXN0LnN0ZWluZXIgPSB0cnVlO1xuICAgICAgICBxdWV1ZS5wdXNoKGdldExlZnRtb3N0KGxpc3QpKTtcbiAgICB9XG5cbiAgICBxdWV1ZS5zb3J0KGNvbXBhcmVYKTtcblxuICAgIC8vIHByb2Nlc3MgaG9sZXMgZnJvbSBsZWZ0IHRvIHJpZ2h0XG4gICAgZm9yIChpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG91dGVyTm9kZSA9IGVsaW1pbmF0ZUhvbGUocXVldWVbaV0sIG91dGVyTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dGVyTm9kZTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZVgoYSwgYikge1xuICAgIHJldHVybiBhLnggLSBiLng7XG59XG5cbi8vIGZpbmQgYSBicmlkZ2UgYmV0d2VlbiB2ZXJ0aWNlcyB0aGF0IGNvbm5lY3RzIGhvbGUgd2l0aCBhbiBvdXRlciByaW5nIGFuZCBhbmQgbGluayBpdFxuZnVuY3Rpb24gZWxpbWluYXRlSG9sZShob2xlLCBvdXRlck5vZGUpIHtcbiAgICB2YXIgYnJpZGdlID0gZmluZEhvbGVCcmlkZ2UoaG9sZSwgb3V0ZXJOb2RlKTtcbiAgICBpZiAoIWJyaWRnZSkge1xuICAgICAgICByZXR1cm4gb3V0ZXJOb2RlO1xuICAgIH1cblxuICAgIHZhciBicmlkZ2VSZXZlcnNlID0gc3BsaXRQb2x5Z29uKGJyaWRnZSwgaG9sZSk7XG5cbiAgICAvLyBmaWx0ZXIgY29sbGluZWFyIHBvaW50cyBhcm91bmQgdGhlIGN1dHNcbiAgICBmaWx0ZXJQb2ludHMoYnJpZGdlUmV2ZXJzZSwgYnJpZGdlUmV2ZXJzZS5uZXh0KTtcbiAgICByZXR1cm4gZmlsdGVyUG9pbnRzKGJyaWRnZSwgYnJpZGdlLm5leHQpO1xufVxuXG4vLyBEYXZpZCBFYmVybHkncyBhbGdvcml0aG0gZm9yIGZpbmRpbmcgYSBicmlkZ2UgYmV0d2VlbiBob2xlIGFuZCBvdXRlciBwb2x5Z29uXG5mdW5jdGlvbiBmaW5kSG9sZUJyaWRnZShob2xlLCBvdXRlck5vZGUpIHtcbiAgICB2YXIgcCA9IG91dGVyTm9kZSxcbiAgICAgICAgaHggPSBob2xlLngsXG4gICAgICAgIGh5ID0gaG9sZS55LFxuICAgICAgICBxeCA9IC1JbmZpbml0eSxcbiAgICAgICAgbTtcblxuICAgIC8vIGZpbmQgYSBzZWdtZW50IGludGVyc2VjdGVkIGJ5IGEgcmF5IGZyb20gdGhlIGhvbGUncyBsZWZ0bW9zdCBwb2ludCB0byB0aGUgbGVmdDtcbiAgICAvLyBzZWdtZW50J3MgZW5kcG9pbnQgd2l0aCBsZXNzZXIgeCB3aWxsIGJlIHBvdGVudGlhbCBjb25uZWN0aW9uIHBvaW50XG4gICAgZG8ge1xuICAgICAgICBpZiAoaHkgPD0gcC55ICYmIGh5ID49IHAubmV4dC55ICYmIHAubmV4dC55ICE9PSBwLnkpIHtcbiAgICAgICAgICAgIHZhciB4ID0gcC54ICsgKGh5IC0gcC55KSAqIChwLm5leHQueCAtIHAueCkgLyAocC5uZXh0LnkgLSBwLnkpO1xuICAgICAgICAgICAgaWYgKHggPD0gaHggJiYgeCA+IHF4KSB7XG4gICAgICAgICAgICAgICAgcXggPSB4O1xuICAgICAgICAgICAgICAgIG0gPSBwLnggPCBwLm5leHQueCA/IHAgOiBwLm5leHQ7XG4gICAgICAgICAgICAgICAgaWYgKHggPT09IGh4KSByZXR1cm4gbTsgLy8gaG9sZSB0b3VjaGVzIG91dGVyIHNlZ21lbnQ7IHBpY2sgbGVmdG1vc3QgZW5kcG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IG91dGVyTm9kZSk7XG5cbiAgICBpZiAoIW0pIHJldHVybiBudWxsO1xuXG4gICAgLy8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgb2YgaG9sZSBwb2ludCwgc2VnbWVudCBpbnRlcnNlY3Rpb24gYW5kIGVuZHBvaW50O1xuICAgIC8vIGlmIHRoZXJlIGFyZSBubyBwb2ludHMgZm91bmQsIHdlIGhhdmUgYSB2YWxpZCBjb25uZWN0aW9uO1xuICAgIC8vIG90aGVyd2lzZSBjaG9vc2UgdGhlIHBvaW50IG9mIHRoZSBtaW5pbXVtIGFuZ2xlIHdpdGggdGhlIHJheSBhcyBjb25uZWN0aW9uIHBvaW50XG5cbiAgICB2YXIgc3RvcCA9IG0sXG4gICAgICAgIG14ID0gbS54LFxuICAgICAgICBteSA9IG0ueSxcbiAgICAgICAgdGFuTWluID0gSW5maW5pdHksXG4gICAgICAgIHRhbjtcblxuICAgIHAgPSBtO1xuXG4gICAgZG8ge1xuICAgICAgICBpZiAoaHggPj0gcC54ICYmIHAueCA+PSBteCAmJiBoeCAhPT0gcC54ICYmXG4gICAgICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGh5IDwgbXkgPyBoeCA6IHF4LCBoeSwgbXgsIG15LCBoeSA8IG15ID8gcXggOiBoeCwgaHksIHAueCwgcC55KSkge1xuXG4gICAgICAgICAgICB0YW4gPSBNYXRoLmFicyhoeSAtIHAueSkgLyAoaHggLSBwLngpOyAvLyB0YW5nZW50aWFsXG5cbiAgICAgICAgICAgIGlmIChsb2NhbGx5SW5zaWRlKHAsIGhvbGUpICYmXG4gICAgICAgICAgICAgICAgKHRhbiA8IHRhbk1pbiB8fCAodGFuID09PSB0YW5NaW4gJiYgKHAueCA+IG0ueCB8fCAocC54ID09PSBtLnggJiYgc2VjdG9yQ29udGFpbnNTZWN0b3IobSwgcCkpKSkpKSB7XG4gICAgICAgICAgICAgICAgbSA9IHA7XG4gICAgICAgICAgICAgICAgdGFuTWluID0gdGFuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdG9wKTtcblxuICAgIHJldHVybiBtO1xufVxuXG4vLyB3aGV0aGVyIHNlY3RvciBpbiB2ZXJ0ZXggbSBjb250YWlucyBzZWN0b3IgaW4gdmVydGV4IHAgaW4gdGhlIHNhbWUgY29vcmRpbmF0ZXNcbmZ1bmN0aW9uIHNlY3RvckNvbnRhaW5zU2VjdG9yKG0sIHApIHtcbiAgICByZXR1cm4gYXJlYShtLnByZXYsIG0sIHAucHJldikgPCAwICYmIGFyZWEocC5uZXh0LCBtLCBtLm5leHQpIDwgMDtcbn1cblxuLy8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuZnVuY3Rpb24gaW5kZXhDdXJ2ZShzdGFydCwgbWluWCwgbWluWSwgaW52U2l6ZSkge1xuICAgIHZhciBwID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICBpZiAocC56ID09PSAwKSBwLnogPSB6T3JkZXIocC54LCBwLnksIG1pblgsIG1pblksIGludlNpemUpO1xuICAgICAgICBwLnByZXZaID0gcC5wcmV2O1xuICAgICAgICBwLm5leHRaID0gcC5uZXh0O1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcblxuICAgIHAucHJldloubmV4dFogPSBudWxsO1xuICAgIHAucHJldlogPSBudWxsO1xuXG4gICAgc29ydExpbmtlZChwKTtcbn1cblxuLy8gU2ltb24gVGF0aGFtJ3MgbGlua2VkIGxpc3QgbWVyZ2Ugc29ydCBhbGdvcml0aG1cbi8vIGh0dHA6Ly93d3cuY2hpYXJrLmdyZWVuZW5kLm9yZy51ay9+c2d0YXRoYW0vYWxnb3JpdGhtcy9saXN0c29ydC5odG1sXG5mdW5jdGlvbiBzb3J0TGlua2VkKGxpc3QpIHtcbiAgICB2YXIgaSwgcCwgcSwgZSwgdGFpbCwgbnVtTWVyZ2VzLCBwU2l6ZSwgcVNpemUsXG4gICAgICAgIGluU2l6ZSA9IDE7XG5cbiAgICBkbyB7XG4gICAgICAgIHAgPSBsaXN0O1xuICAgICAgICBsaXN0ID0gbnVsbDtcbiAgICAgICAgdGFpbCA9IG51bGw7XG4gICAgICAgIG51bU1lcmdlcyA9IDA7XG5cbiAgICAgICAgd2hpbGUgKHApIHtcbiAgICAgICAgICAgIG51bU1lcmdlcysrO1xuICAgICAgICAgICAgcSA9IHA7XG4gICAgICAgICAgICBwU2l6ZSA9IDA7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5TaXplOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwU2l6ZSsrO1xuICAgICAgICAgICAgICAgIHEgPSBxLm5leHRaO1xuICAgICAgICAgICAgICAgIGlmICghcSkgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxU2l6ZSA9IGluU2l6ZTtcblxuICAgICAgICAgICAgd2hpbGUgKHBTaXplID4gMCB8fCAocVNpemUgPiAwICYmIHEpKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocFNpemUgIT09IDAgJiYgKHFTaXplID09PSAwIHx8ICFxIHx8IHAueiA8PSBxLnopKSB7XG4gICAgICAgICAgICAgICAgICAgIGUgPSBwO1xuICAgICAgICAgICAgICAgICAgICBwID0gcC5uZXh0WjtcbiAgICAgICAgICAgICAgICAgICAgcFNpemUtLTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlID0gcTtcbiAgICAgICAgICAgICAgICAgICAgcSA9IHEubmV4dFo7XG4gICAgICAgICAgICAgICAgICAgIHFTaXplLS07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRhaWwpIHRhaWwubmV4dFogPSBlO1xuICAgICAgICAgICAgICAgIGVsc2UgbGlzdCA9IGU7XG5cbiAgICAgICAgICAgICAgICBlLnByZXZaID0gdGFpbDtcbiAgICAgICAgICAgICAgICB0YWlsID0gZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcCA9IHE7XG4gICAgICAgIH1cblxuICAgICAgICB0YWlsLm5leHRaID0gbnVsbDtcbiAgICAgICAgaW5TaXplICo9IDI7XG5cbiAgICB9IHdoaWxlIChudW1NZXJnZXMgPiAxKTtcblxuICAgIHJldHVybiBsaXN0O1xufVxuXG4vLyB6LW9yZGVyIG9mIGEgcG9pbnQgZ2l2ZW4gY29vcmRzIGFuZCBpbnZlcnNlIG9mIHRoZSBsb25nZXIgc2lkZSBvZiBkYXRhIGJib3hcbmZ1bmN0aW9uIHpPcmRlcih4LCB5LCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XG4gICAgLy8gY29vcmRzIGFyZSB0cmFuc2Zvcm1lZCBpbnRvIG5vbi1uZWdhdGl2ZSAxNS1iaXQgaW50ZWdlciByYW5nZVxuICAgIHggPSAoeCAtIG1pblgpICogaW52U2l6ZSB8IDA7XG4gICAgeSA9ICh5IC0gbWluWSkgKiBpbnZTaXplIHwgMDtcblxuICAgIHggPSAoeCB8ICh4IDw8IDgpKSAmIDB4MDBGRjAwRkY7XG4gICAgeCA9ICh4IHwgKHggPDwgNCkpICYgMHgwRjBGMEYwRjtcbiAgICB4ID0gKHggfCAoeCA8PCAyKSkgJiAweDMzMzMzMzMzO1xuICAgIHggPSAoeCB8ICh4IDw8IDEpKSAmIDB4NTU1NTU1NTU7XG5cbiAgICB5ID0gKHkgfCAoeSA8PCA4KSkgJiAweDAwRkYwMEZGO1xuICAgIHkgPSAoeSB8ICh5IDw8IDQpKSAmIDB4MEYwRjBGMEY7XG4gICAgeSA9ICh5IHwgKHkgPDwgMikpICYgMHgzMzMzMzMzMztcbiAgICB5ID0gKHkgfCAoeSA8PCAxKSkgJiAweDU1NTU1NTU1O1xuXG4gICAgcmV0dXJuIHggfCAoeSA8PCAxKTtcbn1cblxuLy8gZmluZCB0aGUgbGVmdG1vc3Qgbm9kZSBvZiBhIHBvbHlnb24gcmluZ1xuZnVuY3Rpb24gZ2V0TGVmdG1vc3Qoc3RhcnQpIHtcbiAgICB2YXIgcCA9IHN0YXJ0LFxuICAgICAgICBsZWZ0bW9zdCA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgaWYgKHAueCA8IGxlZnRtb3N0LnggfHwgKHAueCA9PT0gbGVmdG1vc3QueCAmJiBwLnkgPCBsZWZ0bW9zdC55KSkgbGVmdG1vc3QgPSBwO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcblxuICAgIHJldHVybiBsZWZ0bW9zdDtcbn1cblxuLy8gY2hlY2sgaWYgYSBwb2ludCBsaWVzIHdpdGhpbiBhIGNvbnZleCB0cmlhbmdsZVxuZnVuY3Rpb24gcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHB4LCBweSkge1xuICAgIHJldHVybiAoY3ggLSBweCkgKiAoYXkgLSBweSkgPj0gKGF4IC0gcHgpICogKGN5IC0gcHkpICYmXG4gICAgICAgICAgIChheCAtIHB4KSAqIChieSAtIHB5KSA+PSAoYnggLSBweCkgKiAoYXkgLSBweSkgJiZcbiAgICAgICAgICAgKGJ4IC0gcHgpICogKGN5IC0gcHkpID49IChjeCAtIHB4KSAqIChieSAtIHB5KTtcbn1cblxuLy8gY2hlY2sgaWYgYSBkaWFnb25hbCBiZXR3ZWVuIHR3byBwb2x5Z29uIG5vZGVzIGlzIHZhbGlkIChsaWVzIGluIHBvbHlnb24gaW50ZXJpb3IpXG5mdW5jdGlvbiBpc1ZhbGlkRGlhZ29uYWwoYSwgYikge1xuICAgIHJldHVybiBhLm5leHQuaSAhPT0gYi5pICYmIGEucHJldi5pICE9PSBiLmkgJiYgIWludGVyc2VjdHNQb2x5Z29uKGEsIGIpICYmIC8vIGRvbmVzJ3QgaW50ZXJzZWN0IG90aGVyIGVkZ2VzXG4gICAgICAgICAgIChsb2NhbGx5SW5zaWRlKGEsIGIpICYmIGxvY2FsbHlJbnNpZGUoYiwgYSkgJiYgbWlkZGxlSW5zaWRlKGEsIGIpICYmIC8vIGxvY2FsbHkgdmlzaWJsZVxuICAgICAgICAgICAgKGFyZWEoYS5wcmV2LCBhLCBiLnByZXYpIHx8IGFyZWEoYSwgYi5wcmV2LCBiKSkgfHwgLy8gZG9lcyBub3QgY3JlYXRlIG9wcG9zaXRlLWZhY2luZyBzZWN0b3JzXG4gICAgICAgICAgICBlcXVhbHMoYSwgYikgJiYgYXJlYShhLnByZXYsIGEsIGEubmV4dCkgPiAwICYmIGFyZWEoYi5wcmV2LCBiLCBiLm5leHQpID4gMCk7IC8vIHNwZWNpYWwgemVyby1sZW5ndGggY2FzZVxufVxuXG4vLyBzaWduZWQgYXJlYSBvZiBhIHRyaWFuZ2xlXG5mdW5jdGlvbiBhcmVhKHAsIHEsIHIpIHtcbiAgICByZXR1cm4gKHEueSAtIHAueSkgKiAoci54IC0gcS54KSAtIChxLnggLSBwLngpICogKHIueSAtIHEueSk7XG59XG5cbi8vIGNoZWNrIGlmIHR3byBwb2ludHMgYXJlIGVxdWFsXG5mdW5jdGlvbiBlcXVhbHMocDEsIHAyKSB7XG4gICAgcmV0dXJuIHAxLnggPT09IHAyLnggJiYgcDEueSA9PT0gcDIueTtcbn1cblxuLy8gY2hlY2sgaWYgdHdvIHNlZ21lbnRzIGludGVyc2VjdFxuZnVuY3Rpb24gaW50ZXJzZWN0cyhwMSwgcTEsIHAyLCBxMikge1xuICAgIHZhciBvMSA9IHNpZ24oYXJlYShwMSwgcTEsIHAyKSk7XG4gICAgdmFyIG8yID0gc2lnbihhcmVhKHAxLCBxMSwgcTIpKTtcbiAgICB2YXIgbzMgPSBzaWduKGFyZWEocDIsIHEyLCBwMSkpO1xuICAgIHZhciBvNCA9IHNpZ24oYXJlYShwMiwgcTIsIHExKSk7XG5cbiAgICBpZiAobzEgIT09IG8yICYmIG8zICE9PSBvNCkgcmV0dXJuIHRydWU7IC8vIGdlbmVyYWwgY2FzZVxuXG4gICAgaWYgKG8xID09PSAwICYmIG9uU2VnbWVudChwMSwgcDIsIHExKSkgcmV0dXJuIHRydWU7IC8vIHAxLCBxMSBhbmQgcDIgYXJlIGNvbGxpbmVhciBhbmQgcDIgbGllcyBvbiBwMXExXG4gICAgaWYgKG8yID09PSAwICYmIG9uU2VnbWVudChwMSwgcTIsIHExKSkgcmV0dXJuIHRydWU7IC8vIHAxLCBxMSBhbmQgcTIgYXJlIGNvbGxpbmVhciBhbmQgcTIgbGllcyBvbiBwMXExXG4gICAgaWYgKG8zID09PSAwICYmIG9uU2VnbWVudChwMiwgcDEsIHEyKSkgcmV0dXJuIHRydWU7IC8vIHAyLCBxMiBhbmQgcDEgYXJlIGNvbGxpbmVhciBhbmQgcDEgbGllcyBvbiBwMnEyXG4gICAgaWYgKG80ID09PSAwICYmIG9uU2VnbWVudChwMiwgcTEsIHEyKSkgcmV0dXJuIHRydWU7IC8vIHAyLCBxMiBhbmQgcTEgYXJlIGNvbGxpbmVhciBhbmQgcTEgbGllcyBvbiBwMnEyXG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIGZvciBjb2xsaW5lYXIgcG9pbnRzIHAsIHEsIHIsIGNoZWNrIGlmIHBvaW50IHEgbGllcyBvbiBzZWdtZW50IHByXG5mdW5jdGlvbiBvblNlZ21lbnQocCwgcSwgcikge1xuICAgIHJldHVybiBxLnggPD0gTWF0aC5tYXgocC54LCByLngpICYmIHEueCA+PSBNYXRoLm1pbihwLngsIHIueCkgJiYgcS55IDw9IE1hdGgubWF4KHAueSwgci55KSAmJiBxLnkgPj0gTWF0aC5taW4ocC55LCByLnkpO1xufVxuXG5mdW5jdGlvbiBzaWduKG51bSkge1xuICAgIHJldHVybiBudW0gPiAwID8gMSA6IG51bSA8IDAgPyAtMSA6IDA7XG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpbnRlcnNlY3RzIGFueSBwb2x5Z29uIHNlZ21lbnRzXG5mdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbihhLCBiKSB7XG4gICAgdmFyIHAgPSBhO1xuICAgIGRvIHtcbiAgICAgICAgaWYgKHAuaSAhPT0gYS5pICYmIHAubmV4dC5pICE9PSBhLmkgJiYgcC5pICE9PSBiLmkgJiYgcC5uZXh0LmkgIT09IGIuaSAmJlxuICAgICAgICAgICAgICAgIGludGVyc2VjdHMocCwgcC5uZXh0LCBhLCBiKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gYSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpcyBsb2NhbGx5IGluc2lkZSB0aGUgcG9seWdvblxuZnVuY3Rpb24gbG9jYWxseUluc2lkZShhLCBiKSB7XG4gICAgcmV0dXJuIGFyZWEoYS5wcmV2LCBhLCBhLm5leHQpIDwgMCA/XG4gICAgICAgIGFyZWEoYSwgYiwgYS5uZXh0KSA+PSAwICYmIGFyZWEoYSwgYS5wcmV2LCBiKSA+PSAwIDpcbiAgICAgICAgYXJlYShhLCBiLCBhLnByZXYpIDwgMCB8fCBhcmVhKGEsIGEubmV4dCwgYikgPCAwO1xufVxuXG4vLyBjaGVjayBpZiB0aGUgbWlkZGxlIHBvaW50IG9mIGEgcG9seWdvbiBkaWFnb25hbCBpcyBpbnNpZGUgdGhlIHBvbHlnb25cbmZ1bmN0aW9uIG1pZGRsZUluc2lkZShhLCBiKSB7XG4gICAgdmFyIHAgPSBhLFxuICAgICAgICBpbnNpZGUgPSBmYWxzZSxcbiAgICAgICAgcHggPSAoYS54ICsgYi54KSAvIDIsXG4gICAgICAgIHB5ID0gKGEueSArIGIueSkgLyAyO1xuICAgIGRvIHtcbiAgICAgICAgaWYgKCgocC55ID4gcHkpICE9PSAocC5uZXh0LnkgPiBweSkpICYmIHAubmV4dC55ICE9PSBwLnkgJiZcbiAgICAgICAgICAgICAgICAocHggPCAocC5uZXh0LnggLSBwLngpICogKHB5IC0gcC55KSAvIChwLm5leHQueSAtIHAueSkgKyBwLngpKVxuICAgICAgICAgICAgaW5zaWRlID0gIWluc2lkZTtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBhKTtcblxuICAgIHJldHVybiBpbnNpZGU7XG59XG5cbi8vIGxpbmsgdHdvIHBvbHlnb24gdmVydGljZXMgd2l0aCBhIGJyaWRnZTsgaWYgdGhlIHZlcnRpY2VzIGJlbG9uZyB0byB0aGUgc2FtZSByaW5nLCBpdCBzcGxpdHMgcG9seWdvbiBpbnRvIHR3bztcbi8vIGlmIG9uZSBiZWxvbmdzIHRvIHRoZSBvdXRlciByaW5nIGFuZCBhbm90aGVyIHRvIGEgaG9sZSwgaXQgbWVyZ2VzIGl0IGludG8gYSBzaW5nbGUgcmluZ1xuZnVuY3Rpb24gc3BsaXRQb2x5Z29uKGEsIGIpIHtcbiAgICB2YXIgYTIgPSBuZXcgTm9kZShhLmksIGEueCwgYS55KSxcbiAgICAgICAgYjIgPSBuZXcgTm9kZShiLmksIGIueCwgYi55KSxcbiAgICAgICAgYW4gPSBhLm5leHQsXG4gICAgICAgIGJwID0gYi5wcmV2O1xuXG4gICAgYS5uZXh0ID0gYjtcbiAgICBiLnByZXYgPSBhO1xuXG4gICAgYTIubmV4dCA9IGFuO1xuICAgIGFuLnByZXYgPSBhMjtcblxuICAgIGIyLm5leHQgPSBhMjtcbiAgICBhMi5wcmV2ID0gYjI7XG5cbiAgICBicC5uZXh0ID0gYjI7XG4gICAgYjIucHJldiA9IGJwO1xuXG4gICAgcmV0dXJuIGIyO1xufVxuXG4vLyBjcmVhdGUgYSBub2RlIGFuZCBvcHRpb25hbGx5IGxpbmsgaXQgd2l0aCBwcmV2aW91cyBvbmUgKGluIGEgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0KVxuZnVuY3Rpb24gaW5zZXJ0Tm9kZShpLCB4LCB5LCBsYXN0KSB7XG4gICAgdmFyIHAgPSBuZXcgTm9kZShpLCB4LCB5KTtcblxuICAgIGlmICghbGFzdCkge1xuICAgICAgICBwLnByZXYgPSBwO1xuICAgICAgICBwLm5leHQgPSBwO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcC5uZXh0ID0gbGFzdC5uZXh0O1xuICAgICAgICBwLnByZXYgPSBsYXN0O1xuICAgICAgICBsYXN0Lm5leHQucHJldiA9IHA7XG4gICAgICAgIGxhc3QubmV4dCA9IHA7XG4gICAgfVxuICAgIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiByZW1vdmVOb2RlKHApIHtcbiAgICBwLm5leHQucHJldiA9IHAucHJldjtcbiAgICBwLnByZXYubmV4dCA9IHAubmV4dDtcblxuICAgIGlmIChwLnByZXZaKSBwLnByZXZaLm5leHRaID0gcC5uZXh0WjtcbiAgICBpZiAocC5uZXh0WikgcC5uZXh0Wi5wcmV2WiA9IHAucHJldlo7XG59XG5cbmZ1bmN0aW9uIE5vZGUoaSwgeCwgeSkge1xuICAgIC8vIHZlcnRleCBpbmRleCBpbiBjb29yZGluYXRlcyBhcnJheVxuICAgIHRoaXMuaSA9IGk7XG5cbiAgICAvLyB2ZXJ0ZXggY29vcmRpbmF0ZXNcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG5cbiAgICAvLyBwcmV2aW91cyBhbmQgbmV4dCB2ZXJ0ZXggbm9kZXMgaW4gYSBwb2x5Z29uIHJpbmdcbiAgICB0aGlzLnByZXYgPSBudWxsO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG5cbiAgICAvLyB6LW9yZGVyIGN1cnZlIHZhbHVlXG4gICAgdGhpcy56ID0gMDtcblxuICAgIC8vIHByZXZpb3VzIGFuZCBuZXh0IG5vZGVzIGluIHotb3JkZXJcbiAgICB0aGlzLnByZXZaID0gbnVsbDtcbiAgICB0aGlzLm5leHRaID0gbnVsbDtcblxuICAgIC8vIGluZGljYXRlcyB3aGV0aGVyIHRoaXMgaXMgYSBzdGVpbmVyIHBvaW50XG4gICAgdGhpcy5zdGVpbmVyID0gZmFsc2U7XG59XG5cbi8vIHJldHVybiBhIHBlcmNlbnRhZ2UgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBwb2x5Z29uIGFyZWEgYW5kIGl0cyB0cmlhbmd1bGF0aW9uIGFyZWE7XG4vLyB1c2VkIHRvIHZlcmlmeSBjb3JyZWN0bmVzcyBvZiB0cmlhbmd1bGF0aW9uXG5lYXJjdXQuZGV2aWF0aW9uID0gZnVuY3Rpb24gKGRhdGEsIGhvbGVJbmRpY2VzLCBkaW0sIHRyaWFuZ2xlcykge1xuICAgIHZhciBoYXNIb2xlcyA9IGhvbGVJbmRpY2VzICYmIGhvbGVJbmRpY2VzLmxlbmd0aDtcbiAgICB2YXIgb3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWzBdICogZGltIDogZGF0YS5sZW5ndGg7XG5cbiAgICB2YXIgcG9seWdvbkFyZWEgPSBNYXRoLmFicyhzaWduZWRBcmVhKGRhdGEsIDAsIG91dGVyTGVuLCBkaW0pKTtcbiAgICBpZiAoaGFzSG9sZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBob2xlSW5kaWNlc1tpXSAqIGRpbTtcbiAgICAgICAgICAgIHZhciBlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzW2kgKyAxXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgcG9seWdvbkFyZWEgLT0gTWF0aC5hYnMoc2lnbmVkQXJlYShkYXRhLCBzdGFydCwgZW5kLCBkaW0pKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0cmlhbmdsZXNBcmVhID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdHJpYW5nbGVzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHZhciBhID0gdHJpYW5nbGVzW2ldICogZGltO1xuICAgICAgICB2YXIgYiA9IHRyaWFuZ2xlc1tpICsgMV0gKiBkaW07XG4gICAgICAgIHZhciBjID0gdHJpYW5nbGVzW2kgKyAyXSAqIGRpbTtcbiAgICAgICAgdHJpYW5nbGVzQXJlYSArPSBNYXRoLmFicyhcbiAgICAgICAgICAgIChkYXRhW2FdIC0gZGF0YVtjXSkgKiAoZGF0YVtiICsgMV0gLSBkYXRhW2EgKyAxXSkgLVxuICAgICAgICAgICAgKGRhdGFbYV0gLSBkYXRhW2JdKSAqIChkYXRhW2MgKyAxXSAtIGRhdGFbYSArIDFdKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvbHlnb25BcmVhID09PSAwICYmIHRyaWFuZ2xlc0FyZWEgPT09IDAgPyAwIDpcbiAgICAgICAgTWF0aC5hYnMoKHRyaWFuZ2xlc0FyZWEgLSBwb2x5Z29uQXJlYSkgLyBwb2x5Z29uQXJlYSk7XG59O1xuXG5mdW5jdGlvbiBzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkge1xuICAgIHZhciBzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydCwgaiA9IGVuZCAtIGRpbTsgaSA8IGVuZDsgaSArPSBkaW0pIHtcbiAgICAgICAgc3VtICs9IChkYXRhW2pdIC0gZGF0YVtpXSkgKiAoZGF0YVtpICsgMV0gKyBkYXRhW2ogKyAxXSk7XG4gICAgICAgIGogPSBpO1xuICAgIH1cbiAgICByZXR1cm4gc3VtO1xufVxuXG4vLyB0dXJuIGEgcG9seWdvbiBpbiBhIG11bHRpLWRpbWVuc2lvbmFsIGFycmF5IGZvcm0gKGUuZy4gYXMgaW4gR2VvSlNPTikgaW50byBhIGZvcm0gRWFyY3V0IGFjY2VwdHNcbmVhcmN1dC5mbGF0dGVuID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgZGltID0gZGF0YVswXVswXS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IHt2ZXJ0aWNlczogW10sIGhvbGVzOiBbXSwgZGltZW5zaW9uczogZGltfSxcbiAgICAgICAgaG9sZUluZGV4ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRhdGFbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGltOyBkKyspIHJlc3VsdC52ZXJ0aWNlcy5wdXNoKGRhdGFbaV1bal1bZF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgaG9sZUluZGV4ICs9IGRhdGFbaSAtIDFdLmxlbmd0aDtcbiAgICAgICAgICAgIHJlc3VsdC5ob2xlcy5wdXNoKGhvbGVJbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvKipcbiAqIENvbW1vbiB1dGlsaXRpZXNcbiAqIEBtb2R1bGUgZ2xNYXRyaXhcbiAqL1xuLy8gQ29uZmlndXJhdGlvbiBDb25zdGFudHNcbmV4cG9ydCB2YXIgRVBTSUxPTiA9IDAuMDAwMDAxO1xuZXhwb3J0IHZhciBBUlJBWV9UWVBFID0gdHlwZW9mIEZsb2F0MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBGbG9hdDMyQXJyYXkgOiBBcnJheTtcbmV4cG9ydCB2YXIgUkFORE9NID0gTWF0aC5yYW5kb207XG4vKipcbiAqIFNldHMgdGhlIHR5cGUgb2YgYXJyYXkgdXNlZCB3aGVuIGNyZWF0aW5nIG5ldyB2ZWN0b3JzIGFuZCBtYXRyaWNlc1xuICpcbiAqIEBwYXJhbSB7RmxvYXQzMkFycmF5Q29uc3RydWN0b3IgfCBBcnJheUNvbnN0cnVjdG9yfSB0eXBlIEFycmF5IHR5cGUsIHN1Y2ggYXMgRmxvYXQzMkFycmF5IG9yIEFycmF5XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldE1hdHJpeEFycmF5VHlwZSh0eXBlKSB7XG4gIEFSUkFZX1RZUEUgPSB0eXBlO1xufVxudmFyIGRlZ3JlZSA9IE1hdGguUEkgLyAxODA7XG4vKipcbiAqIENvbnZlcnQgRGVncmVlIFRvIFJhZGlhblxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBhIEFuZ2xlIGluIERlZ3JlZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdG9SYWRpYW4oYSkge1xuICByZXR1cm4gYSAqIGRlZ3JlZTtcbn1cbi8qKlxuICogVGVzdHMgd2hldGhlciBvciBub3QgdGhlIGFyZ3VtZW50cyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgdmFsdWUsIHdpdGhpbiBhbiBhYnNvbHV0ZVxuICogb3IgcmVsYXRpdmUgdG9sZXJhbmNlIG9mIGdsTWF0cml4LkVQU0lMT04gKGFuIGFic29sdXRlIHRvbGVyYW5jZSBpcyB1c2VkIGZvciB2YWx1ZXMgbGVzc1xuICogdGhhbiBvciBlcXVhbCB0byAxLjAsIGFuZCBhIHJlbGF0aXZlIHRvbGVyYW5jZSBpcyB1c2VkIGZvciBsYXJnZXIgdmFsdWVzKVxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBhIFRoZSBmaXJzdCBudW1iZXIgdG8gdGVzdC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBiIFRoZSBzZWNvbmQgbnVtYmVyIHRvIHRlc3QuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbnVtYmVycyBhcmUgYXBwcm94aW1hdGVseSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEpLCBNYXRoLmFicyhiKSk7XG59XG5pZiAoIU1hdGguaHlwb3QpIE1hdGguaHlwb3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB5ID0gMCxcbiAgICAgIGkgPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB5ICs9IGFyZ3VtZW50c1tpXSAqIGFyZ3VtZW50c1tpXTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLnNxcnQoeSk7XG59OyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXG4gKiAyeDIgTWF0cml4XG4gKiBAbW9kdWxlIG1hdDJcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0MlxuICpcbiAqIEByZXR1cm5zIHttYXQyfSBhIG5ldyAyeDIgbWF0cml4XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xuXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgfVxuXG4gIG91dFswXSA9IDE7XG4gIG91dFszXSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWF0MiBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIG1hdHJpeCB0byBjbG9uZVxuICogQHJldHVybnMge21hdDJ9IGEgbmV3IDJ4MiBtYXRyaXhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBtYXQyIHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IGEgbWF0MiB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBtYXQyIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEByZXR1cm5zIHttYXQyfSBvdXQgQSBuZXcgMngyIG1hdHJpeFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKG0wMCwgbTAxLCBtMTAsIG0xMSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMTA7XG4gIG91dFszXSA9IG0xMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0MiB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0xMCwgbTExKSB7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMTA7XG4gIG91dFszXSA9IG0xMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQyXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zcG9zZShvdXQsIGEpIHtcbiAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZVxuICAvLyBzb21lIHZhbHVlc1xuICBpZiAob3V0ID09PSBhKSB7XG4gICAgdmFyIGExID0gYVsxXTtcbiAgICBvdXRbMV0gPSBhWzJdO1xuICAgIG91dFsyXSA9IGExO1xuICB9IGVsc2Uge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsyXTtcbiAgICBvdXRbMl0gPSBhWzFdO1xuICAgIG91dFszXSA9IGFbM107XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBJbnZlcnRzIGEgbWF0MlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM107IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcblxuICB2YXIgZGV0ID0gYTAgKiBhMyAtIGEyICogYTE7XG5cbiAgaWYgKCFkZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGRldCA9IDEuMCAvIGRldDtcbiAgb3V0WzBdID0gYTMgKiBkZXQ7XG4gIG91dFsxXSA9IC1hMSAqIGRldDtcbiAgb3V0WzJdID0gLWEyICogZGV0O1xuICBvdXRbM10gPSBhMCAqIGRldDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXQyXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkam9pbnQob3V0LCBhKSB7XG4gIC8vIENhY2hpbmcgdGhpcyB2YWx1ZSBpcyBuZXNzZWNhcnkgaWYgb3V0ID09IGFcbiAgdmFyIGEwID0gYVswXTtcbiAgb3V0WzBdID0gYVszXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIG91dFsyXSA9IC1hWzJdO1xuICBvdXRbM10gPSBhMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQyXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICByZXR1cm4gYVswXSAqIGFbM10gLSBhWzJdICogYVsxXTtcbn1cbi8qKlxuICogTXVsdGlwbGllcyB0d28gbWF0MidzXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM107XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM107XG4gIG91dFswXSA9IGEwICogYjAgKyBhMiAqIGIxO1xuICBvdXRbMV0gPSBhMSAqIGIwICsgYTMgKiBiMTtcbiAgb3V0WzJdID0gYTAgKiBiMiArIGEyICogYjM7XG4gIG91dFszXSA9IGExICogYjIgKyBhMyAqIGIzO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0MiBieSB0aGUgZ2l2ZW4gYW5nbGVcbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCkge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTtcbiAgb3V0WzBdID0gYTAgKiBjICsgYTIgKiBzO1xuICBvdXRbMV0gPSBhMSAqIGMgKyBhMyAqIHM7XG4gIG91dFsyXSA9IGEwICogLXMgKyBhMiAqIGM7XG4gIG91dFszXSA9IGExICogLXMgKyBhMyAqIGM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0MiBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgdGhlIHZlYzIgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDJ9IG91dFxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM107XG4gIHZhciB2MCA9IHZbMF0sXG4gICAgICB2MSA9IHZbMV07XG4gIG91dFswXSA9IGEwICogdjA7XG4gIG91dFsxXSA9IGExICogdjA7XG4gIG91dFsyXSA9IGEyICogdjE7XG4gIG91dFszXSA9IGEzICogdjE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0Mi5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQyLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IG1hdDIgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTtcbiAgb3V0WzBdID0gYztcbiAgb3V0WzFdID0gcztcbiAgb3V0WzJdID0gLXM7XG4gIG91dFszXSA9IGM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciBzY2FsaW5nXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0Mi5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQyLnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgbWF0MiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XG4gIG91dFswXSA9IHZbMF07XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IHZbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQyXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwibWF0MihcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiLCBcIiArIGFbM10gKyBcIilcIjtcbn1cbi8qKlxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDJcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxuICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvYihhKSB7XG4gIHJldHVybiBNYXRoLmh5cG90KGFbMF0sIGFbMV0sIGFbMl0sIGFbM10pO1xufVxuLyoqXG4gKiBSZXR1cm5zIEwsIEQgYW5kIFUgbWF0cmljZXMgKExvd2VyIHRyaWFuZ3VsYXIsIERpYWdvbmFsIGFuZCBVcHBlciB0cmlhbmd1bGFyKSBieSBmYWN0b3JpemluZyB0aGUgaW5wdXQgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gTCB0aGUgbG93ZXIgdHJpYW5ndWxhciBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBEIHRoZSBkaWFnb25hbCBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBVIHRoZSB1cHBlciB0cmlhbmd1bGFyIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIGlucHV0IG1hdHJpeCB0byBmYWN0b3JpemVcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gTERVKEwsIEQsIFUsIGEpIHtcbiAgTFsyXSA9IGFbMl0gLyBhWzBdO1xuICBVWzBdID0gYVswXTtcbiAgVVsxXSA9IGFbMV07XG4gIFVbM10gPSBhWzNdIC0gTFsyXSAqIFVbMV07XG4gIHJldHVybiBbTCwgRCwgVV07XG59XG4vKipcbiAqIEFkZHMgdHdvIG1hdDInc1xuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgb3V0WzNdID0gYVszXSArIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXG4gKlxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gIG91dFszXSA9IGFbM10gLSBiWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyfSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpO1xufVxuLyoqXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cbiAqXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEFkZHMgdHdvIG1hdDIncyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiJ3MgZWxlbWVudHMgYnkgYmVmb3JlIGFkZGluZ1xuICogQHJldHVybnMge21hdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhckFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XG4gIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0Mi5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0Mi5zdWJ0cmFjdH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XG4vKipcbiAqIDJ4MyBNYXRyaXhcbiAqIEBtb2R1bGUgbWF0MmRcbiAqIEBkZXNjcmlwdGlvblxuICogQSBtYXQyZCBjb250YWlucyBzaXggZWxlbWVudHMgZGVmaW5lZCBhczpcbiAqIDxwcmU+XG4gKiBbYSwgYixcbiAqICBjLCBkLFxuICogIHR4LCB0eV1cbiAqIDwvcHJlPlxuICogVGhpcyBpcyBhIHNob3J0IGZvcm0gZm9yIHRoZSAzeDMgbWF0cml4OlxuICogPHByZT5cbiAqIFthLCBiLCAwLFxuICogIGMsIGQsIDAsXG4gKiAgdHgsIHR5LCAxXVxuICogPC9wcmU+XG4gKiBUaGUgbGFzdCBjb2x1bW4gaXMgaWdub3JlZCBzbyB0aGUgYXJyYXkgaXMgc2hvcnRlciBhbmQgb3BlcmF0aW9ucyBhcmUgZmFzdGVyLlxuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQyZFxuICpcbiAqIEByZXR1cm5zIHttYXQyZH0gYSBuZXcgMngzIG1hdHJpeFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg2KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSAwO1xuICB9XG5cbiAgb3V0WzBdID0gMTtcbiAgb3V0WzNdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBtYXQyZCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSBtYXRyaXggdG8gY2xvbmVcbiAqIEByZXR1cm5zIHttYXQyZH0gYSBuZXcgMngzIG1hdHJpeFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg2KTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgb3V0WzRdID0gYVs0XTtcbiAgb3V0WzVdID0gYVs1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDJkIHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgb3V0WzRdID0gYVs0XTtcbiAgb3V0WzVdID0gYVs1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IGEgbWF0MmQgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDE7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBtYXQyZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYSBDb21wb25lbnQgQSAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIENvbXBvbmVudCBCIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IGMgQ29tcG9uZW50IEMgKGluZGV4IDIpXG4gKiBAcGFyYW0ge051bWJlcn0gZCBDb21wb25lbnQgRCAoaW5kZXggMylcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eCBDb21wb25lbnQgVFggKGluZGV4IDQpXG4gKiBAcGFyYW0ge051bWJlcn0gdHkgQ29tcG9uZW50IFRZIChpbmRleCA1KVxuICogQHJldHVybnMge21hdDJkfSBBIG5ldyBtYXQyZFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKGEsIGIsIGMsIGQsIHR4LCB0eSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNik7XG4gIG91dFswXSA9IGE7XG4gIG91dFsxXSA9IGI7XG4gIG91dFsyXSA9IGM7XG4gIG91dFszXSA9IGQ7XG4gIG91dFs0XSA9IHR4O1xuICBvdXRbNV0gPSB0eTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0MmQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtOdW1iZXJ9IGEgQ29tcG9uZW50IEEgKGluZGV4IDApXG4gKiBAcGFyYW0ge051bWJlcn0gYiBDb21wb25lbnQgQiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBjIENvbXBvbmVudCBDIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IGQgQ29tcG9uZW50IEQgKGluZGV4IDMpXG4gKiBAcGFyYW0ge051bWJlcn0gdHggQ29tcG9uZW50IFRYIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IHR5IENvbXBvbmVudCBUWSAoaW5kZXggNSlcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIGEsIGIsIGMsIGQsIHR4LCB0eSkge1xuICBvdXRbMF0gPSBhO1xuICBvdXRbMV0gPSBiO1xuICBvdXRbMl0gPSBjO1xuICBvdXRbM10gPSBkO1xuICBvdXRbNF0gPSB0eDtcbiAgb3V0WzVdID0gdHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEludmVydHMgYSBtYXQyZFxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gIHZhciBhYSA9IGFbMF0sXG4gICAgICBhYiA9IGFbMV0sXG4gICAgICBhYyA9IGFbMl0sXG4gICAgICBhZCA9IGFbM107XG4gIHZhciBhdHggPSBhWzRdLFxuICAgICAgYXR5ID0gYVs1XTtcbiAgdmFyIGRldCA9IGFhICogYWQgLSBhYiAqIGFjO1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBkZXQgPSAxLjAgLyBkZXQ7XG4gIG91dFswXSA9IGFkICogZGV0O1xuICBvdXRbMV0gPSAtYWIgKiBkZXQ7XG4gIG91dFsyXSA9IC1hYyAqIGRldDtcbiAgb3V0WzNdID0gYWEgKiBkZXQ7XG4gIG91dFs0XSA9IChhYyAqIGF0eSAtIGFkICogYXR4KSAqIGRldDtcbiAgb3V0WzVdID0gKGFiICogYXR4IC0gYWEgKiBhdHkpICogZGV0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDJkXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgcmV0dXJuIGFbMF0gKiBhWzNdIC0gYVsxXSAqIGFbMl07XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDJkJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM10sXG4gICAgICBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM10sXG4gICAgICBiNCA9IGJbNF0sXG4gICAgICBiNSA9IGJbNV07XG4gIG91dFswXSA9IGEwICogYjAgKyBhMiAqIGIxO1xuICBvdXRbMV0gPSBhMSAqIGIwICsgYTMgKiBiMTtcbiAgb3V0WzJdID0gYTAgKiBiMiArIGEyICogYjM7XG4gIG91dFszXSA9IGExICogYjIgKyBhMyAqIGIzO1xuICBvdXRbNF0gPSBhMCAqIGI0ICsgYTIgKiBiNSArIGE0O1xuICBvdXRbNV0gPSBhMSAqIGI0ICsgYTMgKiBiNSArIGE1O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0MmQgYnkgdGhlIGdpdmVuIGFuZ2xlXG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXSxcbiAgICAgIGE0ID0gYVs0XSxcbiAgICAgIGE1ID0gYVs1XTtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGEwICogYyArIGEyICogcztcbiAgb3V0WzFdID0gYTEgKiBjICsgYTMgKiBzO1xuICBvdXRbMl0gPSBhMCAqIC1zICsgYTIgKiBjO1xuICBvdXRbM10gPSBhMSAqIC1zICsgYTMgKiBjO1xuICBvdXRbNF0gPSBhNDtcbiAgb3V0WzVdID0gYTU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0MmQgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgdGhlIHZlYzIgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdLFxuICAgICAgYTQgPSBhWzRdLFxuICAgICAgYTUgPSBhWzVdO1xuICB2YXIgdjAgPSB2WzBdLFxuICAgICAgdjEgPSB2WzFdO1xuICBvdXRbMF0gPSBhMCAqIHYwO1xuICBvdXRbMV0gPSBhMSAqIHYwO1xuICBvdXRbMl0gPSBhMiAqIHYxO1xuICBvdXRbM10gPSBhMyAqIHYxO1xuICBvdXRbNF0gPSBhNDtcbiAgb3V0WzVdID0gYTU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zbGF0ZXMgdGhlIG1hdDJkIGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMyXG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IHRoZSB2ZWMyIHRvIHRyYW5zbGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdLFxuICAgICAgYTQgPSBhWzRdLFxuICAgICAgYTUgPSBhWzVdO1xuICB2YXIgdjAgPSB2WzBdLFxuICAgICAgdjEgPSB2WzFdO1xuICBvdXRbMF0gPSBhMDtcbiAgb3V0WzFdID0gYTE7XG4gIG91dFsyXSA9IGEyO1xuICBvdXRbM10gPSBhMztcbiAgb3V0WzRdID0gYTAgKiB2MCArIGEyICogdjEgKyBhNDtcbiAgb3V0WzVdID0gYTEgKiB2MCArIGEzICogdjEgKyBhNTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQyZC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQyZC5yb3RhdGUoZGVzdCwgZGVzdCwgcmFkKTtcbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgbWF0MmQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb24ob3V0LCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGM7XG4gIG91dFsxXSA9IHM7XG4gIG91dFsyXSA9IC1zO1xuICBvdXRbM10gPSBjO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAwO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDJkLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDJkLnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IG1hdDJkIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gdiBTY2FsaW5nIHZlY3RvclxuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XG4gIG91dFswXSA9IHZbMF07XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IHZbMV07XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciB0cmFuc2xhdGlvblxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDJkLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDJkLnRyYW5zbGF0ZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCBtYXQyZCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB2KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDE7XG4gIG91dFs0XSA9IHZbMF07XG4gIG91dFs1XSA9IHZbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQyZFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJtYXQyZChcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiLCBcIiArIGFbM10gKyBcIiwgXCIgKyBhWzRdICsgXCIsIFwiICsgYVs1XSArIFwiKVwiO1xufVxuLyoqXG4gKiBSZXR1cm5zIEZyb2Jlbml1cyBub3JtIG9mIGEgbWF0MmRcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xuICByZXR1cm4gTWF0aC5oeXBvdChhWzBdLCBhWzFdLCBhWzJdLCBhWzNdLCBhWzRdLCBhWzVdLCAxKTtcbn1cbi8qKlxuICogQWRkcyB0d28gbWF0MmQnc1xuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXG4gKlxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cbiAqXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIG91dFs0XSA9IGFbNF0gKiBiO1xuICBvdXRbNV0gPSBhWzVdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWRkcyB0d28gbWF0MmQncyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiJ3MgZWxlbWVudHMgYnkgYmVmb3JlIGFkZGluZ1xuICogQHJldHVybnMge21hdDJkfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xuICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XSAqIHNjYWxlO1xuICBvdXRbNV0gPSBhWzVdICsgYls1XSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIFRoZSBmaXJzdCBtYXRyaXguXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGIgVGhlIHNlY29uZCBtYXRyaXguXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiYgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBhIFRoZSBmaXJzdCBtYXRyaXguXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGIgVGhlIHNlY29uZCBtYXRyaXguXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM10sXG4gICAgICBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM10sXG4gICAgICBiNCA9IGJbNF0sXG4gICAgICBiNSA9IGJbNV07XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiYgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE1KSwgTWF0aC5hYnMoYjUpKTtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQyZC5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0MmQuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0OyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXG4gKiAzeDMgTWF0cml4XG4gKiBAbW9kdWxlIG1hdDNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0M1xuICpcbiAqIEByZXR1cm5zIHttYXQzfSBhIG5ldyAzeDMgbWF0cml4XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDkpO1xuXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs1XSA9IDA7XG4gICAgb3V0WzZdID0gMDtcbiAgICBvdXRbN10gPSAwO1xuICB9XG5cbiAgb3V0WzBdID0gMTtcbiAgb3V0WzRdID0gMTtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ29waWVzIHRoZSB1cHBlci1sZWZ0IDN4MyB2YWx1ZXMgaW50byB0aGUgZ2l2ZW4gbWF0My5cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIDN4MyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhICAgdGhlIHNvdXJjZSA0eDQgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQ0KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzRdO1xuICBvdXRbNF0gPSBhWzVdO1xuICBvdXRbNV0gPSBhWzZdO1xuICBvdXRbNl0gPSBhWzhdO1xuICBvdXRbN10gPSBhWzldO1xuICBvdXRbOF0gPSBhWzEwXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBtYXQzIGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgbWF0cml4XG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgbWF0cml4IHRvIGNsb25lXG4gKiBAcmV0dXJucyB7bWF0M30gYSBuZXcgM3gzIG1hdHJpeFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg5KTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgb3V0WzRdID0gYVs0XTtcbiAgb3V0WzVdID0gYVs1XTtcbiAgb3V0WzZdID0gYVs2XTtcbiAgb3V0WzddID0gYVs3XTtcbiAgb3V0WzhdID0gYVs4XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgbWF0MyB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXG4gKiBAcGFyYW0ge051bWJlcn0gbTAxIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDEgcG9zaXRpb24gKGluZGV4IDEpXG4gKiBAcGFyYW0ge051bWJlcn0gbTAyIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDIgcG9zaXRpb24gKGluZGV4IDIpXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDMpXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDQpXG4gKiBAcGFyYW0ge051bWJlcn0gbTEyIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDIgcG9zaXRpb24gKGluZGV4IDUpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIwIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDAgcG9zaXRpb24gKGluZGV4IDYpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIxIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDEgcG9zaXRpb24gKGluZGV4IDcpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIyIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDIgcG9zaXRpb24gKGluZGV4IDgpXG4gKiBAcmV0dXJucyB7bWF0M30gQSBuZXcgbWF0M1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDkpO1xuICBvdXRbMF0gPSBtMDA7XG4gIG91dFsxXSA9IG0wMTtcbiAgb3V0WzJdID0gbTAyO1xuICBvdXRbM10gPSBtMTA7XG4gIG91dFs0XSA9IG0xMTtcbiAgb3V0WzVdID0gbTEyO1xuICBvdXRbNl0gPSBtMjA7XG4gIG91dFs3XSA9IG0yMTtcbiAgb3V0WzhdID0gbTIyO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAzKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA1KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA2KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA3KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA4KVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0xMDtcbiAgb3V0WzRdID0gbTExO1xuICBvdXRbNV0gPSBtMTI7XG4gIG91dFs2XSA9IG0yMDtcbiAgb3V0WzddID0gbTIxO1xuICBvdXRbOF0gPSBtMjI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCBhIG1hdDMgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAxO1xuICBvdXRbNV0gPSAwO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc3Bvc2UgdGhlIHZhbHVlcyBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gIGlmIChvdXQgPT09IGEpIHtcbiAgICB2YXIgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTEyID0gYVs1XTtcbiAgICBvdXRbMV0gPSBhWzNdO1xuICAgIG91dFsyXSA9IGFbNl07XG4gICAgb3V0WzNdID0gYTAxO1xuICAgIG91dFs1XSA9IGFbN107XG4gICAgb3V0WzZdID0gYTAyO1xuICAgIG91dFs3XSA9IGExMjtcbiAgfSBlbHNlIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbM107XG4gICAgb3V0WzJdID0gYVs2XTtcbiAgICBvdXRbM10gPSBhWzFdO1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs3XTtcbiAgICBvdXRbNl0gPSBhWzJdO1xuICAgIG91dFs3XSA9IGFbNV07XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEludmVydHMgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXTtcbiAgdmFyIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XTtcbiAgdmFyIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XTtcbiAgdmFyIGIwMSA9IGEyMiAqIGExMSAtIGExMiAqIGEyMTtcbiAgdmFyIGIxMSA9IC1hMjIgKiBhMTAgKyBhMTIgKiBhMjA7XG4gIHZhciBiMjEgPSBhMjEgKiBhMTAgLSBhMTEgKiBhMjA7IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcblxuICB2YXIgZGV0ID0gYTAwICogYjAxICsgYTAxICogYjExICsgYTAyICogYjIxO1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBkZXQgPSAxLjAgLyBkZXQ7XG4gIG91dFswXSA9IGIwMSAqIGRldDtcbiAgb3V0WzFdID0gKC1hMjIgKiBhMDEgKyBhMDIgKiBhMjEpICogZGV0O1xuICBvdXRbMl0gPSAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGRldDtcbiAgb3V0WzNdID0gYjExICogZGV0O1xuICBvdXRbNF0gPSAoYTIyICogYTAwIC0gYTAyICogYTIwKSAqIGRldDtcbiAgb3V0WzVdID0gKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogZGV0O1xuICBvdXRbNl0gPSBiMjEgKiBkZXQ7XG4gIG91dFs3XSA9ICgtYTIxICogYTAwICsgYTAxICogYTIwKSAqIGRldDtcbiAgb3V0WzhdID0gKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBkZXQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGpvaW50KG91dCwgYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdO1xuICB2YXIgYTEwID0gYVszXSxcbiAgICAgIGExMSA9IGFbNF0sXG4gICAgICBhMTIgPSBhWzVdO1xuICB2YXIgYTIwID0gYVs2XSxcbiAgICAgIGEyMSA9IGFbN10sXG4gICAgICBhMjIgPSBhWzhdO1xuICBvdXRbMF0gPSBhMTEgKiBhMjIgLSBhMTIgKiBhMjE7XG4gIG91dFsxXSA9IGEwMiAqIGEyMSAtIGEwMSAqIGEyMjtcbiAgb3V0WzJdID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICBvdXRbM10gPSBhMTIgKiBhMjAgLSBhMTAgKiBhMjI7XG4gIG91dFs0XSA9IGEwMCAqIGEyMiAtIGEwMiAqIGEyMDtcbiAgb3V0WzVdID0gYTAyICogYTEwIC0gYTAwICogYTEyO1xuICBvdXRbNl0gPSBhMTAgKiBhMjEgLSBhMTEgKiBhMjA7XG4gIG91dFs3XSA9IGEwMSAqIGEyMCAtIGEwMCAqIGEyMTtcbiAgb3V0WzhdID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudChhKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl07XG4gIHZhciBhMTAgPSBhWzNdLFxuICAgICAgYTExID0gYVs0XSxcbiAgICAgIGExMiA9IGFbNV07XG4gIHZhciBhMjAgPSBhWzZdLFxuICAgICAgYTIxID0gYVs3XSxcbiAgICAgIGEyMiA9IGFbOF07XG4gIHJldHVybiBhMDAgKiAoYTIyICogYTExIC0gYTEyICogYTIxKSArIGEwMSAqICgtYTIyICogYTEwICsgYTEyICogYTIwKSArIGEwMiAqIChhMjEgKiBhMTAgLSBhMTEgKiBhMjApO1xufVxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQzJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXTtcbiAgdmFyIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XTtcbiAgdmFyIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XTtcbiAgdmFyIGIwMCA9IGJbMF0sXG4gICAgICBiMDEgPSBiWzFdLFxuICAgICAgYjAyID0gYlsyXTtcbiAgdmFyIGIxMCA9IGJbM10sXG4gICAgICBiMTEgPSBiWzRdLFxuICAgICAgYjEyID0gYls1XTtcbiAgdmFyIGIyMCA9IGJbNl0sXG4gICAgICBiMjEgPSBiWzddLFxuICAgICAgYjIyID0gYls4XTtcbiAgb3V0WzBdID0gYjAwICogYTAwICsgYjAxICogYTEwICsgYjAyICogYTIwO1xuICBvdXRbMV0gPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjE7XG4gIG91dFsyXSA9IGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMiAqIGEyMjtcbiAgb3V0WzNdID0gYjEwICogYTAwICsgYjExICogYTEwICsgYjEyICogYTIwO1xuICBvdXRbNF0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjE7XG4gIG91dFs1XSA9IGIxMCAqIGEwMiArIGIxMSAqIGExMiArIGIxMiAqIGEyMjtcbiAgb3V0WzZdID0gYjIwICogYTAwICsgYjIxICogYTEwICsgYjIyICogYTIwO1xuICBvdXRbN10gPSBiMjAgKiBhMDEgKyBiMjEgKiBhMTEgKyBiMjIgKiBhMjE7XG4gIG91dFs4XSA9IGIyMCAqIGEwMiArIGIyMSAqIGExMiArIGIyMiAqIGEyMjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNsYXRlIGEgbWF0MyBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XSxcbiAgICAgIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XSxcbiAgICAgIHggPSB2WzBdLFxuICAgICAgeSA9IHZbMV07XG4gIG91dFswXSA9IGEwMDtcbiAgb3V0WzFdID0gYTAxO1xuICBvdXRbMl0gPSBhMDI7XG4gIG91dFszXSA9IGExMDtcbiAgb3V0WzRdID0gYTExO1xuICBvdXRbNV0gPSBhMTI7XG4gIG91dFs2XSA9IHggKiBhMDAgKyB5ICogYTEwICsgYTIwO1xuICBvdXRbN10gPSB4ICogYTAxICsgeSAqIGExMSArIGEyMTtcbiAgb3V0WzhdID0geCAqIGEwMiArIHkgKiBhMTIgKyBhMjI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBtYXQzIGJ5IHRoZSBnaXZlbiBhbmdsZVxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl0sXG4gICAgICBhMTAgPSBhWzNdLFxuICAgICAgYTExID0gYVs0XSxcbiAgICAgIGExMiA9IGFbNV0sXG4gICAgICBhMjAgPSBhWzZdLFxuICAgICAgYTIxID0gYVs3XSxcbiAgICAgIGEyMiA9IGFbOF0sXG4gICAgICBzID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuICBvdXRbMF0gPSBjICogYTAwICsgcyAqIGExMDtcbiAgb3V0WzFdID0gYyAqIGEwMSArIHMgKiBhMTE7XG4gIG91dFsyXSA9IGMgKiBhMDIgKyBzICogYTEyO1xuICBvdXRbM10gPSBjICogYTEwIC0gcyAqIGEwMDtcbiAgb3V0WzRdID0gYyAqIGExMSAtIHMgKiBhMDE7XG4gIG91dFs1XSA9IGMgKiBhMTIgLSBzICogYTAyO1xuICBvdXRbNl0gPSBhMjA7XG4gIG91dFs3XSA9IGEyMTtcbiAgb3V0WzhdID0gYTIyO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTY2FsZXMgdGhlIG1hdDMgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IHRoZSB2ZWMyIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICB2YXIgeCA9IHZbMF0sXG4gICAgICB5ID0gdlsxXTtcbiAgb3V0WzBdID0geCAqIGFbMF07XG4gIG91dFsxXSA9IHggKiBhWzFdO1xuICBvdXRbMl0gPSB4ICogYVsyXTtcbiAgb3V0WzNdID0geSAqIGFbM107XG4gIG91dFs0XSA9IHkgKiBhWzRdO1xuICBvdXRbNV0gPSB5ICogYVs1XTtcbiAgb3V0WzZdID0gYVs2XTtcbiAgb3V0WzddID0gYVs3XTtcbiAgb3V0WzhdID0gYVs4XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHRyYW5zbGF0aW9uXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0My5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQzLnRyYW5zbGF0ZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB2KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDE7XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IHZbMF07XG4gIG91dFs3XSA9IHZbMV07XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0My5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQzLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCksXG4gICAgICBjID0gTWF0aC5jb3MocmFkKTtcbiAgb3V0WzBdID0gYztcbiAgb3V0WzFdID0gcztcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gLXM7XG4gIG91dFs0XSA9IGM7XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciBzY2FsaW5nXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0My5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQzLnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XG4gIG91dFswXSA9IHZbMF07XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHZbMV07XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIGZyb20gYSBtYXQyZCBpbnRvIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IGEgdGhlIG1hdHJpeCB0byBjb3B5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0MmQob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IGFbMl07XG4gIG91dFs0XSA9IGFbM107XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IGFbNF07XG4gIG91dFs3XSA9IGFbNV07XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQob3V0LCBxKSB7XG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeXggPSB5ICogeDI7XG4gIHZhciB5eSA9IHkgKiB5MjtcbiAgdmFyIHp4ID0geiAqIHgyO1xuICB2YXIgenkgPSB6ICogeTI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgb3V0WzBdID0gMSAtIHl5IC0geno7XG4gIG91dFszXSA9IHl4IC0gd3o7XG4gIG91dFs2XSA9IHp4ICsgd3k7XG4gIG91dFsxXSA9IHl4ICsgd3o7XG4gIG91dFs0XSA9IDEgLSB4eCAtIHp6O1xuICBvdXRbN10gPSB6eSAtIHd4O1xuICBvdXRbMl0gPSB6eCAtIHd5O1xuICBvdXRbNV0gPSB6eSArIHd4O1xuICBvdXRbOF0gPSAxIC0geHggLSB5eTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDN4MyBub3JtYWwgbWF0cml4ICh0cmFuc3Bvc2UgaW52ZXJzZSkgZnJvbSB0aGUgNHg0IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIE1hdDQgdG8gZGVyaXZlIHRoZSBub3JtYWwgbWF0cml4IGZyb21cbiAqXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbEZyb21NYXQ0KG91dCwgYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF0sXG4gICAgICBhMTEgPSBhWzVdLFxuICAgICAgYTEyID0gYVs2XSxcbiAgICAgIGExMyA9IGFbN107XG4gIHZhciBhMjAgPSBhWzhdLFxuICAgICAgYTIxID0gYVs5XSxcbiAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgYTIzID0gYVsxMV07XG4gIHZhciBhMzAgPSBhWzEyXSxcbiAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgYTMyID0gYVsxNF0sXG4gICAgICBhMzMgPSBhWzE1XTtcbiAgdmFyIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgdmFyIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgdmFyIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgdmFyIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgdmFyIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgdmFyIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgdmFyIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgdmFyIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjsgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuXG4gIHZhciBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG5cbiAgaWYgKCFkZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGRldCA9IDEuMCAvIGRldDtcbiAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gIG91dFsxXSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xuICBvdXRbMl0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcbiAgb3V0WzNdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XG4gIG91dFs0XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xuICBvdXRbNV0gPSAoYTAxICogYjA4IC0gYTAwICogYjEwIC0gYTAzICogYjA2KSAqIGRldDtcbiAgb3V0WzZdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gIG91dFs3XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0O1xuICBvdXRbOF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgMkQgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFdpZHRoIG9mIHlvdXIgZ2wgY29udGV4dFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgZ2wgY29udGV4dFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uKG91dCwgd2lkdGgsIGhlaWdodCkge1xuICBvdXRbMF0gPSAyIC8gd2lkdGg7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IC0yIC8gaGVpZ2h0O1xuICBvdXRbNV0gPSAwO1xuICBvdXRbNl0gPSAtMTtcbiAgb3V0WzddID0gMTtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJtYXQzKFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIsIFwiICsgYVszXSArIFwiLCBcIiArIGFbNF0gKyBcIiwgXCIgKyBhWzVdICsgXCIsIFwiICsgYVs2XSArIFwiLCBcIiArIGFbN10gKyBcIiwgXCIgKyBhWzhdICsgXCIpXCI7XG59XG4vKipcbiAqIFJldHVybnMgRnJvYmVuaXVzIG5vcm0gb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xuICByZXR1cm4gTWF0aC5oeXBvdChhWzBdLCBhWzFdLCBhWzJdLCBhWzNdLCBhWzRdLCBhWzVdLCBhWzZdLCBhWzddLCBhWzhdKTtcbn1cbi8qKlxuICogQWRkcyB0d28gbWF0MydzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICBvdXRbNl0gPSBhWzZdICsgYls2XTtcbiAgb3V0WzddID0gYVs3XSArIGJbN107XG4gIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgb3V0WzddID0gYVs3XSAtIGJbN107XG4gIG91dFs4XSA9IGFbOF0gLSBiWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIG91dFs0XSA9IGFbNF0gKiBiO1xuICBvdXRbNV0gPSBhWzVdICogYjtcbiAgb3V0WzZdID0gYVs2XSAqIGI7XG4gIG91dFs3XSA9IGFbN10gKiBiO1xuICBvdXRbOF0gPSBhWzhdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWRkcyB0d28gbWF0MydzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcbiAgb3V0WzNdID0gYVszXSArIGJbM10gKiBzY2FsZTtcbiAgb3V0WzRdID0gYVs0XSArIGJbNF0gKiBzY2FsZTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV0gKiBzY2FsZTtcbiAgb3V0WzZdID0gYVs2XSArIGJbNl0gKiBzY2FsZTtcbiAgb3V0WzddID0gYVs3XSArIGJbN10gKiBzY2FsZTtcbiAgb3V0WzhdID0gYVs4XSArIGJbOF0gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIFRoZSBmaXJzdCBtYXRyaXguXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiBUaGUgc2Vjb25kIG1hdHJpeC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXSAmJiBhWzRdID09PSBiWzRdICYmIGFbNV0gPT09IGJbNV0gJiYgYVs2XSA9PT0gYls2XSAmJiBhWzddID09PSBiWzddICYmIGFbOF0gPT09IGJbOF07XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSBUaGUgZmlyc3QgbWF0cml4LlxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGIgVGhlIHNlY29uZCBtYXRyaXguXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM10sXG4gICAgICBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV0sXG4gICAgICBhNiA9IGFbNl0sXG4gICAgICBhNyA9IGFbN10sXG4gICAgICBhOCA9IGFbOF07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM10sXG4gICAgICBiNCA9IGJbNF0sXG4gICAgICBiNSA9IGJbNV0sXG4gICAgICBiNiA9IGJbNl0sXG4gICAgICBiNyA9IGJbN10sXG4gICAgICBiOCA9IGJbOF07XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiYgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE1KSwgTWF0aC5hYnMoYjUpKSAmJiBNYXRoLmFicyhhNiAtIGI2KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNiksIE1hdGguYWJzKGI2KSkgJiYgTWF0aC5hYnMoYTcgLSBiNykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTcpLCBNYXRoLmFicyhiNykpICYmIE1hdGguYWJzKGE4IC0gYjgpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE4KSwgTWF0aC5hYnMoYjgpKTtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQzLm11bHRpcGx5fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQzLnN1YnRyYWN0fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDsiLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxuICogNHg0IE1hdHJpeDxicj5Gb3JtYXQ6IGNvbHVtbi1tYWpvciwgd2hlbiB0eXBlZCBvdXQgaXQgbG9va3MgbGlrZSByb3ctbWFqb3I8YnI+VGhlIG1hdHJpY2VzIGFyZSBiZWluZyBwb3N0IG11bHRpcGxpZWQuXG4gKiBAbW9kdWxlIG1hdDRcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0NFxuICpcbiAqIEByZXR1cm5zIHttYXQ0fSBhIG5ldyA0eDQgbWF0cml4XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDE2KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDA7XG4gIH1cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbMTBdID0gMTtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWF0NCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIG1hdHJpeCB0byBjbG9uZVxuICogQHJldHVybnMge21hdDR9IGEgbmV3IDR4NCBtYXRyaXhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMTYpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICBvdXRbOV0gPSBhWzldO1xuICBvdXRbMTBdID0gYVsxMF07XG4gIG91dFsxMV0gPSBhWzExXTtcbiAgb3V0WzEyXSA9IGFbMTJdO1xuICBvdXRbMTNdID0gYVsxM107XG4gIG91dFsxNF0gPSBhWzE0XTtcbiAgb3V0WzE1XSA9IGFbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0NCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIG91dFs5XSA9IGFbOV07XG4gIG91dFsxMF0gPSBhWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdO1xuICBvdXRbMTJdID0gYVsxMl07XG4gIG91dFsxM10gPSBhWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdO1xuICBvdXRbMTVdID0gYVsxNV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBtYXQ0IHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTMgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggNylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggOClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggOSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTApXG4gKiBAcGFyYW0ge051bWJlcn0gbTIzIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDMgcG9zaXRpb24gKGluZGV4IDExKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMCBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAxMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzEgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMTMpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMyIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDIgcG9zaXRpb24gKGluZGV4IDE0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMyBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxNSlcbiAqIEByZXR1cm5zIHttYXQ0fSBBIG5ldyBtYXQ0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMobTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgxNik7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0wMztcbiAgb3V0WzRdID0gbTEwO1xuICBvdXRbNV0gPSBtMTE7XG4gIG91dFs2XSA9IG0xMjtcbiAgb3V0WzddID0gbTEzO1xuICBvdXRbOF0gPSBtMjA7XG4gIG91dFs5XSA9IG0yMTtcbiAgb3V0WzEwXSA9IG0yMjtcbiAgb3V0WzExXSA9IG0yMztcbiAgb3V0WzEyXSA9IG0zMDtcbiAgb3V0WzEzXSA9IG0zMTtcbiAgb3V0WzE0XSA9IG0zMjtcbiAgb3V0WzE1XSA9IG0zMztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0NCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTMgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggNylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggOClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggOSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTApXG4gKiBAcGFyYW0ge051bWJlcn0gbTIzIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDMgcG9zaXRpb24gKGluZGV4IDExKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMCBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAxMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzEgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMTMpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMyIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDIgcG9zaXRpb24gKGluZGV4IDE0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMyBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxNSlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0wMztcbiAgb3V0WzRdID0gbTEwO1xuICBvdXRbNV0gPSBtMTE7XG4gIG91dFs2XSA9IG0xMjtcbiAgb3V0WzddID0gbTEzO1xuICBvdXRbOF0gPSBtMjA7XG4gIG91dFs5XSA9IG0yMTtcbiAgb3V0WzEwXSA9IG0yMjtcbiAgb3V0WzExXSA9IG0yMztcbiAgb3V0WzEyXSA9IG0zMDtcbiAgb3V0WzEzXSA9IG0zMTtcbiAgb3V0WzE0XSA9IG0zMjtcbiAgb3V0WzE1XSA9IG0zMztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IGEgbWF0NCB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDE7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XG4gIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgaWYgKG91dCA9PT0gYSkge1xuICAgIHZhciBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIHZhciBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIHZhciBhMjMgPSBhWzExXTtcbiAgICBvdXRbMV0gPSBhWzRdO1xuICAgIG91dFsyXSA9IGFbOF07XG4gICAgb3V0WzNdID0gYVsxMl07XG4gICAgb3V0WzRdID0gYTAxO1xuICAgIG91dFs2XSA9IGFbOV07XG4gICAgb3V0WzddID0gYVsxM107XG4gICAgb3V0WzhdID0gYTAyO1xuICAgIG91dFs5XSA9IGExMjtcbiAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgb3V0WzEyXSA9IGEwMztcbiAgICBvdXRbMTNdID0gYTEzO1xuICAgIG91dFsxNF0gPSBhMjM7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzRdO1xuICAgIG91dFsyXSA9IGFbOF07XG4gICAgb3V0WzNdID0gYVsxMl07XG4gICAgb3V0WzRdID0gYVsxXTtcbiAgICBvdXRbNV0gPSBhWzVdO1xuICAgIG91dFs2XSA9IGFbOV07XG4gICAgb3V0WzddID0gYVsxM107XG4gICAgb3V0WzhdID0gYVsyXTtcbiAgICBvdXRbOV0gPSBhWzZdO1xuICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgb3V0WzEyXSA9IGFbM107XG4gICAgb3V0WzEzXSA9IGFbN107XG4gICAgb3V0WzE0XSA9IGFbMTFdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEludmVydHMgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07XG4gIHZhciBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gIHZhciBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XG4gIHZhciBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gIHZhciBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gIHZhciBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XG4gIHZhciBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gIHZhciBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XG4gIHZhciBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XG4gIHZhciBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gIHZhciBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XG4gIHZhciBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XG4gIHZhciBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcblxuICB2YXIgZGV0ID0gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBkZXQgPSAxLjAgLyBkZXQ7XG4gIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xuICBvdXRbMV0gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcbiAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gIG91dFszXSA9IChhMjIgKiBiMDQgLSBhMjEgKiBiMDUgLSBhMjMgKiBiMDMpICogZGV0O1xuICBvdXRbNF0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcbiAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gIG91dFs2XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0O1xuICBvdXRbN10gPSAoYTIwICogYjA1IC0gYTIyICogYjAyICsgYTIzICogYjAxKSAqIGRldDtcbiAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XG4gIG91dFs5XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuICBvdXRbMTBdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG4gIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDtcbiAgb3V0WzEyXSA9IChhMTEgKiBiMDcgLSBhMTAgKiBiMDkgLSBhMTIgKiBiMDYpICogZGV0O1xuICBvdXRbMTNdID0gKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBkZXQ7XG4gIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDtcbiAgb3V0WzE1XSA9IChhMjAgKiBiMDMgLSBhMjEgKiBiMDEgKyBhMjIgKiBiMDApICogZGV0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBhZGp1Z2F0ZSBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRqb2ludChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07XG4gIG91dFswXSA9IGExMSAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIxICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgKyBhMzEgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKTtcbiAgb3V0WzFdID0gLShhMDEgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMSAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMxICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMikpO1xuICBvdXRbMl0gPSBhMDEgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSAtIGExMSAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMxICogKGEwMiAqIGExMyAtIGEwMyAqIGExMik7XG4gIG91dFszXSA9IC0oYTAxICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikgLSBhMTEgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSArIGEyMSAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcbiAgb3V0WzRdID0gLShhMTAgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMCAqIChhMTIgKiBhMzMgLSBhMTMgKiBhMzIpICsgYTMwICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikpO1xuICBvdXRbNV0gPSBhMDAgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMCAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMwICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMik7XG4gIG91dFs2XSA9IC0oYTAwICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgLSBhMTAgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMCAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcbiAgb3V0WzddID0gYTAwICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikgLSBhMTAgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSArIGEyMCAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpO1xuICBvdXRbOF0gPSBhMTAgKiAoYTIxICogYTMzIC0gYTIzICogYTMxKSAtIGEyMCAqIChhMTEgKiBhMzMgLSBhMTMgKiBhMzEpICsgYTMwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSk7XG4gIG91dFs5XSA9IC0oYTAwICogKGEyMSAqIGEzMyAtIGEyMyAqIGEzMSkgLSBhMjAgKiAoYTAxICogYTMzIC0gYTAzICogYTMxKSArIGEzMCAqIChhMDEgKiBhMjMgLSBhMDMgKiBhMjEpKTtcbiAgb3V0WzEwXSA9IGEwMCAqIChhMTEgKiBhMzMgLSBhMTMgKiBhMzEpIC0gYTEwICogKGEwMSAqIGEzMyAtIGEwMyAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTEzIC0gYTAzICogYTExKTtcbiAgb3V0WzExXSA9IC0oYTAwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSkgLSBhMTAgKiAoYTAxICogYTIzIC0gYTAzICogYTIxKSArIGEyMCAqIChhMDEgKiBhMTMgLSBhMDMgKiBhMTEpKTtcbiAgb3V0WzEyXSA9IC0oYTEwICogKGEyMSAqIGEzMiAtIGEyMiAqIGEzMSkgLSBhMjAgKiAoYTExICogYTMyIC0gYTEyICogYTMxKSArIGEzMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpKTtcbiAgb3V0WzEzXSA9IGEwMCAqIChhMjEgKiBhMzIgLSBhMjIgKiBhMzEpIC0gYTIwICogKGEwMSAqIGEzMiAtIGEwMiAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTIyIC0gYTAyICogYTIxKTtcbiAgb3V0WzE0XSA9IC0oYTAwICogKGExMSAqIGEzMiAtIGExMiAqIGEzMSkgLSBhMTAgKiAoYTAxICogYTMyIC0gYTAyICogYTMxKSArIGEzMCAqIChhMDEgKiBhMTIgLSBhMDIgKiBhMTEpKTtcbiAgb3V0WzE1XSA9IGEwMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpIC0gYTEwICogKGEwMSAqIGEyMiAtIGEwMiAqIGEyMSkgKyBhMjAgKiAoYTAxICogYTEyIC0gYTAyICogYTExKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF0sXG4gICAgICBhMTEgPSBhWzVdLFxuICAgICAgYTEyID0gYVs2XSxcbiAgICAgIGExMyA9IGFbN107XG4gIHZhciBhMjAgPSBhWzhdLFxuICAgICAgYTIxID0gYVs5XSxcbiAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgYTIzID0gYVsxMV07XG4gIHZhciBhMzAgPSBhWzEyXSxcbiAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgYTMyID0gYVsxNF0sXG4gICAgICBhMzMgPSBhWzE1XTtcbiAgdmFyIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgdmFyIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgdmFyIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgdmFyIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgdmFyIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgdmFyIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgdmFyIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgdmFyIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjsgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuXG4gIHJldHVybiBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl0sXG4gICAgICBhMDMgPSBhWzNdO1xuICB2YXIgYTEwID0gYVs0XSxcbiAgICAgIGExMSA9IGFbNV0sXG4gICAgICBhMTIgPSBhWzZdLFxuICAgICAgYTEzID0gYVs3XTtcbiAgdmFyIGEyMCA9IGFbOF0sXG4gICAgICBhMjEgPSBhWzldLFxuICAgICAgYTIyID0gYVsxMF0sXG4gICAgICBhMjMgPSBhWzExXTtcbiAgdmFyIGEzMCA9IGFbMTJdLFxuICAgICAgYTMxID0gYVsxM10sXG4gICAgICBhMzIgPSBhWzE0XSxcbiAgICAgIGEzMyA9IGFbMTVdOyAvLyBDYWNoZSBvbmx5IHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlIHNlY29uZCBtYXRyaXhcblxuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdO1xuICBvdXRbMF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzFdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gIG91dFsyXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbM10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgYjAgPSBiWzRdO1xuICBiMSA9IGJbNV07XG4gIGIyID0gYls2XTtcbiAgYjMgPSBiWzddO1xuICBvdXRbNF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzVdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gIG91dFs2XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbN10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgYjAgPSBiWzhdO1xuICBiMSA9IGJbOV07XG4gIGIyID0gYlsxMF07XG4gIGIzID0gYlsxMV07XG4gIG91dFs4XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICBvdXRbOV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbMTFdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XG4gIGIwID0gYlsxMl07XG4gIGIxID0gYlsxM107XG4gIGIyID0gYlsxNF07XG4gIGIzID0gYlsxNV07XG4gIG91dFsxMl0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzEzXSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICBvdXRbMTRdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gIG91dFsxNV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNsYXRlIGEgbWF0NCBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgdmFyIHggPSB2WzBdLFxuICAgICAgeSA9IHZbMV0sXG4gICAgICB6ID0gdlsyXTtcbiAgdmFyIGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgdmFyIGExMCwgYTExLCBhMTIsIGExMztcbiAgdmFyIGEyMCwgYTIxLCBhMjIsIGEyMztcblxuICBpZiAoYSA9PT0gb3V0KSB7XG4gICAgb3V0WzEyXSA9IGFbMF0gKiB4ICsgYVs0XSAqIHkgKyBhWzhdICogeiArIGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzFdICogeCArIGFbNV0gKiB5ICsgYVs5XSAqIHogKyBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzNdICogeCArIGFbN10gKiB5ICsgYVsxMV0gKiB6ICsgYVsxNV07XG4gIH0gZWxzZSB7XG4gICAgYTAwID0gYVswXTtcbiAgICBhMDEgPSBhWzFdO1xuICAgIGEwMiA9IGFbMl07XG4gICAgYTAzID0gYVszXTtcbiAgICBhMTAgPSBhWzRdO1xuICAgIGExMSA9IGFbNV07XG4gICAgYTEyID0gYVs2XTtcbiAgICBhMTMgPSBhWzddO1xuICAgIGEyMCA9IGFbOF07XG4gICAgYTIxID0gYVs5XTtcbiAgICBhMjIgPSBhWzEwXTtcbiAgICBhMjMgPSBhWzExXTtcbiAgICBvdXRbMF0gPSBhMDA7XG4gICAgb3V0WzFdID0gYTAxO1xuICAgIG91dFsyXSA9IGEwMjtcbiAgICBvdXRbM10gPSBhMDM7XG4gICAgb3V0WzRdID0gYTEwO1xuICAgIG91dFs1XSA9IGExMTtcbiAgICBvdXRbNl0gPSBhMTI7XG4gICAgb3V0WzddID0gYTEzO1xuICAgIG91dFs4XSA9IGEyMDtcbiAgICBvdXRbOV0gPSBhMjE7XG4gICAgb3V0WzEwXSA9IGEyMjtcbiAgICBvdXRbMTFdID0gYTIzO1xuICAgIG91dFsxMl0gPSBhMDAgKiB4ICsgYTEwICogeSArIGEyMCAqIHogKyBhWzEyXTtcbiAgICBvdXRbMTNdID0gYTAxICogeCArIGExMSAqIHkgKyBhMjEgKiB6ICsgYVsxM107XG4gICAgb3V0WzE0XSA9IGEwMiAqIHggKyBhMTIgKiB5ICsgYTIyICogeiArIGFbMTRdO1xuICAgIG91dFsxNV0gPSBhMDMgKiB4ICsgYTEzICogeSArIGEyMyAqIHogKyBhWzE1XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0NCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMyBub3QgdXNpbmcgdmVjdG9yaXphdGlvblxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiB0aGUgdmVjMyB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgdmFyIHggPSB2WzBdLFxuICAgICAgeSA9IHZbMV0sXG4gICAgICB6ID0gdlsyXTtcbiAgb3V0WzBdID0gYVswXSAqIHg7XG4gIG91dFsxXSA9IGFbMV0gKiB4O1xuICBvdXRbMl0gPSBhWzJdICogeDtcbiAgb3V0WzNdID0gYVszXSAqIHg7XG4gIG91dFs0XSA9IGFbNF0gKiB5O1xuICBvdXRbNV0gPSBhWzVdICogeTtcbiAgb3V0WzZdID0gYVs2XSAqIHk7XG4gIG91dFs3XSA9IGFbN10gKiB5O1xuICBvdXRbOF0gPSBhWzhdICogejtcbiAgb3V0WzldID0gYVs5XSAqIHo7XG4gIG91dFsxMF0gPSBhWzEwXSAqIHo7XG4gIG91dFsxMV0gPSBhWzExXSAqIHo7XG4gIG91dFsxMl0gPSBhWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdO1xuICBvdXRbMTRdID0gYVsxNF07XG4gIG91dFsxNV0gPSBhWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIG1hdDQgYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgZ2l2ZW4gYXhpc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkLCBheGlzKSB7XG4gIHZhciB4ID0gYXhpc1swXSxcbiAgICAgIHkgPSBheGlzWzFdLFxuICAgICAgeiA9IGF4aXNbMl07XG4gIHZhciBsZW4gPSBNYXRoLmh5cG90KHgsIHksIHopO1xuICB2YXIgcywgYywgdDtcbiAgdmFyIGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgdmFyIGExMCwgYTExLCBhMTIsIGExMztcbiAgdmFyIGEyMCwgYTIxLCBhMjIsIGEyMztcbiAgdmFyIGIwMCwgYjAxLCBiMDI7XG4gIHZhciBiMTAsIGIxMSwgYjEyO1xuICB2YXIgYjIwLCBiMjEsIGIyMjtcblxuICBpZiAobGVuIDwgZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGVuID0gMSAvIGxlbjtcbiAgeCAqPSBsZW47XG4gIHkgKj0gbGVuO1xuICB6ICo9IGxlbjtcbiAgcyA9IE1hdGguc2luKHJhZCk7XG4gIGMgPSBNYXRoLmNvcyhyYWQpO1xuICB0ID0gMSAtIGM7XG4gIGEwMCA9IGFbMF07XG4gIGEwMSA9IGFbMV07XG4gIGEwMiA9IGFbMl07XG4gIGEwMyA9IGFbM107XG4gIGExMCA9IGFbNF07XG4gIGExMSA9IGFbNV07XG4gIGExMiA9IGFbNl07XG4gIGExMyA9IGFbN107XG4gIGEyMCA9IGFbOF07XG4gIGEyMSA9IGFbOV07XG4gIGEyMiA9IGFbMTBdO1xuICBhMjMgPSBhWzExXTsgLy8gQ29uc3RydWN0IHRoZSBlbGVtZW50cyBvZiB0aGUgcm90YXRpb24gbWF0cml4XG5cbiAgYjAwID0geCAqIHggKiB0ICsgYztcbiAgYjAxID0geSAqIHggKiB0ICsgeiAqIHM7XG4gIGIwMiA9IHogKiB4ICogdCAtIHkgKiBzO1xuICBiMTAgPSB4ICogeSAqIHQgLSB6ICogcztcbiAgYjExID0geSAqIHkgKiB0ICsgYztcbiAgYjEyID0geiAqIHkgKiB0ICsgeCAqIHM7XG4gIGIyMCA9IHggKiB6ICogdCArIHkgKiBzO1xuICBiMjEgPSB5ICogeiAqIHQgLSB4ICogcztcbiAgYjIyID0geiAqIHogKiB0ICsgYzsgLy8gUGVyZm9ybSByb3RhdGlvbi1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuICBvdXRbMF0gPSBhMDAgKiBiMDAgKyBhMTAgKiBiMDEgKyBhMjAgKiBiMDI7XG4gIG91dFsxXSA9IGEwMSAqIGIwMCArIGExMSAqIGIwMSArIGEyMSAqIGIwMjtcbiAgb3V0WzJdID0gYTAyICogYjAwICsgYTEyICogYjAxICsgYTIyICogYjAyO1xuICBvdXRbM10gPSBhMDMgKiBiMDAgKyBhMTMgKiBiMDEgKyBhMjMgKiBiMDI7XG4gIG91dFs0XSA9IGEwMCAqIGIxMCArIGExMCAqIGIxMSArIGEyMCAqIGIxMjtcbiAgb3V0WzVdID0gYTAxICogYjEwICsgYTExICogYjExICsgYTIxICogYjEyO1xuICBvdXRbNl0gPSBhMDIgKiBiMTAgKyBhMTIgKiBiMTEgKyBhMjIgKiBiMTI7XG4gIG91dFs3XSA9IGEwMyAqIGIxMCArIGExMyAqIGIxMSArIGEyMyAqIGIxMjtcbiAgb3V0WzhdID0gYTAwICogYjIwICsgYTEwICogYjIxICsgYTIwICogYjIyO1xuICBvdXRbOV0gPSBhMDEgKiBiMjAgKyBhMTEgKiBiMjEgKyBhMjEgKiBiMjI7XG4gIG91dFsxMF0gPSBhMDIgKiBiMjAgKyBhMTIgKiBiMjEgKyBhMjIgKiBiMjI7XG4gIG91dFsxMV0gPSBhMDMgKiBiMjAgKyBhMTMgKiBiMjEgKyBhMjMgKiBiMjI7XG5cbiAgaWYgKGEgIT09IG91dCkge1xuICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIHZhciBhMTAgPSBhWzRdO1xuICB2YXIgYTExID0gYVs1XTtcbiAgdmFyIGExMiA9IGFbNl07XG4gIHZhciBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XTtcbiAgdmFyIGEyMSA9IGFbOV07XG4gIHZhciBhMjIgPSBhWzEwXTtcbiAgdmFyIGEyMyA9IGFbMTFdO1xuXG4gIGlmIChhICE9PSBvdXQpIHtcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gIH0gLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG5cbiAgb3V0WzRdID0gYTEwICogYyArIGEyMCAqIHM7XG4gIG91dFs1XSA9IGExMSAqIGMgKyBhMjEgKiBzO1xuICBvdXRbNl0gPSBhMTIgKiBjICsgYTIyICogcztcbiAgb3V0WzddID0gYTEzICogYyArIGEyMyAqIHM7XG4gIG91dFs4XSA9IGEyMCAqIGMgLSBhMTAgKiBzO1xuICBvdXRbOV0gPSBhMjEgKiBjIC0gYTExICogcztcbiAgb3V0WzEwXSA9IGEyMiAqIGMgLSBhMTIgKiBzO1xuICBvdXRbMTFdID0gYTIzICogYyAtIGExMyAqIHM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICB2YXIgYTAwID0gYVswXTtcbiAgdmFyIGEwMSA9IGFbMV07XG4gIHZhciBhMDIgPSBhWzJdO1xuICB2YXIgYTAzID0gYVszXTtcbiAgdmFyIGEyMCA9IGFbOF07XG4gIHZhciBhMjEgPSBhWzldO1xuICB2YXIgYTIyID0gYVsxMF07XG4gIHZhciBhMjMgPSBhWzExXTtcblxuICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs1XTtcbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuXG4gIG91dFswXSA9IGEwMCAqIGMgLSBhMjAgKiBzO1xuICBvdXRbMV0gPSBhMDEgKiBjIC0gYTIxICogcztcbiAgb3V0WzJdID0gYTAyICogYyAtIGEyMiAqIHM7XG4gIG91dFszXSA9IGEwMyAqIGMgLSBhMjMgKiBzO1xuICBvdXRbOF0gPSBhMDAgKiBzICsgYTIwICogYztcbiAgb3V0WzldID0gYTAxICogcyArIGEyMSAqIGM7XG4gIG91dFsxMF0gPSBhMDIgKiBzICsgYTIyICogYztcbiAgb3V0WzExXSA9IGEwMyAqIHMgKyBhMjMgKiBjO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFogYXhpc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTtcbiAgdmFyIGEwMCA9IGFbMF07XG4gIHZhciBhMDEgPSBhWzFdO1xuICB2YXIgYTAyID0gYVsyXTtcbiAgdmFyIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdO1xuICB2YXIgYTExID0gYVs1XTtcbiAgdmFyIGExMiA9IGFbNl07XG4gIHZhciBhMTMgPSBhWzddO1xuXG4gIGlmIChhICE9PSBvdXQpIHtcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCBsYXN0IHJvd1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgb3V0WzldID0gYVs5XTtcbiAgICBvdXRbMTBdID0gYVsxMF07XG4gICAgb3V0WzExXSA9IGFbMTFdO1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgfSAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cblxuICBvdXRbMF0gPSBhMDAgKiBjICsgYTEwICogcztcbiAgb3V0WzFdID0gYTAxICogYyArIGExMSAqIHM7XG4gIG91dFsyXSA9IGEwMiAqIGMgKyBhMTIgKiBzO1xuICBvdXRbM10gPSBhMDMgKiBjICsgYTEzICogcztcbiAgb3V0WzRdID0gYTEwICogYyAtIGEwMCAqIHM7XG4gIG91dFs1XSA9IGExMSAqIGMgLSBhMDEgKiBzO1xuICBvdXRbNl0gPSBhMTIgKiBjIC0gYTAyICogcztcbiAgb3V0WzddID0gYTEzICogYyAtIGEwMyAqIHM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciB0cmFuc2xhdGlvblxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgZGVzdCwgdmVjKTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uKG91dCwgdikge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gMTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSB2WzBdO1xuICBvdXRbMTNdID0gdlsxXTtcbiAgb3V0WzE0XSA9IHZbMl07XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IFNjYWxpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xuICBvdXRbMF0gPSB2WzBdO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSB2WzFdO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gdlsyXTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZSBhcm91bmQgYSBnaXZlbiBheGlzXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnJvdGF0ZShkZXN0LCBkZXN0LCByYWQsIGF4aXMpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYXhpcyB0aGUgYXhpcyB0byByb3RhdGUgYXJvdW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHJhZCwgYXhpcykge1xuICB2YXIgeCA9IGF4aXNbMF0sXG4gICAgICB5ID0gYXhpc1sxXSxcbiAgICAgIHogPSBheGlzWzJdO1xuICB2YXIgbGVuID0gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbiAgdmFyIHMsIGMsIHQ7XG5cbiAgaWYgKGxlbiA8IGdsTWF0cml4LkVQU0lMT04pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxlbiA9IDEgLyBsZW47XG4gIHggKj0gbGVuO1xuICB5ICo9IGxlbjtcbiAgeiAqPSBsZW47XG4gIHMgPSBNYXRoLnNpbihyYWQpO1xuICBjID0gTWF0aC5jb3MocmFkKTtcbiAgdCA9IDEgLSBjOyAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IHggKiB4ICogdCArIGM7XG4gIG91dFsxXSA9IHkgKiB4ICogdCArIHogKiBzO1xuICBvdXRbMl0gPSB6ICogeCAqIHQgLSB5ICogcztcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geCAqIHkgKiB0IC0geiAqIHM7XG4gIG91dFs1XSA9IHkgKiB5ICogdCArIGM7XG4gIG91dFs2XSA9IHogKiB5ICogdCArIHggKiBzO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSB4ICogeiAqIHQgKyB5ICogcztcbiAgb3V0WzldID0geSAqIHogKiB0IC0geCAqIHM7XG4gIG91dFsxMF0gPSB6ICogeiAqIHQgKyBjO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQucm90YXRlWChkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21YUm90YXRpb24ob3V0LCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBjO1xuICBvdXRbNl0gPSBzO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAtcztcbiAgb3V0WzEwXSA9IGM7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFkgYXhpc1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC5yb3RhdGVZKGRlc3QsIGRlc3QsIHJhZCk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVlSb3RhdGlvbihvdXQsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTsgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IGM7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IC1zO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSBzO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gYztcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnJvdGF0ZVooZGVzdCwgZGVzdCwgcmFkKTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tWlJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpOyAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cbiAgb3V0WzBdID0gYztcbiAgb3V0WzFdID0gcztcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gLXM7XG4gIG91dFs1XSA9IGM7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24gYW5kIHZlY3RvciB0cmFuc2xhdGlvblxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBxLCB2KSB7XG4gIC8vIFF1YXRlcm5pb24gbWF0aFxuICB2YXIgeCA9IHFbMF0sXG4gICAgICB5ID0gcVsxXSxcbiAgICAgIHogPSBxWzJdLFxuICAgICAgdyA9IHFbM107XG4gIHZhciB4MiA9IHggKyB4O1xuICB2YXIgeTIgPSB5ICsgeTtcbiAgdmFyIHoyID0geiArIHo7XG4gIHZhciB4eCA9IHggKiB4MjtcbiAgdmFyIHh5ID0geCAqIHkyO1xuICB2YXIgeHogPSB4ICogejI7XG4gIHZhciB5eSA9IHkgKiB5MjtcbiAgdmFyIHl6ID0geSAqIHoyO1xuICB2YXIgenogPSB6ICogejI7XG4gIHZhciB3eCA9IHcgKiB4MjtcbiAgdmFyIHd5ID0gdyAqIHkyO1xuICB2YXIgd3ogPSB3ICogejI7XG4gIG91dFswXSA9IDEgLSAoeXkgKyB6eik7XG4gIG91dFsxXSA9IHh5ICsgd3o7XG4gIG91dFsyXSA9IHh6IC0gd3k7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHh5IC0gd3o7XG4gIG91dFs1XSA9IDEgLSAoeHggKyB6eik7XG4gIG91dFs2XSA9IHl6ICsgd3g7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHh6ICsgd3k7XG4gIG91dFs5XSA9IHl6IC0gd3g7XG4gIG91dFsxMF0gPSAxIC0gKHh4ICsgeXkpO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IHZbMF07XG4gIG91dFsxM10gPSB2WzFdO1xuICBvdXRbMTRdID0gdlsyXTtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWF0NCBmcm9tIGEgZHVhbCBxdWF0LlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IE1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIER1YWwgUXVhdGVybmlvblxuICogQHJldHVybnMge21hdDR9IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQyKG91dCwgYSkge1xuICB2YXIgdHJhbnNsYXRpb24gPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgdmFyIGJ4ID0gLWFbMF0sXG4gICAgICBieSA9IC1hWzFdLFxuICAgICAgYnogPSAtYVsyXSxcbiAgICAgIGJ3ID0gYVszXSxcbiAgICAgIGF4ID0gYVs0XSxcbiAgICAgIGF5ID0gYVs1XSxcbiAgICAgIGF6ID0gYVs2XSxcbiAgICAgIGF3ID0gYVs3XTtcbiAgdmFyIG1hZ25pdHVkZSA9IGJ4ICogYnggKyBieSAqIGJ5ICsgYnogKiBieiArIGJ3ICogYnc7IC8vT25seSBzY2FsZSBpZiBpdCBtYWtlcyBzZW5zZVxuXG4gIGlmIChtYWduaXR1ZGUgPiAwKSB7XG4gICAgdHJhbnNsYXRpb25bMF0gPSAoYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSkgKiAyIC8gbWFnbml0dWRlO1xuICAgIHRyYW5zbGF0aW9uWzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMiAvIG1hZ25pdHVkZTtcbiAgICB0cmFuc2xhdGlvblsyXSA9IChheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4KSAqIDIgLyBtYWduaXR1ZGU7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNsYXRpb25bMF0gPSAoYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSkgKiAyO1xuICAgIHRyYW5zbGF0aW9uWzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMjtcbiAgICB0cmFuc2xhdGlvblsyXSA9IChheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4KSAqIDI7XG4gIH1cblxuICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbihvdXQsIGEsIHRyYW5zbGF0aW9uKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yIGNvbXBvbmVudCBvZiBhIHRyYW5zZm9ybWF0aW9uXG4gKiAgbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uLFxuICogIHRoZSByZXR1cm5lZCB2ZWN0b3Igd2lsbCBiZSB0aGUgc2FtZSBhcyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yXG4gKiAgb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSB0cmFuc2xhdGlvbiBjb21wb25lbnRcbiAqIEBwYXJhbSAge1JlYWRvbmx5TWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2xhdGlvbihvdXQsIG1hdCkge1xuICBvdXRbMF0gPSBtYXRbMTJdO1xuICBvdXRbMV0gPSBtYXRbMTNdO1xuICBvdXRbMl0gPSBtYXRbMTRdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnQgb2YgYSB0cmFuc2Zvcm1hdGlvblxuICogIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aCBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlXG4gKiAgd2l0aCBhIG5vcm1hbGl6ZWQgUXVhdGVybmlvbiBwYXJhbXRlciwgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlXG4gKiAgdGhlIHNhbWUgYXMgdGhlIHNjYWxpbmcgdmVjdG9yXG4gKiAgb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnRcbiAqIEBwYXJhbSAge1JlYWRvbmx5TWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2FsaW5nKG91dCwgbWF0KSB7XG4gIHZhciBtMTEgPSBtYXRbMF07XG4gIHZhciBtMTIgPSBtYXRbMV07XG4gIHZhciBtMTMgPSBtYXRbMl07XG4gIHZhciBtMjEgPSBtYXRbNF07XG4gIHZhciBtMjIgPSBtYXRbNV07XG4gIHZhciBtMjMgPSBtYXRbNl07XG4gIHZhciBtMzEgPSBtYXRbOF07XG4gIHZhciBtMzIgPSBtYXRbOV07XG4gIHZhciBtMzMgPSBtYXRbMTBdO1xuICBvdXRbMF0gPSBNYXRoLmh5cG90KG0xMSwgbTEyLCBtMTMpO1xuICBvdXRbMV0gPSBNYXRoLmh5cG90KG0yMSwgbTIyLCBtMjMpO1xuICBvdXRbMl0gPSBNYXRoLmh5cG90KG0zMSwgbTMyLCBtMzMpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uYWwgY29tcG9uZW50XG4gKiAgb2YgYSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGhcbiAqICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbiwgdGhlIHJldHVybmVkIHF1YXRlcm5pb24gd2lsbCBiZSB0aGVcbiAqICBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIG9yaWdpbmFsbHkgc3VwcGxpZWQuXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBRdWF0ZXJuaW9uIHRvIHJlY2VpdmUgdGhlIHJvdGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXG4gKiBAcmV0dXJuIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um90YXRpb24ob3V0LCBtYXQpIHtcbiAgdmFyIHNjYWxpbmcgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgZ2V0U2NhbGluZyhzY2FsaW5nLCBtYXQpO1xuICB2YXIgaXMxID0gMSAvIHNjYWxpbmdbMF07XG4gIHZhciBpczIgPSAxIC8gc2NhbGluZ1sxXTtcbiAgdmFyIGlzMyA9IDEgLyBzY2FsaW5nWzJdO1xuICB2YXIgc20xMSA9IG1hdFswXSAqIGlzMTtcbiAgdmFyIHNtMTIgPSBtYXRbMV0gKiBpczI7XG4gIHZhciBzbTEzID0gbWF0WzJdICogaXMzO1xuICB2YXIgc20yMSA9IG1hdFs0XSAqIGlzMTtcbiAgdmFyIHNtMjIgPSBtYXRbNV0gKiBpczI7XG4gIHZhciBzbTIzID0gbWF0WzZdICogaXMzO1xuICB2YXIgc20zMSA9IG1hdFs4XSAqIGlzMTtcbiAgdmFyIHNtMzIgPSBtYXRbOV0gKiBpczI7XG4gIHZhciBzbTMzID0gbWF0WzEwXSAqIGlzMztcbiAgdmFyIHRyYWNlID0gc20xMSArIHNtMjIgKyBzbTMzO1xuICB2YXIgUyA9IDA7XG5cbiAgaWYgKHRyYWNlID4gMCkge1xuICAgIFMgPSBNYXRoLnNxcnQodHJhY2UgKyAxLjApICogMjtcbiAgICBvdXRbM10gPSAwLjI1ICogUztcbiAgICBvdXRbMF0gPSAoc20yMyAtIHNtMzIpIC8gUztcbiAgICBvdXRbMV0gPSAoc20zMSAtIHNtMTMpIC8gUztcbiAgICBvdXRbMl0gPSAoc20xMiAtIHNtMjEpIC8gUztcbiAgfSBlbHNlIGlmIChzbTExID4gc20yMiAmJiBzbTExID4gc20zMykge1xuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20xMSAtIHNtMjIgLSBzbTMzKSAqIDI7XG4gICAgb3V0WzNdID0gKHNtMjMgLSBzbTMyKSAvIFM7XG4gICAgb3V0WzBdID0gMC4yNSAqIFM7XG4gICAgb3V0WzFdID0gKHNtMTIgKyBzbTIxKSAvIFM7XG4gICAgb3V0WzJdID0gKHNtMzEgKyBzbTEzKSAvIFM7XG4gIH0gZWxzZSBpZiAoc20yMiA+IHNtMzMpIHtcbiAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMjIgLSBzbTExIC0gc20zMykgKiAyO1xuICAgIG91dFszXSA9IChzbTMxIC0gc20xMykgLyBTO1xuICAgIG91dFswXSA9IChzbTEyICsgc20yMSkgLyBTO1xuICAgIG91dFsxXSA9IDAuMjUgKiBTO1xuICAgIG91dFsyXSA9IChzbTIzICsgc20zMikgLyBTO1xuICB9IGVsc2Uge1xuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20zMyAtIHNtMTEgLSBzbTIyKSAqIDI7XG4gICAgb3V0WzNdID0gKHNtMTIgLSBzbTIxKSAvIFM7XG4gICAgb3V0WzBdID0gKHNtMzEgKyBzbTEzKSAvIFM7XG4gICAgb3V0WzFdID0gKHNtMjMgKyBzbTMyKSAvIFM7XG4gICAgb3V0WzJdID0gMC4yNSAqIFM7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZVxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBzY2FsZSlcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHMgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZShvdXQsIHEsIHYsIHMpIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeHkgPSB4ICogeTI7XG4gIHZhciB4eiA9IHggKiB6MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgeXogPSB5ICogejI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgdmFyIHN4ID0gc1swXTtcbiAgdmFyIHN5ID0gc1sxXTtcbiAgdmFyIHN6ID0gc1syXTtcbiAgb3V0WzBdID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gIG91dFsxXSA9ICh4eSArIHd6KSAqIHN4O1xuICBvdXRbMl0gPSAoeHogLSB3eSkgKiBzeDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gKHh5IC0gd3opICogc3k7XG4gIG91dFs1XSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xuICBvdXRbNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gKHh6ICsgd3kpICogc3o7XG4gIG91dFs5XSA9ICh5eiAtIHd4KSAqIHN6O1xuICBvdXRbMTBdID0gKDEgLSAoeHggKyB5eSkpICogc3o7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gdlswXTtcbiAgb3V0WzEzXSA9IHZbMV07XG4gIG91dFsxNF0gPSB2WzJdO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiwgdmVjdG9yIHRyYW5zbGF0aW9uIGFuZCB2ZWN0b3Igc2NhbGUsIHJvdGF0aW5nIGFuZCBzY2FsaW5nIGFyb3VuZCB0aGUgZ2l2ZW4gb3JpZ2luXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIG9yaWdpbik7XG4gKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICogICAgIHF1YXQ0LnRvTWF0NChxdWF0LCBxdWF0TWF0KTtcbiAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgc2NhbGUpXG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgbmVnYXRpdmVPcmlnaW4pO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gcyBTY2FsaW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IG8gVGhlIG9yaWdpbiB2ZWN0b3IgYXJvdW5kIHdoaWNoIHRvIHNjYWxlIGFuZCByb3RhdGVcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZU9yaWdpbihvdXQsIHEsIHYsIHMsIG8pIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeHkgPSB4ICogeTI7XG4gIHZhciB4eiA9IHggKiB6MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgeXogPSB5ICogejI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgdmFyIHN4ID0gc1swXTtcbiAgdmFyIHN5ID0gc1sxXTtcbiAgdmFyIHN6ID0gc1syXTtcbiAgdmFyIG94ID0gb1swXTtcbiAgdmFyIG95ID0gb1sxXTtcbiAgdmFyIG96ID0gb1syXTtcbiAgdmFyIG91dDAgPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcbiAgdmFyIG91dDEgPSAoeHkgKyB3eikgKiBzeDtcbiAgdmFyIG91dDIgPSAoeHogLSB3eSkgKiBzeDtcbiAgdmFyIG91dDQgPSAoeHkgLSB3eikgKiBzeTtcbiAgdmFyIG91dDUgPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcbiAgdmFyIG91dDYgPSAoeXogKyB3eCkgKiBzeTtcbiAgdmFyIG91dDggPSAoeHogKyB3eSkgKiBzejtcbiAgdmFyIG91dDkgPSAoeXogLSB3eCkgKiBzejtcbiAgdmFyIG91dDEwID0gKDEgLSAoeHggKyB5eSkpICogc3o7XG4gIG91dFswXSA9IG91dDA7XG4gIG91dFsxXSA9IG91dDE7XG4gIG91dFsyXSA9IG91dDI7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IG91dDQ7XG4gIG91dFs1XSA9IG91dDU7XG4gIG91dFs2XSA9IG91dDY7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IG91dDg7XG4gIG91dFs5XSA9IG91dDk7XG4gIG91dFsxMF0gPSBvdXQxMDtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSB2WzBdICsgb3ggLSAob3V0MCAqIG94ICsgb3V0NCAqIG95ICsgb3V0OCAqIG96KTtcbiAgb3V0WzEzXSA9IHZbMV0gKyBveSAtIChvdXQxICogb3ggKyBvdXQ1ICogb3kgKyBvdXQ5ICogb3opO1xuICBvdXRbMTRdID0gdlsyXSArIG96IC0gKG91dDIgKiBveCArIG91dDYgKiBveSArIG91dDEwICogb3opO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDR4NCBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4gKlxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgdmFyIHggPSBxWzBdLFxuICAgICAgeSA9IHFbMV0sXG4gICAgICB6ID0gcVsyXSxcbiAgICAgIHcgPSBxWzNdO1xuICB2YXIgeDIgPSB4ICsgeDtcbiAgdmFyIHkyID0geSArIHk7XG4gIHZhciB6MiA9IHogKyB6O1xuICB2YXIgeHggPSB4ICogeDI7XG4gIHZhciB5eCA9IHkgKiB4MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgenggPSB6ICogeDI7XG4gIHZhciB6eSA9IHogKiB5MjtcbiAgdmFyIHp6ID0geiAqIHoyO1xuICB2YXIgd3ggPSB3ICogeDI7XG4gIHZhciB3eSA9IHcgKiB5MjtcbiAgdmFyIHd6ID0gdyAqIHoyO1xuICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcbiAgb3V0WzFdID0geXggKyB3ejtcbiAgb3V0WzJdID0genggLSB3eTtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geXggLSB3ejtcbiAgb3V0WzVdID0gMSAtIHh4IC0geno7XG4gIG91dFs2XSA9IHp5ICsgd3g7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHp4ICsgd3k7XG4gIG91dFs5XSA9IHp5IC0gd3g7XG4gIG91dFsxMF0gPSAxIC0geHggLSB5eTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBmcnVzdHVtIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge051bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge051bWJlcn0gcmlnaHQgUmlnaHQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7TnVtYmVyfSBib3R0b20gQm90dG9tIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge051bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtOdW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtOdW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJ1c3R1bShvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gIHZhciBybCA9IDEgLyAocmlnaHQgLSBsZWZ0KTtcbiAgdmFyIHRiID0gMSAvICh0b3AgLSBib3R0b20pO1xuICB2YXIgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMF0gPSBuZWFyICogMiAqIHJsO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBuZWFyICogMiAqIHRiO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAocmlnaHQgKyBsZWZ0KSAqIHJsO1xuICBvdXRbOV0gPSAodG9wICsgYm90dG9tKSAqIHRiO1xuICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XG4gIG91dFsxMV0gPSAtMTtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gZmFyICogbmVhciAqIDIgKiBuZjtcbiAgb3V0WzE1XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kcy5cbiAqIFRoZSBuZWFyL2ZhciBjbGlwIHBsYW5lcyBjb3JyZXNwb25kIHRvIGEgbm9ybWFsaXplZCBkZXZpY2UgY29vcmRpbmF0ZSBaIHJhbmdlIG9mIFstMSwgMV0sXG4gKiB3aGljaCBtYXRjaGVzIFdlYkdML09wZW5HTCdzIGNsaXAgdm9sdW1lLlxuICogUGFzc2luZyBudWxsL3VuZGVmaW5lZC9ubyB2YWx1ZSBmb3IgZmFyIHdpbGwgZ2VuZXJhdGUgaW5maW5pdGUgcHJvamVjdGlvbiBtYXRyaXguXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW0sIGNhbiBiZSBudWxsIG9yIEluZmluaXR5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlTk8ob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikge1xuICB2YXIgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKSxcbiAgICAgIG5mO1xuICBvdXRbMF0gPSBmIC8gYXNwZWN0O1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBmO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTFdID0gLTE7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE1XSA9IDA7XG5cbiAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHtcbiAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG91dFsxNF0gPSAyICogZmFyICogbmVhciAqIG5mO1xuICB9IGVsc2Uge1xuICAgIG91dFsxMF0gPSAtMTtcbiAgICBvdXRbMTRdID0gLTIgKiBuZWFyO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0LnBlcnNwZWN0aXZlTk99XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHBlcnNwZWN0aXZlID0gcGVyc3BlY3RpdmVOTztcbi8qKlxuICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggc3VpdGFibGUgZm9yIFdlYkdQVSB3aXRoIHRoZSBnaXZlbiBib3VuZHMuXG4gKiBUaGUgbmVhci9mYXIgY2xpcCBwbGFuZXMgY29ycmVzcG9uZCB0byBhIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGUgWiByYW5nZSBvZiBbMCwgMV0sXG4gKiB3aGljaCBtYXRjaGVzIFdlYkdQVS9WdWxrYW4vRGlyZWN0WC9NZXRhbCdzIGNsaXAgdm9sdW1lLlxuICogUGFzc2luZyBudWxsL3VuZGVmaW5lZC9ubyB2YWx1ZSBmb3IgZmFyIHdpbGwgZ2VuZXJhdGUgaW5maW5pdGUgcHJvamVjdGlvbiBtYXRyaXguXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW0sIGNhbiBiZSBudWxsIG9yIEluZmluaXR5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlWk8ob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikge1xuICB2YXIgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKSxcbiAgICAgIG5mO1xuICBvdXRbMF0gPSBmIC8gYXNwZWN0O1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBmO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTFdID0gLTE7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE1XSA9IDA7XG5cbiAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHtcbiAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzEwXSA9IGZhciAqIG5mO1xuICAgIG91dFsxNF0gPSBmYXIgKiBuZWFyICogbmY7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzEwXSA9IC0xO1xuICAgIG91dFsxNF0gPSAtbmVhcjtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGZpZWxkIG9mIHZpZXcuXG4gKiBUaGlzIGlzIHByaW1hcmlseSB1c2VmdWwgZm9yIGdlbmVyYXRpbmcgcHJvamVjdGlvbiBtYXRyaWNlcyB0byBiZSB1c2VkXG4gKiB3aXRoIHRoZSBzdGlsbCBleHBlcmllbWVudGFsIFdlYlZSIEFQSS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge09iamVjdH0gZm92IE9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgdmFsdWVzOiB1cERlZ3JlZXMsIGRvd25EZWdyZWVzLCBsZWZ0RGVncmVlcywgcmlnaHREZWdyZWVzXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldyhvdXQsIGZvdiwgbmVhciwgZmFyKSB7XG4gIHZhciB1cFRhbiA9IE1hdGgudGFuKGZvdi51cERlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xuICB2YXIgZG93blRhbiA9IE1hdGgudGFuKGZvdi5kb3duRGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XG4gIHZhciBsZWZ0VGFuID0gTWF0aC50YW4oZm92LmxlZnREZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wKTtcbiAgdmFyIHJpZ2h0VGFuID0gTWF0aC50YW4oZm92LnJpZ2h0RGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XG4gIHZhciB4U2NhbGUgPSAyLjAgLyAobGVmdFRhbiArIHJpZ2h0VGFuKTtcbiAgdmFyIHlTY2FsZSA9IDIuMCAvICh1cFRhbiArIGRvd25UYW4pO1xuICBvdXRbMF0gPSB4U2NhbGU7XG4gIG91dFsxXSA9IDAuMDtcbiAgb3V0WzJdID0gMC4wO1xuICBvdXRbM10gPSAwLjA7XG4gIG91dFs0XSA9IDAuMDtcbiAgb3V0WzVdID0geVNjYWxlO1xuICBvdXRbNl0gPSAwLjA7XG4gIG91dFs3XSA9IDAuMDtcbiAgb3V0WzhdID0gLSgobGVmdFRhbiAtIHJpZ2h0VGFuKSAqIHhTY2FsZSAqIDAuNSk7XG4gIG91dFs5XSA9ICh1cFRhbiAtIGRvd25UYW4pICogeVNjYWxlICogMC41O1xuICBvdXRbMTBdID0gZmFyIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMTFdID0gLTEuMDtcbiAgb3V0WzEyXSA9IDAuMDtcbiAgb3V0WzEzXSA9IDAuMDtcbiAgb3V0WzE0XSA9IGZhciAqIG5lYXIgLyAobmVhciAtIGZhcik7XG4gIG91dFsxNV0gPSAwLjA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIG9ydGhvZ29uYWwgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzLlxuICogVGhlIG5lYXIvZmFyIGNsaXAgcGxhbmVzIGNvcnJlc3BvbmQgdG8gYSBub3JtYWxpemVkIGRldmljZSBjb29yZGluYXRlIFogcmFuZ2Ugb2YgWy0xLCAxXSxcbiAqIHdoaWNoIG1hdGNoZXMgV2ViR0wvT3BlbkdMJ3MgY2xpcCB2b2x1bWUuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG9ydGhvTk8ob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xuICB2YXIgbHIgPSAxIC8gKGxlZnQgLSByaWdodCk7XG4gIHZhciBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcbiAgdmFyIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgb3V0WzBdID0gLTIgKiBscjtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gLTIgKiBidDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IDIgKiBuZjtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xuICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgb3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0Lm9ydGhvTk99XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG9ydGhvID0gb3J0aG9OTztcbi8qKlxuICogR2VuZXJhdGVzIGEgb3J0aG9nb25hbCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHMuXG4gKiBUaGUgbmVhci9mYXIgY2xpcCBwbGFuZXMgY29ycmVzcG9uZCB0byBhIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGUgWiByYW5nZSBvZiBbMCwgMV0sXG4gKiB3aGljaCBtYXRjaGVzIFdlYkdQVS9WdWxrYW4vRGlyZWN0WC9NZXRhbCdzIGNsaXAgdm9sdW1lLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0IExlZnQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSByaWdodCBSaWdodCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgVG9wIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBvcnRob1pPKG91dCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcbiAgdmFyIGxyID0gMSAvIChsZWZ0IC0gcmlnaHQpO1xuICB2YXIgYnQgPSAxIC8gKGJvdHRvbSAtIHRvcCk7XG4gIHZhciBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gIG91dFswXSA9IC0yICogbHI7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IC0yICogYnQ7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSBuZjtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xuICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgb3V0WzE0XSA9IG5lYXIgKiBuZjtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIGxvb2stYXQgbWF0cml4IHdpdGggdGhlIGdpdmVuIGV5ZSBwb3NpdGlvbiwgZm9jYWwgcG9pbnQsIGFuZCB1cCBheGlzLlxuICogSWYgeW91IHdhbnQgYSBtYXRyaXggdGhhdCBhY3R1YWxseSBtYWtlcyBhbiBvYmplY3QgbG9vayBhdCBhbm90aGVyIG9iamVjdCwgeW91IHNob3VsZCB1c2UgdGFyZ2V0VG8gaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gZXllIFBvc2l0aW9uIG9mIHRoZSB2aWV3ZXJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBjZW50ZXIgUG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdXAgdmVjMyBwb2ludGluZyB1cFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsb29rQXQob3V0LCBleWUsIGNlbnRlciwgdXApIHtcbiAgdmFyIHgwLCB4MSwgeDIsIHkwLCB5MSwgeTIsIHowLCB6MSwgejIsIGxlbjtcbiAgdmFyIGV5ZXggPSBleWVbMF07XG4gIHZhciBleWV5ID0gZXllWzFdO1xuICB2YXIgZXlleiA9IGV5ZVsyXTtcbiAgdmFyIHVweCA9IHVwWzBdO1xuICB2YXIgdXB5ID0gdXBbMV07XG4gIHZhciB1cHogPSB1cFsyXTtcbiAgdmFyIGNlbnRlcnggPSBjZW50ZXJbMF07XG4gIHZhciBjZW50ZXJ5ID0gY2VudGVyWzFdO1xuICB2YXIgY2VudGVyeiA9IGNlbnRlclsyXTtcblxuICBpZiAoTWF0aC5hYnMoZXlleCAtIGNlbnRlcngpIDwgZ2xNYXRyaXguRVBTSUxPTiAmJiBNYXRoLmFicyhleWV5IC0gY2VudGVyeSkgPCBnbE1hdHJpeC5FUFNJTE9OICYmIE1hdGguYWJzKGV5ZXogLSBjZW50ZXJ6KSA8IGdsTWF0cml4LkVQU0lMT04pIHtcbiAgICByZXR1cm4gaWRlbnRpdHkob3V0KTtcbiAgfVxuXG4gIHowID0gZXlleCAtIGNlbnRlcng7XG4gIHoxID0gZXlleSAtIGNlbnRlcnk7XG4gIHoyID0gZXlleiAtIGNlbnRlcno7XG4gIGxlbiA9IDEgLyBNYXRoLmh5cG90KHowLCB6MSwgejIpO1xuICB6MCAqPSBsZW47XG4gIHoxICo9IGxlbjtcbiAgejIgKj0gbGVuO1xuICB4MCA9IHVweSAqIHoyIC0gdXB6ICogejE7XG4gIHgxID0gdXB6ICogejAgLSB1cHggKiB6MjtcbiAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xuICBsZW4gPSBNYXRoLmh5cG90KHgwLCB4MSwgeDIpO1xuXG4gIGlmICghbGVuKSB7XG4gICAgeDAgPSAwO1xuICAgIHgxID0gMDtcbiAgICB4MiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbGVuID0gMSAvIGxlbjtcbiAgICB4MCAqPSBsZW47XG4gICAgeDEgKj0gbGVuO1xuICAgIHgyICo9IGxlbjtcbiAgfVxuXG4gIHkwID0gejEgKiB4MiAtIHoyICogeDE7XG4gIHkxID0gejIgKiB4MCAtIHowICogeDI7XG4gIHkyID0gejAgKiB4MSAtIHoxICogeDA7XG4gIGxlbiA9IE1hdGguaHlwb3QoeTAsIHkxLCB5Mik7XG5cbiAgaWYgKCFsZW4pIHtcbiAgICB5MCA9IDA7XG4gICAgeTEgPSAwO1xuICAgIHkyID0gMDtcbiAgfSBlbHNlIHtcbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHkwICo9IGxlbjtcbiAgICB5MSAqPSBsZW47XG4gICAgeTIgKj0gbGVuO1xuICB9XG5cbiAgb3V0WzBdID0geDA7XG4gIG91dFsxXSA9IHkwO1xuICBvdXRbMl0gPSB6MDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geDE7XG4gIG91dFs1XSA9IHkxO1xuICBvdXRbNl0gPSB6MTtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0geDI7XG4gIG91dFs5XSA9IHkyO1xuICBvdXRbMTBdID0gejI7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gLSh4MCAqIGV5ZXggKyB4MSAqIGV5ZXkgKyB4MiAqIGV5ZXopO1xuICBvdXRbMTNdID0gLSh5MCAqIGV5ZXggKyB5MSAqIGV5ZXkgKyB5MiAqIGV5ZXopO1xuICBvdXRbMTRdID0gLSh6MCAqIGV5ZXggKyB6MSAqIGV5ZXkgKyB6MiAqIGV5ZXopO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgbWF0cml4IHRoYXQgbWFrZXMgc29tZXRoaW5nIGxvb2sgYXQgc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGV5ZSBQb3NpdGlvbiBvZiB0aGUgdmlld2VyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gY2VudGVyIFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHVwIHZlYzMgcG9pbnRpbmcgdXBcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdGFyZ2V0VG8ob3V0LCBleWUsIHRhcmdldCwgdXApIHtcbiAgdmFyIGV5ZXggPSBleWVbMF0sXG4gICAgICBleWV5ID0gZXllWzFdLFxuICAgICAgZXlleiA9IGV5ZVsyXSxcbiAgICAgIHVweCA9IHVwWzBdLFxuICAgICAgdXB5ID0gdXBbMV0sXG4gICAgICB1cHogPSB1cFsyXTtcbiAgdmFyIHowID0gZXlleCAtIHRhcmdldFswXSxcbiAgICAgIHoxID0gZXlleSAtIHRhcmdldFsxXSxcbiAgICAgIHoyID0gZXlleiAtIHRhcmdldFsyXTtcbiAgdmFyIGxlbiA9IHowICogejAgKyB6MSAqIHoxICsgejIgKiB6MjtcblxuICBpZiAobGVuID4gMCkge1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB6MCAqPSBsZW47XG4gICAgejEgKj0gbGVuO1xuICAgIHoyICo9IGxlbjtcbiAgfVxuXG4gIHZhciB4MCA9IHVweSAqIHoyIC0gdXB6ICogejEsXG4gICAgICB4MSA9IHVweiAqIHowIC0gdXB4ICogejIsXG4gICAgICB4MiA9IHVweCAqIHoxIC0gdXB5ICogejA7XG4gIGxlbiA9IHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4MjtcblxuICBpZiAobGVuID4gMCkge1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB4MCAqPSBsZW47XG4gICAgeDEgKj0gbGVuO1xuICAgIHgyICo9IGxlbjtcbiAgfVxuXG4gIG91dFswXSA9IHgwO1xuICBvdXRbMV0gPSB4MTtcbiAgb3V0WzJdID0geDI7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHoxICogeDIgLSB6MiAqIHgxO1xuICBvdXRbNV0gPSB6MiAqIHgwIC0gejAgKiB4MjtcbiAgb3V0WzZdID0gejAgKiB4MSAtIHoxICogeDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHowO1xuICBvdXRbOV0gPSB6MTtcbiAgb3V0WzEwXSA9IHoyO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IGV5ZXg7XG4gIG91dFsxM10gPSBleWV5O1xuICBvdXRbMTRdID0gZXllejtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwibWF0NChcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiLCBcIiArIGFbM10gKyBcIiwgXCIgKyBhWzRdICsgXCIsIFwiICsgYVs1XSArIFwiLCBcIiArIGFbNl0gKyBcIiwgXCIgKyBhWzddICsgXCIsIFwiICsgYVs4XSArIFwiLCBcIiArIGFbOV0gKyBcIiwgXCIgKyBhWzEwXSArIFwiLCBcIiArIGFbMTFdICsgXCIsIFwiICsgYVsxMl0gKyBcIiwgXCIgKyBhWzEzXSArIFwiLCBcIiArIGFbMTRdICsgXCIsIFwiICsgYVsxNV0gKyBcIilcIjtcbn1cbi8qKlxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxuICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvYihhKSB7XG4gIHJldHVybiBNYXRoLmh5cG90KGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0sIGFbNl0sIGFbN10sIGFbOF0sIGFbOV0sIGFbMTBdLCBhWzExXSwgYVsxMl0sIGFbMTNdLCBhWzE0XSwgYVsxNV0pO1xufVxuLyoqXG4gKiBBZGRzIHR3byBtYXQ0J3NcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICBvdXRbN10gPSBhWzddICsgYls3XTtcbiAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gIG91dFs5XSA9IGFbOV0gKyBiWzldO1xuICBvdXRbMTBdID0gYVsxMF0gKyBiWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdICsgYlsxMV07XG4gIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdO1xuICBvdXRbMTNdID0gYVsxM10gKyBiWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdICsgYlsxNF07XG4gIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgb3V0WzddID0gYVs3XSAtIGJbN107XG4gIG91dFs4XSA9IGFbOF0gLSBiWzhdO1xuICBvdXRbOV0gPSBhWzldIC0gYls5XTtcbiAgb3V0WzEwXSA9IGFbMTBdIC0gYlsxMF07XG4gIG91dFsxMV0gPSBhWzExXSAtIGJbMTFdO1xuICBvdXRbMTJdID0gYVsxMl0gLSBiWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdIC0gYlsxM107XG4gIG91dFsxNF0gPSBhWzE0XSAtIGJbMTRdO1xuICBvdXRbMTVdID0gYVsxNV0gLSBiWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgb3V0WzJdID0gYVsyXSAqIGI7XG4gIG91dFszXSA9IGFbM10gKiBiO1xuICBvdXRbNF0gPSBhWzRdICogYjtcbiAgb3V0WzVdID0gYVs1XSAqIGI7XG4gIG91dFs2XSA9IGFbNl0gKiBiO1xuICBvdXRbN10gPSBhWzddICogYjtcbiAgb3V0WzhdID0gYVs4XSAqIGI7XG4gIG91dFs5XSA9IGFbOV0gKiBiO1xuICBvdXRbMTBdID0gYVsxMF0gKiBiO1xuICBvdXRbMTFdID0gYVsxMV0gKiBiO1xuICBvdXRbMTJdID0gYVsxMl0gKiBiO1xuICBvdXRbMTNdID0gYVsxM10gKiBiO1xuICBvdXRbMTRdID0gYVsxNF0gKiBiO1xuICBvdXRbMTVdID0gYVsxNV0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byBtYXQ0J3MgYWZ0ZXIgbXVsdGlwbHlpbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xuICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XSAqIHNjYWxlO1xuICBvdXRbNV0gPSBhWzVdICsgYls1XSAqIHNjYWxlO1xuICBvdXRbNl0gPSBhWzZdICsgYls2XSAqIHNjYWxlO1xuICBvdXRbN10gPSBhWzddICsgYls3XSAqIHNjYWxlO1xuICBvdXRbOF0gPSBhWzhdICsgYls4XSAqIHNjYWxlO1xuICBvdXRbOV0gPSBhWzldICsgYls5XSAqIHNjYWxlO1xuICBvdXRbMTBdID0gYVsxMF0gKyBiWzEwXSAqIHNjYWxlO1xuICBvdXRbMTFdID0gYVsxMV0gKyBiWzExXSAqIHNjYWxlO1xuICBvdXRbMTJdID0gYVsxMl0gKyBiWzEyXSAqIHNjYWxlO1xuICBvdXRbMTNdID0gYVsxM10gKyBiWzEzXSAqIHNjYWxlO1xuICBvdXRbMTRdID0gYVsxNF0gKyBiWzE0XSAqIHNjYWxlO1xuICBvdXRbMTVdID0gYVsxNV0gKyBiWzE1XSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XSAmJiBhWzZdID09PSBiWzZdICYmIGFbN10gPT09IGJbN10gJiYgYVs4XSA9PT0gYls4XSAmJiBhWzldID09PSBiWzldICYmIGFbMTBdID09PSBiWzEwXSAmJiBhWzExXSA9PT0gYlsxMV0gJiYgYVsxMl0gPT09IGJbMTJdICYmIGFbMTNdID09PSBiWzEzXSAmJiBhWzE0XSA9PT0gYlsxNF0gJiYgYVsxNV0gPT09IGJbMTVdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgYTQgPSBhWzRdLFxuICAgICAgYTUgPSBhWzVdLFxuICAgICAgYTYgPSBhWzZdLFxuICAgICAgYTcgPSBhWzddO1xuICB2YXIgYTggPSBhWzhdLFxuICAgICAgYTkgPSBhWzldLFxuICAgICAgYTEwID0gYVsxMF0sXG4gICAgICBhMTEgPSBhWzExXTtcbiAgdmFyIGExMiA9IGFbMTJdLFxuICAgICAgYTEzID0gYVsxM10sXG4gICAgICBhMTQgPSBhWzE0XSxcbiAgICAgIGExNSA9IGFbMTVdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdO1xuICB2YXIgYjQgPSBiWzRdLFxuICAgICAgYjUgPSBiWzVdLFxuICAgICAgYjYgPSBiWzZdLFxuICAgICAgYjcgPSBiWzddO1xuICB2YXIgYjggPSBiWzhdLFxuICAgICAgYjkgPSBiWzldLFxuICAgICAgYjEwID0gYlsxMF0sXG4gICAgICBiMTEgPSBiWzExXTtcbiAgdmFyIGIxMiA9IGJbMTJdLFxuICAgICAgYjEzID0gYlsxM10sXG4gICAgICBiMTQgPSBiWzE0XSxcbiAgICAgIGIxNSA9IGJbMTVdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE0KSwgTWF0aC5hYnMoYjQpKSAmJiBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSkgJiYgTWF0aC5hYnMoYTYgLSBiNikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTYpLCBNYXRoLmFicyhiNikpICYmIE1hdGguYWJzKGE3IC0gYjcpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE3KSwgTWF0aC5hYnMoYjcpKSAmJiBNYXRoLmFicyhhOCAtIGI4KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOCksIE1hdGguYWJzKGI4KSkgJiYgTWF0aC5hYnMoYTkgLSBiOSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTkpLCBNYXRoLmFicyhiOSkpICYmIE1hdGguYWJzKGExMCAtIGIxMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEwKSwgTWF0aC5hYnMoYjEwKSkgJiYgTWF0aC5hYnMoYTExIC0gYjExKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTEpLCBNYXRoLmFicyhiMTEpKSAmJiBNYXRoLmFicyhhMTIgLSBiMTIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMiksIE1hdGguYWJzKGIxMikpICYmIE1hdGguYWJzKGExMyAtIGIxMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEzKSwgTWF0aC5hYnMoYjEzKSkgJiYgTWF0aC5hYnMoYTE0IC0gYjE0KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTQpLCBNYXRoLmFicyhiMTQpKSAmJiBNYXRoLmFicyhhMTUgLSBiMTUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExNSksIE1hdGguYWJzKGIxNSkpO1xufVxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0OyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXG4gKiAzIERpbWVuc2lvbmFsIFZlY3RvclxuICogQG1vZHVsZSB2ZWMzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWMzXG4gKlxuICogQHJldHVybnMge3ZlYzN9IGEgbmV3IDNEIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMyBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBjbG9uZVxuICogQHJldHVybnMge3ZlYzN9IGEgbmV3IDNEIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgdmFyIHogPSBhWzJdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWMzIGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyh4LCB5LCB6KSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgb3V0WzBdID0geDtcbiAgb3V0WzFdID0geTtcbiAgb3V0WzJdID0gejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6KSB7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIG91dFsyXSA9IHo7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEFkZHMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTXVsdGlwbGllcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAqIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIERpdmlkZXMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC8gYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5jZWlsIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gY2VpbFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjZWlsKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5jZWlsKGFbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gZmxvb3JcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGguZmxvb3IoYVsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWluKGFbMV0sIGJbMV0pO1xuICBvdXRbMl0gPSBNYXRoLm1pbihhWzJdLCBiWzJdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWF4KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBNYXRoLm1heChhWzBdLCBiWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XG4gIG91dFsyXSA9IE1hdGgubWF4KGFbMl0sIGJbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLnJvdW5kIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gcm91bmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm91bmQob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XG4gIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGgucm91bmQoYVsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNjYWxlcyBhIHZlYzMgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYjtcbiAgb3V0WzFdID0gYVsxXSAqIGI7XG4gIG91dFsyXSA9IGFbMl0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byB2ZWMzJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gIHZhciB4ID0gYlswXSAtIGFbMF07XG4gIHZhciB5ID0gYlsxXSAtIGFbMV07XG4gIHZhciB6ID0gYlsyXSAtIGFbMl07XG4gIHJldHVybiBNYXRoLmh5cG90KHgsIHksIHopO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWRMZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgdmFyIHogPSBhWzJdO1xuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6O1xufVxuLyoqXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gbmVnYXRlXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5lZ2F0ZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gLWFbMF07XG4gIG91dFsxXSA9IC1hWzFdO1xuICBvdXRbMl0gPSAtYVsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGludmVydFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICBvdXRbMl0gPSAxLjAgLyBhWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBOb3JtYWxpemUgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgdmFyIHogPSBhWzJdO1xuICB2YXIgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuXG4gIGlmIChsZW4gPiAwKSB7XG4gICAgLy9UT0RPOiBldmFsdWF0ZSB1c2Ugb2YgZ2xtX2ludnNxcnQgaGVyZT9cbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gIH1cblxuICBvdXRbMF0gPSBhWzBdICogbGVuO1xuICBvdXRbMV0gPSBhWzFdICogbGVuO1xuICBvdXRbMl0gPSBhWzJdICogbGVuO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkb3QoYSwgYikge1xuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xufVxuLyoqXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl07XG4gIHZhciBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICBieiA9IGJbMl07XG4gIG91dFswXSA9IGF5ICogYnogLSBheiAqIGJ5O1xuICBvdXRbMV0gPSBheiAqIGJ4IC0gYXggKiBiejtcbiAgb3V0WzJdID0gYXggKiBieSAtIGF5ICogYng7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgdmFyIGF4ID0gYVswXTtcbiAgdmFyIGF5ID0gYVsxXTtcbiAgdmFyIGF6ID0gYVsyXTtcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUGVyZm9ybXMgYSBoZXJtaXRlIGludGVycG9sYXRpb24gd2l0aCB0d28gY29udHJvbCBwb2ludHNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGMgdGhlIHRoaXJkIG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBkIHRoZSBmb3VydGggb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoZXJtaXRlKG91dCwgYSwgYiwgYywgZCwgdCkge1xuICB2YXIgZmFjdG9yVGltZXMyID0gdCAqIHQ7XG4gIHZhciBmYWN0b3IxID0gZmFjdG9yVGltZXMyICogKDIgKiB0IC0gMykgKyAxO1xuICB2YXIgZmFjdG9yMiA9IGZhY3RvclRpbWVzMiAqICh0IC0gMikgKyB0O1xuICB2YXIgZmFjdG9yMyA9IGZhY3RvclRpbWVzMiAqICh0IC0gMSk7XG4gIHZhciBmYWN0b3I0ID0gZmFjdG9yVGltZXMyICogKDMgLSAyICogdCk7XG4gIG91dFswXSA9IGFbMF0gKiBmYWN0b3IxICsgYlswXSAqIGZhY3RvcjIgKyBjWzBdICogZmFjdG9yMyArIGRbMF0gKiBmYWN0b3I0O1xuICBvdXRbMV0gPSBhWzFdICogZmFjdG9yMSArIGJbMV0gKiBmYWN0b3IyICsgY1sxXSAqIGZhY3RvcjMgKyBkWzFdICogZmFjdG9yNDtcbiAgb3V0WzJdID0gYVsyXSAqIGZhY3RvcjEgKyBiWzJdICogZmFjdG9yMiArIGNbMl0gKiBmYWN0b3IzICsgZFsyXSAqIGZhY3RvcjQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFBlcmZvcm1zIGEgYmV6aWVyIGludGVycG9sYXRpb24gd2l0aCB0d28gY29udHJvbCBwb2ludHNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGMgdGhlIHRoaXJkIG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBkIHRoZSBmb3VydGggb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBiZXppZXIob3V0LCBhLCBiLCBjLCBkLCB0KSB7XG4gIHZhciBpbnZlcnNlRmFjdG9yID0gMSAtIHQ7XG4gIHZhciBpbnZlcnNlRmFjdG9yVGltZXNUd28gPSBpbnZlcnNlRmFjdG9yICogaW52ZXJzZUZhY3RvcjtcbiAgdmFyIGZhY3RvclRpbWVzMiA9IHQgKiB0O1xuICB2YXIgZmFjdG9yMSA9IGludmVyc2VGYWN0b3JUaW1lc1R3byAqIGludmVyc2VGYWN0b3I7XG4gIHZhciBmYWN0b3IyID0gMyAqIHQgKiBpbnZlcnNlRmFjdG9yVGltZXNUd287XG4gIHZhciBmYWN0b3IzID0gMyAqIGZhY3RvclRpbWVzMiAqIGludmVyc2VGYWN0b3I7XG4gIHZhciBmYWN0b3I0ID0gZmFjdG9yVGltZXMyICogdDtcbiAgb3V0WzBdID0gYVswXSAqIGZhY3RvcjEgKyBiWzBdICogZmFjdG9yMiArIGNbMF0gKiBmYWN0b3IzICsgZFswXSAqIGZhY3RvcjQ7XG4gIG91dFsxXSA9IGFbMV0gKiBmYWN0b3IxICsgYlsxXSAqIGZhY3RvcjIgKyBjWzFdICogZmFjdG9yMyArIGRbMV0gKiBmYWN0b3I0O1xuICBvdXRbMl0gPSBhWzJdICogZmFjdG9yMSArIGJbMl0gKiBmYWN0b3IyICsgY1syXSAqIGZhY3RvcjMgKyBkWzJdICogZmFjdG9yNDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG91dCwgc2NhbGUpIHtcbiAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7XG4gIHZhciByID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgKiBNYXRoLlBJO1xuICB2YXIgeiA9IGdsTWF0cml4LlJBTkRPTSgpICogMi4wIC0gMS4wO1xuICB2YXIgelNjYWxlID0gTWF0aC5zcXJ0KDEuMCAtIHogKiB6KSAqIHNjYWxlO1xuICBvdXRbMF0gPSBNYXRoLmNvcyhyKSAqIHpTY2FsZTtcbiAgb3V0WzFdID0gTWF0aC5zaW4ocikgKiB6U2NhbGU7XG4gIG91dFsyXSA9IHogKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgbWF0NC5cbiAqIDR0aCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzEnXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0NChvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV0sXG4gICAgICB6ID0gYVsyXTtcbiAgdmFyIHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XG4gIHcgPSB3IHx8IDEuMDtcbiAgb3V0WzBdID0gKG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdKSAvIHc7XG4gIG91dFsxXSA9IChtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSkgLyB3O1xuICBvdXRbMl0gPSAobVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdKSAvIHc7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDMuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gbSB0aGUgM3gzIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQzKG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdO1xuICBvdXRbMF0gPSB4ICogbVswXSArIHkgKiBtWzNdICsgeiAqIG1bNl07XG4gIG91dFsxXSA9IHggKiBtWzFdICsgeSAqIG1bNF0gKyB6ICogbVs3XTtcbiAgb3V0WzJdID0geCAqIG1bMl0gKyB5ICogbVs1XSArIHogKiBtWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBxdWF0XG4gKiBDYW4gYWxzbyBiZSB1c2VkIGZvciBkdWFsIHF1YXRlcm5pb25zLiAoTXVsdGlwbHkgaXQgd2l0aCB0aGUgcmVhbCBwYXJ0KVxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1RdWF0KG91dCwgYSwgcSkge1xuICAvLyBiZW5jaG1hcmtzOiBodHRwczovL2pzcGVyZi5jb20vcXVhdGVybmlvbi10cmFuc2Zvcm0tdmVjMy1pbXBsZW1lbnRhdGlvbnMtZml4ZWRcbiAgdmFyIHF4ID0gcVswXSxcbiAgICAgIHF5ID0gcVsxXSxcbiAgICAgIHF6ID0gcVsyXSxcbiAgICAgIHF3ID0gcVszXTtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV0sXG4gICAgICB6ID0gYVsyXTsgLy8gdmFyIHF2ZWMgPSBbcXgsIHF5LCBxel07XG4gIC8vIHZhciB1diA9IHZlYzMuY3Jvc3MoW10sIHF2ZWMsIGEpO1xuXG4gIHZhciB1dnggPSBxeSAqIHogLSBxeiAqIHksXG4gICAgICB1dnkgPSBxeiAqIHggLSBxeCAqIHosXG4gICAgICB1dnogPSBxeCAqIHkgLSBxeSAqIHg7IC8vIHZhciB1dXYgPSB2ZWMzLmNyb3NzKFtdLCBxdmVjLCB1dik7XG5cbiAgdmFyIHV1dnggPSBxeSAqIHV2eiAtIHF6ICogdXZ5LFxuICAgICAgdXV2eSA9IHF6ICogdXZ4IC0gcXggKiB1dnosXG4gICAgICB1dXZ6ID0gcXggKiB1dnkgLSBxeSAqIHV2eDsgLy8gdmVjMy5zY2FsZSh1diwgdXYsIDIgKiB3KTtcblxuICB2YXIgdzIgPSBxdyAqIDI7XG4gIHV2eCAqPSB3MjtcbiAgdXZ5ICo9IHcyO1xuICB1dnogKj0gdzI7IC8vIHZlYzMuc2NhbGUodXV2LCB1dXYsIDIpO1xuXG4gIHV1dnggKj0gMjtcbiAgdXV2eSAqPSAyO1xuICB1dXZ6ICo9IDI7IC8vIHJldHVybiB2ZWMzLmFkZChvdXQsIGEsIHZlYzMuYWRkKG91dCwgdXYsIHV1dikpO1xuXG4gIG91dFswXSA9IHggKyB1dnggKyB1dXZ4O1xuICBvdXRbMV0gPSB5ICsgdXZ5ICsgdXV2eTtcbiAgb3V0WzJdID0geiArIHV2eiArIHV1dno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHgtYXhpc1xuICogQHBhcmFtIHt2ZWMzfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMzXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBpbiByYWRpYW5zXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCBiLCByYWQpIHtcbiAgdmFyIHAgPSBbXSxcbiAgICAgIHIgPSBbXTsgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuXG4gIHBbMF0gPSBhWzBdIC0gYlswXTtcbiAgcFsxXSA9IGFbMV0gLSBiWzFdO1xuICBwWzJdID0gYVsyXSAtIGJbMl07IC8vcGVyZm9ybSByb3RhdGlvblxuXG4gIHJbMF0gPSBwWzBdO1xuICByWzFdID0gcFsxXSAqIE1hdGguY29zKHJhZCkgLSBwWzJdICogTWF0aC5zaW4ocmFkKTtcbiAgclsyXSA9IHBbMV0gKiBNYXRoLnNpbihyYWQpICsgcFsyXSAqIE1hdGguY29zKHJhZCk7IC8vdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cblxuICBvdXRbMF0gPSByWzBdICsgYlswXTtcbiAgb3V0WzFdID0gclsxXSArIGJbMV07XG4gIG91dFsyXSA9IHJbMl0gKyBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGUgYSAzRCB2ZWN0b3IgYXJvdW5kIHRoZSB5LWF4aXNcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCBUaGUgYW5nbGUgb2Ygcm90YXRpb24gaW4gcmFkaWFuc1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgYiwgcmFkKSB7XG4gIHZhciBwID0gW10sXG4gICAgICByID0gW107IC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cblxuICBwWzBdID0gYVswXSAtIGJbMF07XG4gIHBbMV0gPSBhWzFdIC0gYlsxXTtcbiAgcFsyXSA9IGFbMl0gLSBiWzJdOyAvL3BlcmZvcm0gcm90YXRpb25cblxuICByWzBdID0gcFsyXSAqIE1hdGguc2luKHJhZCkgKyBwWzBdICogTWF0aC5jb3MocmFkKTtcbiAgclsxXSA9IHBbMV07XG4gIHJbMl0gPSBwWzJdICogTWF0aC5jb3MocmFkKSAtIHBbMF0gKiBNYXRoLnNpbihyYWQpOyAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXG5cbiAgb3V0WzBdID0gclswXSArIGJbMF07XG4gIG91dFsxXSA9IHJbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSByWzJdICsgYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgei1heGlzXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSB2ZWMzIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIGIsIHJhZCkge1xuICB2YXIgcCA9IFtdLFxuICAgICAgciA9IFtdOyAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG5cbiAgcFswXSA9IGFbMF0gLSBiWzBdO1xuICBwWzFdID0gYVsxXSAtIGJbMV07XG4gIHBbMl0gPSBhWzJdIC0gYlsyXTsgLy9wZXJmb3JtIHJvdGF0aW9uXG5cbiAgclswXSA9IHBbMF0gKiBNYXRoLmNvcyhyYWQpIC0gcFsxXSAqIE1hdGguc2luKHJhZCk7XG4gIHJbMV0gPSBwWzBdICogTWF0aC5zaW4ocmFkKSArIHBbMV0gKiBNYXRoLmNvcyhyYWQpO1xuICByWzJdID0gcFsyXTsgLy90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuXG4gIG91dFswXSA9IHJbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSByWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gclsyXSArIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gM0QgdmVjdG9yc1xuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYW5nbGUoYSwgYikge1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgYnogPSBiWzJdLFxuICAgICAgbWFnMSA9IE1hdGguc3FydChheCAqIGF4ICsgYXkgKiBheSArIGF6ICogYXopLFxuICAgICAgbWFnMiA9IE1hdGguc3FydChieCAqIGJ4ICsgYnkgKiBieSArIGJ6ICogYnopLFxuICAgICAgbWFnID0gbWFnMSAqIG1hZzIsXG4gICAgICBjb3NpbmUgPSBtYWcgJiYgZG90KGEsIGIpIC8gbWFnO1xuICByZXR1cm4gTWF0aC5hY29zKE1hdGgubWluKE1hdGgubWF4KGNvc2luZSwgLTEpLCAxKSk7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzMgdG8gemVyb1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8ob3V0KSB7XG4gIG91dFswXSA9IDAuMDtcbiAgb3V0WzFdID0gMC4wO1xuICBvdXRbMl0gPSAwLjA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJ2ZWMzKFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIpXCI7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXTtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl07XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKTtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnN1YnRyYWN0fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLm11bHRpcGx5fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmRpdmlkZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZGl2ID0gZGl2aWRlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuZGlzdGFuY2V9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGRpc3QgPSBkaXN0YW5jZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnNxdWFyZWREaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyRGlzdCA9IHNxdWFyZWREaXN0YW5jZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmxlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuc3F1YXJlZExlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcbi8qKlxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzNzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzMuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gc2tpcCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWMzcyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxuICogQHBhcmFtIHtPYmplY3R9IFthcmddIGFkZGl0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBmblxuICogQHJldHVybnMge0FycmF5fSBhXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB2ZWMgPSBjcmVhdGUoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcbiAgICB2YXIgaSwgbDtcblxuICAgIGlmICghc3RyaWRlKSB7XG4gICAgICBzdHJpZGUgPSAzO1xuICAgIH1cblxuICAgIGlmICghb2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIGlmIChjb3VudCkge1xuICAgICAgbCA9IE1hdGgubWluKGNvdW50ICogc3RyaWRlICsgb2Zmc2V0LCBhLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGwgPSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgdmVjWzBdID0gYVtpXTtcbiAgICAgIHZlY1sxXSA9IGFbaSArIDFdO1xuICAgICAgdmVjWzJdID0gYVtpICsgMl07XG4gICAgICBmbih2ZWMsIHZlYywgYXJnKTtcbiAgICAgIGFbaV0gPSB2ZWNbMF07XG4gICAgICBhW2kgKyAxXSA9IHZlY1sxXTtcbiAgICAgIGFbaSArIDJdID0gdmVjWzJdO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xufSgpOyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXG4gKiA0IERpbWVuc2lvbmFsIFZlY3RvclxuICogQG1vZHVsZSB2ZWM0XG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWM0XG4gKlxuICogQHJldHVybnMge3ZlYzR9IGEgbmV3IDREIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWM0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgdmVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGNsb25lXG4gKiBAcmV0dXJucyB7dmVjNH0gYSBuZXcgNEQgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyh4LCB5LCB6LCB3KSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcbiAgb3V0WzBdID0geDtcbiAgb3V0WzFdID0geTtcbiAgb3V0WzJdID0gejtcbiAgb3V0WzNdID0gdztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeiwgdykge1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICBvdXRbM10gPSB3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTXVsdGlwbGllcyB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAqIGJbMl07XG4gIG91dFszXSA9IGFbM10gKiBiWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBEaXZpZGVzIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZpZGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAvIGJbMl07XG4gIG91dFszXSA9IGFbM10gLyBiWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBjZWlsXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLmNlaWwoYVsyXSk7XG4gIG91dFszXSA9IE1hdGguY2VpbChhWzNdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGZsb29yXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZsb29yKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLmZsb29yKGFbMl0pO1xuICBvdXRbM10gPSBNYXRoLmZsb29yKGFbM10pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtaW4ob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWluKGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5taW4oYVsyXSwgYlsyXSk7XG4gIG91dFszXSA9IE1hdGgubWluKGFbM10sIGJbM10pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtYXgob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWF4KGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1heChhWzFdLCBiWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5tYXgoYVsyXSwgYlsyXSk7XG4gIG91dFszXSA9IE1hdGgubWF4KGFbM10sIGJbM10pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLnJvdW5kIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gcm91bmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm91bmQob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XG4gIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGgucm91bmQoYVsyXSk7XG4gIG91dFszXSA9IE1hdGgucm91bmQoYVszXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNjYWxlcyBhIHZlYzQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYjtcbiAgb3V0WzFdID0gYVsxXSAqIGI7XG4gIG91dFsyXSA9IGFbMl0gKiBiO1xuICBvdXRbM10gPSBhWzNdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWRkcyB0d28gdmVjNCdzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIgYnkgYmVmb3JlIGFkZGluZ1xuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XG4gIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xuICB2YXIgdyA9IGJbM10gLSBhWzNdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6LCB3KTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcbiAgdmFyIHggPSBiWzBdIC0gYVswXTtcbiAgdmFyIHkgPSBiWzFdIC0gYVsxXTtcbiAgdmFyIHogPSBiWzJdIC0gYVsyXTtcbiAgdmFyIHcgPSBiWzNdIC0gYVszXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gIHZhciB4ID0gYVswXTtcbiAgdmFyIHkgPSBhWzFdO1xuICB2YXIgeiA9IGFbMl07XG4gIHZhciB3ID0gYVszXTtcbiAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSwgeiwgdyk7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XG4gIHZhciB4ID0gYVswXTtcbiAgdmFyIHkgPSBhWzFdO1xuICB2YXIgeiA9IGFbMl07XG4gIHZhciB3ID0gYVszXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xufVxuLyoqXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gbmVnYXRlXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5lZ2F0ZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gLWFbMF07XG4gIG91dFsxXSA9IC1hWzFdO1xuICBvdXRbMl0gPSAtYVsyXTtcbiAgb3V0WzNdID0gLWFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBpbnZlcnRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gMS4wIC8gYVswXTtcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgb3V0WzJdID0gMS4wIC8gYVsyXTtcbiAgb3V0WzNdID0gMS4wIC8gYVszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgdmFyIHcgPSBhWzNdO1xuICB2YXIgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG5cbiAgaWYgKGxlbiA+IDApIHtcbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gIH1cblxuICBvdXRbMF0gPSB4ICogbGVuO1xuICBvdXRbMV0gPSB5ICogbGVuO1xuICBvdXRbMl0gPSB6ICogbGVuO1xuICBvdXRbM10gPSB3ICogbGVuO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkb3QoYSwgYikge1xuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGNyb3NzLXByb2R1Y3Qgb2YgdGhyZWUgdmVjdG9ycyBpbiBhIDQtZGltZW5zaW9uYWwgc3BhY2VcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gcmVzdWx0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gVSB0aGUgZmlyc3QgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gViB0aGUgc2Vjb25kIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IFcgdGhlIHRoaXJkIHZlY3RvclxuICogQHJldHVybnMge3ZlYzR9IHJlc3VsdFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcm9zcyhvdXQsIHUsIHYsIHcpIHtcbiAgdmFyIEEgPSB2WzBdICogd1sxXSAtIHZbMV0gKiB3WzBdLFxuICAgICAgQiA9IHZbMF0gKiB3WzJdIC0gdlsyXSAqIHdbMF0sXG4gICAgICBDID0gdlswXSAqIHdbM10gLSB2WzNdICogd1swXSxcbiAgICAgIEQgPSB2WzFdICogd1syXSAtIHZbMl0gKiB3WzFdLFxuICAgICAgRSA9IHZbMV0gKiB3WzNdIC0gdlszXSAqIHdbMV0sXG4gICAgICBGID0gdlsyXSAqIHdbM10gLSB2WzNdICogd1syXTtcbiAgdmFyIEcgPSB1WzBdO1xuICB2YXIgSCA9IHVbMV07XG4gIHZhciBJID0gdVsyXTtcbiAgdmFyIEogPSB1WzNdO1xuICBvdXRbMF0gPSBIICogRiAtIEkgKiBFICsgSiAqIEQ7XG4gIG91dFsxXSA9IC0oRyAqIEYpICsgSSAqIEMgLSBKICogQjtcbiAgb3V0WzJdID0gRyAqIEUgLSBIICogQyArIEogKiBBO1xuICBvdXRbM10gPSAtKEcgKiBEKSArIEggKiBCIC0gSSAqIEE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgdmFyIGF4ID0gYVswXTtcbiAgdmFyIGF5ID0gYVsxXTtcbiAgdmFyIGF6ID0gYVsyXTtcbiAgdmFyIGF3ID0gYVszXTtcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcbiAgb3V0WzNdID0gYXcgKyB0ICogKGJbM10gLSBhdyk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShvdXQsIHNjYWxlKSB7XG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wOyAvLyBNYXJzYWdsaWEsIEdlb3JnZS4gQ2hvb3NpbmcgYSBQb2ludCBmcm9tIHRoZSBTdXJmYWNlIG9mIGFcbiAgLy8gU3BoZXJlLiBBbm4uIE1hdGguIFN0YXRpc3QuIDQzICgxOTcyKSwgbm8uIDIsIDY0NS0tNjQ2LlxuICAvLyBodHRwOi8vcHJvamVjdGV1Y2xpZC5vcmcvZXVjbGlkLmFvbXMvMTE3NzY5MjY0NDtcblxuICB2YXIgdjEsIHYyLCB2MywgdjQ7XG4gIHZhciBzMSwgczI7XG5cbiAgZG8ge1xuICAgIHYxID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyIC0gMTtcbiAgICB2MiA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XG4gICAgczEgPSB2MSAqIHYxICsgdjIgKiB2MjtcbiAgfSB3aGlsZSAoczEgPj0gMSk7XG5cbiAgZG8ge1xuICAgIHYzID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyIC0gMTtcbiAgICB2NCA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XG4gICAgczIgPSB2MyAqIHYzICsgdjQgKiB2NDtcbiAgfSB3aGlsZSAoczIgPj0gMSk7XG5cbiAgdmFyIGQgPSBNYXRoLnNxcnQoKDEgLSBzMSkgLyBzMik7XG4gIG91dFswXSA9IHNjYWxlICogdjE7XG4gIG91dFsxXSA9IHNjYWxlICogdjI7XG4gIG91dFsyXSA9IHNjYWxlICogdjMgKiBkO1xuICBvdXRbM10gPSBzY2FsZSAqIHY0ICogZDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjNCB3aXRoIGEgbWF0NC5cbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdLFxuICAgICAgdyA9IGFbM107XG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdICogdztcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10gKiB3O1xuICBvdXRbMl0gPSBtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6ICsgbVsxNF0gKiB3O1xuICBvdXRbM10gPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV0gKiB3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWM0IHdpdGggYSBxdWF0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVF1YXQob3V0LCBhLCBxKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl07XG4gIHZhciBxeCA9IHFbMF0sXG4gICAgICBxeSA9IHFbMV0sXG4gICAgICBxeiA9IHFbMl0sXG4gICAgICBxdyA9IHFbM107IC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjXG5cbiAgdmFyIGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuICB2YXIgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHo7XG4gIHZhciBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcbiAgdmFyIGl3ID0gLXF4ICogeCAtIHF5ICogeSAtIHF6ICogejsgLy8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxuXG4gIG91dFswXSA9IGl4ICogcXcgKyBpdyAqIC1xeCArIGl5ICogLXF6IC0gaXogKiAtcXk7XG4gIG91dFsxXSA9IGl5ICogcXcgKyBpdyAqIC1xeSArIGl6ICogLXF4IC0gaXggKiAtcXo7XG4gIG91dFsyXSA9IGl6ICogcXcgKyBpdyAqIC1xeiArIGl4ICogLXF5IC0gaXkgKiAtcXg7XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gemVyb1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8ob3V0KSB7XG4gIG91dFswXSA9IDAuMDtcbiAgb3V0WzFdID0gMC4wO1xuICBvdXRbMl0gPSAwLjA7XG4gIG91dFszXSA9IDAuMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiBcInZlYzQoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiLCBcIiArIGFbMl0gKyBcIiwgXCIgKyBhWzNdICsgXCIpXCI7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSBUaGUgZmlyc3QgdmVjdG9yLlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXTtcbiAgdmFyIGIwID0gYlswXSxcbiAgICAgIGIxID0gYlsxXSxcbiAgICAgIGIyID0gYlsyXSxcbiAgICAgIGIzID0gYlszXTtcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKTtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LnN1YnRyYWN0fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0Lm11bHRpcGx5fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LmRpdmlkZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZGl2ID0gZGl2aWRlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuZGlzdGFuY2V9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGRpc3QgPSBkaXN0YW5jZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LnNxdWFyZWREaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyRGlzdCA9IHNxdWFyZWREaXN0YW5jZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0Lmxlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3F1YXJlZExlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcbi8qKlxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzQuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gc2tpcCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWM0cyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxuICogQHBhcmFtIHtPYmplY3R9IFthcmddIGFkZGl0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBmblxuICogQHJldHVybnMge0FycmF5fSBhXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB2ZWMgPSBjcmVhdGUoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcbiAgICB2YXIgaSwgbDtcblxuICAgIGlmICghc3RyaWRlKSB7XG4gICAgICBzdHJpZGUgPSA0O1xuICAgIH1cblxuICAgIGlmICghb2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIGlmIChjb3VudCkge1xuICAgICAgbCA9IE1hdGgubWluKGNvdW50ICogc3RyaWRlICsgb2Zmc2V0LCBhLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGwgPSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgdmVjWzBdID0gYVtpXTtcbiAgICAgIHZlY1sxXSA9IGFbaSArIDFdO1xuICAgICAgdmVjWzJdID0gYVtpICsgMl07XG4gICAgICB2ZWNbM10gPSBhW2kgKyAzXTtcbiAgICAgIGZuKHZlYywgdmVjLCBhcmcpO1xuICAgICAgYVtpXSA9IHZlY1swXTtcbiAgICAgIGFbaSArIDFdID0gdmVjWzFdO1xuICAgICAgYVtpICsgMl0gPSB2ZWNbMl07XG4gICAgICBhW2kgKyAzXSA9IHZlY1szXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcbn0oKTsiLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbmltcG9ydCAqIGFzIG1hdDMgZnJvbSBcIi4vbWF0My5qc1wiO1xuaW1wb3J0ICogYXMgdmVjMyBmcm9tIFwiLi92ZWMzLmpzXCI7XG5pbXBvcnQgKiBhcyB2ZWM0IGZyb20gXCIuL3ZlYzQuanNcIjtcbi8qKlxuICogUXVhdGVybmlvblxuICogQG1vZHVsZSBxdWF0XG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IHF1YXRcbiAqXG4gKiBAcmV0dXJucyB7cXVhdH0gYSBuZXcgcXVhdGVybmlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgfVxuXG4gIG91dFszXSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCBhIHF1YXQgdG8gdGhlIGlkZW50aXR5IHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDA7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldHMgYSBxdWF0IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFuZCByb3RhdGlvbiBheGlzLFxuICogdGhlbiByZXR1cm5zIGl0LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGF4aXMgdGhlIGF4aXMgYXJvdW5kIHdoaWNoIHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgaW4gcmFkaWFuc1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0QXhpc0FuZ2xlKG91dCwgYXhpcywgcmFkKSB7XG4gIHJhZCA9IHJhZCAqIDAuNTtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICBvdXRbMF0gPSBzICogYXhpc1swXTtcbiAgb3V0WzFdID0gcyAqIGF4aXNbMV07XG4gIG91dFsyXSA9IHMgKiBheGlzWzJdO1xuICBvdXRbM10gPSBNYXRoLmNvcyhyYWQpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBHZXRzIHRoZSByb3RhdGlvbiBheGlzIGFuZCBhbmdsZSBmb3IgYSBnaXZlblxuICogIHF1YXRlcm5pb24uIElmIGEgcXVhdGVybmlvbiBpcyBjcmVhdGVkIHdpdGhcbiAqICBzZXRBeGlzQW5nbGUsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBzYW1lXG4gKiAgdmFsdWVzIGFzIHByb3ZpZGllZCBpbiB0aGUgb3JpZ2luYWwgcGFyYW1ldGVyIGxpc3RcbiAqICBPUiBmdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB2YWx1ZXMuXG4gKiBFeGFtcGxlOiBUaGUgcXVhdGVybmlvbiBmb3JtZWQgYnkgYXhpcyBbMCwgMCwgMV0gYW5kXG4gKiAgYW5nbGUgLTkwIGlzIHRoZSBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIGZvcm1lZCBieVxuICogIFswLCAwLCAxXSBhbmQgMjcwLiBUaGlzIG1ldGhvZCBmYXZvcnMgdGhlIGxhdHRlci5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dF9heGlzICBWZWN0b3IgcmVjZWl2aW5nIHRoZSBheGlzIG9mIHJvdGF0aW9uXG4gKiBAcGFyYW0gIHtSZWFkb25seVF1YXR9IHEgICAgIFF1YXRlcm5pb24gdG8gYmUgZGVjb21wb3NlZFxuICogQHJldHVybiB7TnVtYmVyfSAgICAgQW5nbGUsIGluIHJhZGlhbnMsIG9mIHRoZSByb3RhdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBeGlzQW5nbGUob3V0X2F4aXMsIHEpIHtcbiAgdmFyIHJhZCA9IE1hdGguYWNvcyhxWzNdKSAqIDIuMDtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQgLyAyLjApO1xuXG4gIGlmIChzID4gZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIG91dF9heGlzWzBdID0gcVswXSAvIHM7XG4gICAgb3V0X2F4aXNbMV0gPSBxWzFdIC8gcztcbiAgICBvdXRfYXhpc1syXSA9IHFbMl0gLyBzO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHMgaXMgemVybywgcmV0dXJuIGFueSBheGlzIChubyByb3RhdGlvbiAtIGF4aXMgZG9lcyBub3QgbWF0dGVyKVxuICAgIG91dF9heGlzWzBdID0gMTtcbiAgICBvdXRfYXhpc1sxXSA9IDA7XG4gICAgb3V0X2F4aXNbMl0gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJhZDtcbn1cbi8qKlxuICogR2V0cyB0aGUgYW5ndWxhciBkaXN0YW5jZSBiZXR3ZWVuIHR3byB1bml0IHF1YXRlcm5pb25zXG4gKlxuICogQHBhcmFtICB7UmVhZG9ubHlRdWF0fSBhICAgICBPcmlnaW4gdW5pdCBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0gIHtSZWFkb25seVF1YXR9IGIgICAgIERlc3RpbmF0aW9uIHVuaXQgcXVhdGVybmlvblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgQW5nbGUsIGluIHJhZGlhbnMsIGJldHdlZW4gdGhlIHR3byBxdWF0ZXJuaW9uc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbmdsZShhLCBiKSB7XG4gIHZhciBkb3Rwcm9kdWN0ID0gZG90KGEsIGIpO1xuICByZXR1cm4gTWF0aC5hY29zKDIgKiBkb3Rwcm9kdWN0ICogZG90cHJvZHVjdCAtIDEpO1xufVxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBxdWF0J3NcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl0sXG4gICAgICBhdyA9IGFbM107XG4gIHZhciBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICBieiA9IGJbMl0sXG4gICAgICBidyA9IGJbM107XG4gIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7XG4gIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7XG4gIG91dFsyXSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XG4gIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWCBheGlzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XG4gIHJhZCAqPSAwLjU7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl0sXG4gICAgICBhdyA9IGFbM107XG4gIHZhciBieCA9IE1hdGguc2luKHJhZCksXG4gICAgICBidyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4O1xuICBvdXRbMV0gPSBheSAqIGJ3ICsgYXogKiBieDtcbiAgb3V0WzJdID0gYXogKiBidyAtIGF5ICogYng7XG4gIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFkgYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gcm90YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIGFuZ2xlIChpbiByYWRpYW5zKSB0byByb3RhdGVcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIHJhZCkge1xuICByYWQgKj0gMC41O1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdLFxuICAgICAgYXcgPSBhWzNdO1xuICB2YXIgYnkgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuICBvdXRbMF0gPSBheCAqIGJ3IC0gYXogKiBieTtcbiAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnk7XG4gIG91dFsyXSA9IGF6ICogYncgKyBheCAqIGJ5O1xuICBvdXRbM10gPSBhdyAqIGJ3IC0gYXkgKiBieTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBaIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCByYWQpIHtcbiAgcmFkICo9IDAuNTtcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGF6ID0gYVsyXSxcbiAgICAgIGF3ID0gYVszXTtcbiAgdmFyIGJ6ID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcbiAgb3V0WzBdID0gYXggKiBidyArIGF5ICogYno7XG4gIG91dFsxXSA9IGF5ICogYncgLSBheCAqIGJ6O1xuICBvdXRbMl0gPSBheiAqIGJ3ICsgYXcgKiBiejtcbiAgb3V0WzNdID0gYXcgKiBidyAtIGF6ICogYno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIFcgY29tcG9uZW50IG9mIGEgcXVhdCBmcm9tIHRoZSBYLCBZLCBhbmQgWiBjb21wb25lbnRzLlxuICogQXNzdW1lcyB0aGF0IHF1YXRlcm5pb24gaXMgMSB1bml0IGluIGxlbmd0aC5cbiAqIEFueSBleGlzdGluZyBXIGNvbXBvbmVudCB3aWxsIGJlIGlnbm9yZWQuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBXIGNvbXBvbmVudCBvZlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVXKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdO1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICBvdXRbM10gPSBNYXRoLnNxcnQoTWF0aC5hYnMoMS4wIC0geCAqIHggLSB5ICogeSAtIHogKiB6KSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgZXhwb25lbnRpYWwgb2YgYSB1bml0IHF1YXRlcm5pb24uXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSB0aGUgZXhwb25lbnRpYWwgb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhwKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdLFxuICAgICAgdyA9IGFbM107XG4gIHZhciByID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIHZhciBldCA9IE1hdGguZXhwKHcpO1xuICB2YXIgcyA9IHIgPiAwID8gZXQgKiBNYXRoLnNpbihyKSAvIHIgOiAwO1xuICBvdXRbMF0gPSB4ICogcztcbiAgb3V0WzFdID0geSAqIHM7XG4gIG91dFsyXSA9IHogKiBzO1xuICBvdXRbM10gPSBldCAqIE1hdGguY29zKHIpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIG5hdHVyYWwgbG9nYXJpdGhtIG9mIGEgdW5pdCBxdWF0ZXJuaW9uLlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgdGhlIGV4cG9uZW50aWFsIG9mXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxuKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdLFxuICAgICAgdyA9IGFbM107XG4gIHZhciByID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIHZhciB0ID0gciA+IDAgPyBNYXRoLmF0YW4yKHIsIHcpIC8gciA6IDA7XG4gIG91dFswXSA9IHggKiB0O1xuICBvdXRbMV0gPSB5ICogdDtcbiAgb3V0WzJdID0geiAqIHQ7XG4gIG91dFszXSA9IDAuNSAqIE1hdGgubG9nKHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBzY2FsYXIgcG93ZXIgb2YgYSB1bml0IHF1YXRlcm5pb24uXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSB0aGUgZXhwb25lbnRpYWwgb2ZcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgcXVhdGVybmlvbiBieVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwb3cob3V0LCBhLCBiKSB7XG4gIGxuKG91dCwgYSk7XG4gIHNjYWxlKG91dCwgb3V0LCBiKTtcbiAgZXhwKG91dCwgb3V0KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgLy8gYmVuY2htYXJrczpcbiAgLy8gICAgaHR0cDovL2pzcGVyZi5jb20vcXVhdGVybmlvbi1zbGVycC1pbXBsZW1lbnRhdGlvbnNcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGF6ID0gYVsyXSxcbiAgICAgIGF3ID0gYVszXTtcbiAgdmFyIGJ4ID0gYlswXSxcbiAgICAgIGJ5ID0gYlsxXSxcbiAgICAgIGJ6ID0gYlsyXSxcbiAgICAgIGJ3ID0gYlszXTtcbiAgdmFyIG9tZWdhLCBjb3NvbSwgc2lub20sIHNjYWxlMCwgc2NhbGUxOyAvLyBjYWxjIGNvc2luZVxuXG4gIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidzsgLy8gYWRqdXN0IHNpZ25zIChpZiBuZWNlc3NhcnkpXG5cbiAgaWYgKGNvc29tIDwgMC4wKSB7XG4gICAgY29zb20gPSAtY29zb207XG4gICAgYnggPSAtYng7XG4gICAgYnkgPSAtYnk7XG4gICAgYnogPSAtYno7XG4gICAgYncgPSAtYnc7XG4gIH0gLy8gY2FsY3VsYXRlIGNvZWZmaWNpZW50c1xuXG5cbiAgaWYgKDEuMCAtIGNvc29tID4gZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIC8vIHN0YW5kYXJkIGNhc2UgKHNsZXJwKVxuICAgIG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICBzaW5vbSA9IE1hdGguc2luKG9tZWdhKTtcbiAgICBzY2FsZTAgPSBNYXRoLnNpbigoMS4wIC0gdCkgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XG4gIH0gZWxzZSB7XG4gICAgLy8gXCJmcm9tXCIgYW5kIFwidG9cIiBxdWF0ZXJuaW9ucyBhcmUgdmVyeSBjbG9zZVxuICAgIC8vICAuLi4gc28gd2UgY2FuIGRvIGEgbGluZWFyIGludGVycG9sYXRpb25cbiAgICBzY2FsZTAgPSAxLjAgLSB0O1xuICAgIHNjYWxlMSA9IHQ7XG4gIH0gLy8gY2FsY3VsYXRlIGZpbmFsIHZhbHVlc1xuXG5cbiAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgb3V0WzFdID0gc2NhbGUwICogYXkgKyBzY2FsZTEgKiBieTtcbiAgb3V0WzJdID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcbiAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHVuaXQgcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb20ob3V0KSB7XG4gIC8vIEltcGxlbWVudGF0aW9uIG9mIGh0dHA6Ly9wbGFubmluZy5jcy51aXVjLmVkdS9ub2RlMTk4Lmh0bWxcbiAgLy8gVE9ETzogQ2FsbGluZyByYW5kb20gMyB0aW1lcyBpcyBwcm9iYWJseSBub3QgdGhlIGZhc3Rlc3Qgc29sdXRpb25cbiAgdmFyIHUxID0gZ2xNYXRyaXguUkFORE9NKCk7XG4gIHZhciB1MiA9IGdsTWF0cml4LlJBTkRPTSgpO1xuICB2YXIgdTMgPSBnbE1hdHJpeC5SQU5ET00oKTtcbiAgdmFyIHNxcnQxTWludXNVMSA9IE1hdGguc3FydCgxIC0gdTEpO1xuICB2YXIgc3FydFUxID0gTWF0aC5zcXJ0KHUxKTtcbiAgb3V0WzBdID0gc3FydDFNaW51c1UxICogTWF0aC5zaW4oMi4wICogTWF0aC5QSSAqIHUyKTtcbiAgb3V0WzFdID0gc3FydDFNaW51c1UxICogTWF0aC5jb3MoMi4wICogTWF0aC5QSSAqIHUyKTtcbiAgb3V0WzJdID0gc3FydFUxICogTWF0aC5zaW4oMi4wICogTWF0aC5QSSAqIHUzKTtcbiAgb3V0WzNdID0gc3FydFUxICogTWF0aC5jb3MoMi4wICogTWF0aC5QSSAqIHUzKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBvZiBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgZG90ID0gYTAgKiBhMCArIGExICogYTEgKyBhMiAqIGEyICsgYTMgKiBhMztcbiAgdmFyIGludkRvdCA9IGRvdCA/IDEuMCAvIGRvdCA6IDA7IC8vIFRPRE86IFdvdWxkIGJlIGZhc3RlciB0byByZXR1cm4gWzAsMCwwLDBdIGltbWVkaWF0ZWx5IGlmIGRvdCA9PSAwXG5cbiAgb3V0WzBdID0gLWEwICogaW52RG90O1xuICBvdXRbMV0gPSAtYTEgKiBpbnZEb3Q7XG4gIG91dFsyXSA9IC1hMiAqIGludkRvdDtcbiAgb3V0WzNdID0gYTMgKiBpbnZEb3Q7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIHF1YXRcbiAqIElmIHRoZSBxdWF0ZXJuaW9uIGlzIG5vcm1hbGl6ZWQsIHRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyIHRoYW4gcXVhdC5pbnZlcnNlIGFuZCBwcm9kdWNlcyB0aGUgc2FtZSByZXN1bHQuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBjb25qdWdhdGUgb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29uanVnYXRlKG91dCwgYSkge1xuICBvdXRbMF0gPSAtYVswXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIG91dFsyXSA9IC1hWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiAzeDMgcm90YXRpb24gbWF0cml4LlxuICpcbiAqIE5PVEU6IFRoZSByZXN1bHRhbnQgcXVhdGVybmlvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28geW91IHNob3VsZCBiZSBzdXJlXG4gKiB0byByZW5vcm1hbGl6ZSB0aGUgcXVhdGVybmlvbiB5b3Vyc2VsZiB3aGVyZSBuZWNlc3NhcnkuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gbSByb3RhdGlvbiBtYXRyaXhcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0MyhvdXQsIG0pIHtcbiAgLy8gQWxnb3JpdGhtIGluIEtlbiBTaG9lbWFrZSdzIGFydGljbGUgaW4gMTk4NyBTSUdHUkFQSCBjb3Vyc2Ugbm90ZXNcbiAgLy8gYXJ0aWNsZSBcIlF1YXRlcm5pb24gQ2FsY3VsdXMgYW5kIEZhc3QgQW5pbWF0aW9uXCIuXG4gIHZhciBmVHJhY2UgPSBtWzBdICsgbVs0XSArIG1bOF07XG4gIHZhciBmUm9vdDtcblxuICBpZiAoZlRyYWNlID4gMC4wKSB7XG4gICAgLy8gfHd8ID4gMS8yLCBtYXkgYXMgd2VsbCBjaG9vc2UgdyA+IDEvMlxuICAgIGZSb290ID0gTWF0aC5zcXJ0KGZUcmFjZSArIDEuMCk7IC8vIDJ3XG5cbiAgICBvdXRbM10gPSAwLjUgKiBmUm9vdDtcbiAgICBmUm9vdCA9IDAuNSAvIGZSb290OyAvLyAxLyg0dylcblxuICAgIG91dFswXSA9IChtWzVdIC0gbVs3XSkgKiBmUm9vdDtcbiAgICBvdXRbMV0gPSAobVs2XSAtIG1bMl0pICogZlJvb3Q7XG4gICAgb3V0WzJdID0gKG1bMV0gLSBtWzNdKSAqIGZSb290O1xuICB9IGVsc2Uge1xuICAgIC8vIHx3fCA8PSAxLzJcbiAgICB2YXIgaSA9IDA7XG4gICAgaWYgKG1bNF0gPiBtWzBdKSBpID0gMTtcbiAgICBpZiAobVs4XSA+IG1baSAqIDMgKyBpXSkgaSA9IDI7XG4gICAgdmFyIGogPSAoaSArIDEpICUgMztcbiAgICB2YXIgayA9IChpICsgMikgJSAzO1xuICAgIGZSb290ID0gTWF0aC5zcXJ0KG1baSAqIDMgKyBpXSAtIG1baiAqIDMgKyBqXSAtIG1bayAqIDMgKyBrXSArIDEuMCk7XG4gICAgb3V0W2ldID0gMC41ICogZlJvb3Q7XG4gICAgZlJvb3QgPSAwLjUgLyBmUm9vdDtcbiAgICBvdXRbM10gPSAobVtqICogMyArIGtdIC0gbVtrICogMyArIGpdKSAqIGZSb290O1xuICAgIG91dFtqXSA9IChtW2ogKiAzICsgaV0gKyBtW2kgKiAzICsgal0pICogZlJvb3Q7XG4gICAgb3V0W2tdID0gKG1bayAqIDMgKyBpXSArIG1baSAqIDMgKyBrXSkgKiBmUm9vdDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGV1bGVyIGFuZ2xlIHgsIHksIHouXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3h9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWCBheGlzIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge3l9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWSBheGlzIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge3p9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWiBheGlzIGluIGRlZ3JlZXMuXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbUV1bGVyKG91dCwgeCwgeSwgeikge1xuICB2YXIgaGFsZlRvUmFkID0gMC41ICogTWF0aC5QSSAvIDE4MC4wO1xuICB4ICo9IGhhbGZUb1JhZDtcbiAgeSAqPSBoYWxmVG9SYWQ7XG4gIHogKj0gaGFsZlRvUmFkO1xuICB2YXIgc3ggPSBNYXRoLnNpbih4KTtcbiAgdmFyIGN4ID0gTWF0aC5jb3MoeCk7XG4gIHZhciBzeSA9IE1hdGguc2luKHkpO1xuICB2YXIgY3kgPSBNYXRoLmNvcyh5KTtcbiAgdmFyIHN6ID0gTWF0aC5zaW4oeik7XG4gIHZhciBjeiA9IE1hdGguY29zKHopO1xuICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogLSBjeCAqIHN5ICogc3o7XG4gIG91dFsxXSA9IGN4ICogc3kgKiBjeiArIHN4ICogY3kgKiBzejtcbiAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICBvdXRbM10gPSBjeCAqIGN5ICogY3ogKyBzeCAqIHN5ICogc3o7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBxdWF0ZW5pb25cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJxdWF0KFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIsIFwiICsgYVszXSArIFwiKVwiO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdGVybmlvbiB0byBjbG9uZVxuICogQHJldHVybnMge3F1YXR9IGEgbmV3IHF1YXRlcm5pb25cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgY2xvbmUgPSB2ZWM0LmNsb25lO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtxdWF0fSBhIG5ldyBxdWF0ZXJuaW9uXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGZyb21WYWx1ZXMgPSB2ZWM0LmZyb21WYWx1ZXM7XG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBxdWF0IHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSBzb3VyY2UgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBjb3B5ID0gdmVjNC5jb3B5O1xuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBxdWF0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNldCA9IHZlYzQuc2V0O1xuLyoqXG4gKiBBZGRzIHR3byBxdWF0J3NcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgYWRkID0gdmVjNC5hZGQ7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdC5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcbiAqIFNjYWxlcyBhIHF1YXQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNjYWxlID0gdmVjNC5zY2FsZTtcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZG90ID0gdmVjNC5kb3Q7XG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGxlcnAgPSB2ZWM0LmxlcnA7XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuXG5leHBvcnQgdmFyIGxlbmd0aCA9IHZlYzQubGVuZ3RoO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQubGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBsZW4gPSBsZW5ndGg7XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3F1YXJlZExlbmd0aCA9IHZlYzQuc3F1YXJlZExlbmd0aDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBxdWF0LnNxdWFyZWRMZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XG4vKipcbiAqIE5vcm1hbGl6ZSBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXRlcm5pb24gdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG5vcm1hbGl6ZSA9IHZlYzQubm9ybWFsaXplO1xuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBxdWF0ZXJuaW9ucyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgVGhlIGZpcnN0IHF1YXRlcm5pb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiBUaGUgc2Vjb25kIHF1YXRlcm5pb24uXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgdmFyIGV4YWN0RXF1YWxzID0gdmVjNC5leGFjdEVxdWFscztcbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcXVhdGVybmlvbnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCB2YXIgZXF1YWxzID0gdmVjNC5lcXVhbHM7XG4vKipcbiAqIFNldHMgYSBxdWF0ZXJuaW9uIHRvIHJlcHJlc2VudCB0aGUgc2hvcnRlc3Qgcm90YXRpb24gZnJvbSBvbmVcbiAqIHZlY3RvciB0byBhbm90aGVyLlxuICpcbiAqIEJvdGggdmVjdG9ycyBhcmUgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aC5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgaW5pdGlhbCB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBkZXN0aW5hdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgdmFyIHJvdGF0aW9uVG8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0bXB2ZWMzID0gdmVjMy5jcmVhdGUoKTtcbiAgdmFyIHhVbml0VmVjMyA9IHZlYzMuZnJvbVZhbHVlcygxLCAwLCAwKTtcbiAgdmFyIHlVbml0VmVjMyA9IHZlYzMuZnJvbVZhbHVlcygwLCAxLCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvdXQsIGEsIGIpIHtcbiAgICB2YXIgZG90ID0gdmVjMy5kb3QoYSwgYik7XG5cbiAgICBpZiAoZG90IDwgLTAuOTk5OTk5KSB7XG4gICAgICB2ZWMzLmNyb3NzKHRtcHZlYzMsIHhVbml0VmVjMywgYSk7XG4gICAgICBpZiAodmVjMy5sZW4odG1wdmVjMykgPCAwLjAwMDAwMSkgdmVjMy5jcm9zcyh0bXB2ZWMzLCB5VW5pdFZlYzMsIGEpO1xuICAgICAgdmVjMy5ub3JtYWxpemUodG1wdmVjMywgdG1wdmVjMyk7XG4gICAgICBzZXRBeGlzQW5nbGUob3V0LCB0bXB2ZWMzLCBNYXRoLlBJKTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfSBlbHNlIGlmIChkb3QgPiAwLjk5OTk5OSkge1xuICAgICAgb3V0WzBdID0gMDtcbiAgICAgIG91dFsxXSA9IDA7XG4gICAgICBvdXRbMl0gPSAwO1xuICAgICAgb3V0WzNdID0gMTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZlYzMuY3Jvc3ModG1wdmVjMywgYSwgYik7XG4gICAgICBvdXRbMF0gPSB0bXB2ZWMzWzBdO1xuICAgICAgb3V0WzFdID0gdG1wdmVjM1sxXTtcbiAgICAgIG91dFsyXSA9IHRtcHZlYzNbMl07XG4gICAgICBvdXRbM10gPSAxICsgZG90O1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZShvdXQsIG91dCk7XG4gICAgfVxuICB9O1xufSgpO1xuLyoqXG4gKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgaW50ZXJwb2xhdGlvbiB3aXRoIHR3byBjb250cm9sIHBvaW50c1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGMgdGhlIHRoaXJkIG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBkIHRoZSBmb3VydGggb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCB2YXIgc3FsZXJwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGVtcDEgPSBjcmVhdGUoKTtcbiAgdmFyIHRlbXAyID0gY3JlYXRlKCk7XG4gIHJldHVybiBmdW5jdGlvbiAob3V0LCBhLCBiLCBjLCBkLCB0KSB7XG4gICAgc2xlcnAodGVtcDEsIGEsIGQsIHQpO1xuICAgIHNsZXJwKHRlbXAyLCBiLCBjLCB0KTtcbiAgICBzbGVycChvdXQsIHRlbXAxLCB0ZW1wMiwgMiAqIHQgKiAoMSAtIHQpKTtcbiAgICByZXR1cm4gb3V0O1xuICB9O1xufSgpO1xuLyoqXG4gKiBTZXRzIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbiB3aXRoIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlblxuICogYXhlcy4gRWFjaCBheGlzIGlzIGEgdmVjMyBhbmQgaXMgZXhwZWN0ZWQgdG8gYmUgdW5pdCBsZW5ndGggYW5kXG4gKiBwZXJwZW5kaWN1bGFyIHRvIGFsbCBvdGhlciBzcGVjaWZpZWQgYXhlcy5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdmlldyAgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIHZpZXdpbmcgZGlyZWN0aW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gcmlnaHQgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2FsIFwicmlnaHRcIiBkaXJlY3Rpb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB1cCAgICB0aGUgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYWwgXCJ1cFwiIGRpcmVjdGlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCB2YXIgc2V0QXhlcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG1hdHIgPSBtYXQzLmNyZWF0ZSgpO1xuICByZXR1cm4gZnVuY3Rpb24gKG91dCwgdmlldywgcmlnaHQsIHVwKSB7XG4gICAgbWF0clswXSA9IHJpZ2h0WzBdO1xuICAgIG1hdHJbM10gPSByaWdodFsxXTtcbiAgICBtYXRyWzZdID0gcmlnaHRbMl07XG4gICAgbWF0clsxXSA9IHVwWzBdO1xuICAgIG1hdHJbNF0gPSB1cFsxXTtcbiAgICBtYXRyWzddID0gdXBbMl07XG4gICAgbWF0clsyXSA9IC12aWV3WzBdO1xuICAgIG1hdHJbNV0gPSAtdmlld1sxXTtcbiAgICBtYXRyWzhdID0gLXZpZXdbMl07XG4gICAgcmV0dXJuIG5vcm1hbGl6ZShvdXQsIGZyb21NYXQzKG91dCwgbWF0cikpO1xuICB9O1xufSgpOyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuaW1wb3J0ICogYXMgcXVhdCBmcm9tIFwiLi9xdWF0LmpzXCI7XG5pbXBvcnQgKiBhcyBtYXQ0IGZyb20gXCIuL21hdDQuanNcIjtcbi8qKlxuICogRHVhbCBRdWF0ZXJuaW9uPGJyPlxuICogRm9ybWF0OiBbcmVhbCwgZHVhbF08YnI+XG4gKiBRdWF0ZXJuaW9uIGZvcm1hdDogWFlaVzxicj5cbiAqIE1ha2Ugc3VyZSB0byBoYXZlIG5vcm1hbGl6ZWQgZHVhbCBxdWF0ZXJuaW9ucywgb3RoZXJ3aXNlIHRoZSBmdW5jdGlvbnMgbWF5IG5vdCB3b3JrIGFzIGludGVuZGVkLjxicj5cbiAqIEBtb2R1bGUgcXVhdDJcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgZHVhbCBxdWF0XG4gKlxuICogQHJldHVybnMge3F1YXQyfSBhIG5ldyBkdWFsIHF1YXRlcm5pb24gW3JlYWwgLT4gcm90YXRpb24sIGR1YWwgLT4gdHJhbnNsYXRpb25dXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIGRxID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOCk7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgZHFbMF0gPSAwO1xuICAgIGRxWzFdID0gMDtcbiAgICBkcVsyXSA9IDA7XG4gICAgZHFbNF0gPSAwO1xuICAgIGRxWzVdID0gMDtcbiAgICBkcVs2XSA9IDA7XG4gICAgZHFbN10gPSAwO1xuICB9XG5cbiAgZHFbM10gPSAxO1xuICByZXR1cm4gZHE7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcXVhdCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgZHVhbCBxdWF0ZXJuaW9uIHRvIGNsb25lXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG5ldyBkdWFsIHF1YXRlcm5pb25cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBkcSA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDgpO1xuICBkcVswXSA9IGFbMF07XG4gIGRxWzFdID0gYVsxXTtcbiAgZHFbMl0gPSBhWzJdO1xuICBkcVszXSA9IGFbM107XG4gIGRxWzRdID0gYVs0XTtcbiAgZHFbNV0gPSBhWzVdO1xuICBkcVs2XSA9IGFbNl07XG4gIGRxWzddID0gYVs3XTtcbiAgcmV0dXJuIGRxO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGR1YWwgcXVhdCBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geDEgWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5MSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHoxIFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdzEgVyBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MiBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkyIFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gejIgWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3MiBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3F1YXQyfSBuZXcgZHVhbCBxdWF0ZXJuaW9uXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyh4MSwgeTEsIHoxLCB3MSwgeDIsIHkyLCB6MiwgdzIpIHtcbiAgdmFyIGRxID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOCk7XG4gIGRxWzBdID0geDE7XG4gIGRxWzFdID0geTE7XG4gIGRxWzJdID0gejE7XG4gIGRxWzNdID0gdzE7XG4gIGRxWzRdID0geDI7XG4gIGRxWzVdID0geTI7XG4gIGRxWzZdID0gejI7XG4gIGRxWzddID0gdzI7XG4gIHJldHVybiBkcTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBkdWFsIHF1YXQgZnJvbSB0aGUgZ2l2ZW4gdmFsdWVzIChxdWF0IGFuZCB0cmFuc2xhdGlvbilcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geDEgWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5MSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHoxIFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdzEgVyBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MiBYIGNvbXBvbmVudCAodHJhbnNsYXRpb24pXG4gKiBAcGFyYW0ge051bWJlcn0geTIgWSBjb21wb25lbnQgKHRyYW5zbGF0aW9uKVxuICogQHBhcmFtIHtOdW1iZXJ9IHoyIFogY29tcG9uZW50ICh0cmFuc2xhdGlvbilcbiAqIEByZXR1cm5zIHtxdWF0Mn0gbmV3IGR1YWwgcXVhdGVybmlvblxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uVmFsdWVzKHgxLCB5MSwgejEsIHcxLCB4MiwgeTIsIHoyKSB7XG4gIHZhciBkcSA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDgpO1xuICBkcVswXSA9IHgxO1xuICBkcVsxXSA9IHkxO1xuICBkcVsyXSA9IHoxO1xuICBkcVszXSA9IHcxO1xuICB2YXIgYXggPSB4MiAqIDAuNSxcbiAgICAgIGF5ID0geTIgKiAwLjUsXG4gICAgICBheiA9IHoyICogMC41O1xuICBkcVs0XSA9IGF4ICogdzEgKyBheSAqIHoxIC0gYXogKiB5MTtcbiAgZHFbNV0gPSBheSAqIHcxICsgYXogKiB4MSAtIGF4ICogejE7XG4gIGRxWzZdID0gYXogKiB3MSArIGF4ICogeTEgLSBheSAqIHgxO1xuICBkcVs3XSA9IC1heCAqIHgxIC0gYXkgKiB5MSAtIGF6ICogejE7XG4gIHJldHVybiBkcTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGR1YWwgcXVhdCBmcm9tIGEgcXVhdGVybmlvbiBhbmQgYSB0cmFuc2xhdGlvblxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gZHVhbCBxdWF0ZXJuaW9uIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBhIG5vcm1hbGl6ZWQgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHQgdHJhbmxhdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHtxdWF0Mn0gZHVhbCBxdWF0ZXJuaW9uIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBxLCB0KSB7XG4gIHZhciBheCA9IHRbMF0gKiAwLjUsXG4gICAgICBheSA9IHRbMV0gKiAwLjUsXG4gICAgICBheiA9IHRbMl0gKiAwLjUsXG4gICAgICBieCA9IHFbMF0sXG4gICAgICBieSA9IHFbMV0sXG4gICAgICBieiA9IHFbMl0sXG4gICAgICBidyA9IHFbM107XG4gIG91dFswXSA9IGJ4O1xuICBvdXRbMV0gPSBieTtcbiAgb3V0WzJdID0gYno7XG4gIG91dFszXSA9IGJ3O1xuICBvdXRbNF0gPSBheCAqIGJ3ICsgYXkgKiBieiAtIGF6ICogYnk7XG4gIG91dFs1XSA9IGF5ICogYncgKyBheiAqIGJ4IC0gYXggKiBiejtcbiAgb3V0WzZdID0gYXogKiBidyArIGF4ICogYnkgLSBheSAqIGJ4O1xuICBvdXRbN10gPSAtYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgZHVhbCBxdWF0IGZyb20gYSB0cmFuc2xhdGlvblxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gZHVhbCBxdWF0ZXJuaW9uIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdCB0cmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHtxdWF0Mn0gZHVhbCBxdWF0ZXJuaW9uIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uKG91dCwgdCkge1xuICBvdXRbMF0gPSAwO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAxO1xuICBvdXRbNF0gPSB0WzBdICogMC41O1xuICBvdXRbNV0gPSB0WzFdICogMC41O1xuICBvdXRbNl0gPSB0WzJdICogMC41O1xuICBvdXRbN10gPSAwO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgZHVhbCBxdWF0IGZyb20gYSBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIHRoZSBxdWF0ZXJuaW9uXG4gKiBAcmV0dXJucyB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHEpIHtcbiAgb3V0WzBdID0gcVswXTtcbiAgb3V0WzFdID0gcVsxXTtcbiAgb3V0WzJdID0gcVsyXTtcbiAgb3V0WzNdID0gcVszXTtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gMDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBkdWFsIHF1YXQgZnJvbSBhIG1hdHJpeCAoNHg0KVxuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgZHVhbCBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4XG4gKiBAcmV0dXJucyB7cXVhdDJ9IGR1YWwgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQ0KG91dCwgYSkge1xuICAvL1RPRE8gT3B0aW1pemUgdGhpc1xuICB2YXIgb3V0ZXIgPSBxdWF0LmNyZWF0ZSgpO1xuICBtYXQ0LmdldFJvdGF0aW9uKG91dGVyLCBhKTtcbiAgdmFyIHQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgbWF0NC5nZXRUcmFuc2xhdGlvbih0LCBhKTtcbiAgZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBvdXRlciwgdCk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBkdWFsIHF1YXQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIHRoZSBzb3VyY2UgZHVhbCBxdWF0ZXJuaW9uXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCBhIGR1YWwgcXVhdCB0byB0aGUgaWRlbnRpdHkgZHVhbCBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDA7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDE7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIGR1YWwgcXVhdCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHgxIFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geTEgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6MSBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcxIFcgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geDIgWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5MiBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHoyIFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdzIgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeDEsIHkxLCB6MSwgdzEsIHgyLCB5MiwgejIsIHcyKSB7XG4gIG91dFswXSA9IHgxO1xuICBvdXRbMV0gPSB5MTtcbiAgb3V0WzJdID0gejE7XG4gIG91dFszXSA9IHcxO1xuICBvdXRbNF0gPSB4MjtcbiAgb3V0WzVdID0geTI7XG4gIG91dFs2XSA9IHoyO1xuICBvdXRbN10gPSB3MjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2V0cyB0aGUgcmVhbCBwYXJ0IG9mIGEgZHVhbCBxdWF0XG4gKiBAcGFyYW0gIHtxdWF0fSBvdXQgcmVhbCBwYXJ0XG4gKiBAcGFyYW0gIHtSZWFkb25seVF1YXQyfSBhIER1YWwgUXVhdGVybmlvblxuICogQHJldHVybiB7cXVhdH0gcmVhbCBwYXJ0XG4gKi9cblxuZXhwb3J0IHZhciBnZXRSZWFsID0gcXVhdC5jb3B5O1xuLyoqXG4gKiBHZXRzIHRoZSBkdWFsIHBhcnQgb2YgYSBkdWFsIHF1YXRcbiAqIEBwYXJhbSAge3F1YXR9IG91dCBkdWFsIHBhcnRcbiAqIEBwYXJhbSAge1JlYWRvbmx5UXVhdDJ9IGEgRHVhbCBRdWF0ZXJuaW9uXG4gKiBAcmV0dXJuIHtxdWF0fSBkdWFsIHBhcnRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RHVhbChvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVs0XTtcbiAgb3V0WzFdID0gYVs1XTtcbiAgb3V0WzJdID0gYVs2XTtcbiAgb3V0WzNdID0gYVs3XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSByZWFsIGNvbXBvbmVudCBvZiBhIGR1YWwgcXVhdCB0byB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJlYWwgcGFydFxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc2V0UmVhbCA9IHF1YXQuY29weTtcbi8qKlxuICogU2V0IHRoZSBkdWFsIGNvbXBvbmVudCBvZiBhIGR1YWwgcXVhdCB0byB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIGR1YWwgcGFydFxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREdWFsKG91dCwgcSkge1xuICBvdXRbNF0gPSBxWzBdO1xuICBvdXRbNV0gPSBxWzFdO1xuICBvdXRbNl0gPSBxWzJdO1xuICBvdXRbN10gPSBxWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBHZXRzIHRoZSB0cmFuc2xhdGlvbiBvZiBhIG5vcm1hbGl6ZWQgZHVhbCBxdWF0XG4gKiBAcGFyYW0gIHt2ZWMzfSBvdXQgdHJhbnNsYXRpb25cbiAqIEBwYXJhbSAge1JlYWRvbmx5UXVhdDJ9IGEgRHVhbCBRdWF0ZXJuaW9uIHRvIGJlIGRlY29tcG9zZWRcbiAqIEByZXR1cm4ge3ZlYzN9IHRyYW5zbGF0aW9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zbGF0aW9uKG91dCwgYSkge1xuICB2YXIgYXggPSBhWzRdLFxuICAgICAgYXkgPSBhWzVdLFxuICAgICAgYXogPSBhWzZdLFxuICAgICAgYXcgPSBhWzddLFxuICAgICAgYnggPSAtYVswXSxcbiAgICAgIGJ5ID0gLWFbMV0sXG4gICAgICBieiA9IC1hWzJdLFxuICAgICAgYncgPSBhWzNdO1xuICBvdXRbMF0gPSAoYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSkgKiAyO1xuICBvdXRbMV0gPSAoYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieikgKiAyO1xuICBvdXRbMl0gPSAoYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCkgKiAyO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2xhdGVzIGEgZHVhbCBxdWF0IGJ5IHRoZSBnaXZlbiB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZHVhbCBxdWF0ZXJuaW9uIHRvIHRyYW5zbGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICB2YXIgYXgxID0gYVswXSxcbiAgICAgIGF5MSA9IGFbMV0sXG4gICAgICBhejEgPSBhWzJdLFxuICAgICAgYXcxID0gYVszXSxcbiAgICAgIGJ4MSA9IHZbMF0gKiAwLjUsXG4gICAgICBieTEgPSB2WzFdICogMC41LFxuICAgICAgYnoxID0gdlsyXSAqIDAuNSxcbiAgICAgIGF4MiA9IGFbNF0sXG4gICAgICBheTIgPSBhWzVdLFxuICAgICAgYXoyID0gYVs2XSxcbiAgICAgIGF3MiA9IGFbN107XG4gIG91dFswXSA9IGF4MTtcbiAgb3V0WzFdID0gYXkxO1xuICBvdXRbMl0gPSBhejE7XG4gIG91dFszXSA9IGF3MTtcbiAgb3V0WzRdID0gYXcxICogYngxICsgYXkxICogYnoxIC0gYXoxICogYnkxICsgYXgyO1xuICBvdXRbNV0gPSBhdzEgKiBieTEgKyBhejEgKiBieDEgLSBheDEgKiBiejEgKyBheTI7XG4gIG91dFs2XSA9IGF3MSAqIGJ6MSArIGF4MSAqIGJ5MSAtIGF5MSAqIGJ4MSArIGF6MjtcbiAgb3V0WzddID0gLWF4MSAqIGJ4MSAtIGF5MSAqIGJ5MSAtIGF6MSAqIGJ6MSArIGF3MjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIGR1YWwgcXVhdCBhcm91bmQgdGhlIFggYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIHRoZSBkdWFsIHF1YXRlcm5pb24gdG8gcm90YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIGhvdyBmYXIgc2hvdWxkIHRoZSByb3RhdGlvbiBiZVxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWChvdXQsIGEsIHJhZCkge1xuICB2YXIgYnggPSAtYVswXSxcbiAgICAgIGJ5ID0gLWFbMV0sXG4gICAgICBieiA9IC1hWzJdLFxuICAgICAgYncgPSBhWzNdLFxuICAgICAgYXggPSBhWzRdLFxuICAgICAgYXkgPSBhWzVdLFxuICAgICAgYXogPSBhWzZdLFxuICAgICAgYXcgPSBhWzddLFxuICAgICAgYXgxID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSxcbiAgICAgIGF5MSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnosXG4gICAgICBhejEgPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4LFxuICAgICAgYXcxID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcbiAgcXVhdC5yb3RhdGVYKG91dCwgYSwgcmFkKTtcbiAgYnggPSBvdXRbMF07XG4gIGJ5ID0gb3V0WzFdO1xuICBieiA9IG91dFsyXTtcbiAgYncgPSBvdXRbM107XG4gIG91dFs0XSA9IGF4MSAqIGJ3ICsgYXcxICogYnggKyBheTEgKiBieiAtIGF6MSAqIGJ5O1xuICBvdXRbNV0gPSBheTEgKiBidyArIGF3MSAqIGJ5ICsgYXoxICogYnggLSBheDEgKiBiejtcbiAgb3V0WzZdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XG4gIG91dFs3XSA9IGF3MSAqIGJ3IC0gYXgxICogYnggLSBheTEgKiBieSAtIGF6MSAqIGJ6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgZHVhbCBxdWF0IGFyb3VuZCB0aGUgWSBheGlzXG4gKlxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgaG93IGZhciBzaG91bGQgdGhlIHJvdGF0aW9uIGJlXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XG4gIHZhciBieCA9IC1hWzBdLFxuICAgICAgYnkgPSAtYVsxXSxcbiAgICAgIGJ6ID0gLWFbMl0sXG4gICAgICBidyA9IGFbM10sXG4gICAgICBheCA9IGFbNF0sXG4gICAgICBheSA9IGFbNV0sXG4gICAgICBheiA9IGFbNl0sXG4gICAgICBhdyA9IGFbN10sXG4gICAgICBheDEgPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxuICAgICAgYXkxID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieixcbiAgICAgIGF6MSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngsXG4gICAgICBhdzEgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICBxdWF0LnJvdGF0ZVkob3V0LCBhLCByYWQpO1xuICBieCA9IG91dFswXTtcbiAgYnkgPSBvdXRbMV07XG4gIGJ6ID0gb3V0WzJdO1xuICBidyA9IG91dFszXTtcbiAgb3V0WzRdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XG4gIG91dFs1XSA9IGF5MSAqIGJ3ICsgYXcxICogYnkgKyBhejEgKiBieCAtIGF4MSAqIGJ6O1xuICBvdXRbNl0gPSBhejEgKiBidyArIGF3MSAqIGJ6ICsgYXgxICogYnkgLSBheTEgKiBieDtcbiAgb3V0WzddID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYXJvdW5kIHRoZSBaIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZHVhbCBxdWF0ZXJuaW9uIHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBob3cgZmFyIHNob3VsZCB0aGUgcm90YXRpb24gYmVcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCByYWQpIHtcbiAgdmFyIGJ4ID0gLWFbMF0sXG4gICAgICBieSA9IC1hWzFdLFxuICAgICAgYnogPSAtYVsyXSxcbiAgICAgIGJ3ID0gYVszXSxcbiAgICAgIGF4ID0gYVs0XSxcbiAgICAgIGF5ID0gYVs1XSxcbiAgICAgIGF6ID0gYVs2XSxcbiAgICAgIGF3ID0gYVs3XSxcbiAgICAgIGF4MSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnksXG4gICAgICBheTEgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6LFxuICAgICAgYXoxID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCxcbiAgICAgIGF3MSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gIHF1YXQucm90YXRlWihvdXQsIGEsIHJhZCk7XG4gIGJ4ID0gb3V0WzBdO1xuICBieSA9IG91dFsxXTtcbiAgYnogPSBvdXRbMl07XG4gIGJ3ID0gb3V0WzNdO1xuICBvdXRbNF0gPSBheDEgKiBidyArIGF3MSAqIGJ4ICsgYXkxICogYnogLSBhejEgKiBieTtcbiAgb3V0WzVdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XG4gIG91dFs2XSA9IGF6MSAqIGJ3ICsgYXcxICogYnogKyBheDEgKiBieSAtIGF5MSAqIGJ4O1xuICBvdXRbN10gPSBhdzEgKiBidyAtIGF4MSAqIGJ4IC0gYXkxICogYnkgLSBhejEgKiBiejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIGR1YWwgcXVhdCBieSBhIGdpdmVuIHF1YXRlcm5pb24gKGEgKiBxKVxuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIHRoZSBkdWFsIHF1YXRlcm5pb24gdG8gcm90YXRlXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHJvdGF0ZSBieVxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlQnlRdWF0QXBwZW5kKG91dCwgYSwgcSkge1xuICB2YXIgcXggPSBxWzBdLFxuICAgICAgcXkgPSBxWzFdLFxuICAgICAgcXogPSBxWzJdLFxuICAgICAgcXcgPSBxWzNdLFxuICAgICAgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdLFxuICAgICAgYXcgPSBhWzNdO1xuICBvdXRbMF0gPSBheCAqIHF3ICsgYXcgKiBxeCArIGF5ICogcXogLSBheiAqIHF5O1xuICBvdXRbMV0gPSBheSAqIHF3ICsgYXcgKiBxeSArIGF6ICogcXggLSBheCAqIHF6O1xuICBvdXRbMl0gPSBheiAqIHF3ICsgYXcgKiBxeiArIGF4ICogcXkgLSBheSAqIHF4O1xuICBvdXRbM10gPSBhdyAqIHF3IC0gYXggKiBxeCAtIGF5ICogcXkgLSBheiAqIHF6O1xuICBheCA9IGFbNF07XG4gIGF5ID0gYVs1XTtcbiAgYXogPSBhWzZdO1xuICBhdyA9IGFbN107XG4gIG91dFs0XSA9IGF4ICogcXcgKyBhdyAqIHF4ICsgYXkgKiBxeiAtIGF6ICogcXk7XG4gIG91dFs1XSA9IGF5ICogcXcgKyBhdyAqIHF5ICsgYXogKiBxeCAtIGF4ICogcXo7XG4gIG91dFs2XSA9IGF6ICogcXcgKyBhdyAqIHF6ICsgYXggKiBxeSAtIGF5ICogcXg7XG4gIG91dFs3XSA9IGF3ICogcXcgLSBheCAqIHF4IC0gYXkgKiBxeSAtIGF6ICogcXo7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYnkgYSBnaXZlbiBxdWF0ZXJuaW9uIChxICogYSlcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIHF1YXRlcm5pb24gdG8gcm90YXRlIGJ5XG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUJ5UXVhdFByZXBlbmQob3V0LCBxLCBhKSB7XG4gIHZhciBxeCA9IHFbMF0sXG4gICAgICBxeSA9IHFbMV0sXG4gICAgICBxeiA9IHFbMl0sXG4gICAgICBxdyA9IHFbM10sXG4gICAgICBieCA9IGFbMF0sXG4gICAgICBieSA9IGFbMV0sXG4gICAgICBieiA9IGFbMl0sXG4gICAgICBidyA9IGFbM107XG4gIG91dFswXSA9IHF4ICogYncgKyBxdyAqIGJ4ICsgcXkgKiBieiAtIHF6ICogYnk7XG4gIG91dFsxXSA9IHF5ICogYncgKyBxdyAqIGJ5ICsgcXogKiBieCAtIHF4ICogYno7XG4gIG91dFsyXSA9IHF6ICogYncgKyBxdyAqIGJ6ICsgcXggKiBieSAtIHF5ICogYng7XG4gIG91dFszXSA9IHF3ICogYncgLSBxeCAqIGJ4IC0gcXkgKiBieSAtIHF6ICogYno7XG4gIGJ4ID0gYVs0XTtcbiAgYnkgPSBhWzVdO1xuICBieiA9IGFbNl07XG4gIGJ3ID0gYVs3XTtcbiAgb3V0WzRdID0gcXggKiBidyArIHF3ICogYnggKyBxeSAqIGJ6IC0gcXogKiBieTtcbiAgb3V0WzVdID0gcXkgKiBidyArIHF3ICogYnkgKyBxeiAqIGJ4IC0gcXggKiBiejtcbiAgb3V0WzZdID0gcXogKiBidyArIHF3ICogYnogKyBxeCAqIGJ5IC0gcXkgKiBieDtcbiAgb3V0WzddID0gcXcgKiBidyAtIHF4ICogYnggLSBxeSAqIGJ5IC0gcXogKiBiejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIGR1YWwgcXVhdCBhcm91bmQgYSBnaXZlbiBheGlzLiBEb2VzIHRoZSBub3JtYWxpc2F0aW9uIGF1dG9tYXRpY2FsbHlcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZHVhbCBxdWF0ZXJuaW9uIHRvIHJvdGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGF4aXMgdGhlIGF4aXMgdG8gcm90YXRlIGFyb3VuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCBob3cgZmFyIHRoZSByb3RhdGlvbiBzaG91bGQgYmVcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUFyb3VuZEF4aXMob3V0LCBhLCBheGlzLCByYWQpIHtcbiAgLy9TcGVjaWFsIGNhc2UgZm9yIHJhZCA9IDBcbiAgaWYgKE1hdGguYWJzKHJhZCkgPCBnbE1hdHJpeC5FUFNJTE9OKSB7XG4gICAgcmV0dXJuIGNvcHkob3V0LCBhKTtcbiAgfVxuXG4gIHZhciBheGlzTGVuZ3RoID0gTWF0aC5oeXBvdChheGlzWzBdLCBheGlzWzFdLCBheGlzWzJdKTtcbiAgcmFkID0gcmFkICogMC41O1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBieCA9IHMgKiBheGlzWzBdIC8gYXhpc0xlbmd0aDtcbiAgdmFyIGJ5ID0gcyAqIGF4aXNbMV0gLyBheGlzTGVuZ3RoO1xuICB2YXIgYnogPSBzICogYXhpc1syXSAvIGF4aXNMZW5ndGg7XG4gIHZhciBidyA9IE1hdGguY29zKHJhZCk7XG4gIHZhciBheDEgPSBhWzBdLFxuICAgICAgYXkxID0gYVsxXSxcbiAgICAgIGF6MSA9IGFbMl0sXG4gICAgICBhdzEgPSBhWzNdO1xuICBvdXRbMF0gPSBheDEgKiBidyArIGF3MSAqIGJ4ICsgYXkxICogYnogLSBhejEgKiBieTtcbiAgb3V0WzFdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XG4gIG91dFsyXSA9IGF6MSAqIGJ3ICsgYXcxICogYnogKyBheDEgKiBieSAtIGF5MSAqIGJ4O1xuICBvdXRbM10gPSBhdzEgKiBidyAtIGF4MSAqIGJ4IC0gYXkxICogYnkgLSBhejEgKiBiejtcbiAgdmFyIGF4ID0gYVs0XSxcbiAgICAgIGF5ID0gYVs1XSxcbiAgICAgIGF6ID0gYVs2XSxcbiAgICAgIGF3ID0gYVs3XTtcbiAgb3V0WzRdID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieTtcbiAgb3V0WzVdID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBiejtcbiAgb3V0WzZdID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieDtcbiAgb3V0WzddID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWRkcyB0d28gZHVhbCBxdWF0J3NcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICBvdXRbN10gPSBhWzddICsgYls3XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTXVsdGlwbGllcyB0d28gZHVhbCBxdWF0J3NcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIHZhciBheDAgPSBhWzBdLFxuICAgICAgYXkwID0gYVsxXSxcbiAgICAgIGF6MCA9IGFbMl0sXG4gICAgICBhdzAgPSBhWzNdLFxuICAgICAgYngxID0gYls0XSxcbiAgICAgIGJ5MSA9IGJbNV0sXG4gICAgICBiejEgPSBiWzZdLFxuICAgICAgYncxID0gYls3XSxcbiAgICAgIGF4MSA9IGFbNF0sXG4gICAgICBheTEgPSBhWzVdLFxuICAgICAgYXoxID0gYVs2XSxcbiAgICAgIGF3MSA9IGFbN10sXG4gICAgICBieDAgPSBiWzBdLFxuICAgICAgYnkwID0gYlsxXSxcbiAgICAgIGJ6MCA9IGJbMl0sXG4gICAgICBidzAgPSBiWzNdO1xuICBvdXRbMF0gPSBheDAgKiBidzAgKyBhdzAgKiBieDAgKyBheTAgKiBiejAgLSBhejAgKiBieTA7XG4gIG91dFsxXSA9IGF5MCAqIGJ3MCArIGF3MCAqIGJ5MCArIGF6MCAqIGJ4MCAtIGF4MCAqIGJ6MDtcbiAgb3V0WzJdID0gYXowICogYncwICsgYXcwICogYnowICsgYXgwICogYnkwIC0gYXkwICogYngwO1xuICBvdXRbM10gPSBhdzAgKiBidzAgLSBheDAgKiBieDAgLSBheTAgKiBieTAgLSBhejAgKiBiejA7XG4gIG91dFs0XSA9IGF4MCAqIGJ3MSArIGF3MCAqIGJ4MSArIGF5MCAqIGJ6MSAtIGF6MCAqIGJ5MSArIGF4MSAqIGJ3MCArIGF3MSAqIGJ4MCArIGF5MSAqIGJ6MCAtIGF6MSAqIGJ5MDtcbiAgb3V0WzVdID0gYXkwICogYncxICsgYXcwICogYnkxICsgYXowICogYngxIC0gYXgwICogYnoxICsgYXkxICogYncwICsgYXcxICogYnkwICsgYXoxICogYngwIC0gYXgxICogYnowO1xuICBvdXRbNl0gPSBhejAgKiBidzEgKyBhdzAgKiBiejEgKyBheDAgKiBieTEgLSBheTAgKiBieDEgKyBhejEgKiBidzAgKyBhdzEgKiBiejAgKyBheDEgKiBieTAgLSBheTEgKiBieDA7XG4gIG91dFs3XSA9IGF3MCAqIGJ3MSAtIGF4MCAqIGJ4MSAtIGF5MCAqIGJ5MSAtIGF6MCAqIGJ6MSArIGF3MSAqIGJ3MCAtIGF4MSAqIGJ4MCAtIGF5MSAqIGJ5MCAtIGF6MSAqIGJ6MDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBxdWF0Mi5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcbiAqIFNjYWxlcyBhIGR1YWwgcXVhdCBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZHVhbCBxdWF0IHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIGR1YWwgcXVhdCBieVxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIG91dFs0XSA9IGFbNF0gKiBiO1xuICBvdXRbNV0gPSBhWzVdICogYjtcbiAgb3V0WzZdID0gYVs2XSAqIGI7XG4gIG91dFs3XSA9IGFbN10gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gZHVhbCBxdWF0J3MgKFRoZSBkb3QgcHJvZHVjdCBvZiB0aGUgcmVhbCBwYXJ0cylcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZG90ID0gcXVhdC5kb3Q7XG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gZHVhbCBxdWF0cydzXG4gKiBOT1RFOiBUaGUgcmVzdWx0aW5nIGR1YWwgcXVhdGVybmlvbnMgd29uJ3QgYWx3YXlzIGJlIG5vcm1hbGl6ZWQgKFRoZSBlcnJvciBpcyBtb3N0IG5vdGljZWFibGUgd2hlbiB0ID0gMC41KVxuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdFxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xuICB2YXIgbXQgPSAxIC0gdDtcbiAgaWYgKGRvdChhLCBiKSA8IDApIHQgPSAtdDtcbiAgb3V0WzBdID0gYVswXSAqIG10ICsgYlswXSAqIHQ7XG4gIG91dFsxXSA9IGFbMV0gKiBtdCArIGJbMV0gKiB0O1xuICBvdXRbMl0gPSBhWzJdICogbXQgKyBiWzJdICogdDtcbiAgb3V0WzNdID0gYVszXSAqIG10ICsgYlszXSAqIHQ7XG4gIG91dFs0XSA9IGFbNF0gKiBtdCArIGJbNF0gKiB0O1xuICBvdXRbNV0gPSBhWzVdICogbXQgKyBiWzVdICogdDtcbiAgb3V0WzZdID0gYVs2XSAqIG10ICsgYls2XSAqIHQ7XG4gIG91dFs3XSA9IGFbN10gKiBtdCArIGJbN10gKiB0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG9mIGEgZHVhbCBxdWF0LiBJZiB0aGV5IGFyZSBub3JtYWxpemVkLCBjb25qdWdhdGUgaXMgY2hlYXBlclxuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIGR1YWwgcXVhdCB0byBjYWxjdWxhdGUgaW52ZXJzZSBvZlxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICB2YXIgc3FsZW4gPSBzcXVhcmVkTGVuZ3RoKGEpO1xuICBvdXRbMF0gPSAtYVswXSAvIHNxbGVuO1xuICBvdXRbMV0gPSAtYVsxXSAvIHNxbGVuO1xuICBvdXRbMl0gPSAtYVsyXSAvIHNxbGVuO1xuICBvdXRbM10gPSBhWzNdIC8gc3FsZW47XG4gIG91dFs0XSA9IC1hWzRdIC8gc3FsZW47XG4gIG91dFs1XSA9IC1hWzVdIC8gc3FsZW47XG4gIG91dFs2XSA9IC1hWzZdIC8gc3FsZW47XG4gIG91dFs3XSA9IGFbN10gLyBzcWxlbjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29uanVnYXRlIG9mIGEgZHVhbCBxdWF0XG4gKiBJZiB0aGUgZHVhbCBxdWF0ZXJuaW9uIGlzIG5vcm1hbGl6ZWQsIHRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyIHRoYW4gcXVhdDIuaW52ZXJzZSBhbmQgcHJvZHVjZXMgdGhlIHNhbWUgcmVzdWx0LlxuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBjb25qdWdhdGUgb2ZcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmp1Z2F0ZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gLWFbMF07XG4gIG91dFsxXSA9IC1hWzFdO1xuICBvdXRbMl0gPSAtYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgb3V0WzRdID0gLWFbNF07XG4gIG91dFs1XSA9IC1hWzVdO1xuICBvdXRbNl0gPSAtYVs2XTtcbiAgb3V0WzddID0gYVs3XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgZHVhbCBxdWF0XG4gKlxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIGR1YWwgcXVhdCB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBsZW5ndGggPSBxdWF0Lmxlbmd0aDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBxdWF0Mi5sZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSBkdWFsIHF1YXRcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgZHVhbCBxdWF0IHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzcXVhcmVkTGVuZ3RoID0gcXVhdC5zcXVhcmVkTGVuZ3RoO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQyLnNxdWFyZWRMZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XG4vKipcbiAqIE5vcm1hbGl6ZSBhIGR1YWwgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIGR1YWwgcXVhdGVybmlvbiB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICB2YXIgbWFnbml0dWRlID0gc3F1YXJlZExlbmd0aChhKTtcblxuICBpZiAobWFnbml0dWRlID4gMCkge1xuICAgIG1hZ25pdHVkZSA9IE1hdGguc3FydChtYWduaXR1ZGUpO1xuICAgIHZhciBhMCA9IGFbMF0gLyBtYWduaXR1ZGU7XG4gICAgdmFyIGExID0gYVsxXSAvIG1hZ25pdHVkZTtcbiAgICB2YXIgYTIgPSBhWzJdIC8gbWFnbml0dWRlO1xuICAgIHZhciBhMyA9IGFbM10gLyBtYWduaXR1ZGU7XG4gICAgdmFyIGIwID0gYVs0XTtcbiAgICB2YXIgYjEgPSBhWzVdO1xuICAgIHZhciBiMiA9IGFbNl07XG4gICAgdmFyIGIzID0gYVs3XTtcbiAgICB2YXIgYV9kb3RfYiA9IGEwICogYjAgKyBhMSAqIGIxICsgYTIgKiBiMiArIGEzICogYjM7XG4gICAgb3V0WzBdID0gYTA7XG4gICAgb3V0WzFdID0gYTE7XG4gICAgb3V0WzJdID0gYTI7XG4gICAgb3V0WzNdID0gYTM7XG4gICAgb3V0WzRdID0gKGIwIC0gYTAgKiBhX2RvdF9iKSAvIG1hZ25pdHVkZTtcbiAgICBvdXRbNV0gPSAoYjEgLSBhMSAqIGFfZG90X2IpIC8gbWFnbml0dWRlO1xuICAgIG91dFs2XSA9IChiMiAtIGEyICogYV9kb3RfYikgLyBtYWduaXR1ZGU7XG4gICAgb3V0WzddID0gKGIzIC0gYTMgKiBhX2RvdF9iKSAvIG1hZ25pdHVkZTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBkdWFsIHF1YXRlbmlvblxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSBkdWFsIHF1YXRlcm5pb24gdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGR1YWwgcXVhdFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJxdWF0MihcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiLCBcIiArIGFbM10gKyBcIiwgXCIgKyBhWzRdICsgXCIsIFwiICsgYVs1XSArIFwiLCBcIiArIGFbNl0gKyBcIiwgXCIgKyBhWzddICsgXCIpXCI7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGR1YWwgcXVhdGVybmlvbnMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZmlyc3QgZHVhbCBxdWF0ZXJuaW9uLlxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBiIHRoZSBzZWNvbmQgZHVhbCBxdWF0ZXJuaW9uLlxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgdGhlIGR1YWwgcXVhdGVybmlvbnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiYgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdICYmIGFbNl0gPT09IGJbNl0gJiYgYVs3XSA9PT0gYls3XTtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgZHVhbCBxdWF0ZXJuaW9ucyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIHRoZSBmaXJzdCBkdWFsIHF1YXQuXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGIgdGhlIHNlY29uZCBkdWFsIHF1YXQuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgZHVhbCBxdWF0cyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXSxcbiAgICAgIGE0ID0gYVs0XSxcbiAgICAgIGE1ID0gYVs1XSxcbiAgICAgIGE2ID0gYVs2XSxcbiAgICAgIGE3ID0gYVs3XTtcbiAgdmFyIGIwID0gYlswXSxcbiAgICAgIGIxID0gYlsxXSxcbiAgICAgIGIyID0gYlsyXSxcbiAgICAgIGIzID0gYlszXSxcbiAgICAgIGI0ID0gYls0XSxcbiAgICAgIGI1ID0gYls1XSxcbiAgICAgIGI2ID0gYls2XSxcbiAgICAgIGI3ID0gYls3XTtcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKSAmJiBNYXRoLmFicyhhNCAtIGI0KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNCksIE1hdGguYWJzKGI0KSkgJiYgTWF0aC5hYnMoYTUgLSBiNSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTUpLCBNYXRoLmFicyhiNSkpICYmIE1hdGguYWJzKGE2IC0gYjYpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE2KSwgTWF0aC5hYnMoYjYpKSAmJiBNYXRoLmFicyhhNyAtIGI3KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNyksIE1hdGguYWJzKGI3KSk7XG59IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XG4vKipcbiAqIDIgRGltZW5zaW9uYWwgVmVjdG9yXG4gKiBAbW9kdWxlIHZlYzJcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcsIGVtcHR5IHZlYzJcbiAqXG4gKiBAcmV0dXJucyB7dmVjMn0gYSBuZXcgMkQgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDIpO1xuXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xuICAgIG91dFswXSA9IDA7XG4gICAgb3V0WzFdID0gMDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMiBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjbG9uZVxuICogQHJldHVybnMge3ZlYzJ9IGEgbmV3IDJEIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgyKTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWMyIGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzJ9IGEgbmV3IDJEIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKHgsIHkpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDIpO1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjMiB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBzb3VyY2UgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzIgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSkge1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBEaXZpZGVzIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZpZGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5jZWlsIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gY2VpbFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjZWlsKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIGZsb29yXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZsb29yKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtaW4ob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWluKGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjMidzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWF4KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBNYXRoLm1heChhWzBdLCBiWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE1hdGgucm91bmQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byByb3VuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3VuZChvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5yb3VuZChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5yb3VuZChhWzFdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2NhbGVzIGEgdmVjMiBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWRkcyB0d28gdmVjMidzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIgYnkgYmVmb3JlIGFkZGluZ1xuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdLFxuICAgICAgeSA9IGJbMV0gLSBhWzFdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5KTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMidzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcbiAgdmFyIHggPSBiWzBdIC0gYVswXSxcbiAgICAgIHkgPSBiWzFdIC0gYVsxXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHk7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV07XG4gIHJldHVybiBNYXRoLmh5cG90KHgsIHkpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWRMZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHk7XG59XG4vKipcbiAqIE5lZ2F0ZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBuZWdhdGVcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbmVnYXRlKG91dCwgYSkge1xuICBvdXRbMF0gPSAtYVswXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBpbnZlcnRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gMS4wIC8gYVswXTtcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV07XG4gIHZhciBsZW4gPSB4ICogeCArIHkgKiB5O1xuXG4gIGlmIChsZW4gPiAwKSB7XG4gICAgLy9UT0RPOiBldmFsdWF0ZSB1c2Ugb2YgZ2xtX2ludnNxcnQgaGVyZT9cbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gIH1cblxuICBvdXRbMF0gPSBhWzBdICogbGVuO1xuICBvdXRbMV0gPSBhWzFdICogbGVuO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjMidzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkb3QoYSwgYikge1xuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXTtcbn1cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlYzInc1xuICogTm90ZSB0aGF0IHRoZSBjcm9zcyBwcm9kdWN0IG11c3QgYnkgZGVmaW5pdGlvbiBwcm9kdWNlIGEgM0QgdmVjdG9yXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XG4gIHZhciB6ID0gYVswXSAqIGJbMV0gLSBhWzFdICogYlswXTtcbiAgb3V0WzBdID0gb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdO1xuICBvdXRbMF0gPSBheCArIHQgKiAoYlswXSAtIGF4KTtcbiAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShvdXQsIHNjYWxlKSB7XG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wO1xuICB2YXIgciA9IGdsTWF0cml4LlJBTkRPTSgpICogMi4wICogTWF0aC5QSTtcbiAgb3V0WzBdID0gTWF0aC5jb3MocikgKiBzY2FsZTtcbiAgb3V0WzFdID0gTWF0aC5zaW4ocikgKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0MlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDJ9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDIob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdO1xuICBvdXRbMF0gPSBtWzBdICogeCArIG1bMl0gKiB5O1xuICBvdXRbMV0gPSBtWzFdICogeCArIG1bM10gKiB5O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQyZFxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDJkfSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQyZChvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV07XG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVsyXSAqIHkgKyBtWzRdO1xuICBvdXRbMV0gPSBtWzFdICogeCArIG1bM10gKiB5ICsgbVs1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0M1xuICogM3JkIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQzKG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzNdICogeSArIG1bNl07XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVs0XSAqIHkgKyBtWzddO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQ0XG4gKiAzcmQgdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcwJ1xuICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzRdICogeSArIG1bMTJdO1xuICBvdXRbMV0gPSBtWzFdICogeCArIG1bNV0gKiB5ICsgbVsxM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZSBhIDJEIHZlY3RvclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSBUaGUgdmVjMiBwb2ludCB0byByb3RhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBpbiByYWRpYW5zXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIGIsIHJhZCkge1xuICAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG4gIHZhciBwMCA9IGFbMF0gLSBiWzBdLFxuICAgICAgcDEgPSBhWzFdIC0gYlsxXSxcbiAgICAgIHNpbkMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgY29zQyA9IE1hdGguY29zKHJhZCk7IC8vcGVyZm9ybSByb3RhdGlvbiBhbmQgdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cblxuICBvdXRbMF0gPSBwMCAqIGNvc0MgLSBwMSAqIHNpbkMgKyBiWzBdO1xuICBvdXRbMV0gPSBwMCAqIHNpbkMgKyBwMSAqIGNvc0MgKyBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBHZXQgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIDJEIHZlY3RvcnNcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiBUaGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFuZ2xlKGEsIGIpIHtcbiAgdmFyIHgxID0gYVswXSxcbiAgICAgIHkxID0gYVsxXSxcbiAgICAgIHgyID0gYlswXSxcbiAgICAgIHkyID0gYlsxXSxcbiAgICAgIC8vIG1hZyBpcyB0aGUgcHJvZHVjdCBvZiB0aGUgbWFnbml0dWRlcyBvZiBhIGFuZCBiXG4gIG1hZyA9IE1hdGguc3FydCh4MSAqIHgxICsgeTEgKiB5MSkgKiBNYXRoLnNxcnQoeDIgKiB4MiArIHkyICogeTIpLFxuICAgICAgLy8gbWFnICYmLi4gc2hvcnQgY2lyY3VpdHMgaWYgbWFnID09IDBcbiAgY29zaW5lID0gbWFnICYmICh4MSAqIHgyICsgeTEgKiB5MikgLyBtYWc7IC8vIE1hdGgubWluKE1hdGgubWF4KGNvc2luZSwgLTEpLCAxKSBjbGFtcHMgdGhlIGNvc2luZSBiZXR3ZWVuIC0xIGFuZCAxXG5cbiAgcmV0dXJuIE1hdGguYWNvcyhNYXRoLm1pbihNYXRoLm1heChjb3NpbmUsIC0xKSwgMSkpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyIHRvIHplcm9cbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB6ZXJvKG91dCkge1xuICBvdXRbMF0gPSAwLjA7XG4gIG91dFsxXSA9IDAuMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiBcInZlYzIoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiKVwiO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGV4YWN0bHkgaGF2ZSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSBUaGUgZmlyc3QgdmVjdG9yLlxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSBUaGUgZmlyc3QgdmVjdG9yLlxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXTtcbiAgdmFyIGIwID0gYlswXSxcbiAgICAgIGIxID0gYlsxXTtcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSk7XG59XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5sZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLnN1YnRyYWN0fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLm11bHRpcGx5fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLmRpdmlkZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZGl2ID0gZGl2aWRlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuZGlzdGFuY2V9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGRpc3QgPSBkaXN0YW5jZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLnNxdWFyZWREaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyRGlzdCA9IHNxdWFyZWREaXN0YW5jZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLnNxdWFyZWRMZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XG4vKipcbiAqIFBlcmZvcm0gc29tZSBvcGVyYXRpb24gb3ZlciBhbiBhcnJheSBvZiB2ZWMycy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmlkZSBOdW1iZXIgb2YgZWxlbWVudHMgYmV0d2VlbiB0aGUgc3RhcnQgb2YgZWFjaCB2ZWMyLiBJZiAwIGFzc3VtZXMgdGlnaHRseSBwYWNrZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjMnMgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHZlY3RvciBpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cbiAqIEByZXR1cm5zIHtBcnJheX0gYVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBmb3JFYWNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdmVjID0gY3JlYXRlKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XG4gICAgdmFyIGksIGw7XG5cbiAgICBpZiAoIXN0cmlkZSkge1xuICAgICAgc3RyaWRlID0gMjtcbiAgICB9XG5cbiAgICBpZiAoIW9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoY291bnQpIHtcbiAgICAgIGwgPSBNYXRoLm1pbihjb3VudCAqIHN0cmlkZSArIG9mZnNldCwgYS5sZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsID0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZm9yIChpID0gb2Zmc2V0OyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgIHZlY1swXSA9IGFbaV07XG4gICAgICB2ZWNbMV0gPSBhW2kgKyAxXTtcbiAgICAgIGZuKHZlYywgdmVjLCBhcmcpO1xuICAgICAgYVtpXSA9IHZlY1swXTtcbiAgICAgIGFbaSArIDFdID0gdmVjWzFdO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xufSgpOyIsIi8qKlxuICogaHR0cHM6Ly9vcGVudHlwZS5qcy5vcmcgdjEuMy40IHwgKGMpIEZyZWRlcmlrIERlIEJsZXNlciBhbmQgb3RoZXIgY29udHJpYnV0b3JzIHwgTUlUIExpY2Vuc2UgfCBVc2VzIHRpbnktaW5mbGF0ZSBieSBEZXZvbiBHb3ZldHQgYW5kIHN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXQgcG9seWZpbGwgYnkgTWF0aGlhcyBCeW5lbnNcbiAqL1xuXG4vKiEgaHR0cHM6Ly9tdGhzLmJlL2NvZGVwb2ludGF0IHYwLjIuMCBieSBAbWF0aGlhcyAqL1xuaWYgKCFTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KSB7XG5cdChmdW5jdGlvbigpIHtcblx0XHR2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBJRSA4IG9ubHkgc3VwcG9ydHMgYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgb24gRE9NIGVsZW1lbnRzXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0XHRcdHZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cdFx0XHRcdHZhciByZXN1bHQgPSAkZGVmaW5lUHJvcGVydHkob2JqZWN0LCBvYmplY3QsIG9iamVjdCkgJiYgJGRlZmluZVByb3BlcnR5O1xuXHRcdFx0fSBjYXRjaChlcnJvcikge31cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSgpKTtcblx0XHR2YXIgY29kZVBvaW50QXQgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdFx0aWYgKHRoaXMgPT0gbnVsbCkge1xuXHRcdFx0XHR0aHJvdyBUeXBlRXJyb3IoKTtcblx0XHRcdH1cblx0XHRcdHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG5cdFx0XHR2YXIgc2l6ZSA9IHN0cmluZy5sZW5ndGg7XG5cdFx0XHQvLyBgVG9JbnRlZ2VyYFxuXHRcdFx0dmFyIGluZGV4ID0gcG9zaXRpb24gPyBOdW1iZXIocG9zaXRpb24pIDogMDtcblx0XHRcdGlmIChpbmRleCAhPSBpbmRleCkgeyAvLyBiZXR0ZXIgYGlzTmFOYFxuXHRcdFx0XHRpbmRleCA9IDA7XG5cdFx0XHR9XG5cdFx0XHQvLyBBY2NvdW50IGZvciBvdXQtb2YtYm91bmRzIGluZGljZXM6XG5cdFx0XHRpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHNpemUpIHtcblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdC8vIEdldCB0aGUgZmlyc3QgY29kZSB1bml0XG5cdFx0XHR2YXIgZmlyc3QgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCk7XG5cdFx0XHR2YXIgc2Vjb25kO1xuXHRcdFx0aWYgKCAvLyBjaGVjayBpZiBpdOKAmXMgdGhlIHN0YXJ0IG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0Zmlyc3QgPj0gMHhEODAwICYmIGZpcnN0IDw9IDB4REJGRiAmJiAvLyBoaWdoIHN1cnJvZ2F0ZVxuXHRcdFx0XHRzaXplID4gaW5kZXggKyAxIC8vIHRoZXJlIGlzIGEgbmV4dCBjb2RlIHVuaXRcblx0XHRcdCkge1xuXHRcdFx0XHRzZWNvbmQgPSBzdHJpbmcuY2hhckNvZGVBdChpbmRleCArIDEpO1xuXHRcdFx0XHRpZiAoc2Vjb25kID49IDB4REMwMCAmJiBzZWNvbmQgPD0gMHhERkZGKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHQvLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcblx0XHRcdFx0XHRyZXR1cm4gKGZpcnN0IC0gMHhEODAwKSAqIDB4NDAwICsgc2Vjb25kIC0gMHhEQzAwICsgMHgxMDAwMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZpcnN0O1xuXHRcdH07XG5cdFx0aWYgKGRlZmluZVByb3BlcnR5KSB7XG5cdFx0XHRkZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCAnY29kZVBvaW50QXQnLCB7XG5cdFx0XHRcdCd2YWx1ZSc6IGNvZGVQb2ludEF0LFxuXHRcdFx0XHQnY29uZmlndXJhYmxlJzogdHJ1ZSxcblx0XHRcdFx0J3dyaXRhYmxlJzogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQgPSBjb2RlUG9pbnRBdDtcblx0XHR9XG5cdH0oKSk7XG59XG5cbnZhciBUSU5GX09LID0gMDtcbnZhciBUSU5GX0RBVEFfRVJST1IgPSAtMztcblxuZnVuY3Rpb24gVHJlZSgpIHtcbiAgdGhpcy50YWJsZSA9IG5ldyBVaW50MTZBcnJheSgxNik7ICAgLyogdGFibGUgb2YgY29kZSBsZW5ndGggY291bnRzICovXG4gIHRoaXMudHJhbnMgPSBuZXcgVWludDE2QXJyYXkoMjg4KTsgIC8qIGNvZGUgLT4gc3ltYm9sIHRyYW5zbGF0aW9uIHRhYmxlICovXG59XG5cbmZ1bmN0aW9uIERhdGEoc291cmNlLCBkZXN0KSB7XG4gIHRoaXMuc291cmNlID0gc291cmNlO1xuICB0aGlzLnNvdXJjZUluZGV4ID0gMDtcbiAgdGhpcy50YWcgPSAwO1xuICB0aGlzLmJpdGNvdW50ID0gMDtcbiAgXG4gIHRoaXMuZGVzdCA9IGRlc3Q7XG4gIHRoaXMuZGVzdExlbiA9IDA7XG4gIFxuICB0aGlzLmx0cmVlID0gbmV3IFRyZWUoKTsgIC8qIGR5bmFtaWMgbGVuZ3RoL3N5bWJvbCB0cmVlICovXG4gIHRoaXMuZHRyZWUgPSBuZXcgVHJlZSgpOyAgLyogZHluYW1pYyBkaXN0YW5jZSB0cmVlICovXG59XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqXG4gKiAtLSB1bmluaXRpYWxpemVkIGdsb2JhbCBkYXRhIChzdGF0aWMgc3RydWN0dXJlcykgLS0gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbnZhciBzbHRyZWUgPSBuZXcgVHJlZSgpO1xudmFyIHNkdHJlZSA9IG5ldyBUcmVlKCk7XG5cbi8qIGV4dHJhIGJpdHMgYW5kIGJhc2UgdGFibGVzIGZvciBsZW5ndGggY29kZXMgKi9cbnZhciBsZW5ndGhfYml0cyA9IG5ldyBVaW50OEFycmF5KDMwKTtcbnZhciBsZW5ndGhfYmFzZSA9IG5ldyBVaW50MTZBcnJheSgzMCk7XG5cbi8qIGV4dHJhIGJpdHMgYW5kIGJhc2UgdGFibGVzIGZvciBkaXN0YW5jZSBjb2RlcyAqL1xudmFyIGRpc3RfYml0cyA9IG5ldyBVaW50OEFycmF5KDMwKTtcbnZhciBkaXN0X2Jhc2UgPSBuZXcgVWludDE2QXJyYXkoMzApO1xuXG4vKiBzcGVjaWFsIG9yZGVyaW5nIG9mIGNvZGUgbGVuZ3RoIGNvZGVzICovXG52YXIgY2xjaWR4ID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LFxuICAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMixcbiAgMTQsIDEsIDE1XG5dKTtcblxuLyogdXNlZCBieSB0aW5mX2RlY29kZV90cmVlcywgYXZvaWRzIGFsbG9jYXRpb25zIGV2ZXJ5IGNhbGwgKi9cbnZhciBjb2RlX3RyZWUgPSBuZXcgVHJlZSgpO1xudmFyIGxlbmd0aHMgPSBuZXcgVWludDhBcnJheSgyODggKyAzMik7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICpcbiAqIC0tIHV0aWxpdHkgZnVuY3Rpb25zIC0tICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbi8qIGJ1aWxkIGV4dHJhIGJpdHMgYW5kIGJhc2UgdGFibGVzICovXG5mdW5jdGlvbiB0aW5mX2J1aWxkX2JpdHNfYmFzZShiaXRzLCBiYXNlLCBkZWx0YSwgZmlyc3QpIHtcbiAgdmFyIGksIHN1bTtcblxuICAvKiBidWlsZCBiaXRzIHRhYmxlICovXG4gIGZvciAoaSA9IDA7IGkgPCBkZWx0YTsgKytpKSB7IGJpdHNbaV0gPSAwOyB9XG4gIGZvciAoaSA9IDA7IGkgPCAzMCAtIGRlbHRhOyArK2kpIHsgYml0c1tpICsgZGVsdGFdID0gaSAvIGRlbHRhIHwgMDsgfVxuXG4gIC8qIGJ1aWxkIGJhc2UgdGFibGUgKi9cbiAgZm9yIChzdW0gPSBmaXJzdCwgaSA9IDA7IGkgPCAzMDsgKytpKSB7XG4gICAgYmFzZVtpXSA9IHN1bTtcbiAgICBzdW0gKz0gMSA8PCBiaXRzW2ldO1xuICB9XG59XG5cbi8qIGJ1aWxkIHRoZSBmaXhlZCBodWZmbWFuIHRyZWVzICovXG5mdW5jdGlvbiB0aW5mX2J1aWxkX2ZpeGVkX3RyZWVzKGx0LCBkdCkge1xuICB2YXIgaTtcblxuICAvKiBidWlsZCBmaXhlZCBsZW5ndGggdHJlZSAqL1xuICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7IGx0LnRhYmxlW2ldID0gMDsgfVxuXG4gIGx0LnRhYmxlWzddID0gMjQ7XG4gIGx0LnRhYmxlWzhdID0gMTUyO1xuICBsdC50YWJsZVs5XSA9IDExMjtcblxuICBmb3IgKGkgPSAwOyBpIDwgMjQ7ICsraSkgeyBsdC50cmFuc1tpXSA9IDI1NiArIGk7IH1cbiAgZm9yIChpID0gMDsgaSA8IDE0NDsgKytpKSB7IGx0LnRyYW5zWzI0ICsgaV0gPSBpOyB9XG4gIGZvciAoaSA9IDA7IGkgPCA4OyArK2kpIHsgbHQudHJhbnNbMjQgKyAxNDQgKyBpXSA9IDI4MCArIGk7IH1cbiAgZm9yIChpID0gMDsgaSA8IDExMjsgKytpKSB7IGx0LnRyYW5zWzI0ICsgMTQ0ICsgOCArIGldID0gMTQ0ICsgaTsgfVxuXG4gIC8qIGJ1aWxkIGZpeGVkIGRpc3RhbmNlIHRyZWUgKi9cbiAgZm9yIChpID0gMDsgaSA8IDU7ICsraSkgeyBkdC50YWJsZVtpXSA9IDA7IH1cblxuICBkdC50YWJsZVs1XSA9IDMyO1xuXG4gIGZvciAoaSA9IDA7IGkgPCAzMjsgKytpKSB7IGR0LnRyYW5zW2ldID0gaTsgfVxufVxuXG4vKiBnaXZlbiBhbiBhcnJheSBvZiBjb2RlIGxlbmd0aHMsIGJ1aWxkIGEgdHJlZSAqL1xudmFyIG9mZnMgPSBuZXcgVWludDE2QXJyYXkoMTYpO1xuXG5mdW5jdGlvbiB0aW5mX2J1aWxkX3RyZWUodCwgbGVuZ3Rocywgb2ZmLCBudW0pIHtcbiAgdmFyIGksIHN1bTtcblxuICAvKiBjbGVhciBjb2RlIGxlbmd0aCBjb3VudCB0YWJsZSAqL1xuICBmb3IgKGkgPSAwOyBpIDwgMTY7ICsraSkgeyB0LnRhYmxlW2ldID0gMDsgfVxuXG4gIC8qIHNjYW4gc3ltYm9sIGxlbmd0aHMsIGFuZCBzdW0gY29kZSBsZW5ndGggY291bnRzICovXG4gIGZvciAoaSA9IDA7IGkgPCBudW07ICsraSkgeyB0LnRhYmxlW2xlbmd0aHNbb2ZmICsgaV1dKys7IH1cblxuICB0LnRhYmxlWzBdID0gMDtcblxuICAvKiBjb21wdXRlIG9mZnNldCB0YWJsZSBmb3IgZGlzdHJpYnV0aW9uIHNvcnQgKi9cbiAgZm9yIChzdW0gPSAwLCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICBvZmZzW2ldID0gc3VtO1xuICAgIHN1bSArPSB0LnRhYmxlW2ldO1xuICB9XG5cbiAgLyogY3JlYXRlIGNvZGUtPnN5bWJvbCB0cmFuc2xhdGlvbiB0YWJsZSAoc3ltYm9scyBzb3J0ZWQgYnkgY29kZSkgKi9cbiAgZm9yIChpID0gMDsgaSA8IG51bTsgKytpKSB7XG4gICAgaWYgKGxlbmd0aHNbb2ZmICsgaV0pIHsgdC50cmFuc1tvZmZzW2xlbmd0aHNbb2ZmICsgaV1dKytdID0gaTsgfVxuICB9XG59XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKlxuICogLS0gZGVjb2RlIGZ1bmN0aW9ucyAtLSAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbi8qIGdldCBvbmUgYml0IGZyb20gc291cmNlIHN0cmVhbSAqL1xuZnVuY3Rpb24gdGluZl9nZXRiaXQoZCkge1xuICAvKiBjaGVjayBpZiB0YWcgaXMgZW1wdHkgKi9cbiAgaWYgKCFkLmJpdGNvdW50LS0pIHtcbiAgICAvKiBsb2FkIG5leHQgdGFnICovXG4gICAgZC50YWcgPSBkLnNvdXJjZVtkLnNvdXJjZUluZGV4KytdO1xuICAgIGQuYml0Y291bnQgPSA3O1xuICB9XG5cbiAgLyogc2hpZnQgYml0IG91dCBvZiB0YWcgKi9cbiAgdmFyIGJpdCA9IGQudGFnICYgMTtcbiAgZC50YWcgPj4+PSAxO1xuXG4gIHJldHVybiBiaXQ7XG59XG5cbi8qIHJlYWQgYSBudW0gYml0IHZhbHVlIGZyb20gYSBzdHJlYW0gYW5kIGFkZCBiYXNlICovXG5mdW5jdGlvbiB0aW5mX3JlYWRfYml0cyhkLCBudW0sIGJhc2UpIHtcbiAgaWYgKCFudW0pXG4gICAgeyByZXR1cm4gYmFzZTsgfVxuXG4gIHdoaWxlIChkLmJpdGNvdW50IDwgMjQpIHtcbiAgICBkLnRhZyB8PSBkLnNvdXJjZVtkLnNvdXJjZUluZGV4KytdIDw8IGQuYml0Y291bnQ7XG4gICAgZC5iaXRjb3VudCArPSA4O1xuICB9XG5cbiAgdmFyIHZhbCA9IGQudGFnICYgKDB4ZmZmZiA+Pj4gKDE2IC0gbnVtKSk7XG4gIGQudGFnID4+Pj0gbnVtO1xuICBkLmJpdGNvdW50IC09IG51bTtcbiAgcmV0dXJuIHZhbCArIGJhc2U7XG59XG5cbi8qIGdpdmVuIGEgZGF0YSBzdHJlYW0gYW5kIGEgdHJlZSwgZGVjb2RlIGEgc3ltYm9sICovXG5mdW5jdGlvbiB0aW5mX2RlY29kZV9zeW1ib2woZCwgdCkge1xuICB3aGlsZSAoZC5iaXRjb3VudCA8IDI0KSB7XG4gICAgZC50YWcgfD0gZC5zb3VyY2VbZC5zb3VyY2VJbmRleCsrXSA8PCBkLmJpdGNvdW50O1xuICAgIGQuYml0Y291bnQgKz0gODtcbiAgfVxuICBcbiAgdmFyIHN1bSA9IDAsIGN1ciA9IDAsIGxlbiA9IDA7XG4gIHZhciB0YWcgPSBkLnRhZztcblxuICAvKiBnZXQgbW9yZSBiaXRzIHdoaWxlIGNvZGUgdmFsdWUgaXMgYWJvdmUgc3VtICovXG4gIGRvIHtcbiAgICBjdXIgPSAyICogY3VyICsgKHRhZyAmIDEpO1xuICAgIHRhZyA+Pj49IDE7XG4gICAgKytsZW47XG5cbiAgICBzdW0gKz0gdC50YWJsZVtsZW5dO1xuICAgIGN1ciAtPSB0LnRhYmxlW2xlbl07XG4gIH0gd2hpbGUgKGN1ciA+PSAwKTtcbiAgXG4gIGQudGFnID0gdGFnO1xuICBkLmJpdGNvdW50IC09IGxlbjtcblxuICByZXR1cm4gdC50cmFuc1tzdW0gKyBjdXJdO1xufVxuXG4vKiBnaXZlbiBhIGRhdGEgc3RyZWFtLCBkZWNvZGUgZHluYW1pYyB0cmVlcyBmcm9tIGl0ICovXG5mdW5jdGlvbiB0aW5mX2RlY29kZV90cmVlcyhkLCBsdCwgZHQpIHtcbiAgdmFyIGhsaXQsIGhkaXN0LCBoY2xlbjtcbiAgdmFyIGksIG51bSwgbGVuZ3RoO1xuXG4gIC8qIGdldCA1IGJpdHMgSExJVCAoMjU3LTI4NikgKi9cbiAgaGxpdCA9IHRpbmZfcmVhZF9iaXRzKGQsIDUsIDI1Nyk7XG5cbiAgLyogZ2V0IDUgYml0cyBIRElTVCAoMS0zMikgKi9cbiAgaGRpc3QgPSB0aW5mX3JlYWRfYml0cyhkLCA1LCAxKTtcblxuICAvKiBnZXQgNCBiaXRzIEhDTEVOICg0LTE5KSAqL1xuICBoY2xlbiA9IHRpbmZfcmVhZF9iaXRzKGQsIDQsIDQpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCAxOTsgKytpKSB7IGxlbmd0aHNbaV0gPSAwOyB9XG5cbiAgLyogcmVhZCBjb2RlIGxlbmd0aHMgZm9yIGNvZGUgbGVuZ3RoIGFscGhhYmV0ICovXG4gIGZvciAoaSA9IDA7IGkgPCBoY2xlbjsgKytpKSB7XG4gICAgLyogZ2V0IDMgYml0cyBjb2RlIGxlbmd0aCAoMC03KSAqL1xuICAgIHZhciBjbGVuID0gdGluZl9yZWFkX2JpdHMoZCwgMywgMCk7XG4gICAgbGVuZ3Roc1tjbGNpZHhbaV1dID0gY2xlbjtcbiAgfVxuXG4gIC8qIGJ1aWxkIGNvZGUgbGVuZ3RoIHRyZWUgKi9cbiAgdGluZl9idWlsZF90cmVlKGNvZGVfdHJlZSwgbGVuZ3RocywgMCwgMTkpO1xuXG4gIC8qIGRlY29kZSBjb2RlIGxlbmd0aHMgZm9yIHRoZSBkeW5hbWljIHRyZWVzICovXG4gIGZvciAobnVtID0gMDsgbnVtIDwgaGxpdCArIGhkaXN0Oykge1xuICAgIHZhciBzeW0gPSB0aW5mX2RlY29kZV9zeW1ib2woZCwgY29kZV90cmVlKTtcblxuICAgIHN3aXRjaCAoc3ltKSB7XG4gICAgICBjYXNlIDE2OlxuICAgICAgICAvKiBjb3B5IHByZXZpb3VzIGNvZGUgbGVuZ3RoIDMtNiB0aW1lcyAocmVhZCAyIGJpdHMpICovXG4gICAgICAgIHZhciBwcmV2ID0gbGVuZ3Roc1tudW0gLSAxXTtcbiAgICAgICAgZm9yIChsZW5ndGggPSB0aW5mX3JlYWRfYml0cyhkLCAyLCAzKTsgbGVuZ3RoOyAtLWxlbmd0aCkge1xuICAgICAgICAgIGxlbmd0aHNbbnVtKytdID0gcHJldjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTc6XG4gICAgICAgIC8qIHJlcGVhdCBjb2RlIGxlbmd0aCAwIGZvciAzLTEwIHRpbWVzIChyZWFkIDMgYml0cykgKi9cbiAgICAgICAgZm9yIChsZW5ndGggPSB0aW5mX3JlYWRfYml0cyhkLCAzLCAzKTsgbGVuZ3RoOyAtLWxlbmd0aCkge1xuICAgICAgICAgIGxlbmd0aHNbbnVtKytdID0gMDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTg6XG4gICAgICAgIC8qIHJlcGVhdCBjb2RlIGxlbmd0aCAwIGZvciAxMS0xMzggdGltZXMgKHJlYWQgNyBiaXRzKSAqL1xuICAgICAgICBmb3IgKGxlbmd0aCA9IHRpbmZfcmVhZF9iaXRzKGQsIDcsIDExKTsgbGVuZ3RoOyAtLWxlbmd0aCkge1xuICAgICAgICAgIGxlbmd0aHNbbnVtKytdID0gMDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8qIHZhbHVlcyAwLTE1IHJlcHJlc2VudCB0aGUgYWN0dWFsIGNvZGUgbGVuZ3RocyAqL1xuICAgICAgICBsZW5ndGhzW251bSsrXSA9IHN5bTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyogYnVpbGQgZHluYW1pYyB0cmVlcyAqL1xuICB0aW5mX2J1aWxkX3RyZWUobHQsIGxlbmd0aHMsIDAsIGhsaXQpO1xuICB0aW5mX2J1aWxkX3RyZWUoZHQsIGxlbmd0aHMsIGhsaXQsIGhkaXN0KTtcbn1cblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKlxuICogLS0gYmxvY2sgaW5mbGF0ZSBmdW5jdGlvbnMgLS0gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuLyogZ2l2ZW4gYSBzdHJlYW0gYW5kIHR3byB0cmVlcywgaW5mbGF0ZSBhIGJsb2NrIG9mIGRhdGEgKi9cbmZ1bmN0aW9uIHRpbmZfaW5mbGF0ZV9ibG9ja19kYXRhKGQsIGx0LCBkdCkge1xuICB3aGlsZSAoMSkge1xuICAgIHZhciBzeW0gPSB0aW5mX2RlY29kZV9zeW1ib2woZCwgbHQpO1xuXG4gICAgLyogY2hlY2sgZm9yIGVuZCBvZiBibG9jayAqL1xuICAgIGlmIChzeW0gPT09IDI1Nikge1xuICAgICAgcmV0dXJuIFRJTkZfT0s7XG4gICAgfVxuXG4gICAgaWYgKHN5bSA8IDI1Nikge1xuICAgICAgZC5kZXN0W2QuZGVzdExlbisrXSA9IHN5bTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCwgZGlzdCwgb2ZmcztcbiAgICAgIHZhciBpO1xuXG4gICAgICBzeW0gLT0gMjU3O1xuXG4gICAgICAvKiBwb3NzaWJseSBnZXQgbW9yZSBiaXRzIGZyb20gbGVuZ3RoIGNvZGUgKi9cbiAgICAgIGxlbmd0aCA9IHRpbmZfcmVhZF9iaXRzKGQsIGxlbmd0aF9iaXRzW3N5bV0sIGxlbmd0aF9iYXNlW3N5bV0pO1xuXG4gICAgICBkaXN0ID0gdGluZl9kZWNvZGVfc3ltYm9sKGQsIGR0KTtcblxuICAgICAgLyogcG9zc2libHkgZ2V0IG1vcmUgYml0cyBmcm9tIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgIG9mZnMgPSBkLmRlc3RMZW4gLSB0aW5mX3JlYWRfYml0cyhkLCBkaXN0X2JpdHNbZGlzdF0sIGRpc3RfYmFzZVtkaXN0XSk7XG5cbiAgICAgIC8qIGNvcHkgbWF0Y2ggKi9cbiAgICAgIGZvciAoaSA9IG9mZnM7IGkgPCBvZmZzICsgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgZC5kZXN0W2QuZGVzdExlbisrXSA9IGQuZGVzdFtpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogaW5mbGF0ZSBhbiB1bmNvbXByZXNzZWQgYmxvY2sgb2YgZGF0YSAqL1xuZnVuY3Rpb24gdGluZl9pbmZsYXRlX3VuY29tcHJlc3NlZF9ibG9jayhkKSB7XG4gIHZhciBsZW5ndGgsIGludmxlbmd0aDtcbiAgdmFyIGk7XG4gIFxuICAvKiB1bnJlYWQgZnJvbSBiaXRidWZmZXIgKi9cbiAgd2hpbGUgKGQuYml0Y291bnQgPiA4KSB7XG4gICAgZC5zb3VyY2VJbmRleC0tO1xuICAgIGQuYml0Y291bnQgLT0gODtcbiAgfVxuXG4gIC8qIGdldCBsZW5ndGggKi9cbiAgbGVuZ3RoID0gZC5zb3VyY2VbZC5zb3VyY2VJbmRleCArIDFdO1xuICBsZW5ndGggPSAyNTYgKiBsZW5ndGggKyBkLnNvdXJjZVtkLnNvdXJjZUluZGV4XTtcblxuICAvKiBnZXQgb25lJ3MgY29tcGxlbWVudCBvZiBsZW5ndGggKi9cbiAgaW52bGVuZ3RoID0gZC5zb3VyY2VbZC5zb3VyY2VJbmRleCArIDNdO1xuICBpbnZsZW5ndGggPSAyNTYgKiBpbnZsZW5ndGggKyBkLnNvdXJjZVtkLnNvdXJjZUluZGV4ICsgMl07XG5cbiAgLyogY2hlY2sgbGVuZ3RoICovXG4gIGlmIChsZW5ndGggIT09ICh+aW52bGVuZ3RoICYgMHgwMDAwZmZmZikpXG4gICAgeyByZXR1cm4gVElORl9EQVRBX0VSUk9SOyB9XG5cbiAgZC5zb3VyY2VJbmRleCArPSA0O1xuXG4gIC8qIGNvcHkgYmxvY2sgKi9cbiAgZm9yIChpID0gbGVuZ3RoOyBpOyAtLWkpXG4gICAgeyBkLmRlc3RbZC5kZXN0TGVuKytdID0gZC5zb3VyY2VbZC5zb3VyY2VJbmRleCsrXTsgfVxuXG4gIC8qIG1ha2Ugc3VyZSB3ZSBzdGFydCBuZXh0IGJsb2NrIG9uIGEgYnl0ZSBib3VuZGFyeSAqL1xuICBkLmJpdGNvdW50ID0gMDtcblxuICByZXR1cm4gVElORl9PSztcbn1cblxuLyogaW5mbGF0ZSBzdHJlYW0gZnJvbSBzb3VyY2UgdG8gZGVzdCAqL1xuZnVuY3Rpb24gdGluZl91bmNvbXByZXNzKHNvdXJjZSwgZGVzdCkge1xuICB2YXIgZCA9IG5ldyBEYXRhKHNvdXJjZSwgZGVzdCk7XG4gIHZhciBiZmluYWwsIGJ0eXBlLCByZXM7XG5cbiAgZG8ge1xuICAgIC8qIHJlYWQgZmluYWwgYmxvY2sgZmxhZyAqL1xuICAgIGJmaW5hbCA9IHRpbmZfZ2V0Yml0KGQpO1xuXG4gICAgLyogcmVhZCBibG9jayB0eXBlICgyIGJpdHMpICovXG4gICAgYnR5cGUgPSB0aW5mX3JlYWRfYml0cyhkLCAyLCAwKTtcblxuICAgIC8qIGRlY29tcHJlc3MgYmxvY2sgKi9cbiAgICBzd2l0Y2ggKGJ0eXBlKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIC8qIGRlY29tcHJlc3MgdW5jb21wcmVzc2VkIGJsb2NrICovXG4gICAgICAgIHJlcyA9IHRpbmZfaW5mbGF0ZV91bmNvbXByZXNzZWRfYmxvY2soZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICAvKiBkZWNvbXByZXNzIGJsb2NrIHdpdGggZml4ZWQgaHVmZm1hbiB0cmVlcyAqL1xuICAgICAgICByZXMgPSB0aW5mX2luZmxhdGVfYmxvY2tfZGF0YShkLCBzbHRyZWUsIHNkdHJlZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICAvKiBkZWNvbXByZXNzIGJsb2NrIHdpdGggZHluYW1pYyBodWZmbWFuIHRyZWVzICovXG4gICAgICAgIHRpbmZfZGVjb2RlX3RyZWVzKGQsIGQubHRyZWUsIGQuZHRyZWUpO1xuICAgICAgICByZXMgPSB0aW5mX2luZmxhdGVfYmxvY2tfZGF0YShkLCBkLmx0cmVlLCBkLmR0cmVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXMgPSBUSU5GX0RBVEFfRVJST1I7XG4gICAgfVxuXG4gICAgaWYgKHJlcyAhPT0gVElORl9PSylcbiAgICAgIHsgdGhyb3cgbmV3IEVycm9yKCdEYXRhIGVycm9yJyk7IH1cblxuICB9IHdoaWxlICghYmZpbmFsKTtcblxuICBpZiAoZC5kZXN0TGVuIDwgZC5kZXN0Lmxlbmd0aCkge1xuICAgIGlmICh0eXBlb2YgZC5kZXN0LnNsaWNlID09PSAnZnVuY3Rpb24nKVxuICAgICAgeyByZXR1cm4gZC5kZXN0LnNsaWNlKDAsIGQuZGVzdExlbik7IH1cbiAgICBlbHNlXG4gICAgICB7IHJldHVybiBkLmRlc3Quc3ViYXJyYXkoMCwgZC5kZXN0TGVuKTsgfVxuICB9XG4gIFxuICByZXR1cm4gZC5kZXN0O1xufVxuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLSAqXG4gKiAtLSBpbml0aWFsaXphdGlvbiAtLSAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4vKiBidWlsZCBmaXhlZCBodWZmbWFuIHRyZWVzICovXG50aW5mX2J1aWxkX2ZpeGVkX3RyZWVzKHNsdHJlZSwgc2R0cmVlKTtcblxuLyogYnVpbGQgZXh0cmEgYml0cyBhbmQgYmFzZSB0YWJsZXMgKi9cbnRpbmZfYnVpbGRfYml0c19iYXNlKGxlbmd0aF9iaXRzLCBsZW5ndGhfYmFzZSwgNCwgMyk7XG50aW5mX2J1aWxkX2JpdHNfYmFzZShkaXN0X2JpdHMsIGRpc3RfYmFzZSwgMiwgMSk7XG5cbi8qIGZpeCBhIHNwZWNpYWwgY2FzZSAqL1xubGVuZ3RoX2JpdHNbMjhdID0gMDtcbmxlbmd0aF9iYXNlWzI4XSA9IDI1ODtcblxudmFyIHRpbnlJbmZsYXRlID0gdGluZl91bmNvbXByZXNzO1xuXG4vLyBUaGUgQm91bmRpbmcgQm94IG9iamVjdFxuXG5mdW5jdGlvbiBkZXJpdmUodjAsIHYxLCB2MiwgdjMsIHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coMSAtIHQsIDMpICogdjAgK1xuICAgICAgICAzICogTWF0aC5wb3coMSAtIHQsIDIpICogdCAqIHYxICtcbiAgICAgICAgMyAqICgxIC0gdCkgKiBNYXRoLnBvdyh0LCAyKSAqIHYyICtcbiAgICAgICAgTWF0aC5wb3codCwgMykgKiB2Mztcbn1cbi8qKlxuICogQSBib3VuZGluZyBib3ggaXMgYW4gZW5jbG9zaW5nIGJveCB0aGF0IGRlc2NyaWJlcyB0aGUgc21hbGxlc3QgbWVhc3VyZSB3aXRoaW4gd2hpY2ggYWxsIHRoZSBwb2ludHMgbGllLlxuICogSXQgaXMgdXNlZCB0byBjYWxjdWxhdGUgdGhlIGJvdW5kaW5nIGJveCBvZiBhIGdseXBoIG9yIHRleHQgcGF0aC5cbiAqXG4gKiBPbiBpbml0aWFsaXphdGlvbiwgeDEveTEveDIveTIgd2lsbCBiZSBOYU4uIENoZWNrIGlmIHRoZSBib3VuZGluZyBib3ggaXMgZW1wdHkgdXNpbmcgYGlzRW1wdHkoKWAuXG4gKlxuICogQGV4cG9ydHMgb3BlbnR5cGUuQm91bmRpbmdCb3hcbiAqIEBjbGFzc1xuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEJvdW5kaW5nQm94KCkge1xuICAgIHRoaXMueDEgPSBOdW1iZXIuTmFOO1xuICAgIHRoaXMueTEgPSBOdW1iZXIuTmFOO1xuICAgIHRoaXMueDIgPSBOdW1iZXIuTmFOO1xuICAgIHRoaXMueTIgPSBOdW1iZXIuTmFOO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgYm91bmRpbmcgYm94IGlzIGVtcHR5LCB0aGF0IGlzLCBubyBwb2ludHMgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBib3ggeWV0LlxuICovXG5Cb3VuZGluZ0JveC5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpc05hTih0aGlzLngxKSB8fCBpc05hTih0aGlzLnkxKSB8fCBpc05hTih0aGlzLngyKSB8fCBpc05hTih0aGlzLnkyKTtcbn07XG5cbi8qKlxuICogQWRkIHRoZSBwb2ludCB0byB0aGUgYm91bmRpbmcgYm94LlxuICogVGhlIHgxL3kxL3gyL3kyIGNvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGluZyBib3ggd2lsbCBub3cgZW5jb21wYXNzIHRoZSBnaXZlbiBwb2ludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIFggY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQuXG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBZIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50LlxuICovXG5Cb3VuZGluZ0JveC5wcm90b3R5cGUuYWRkUG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoaXNOYU4odGhpcy54MSkgfHwgaXNOYU4odGhpcy54MikpIHtcbiAgICAgICAgICAgIHRoaXMueDEgPSB4O1xuICAgICAgICAgICAgdGhpcy54MiA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHggPCB0aGlzLngxKSB7XG4gICAgICAgICAgICB0aGlzLngxID0geDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeCA+IHRoaXMueDIpIHtcbiAgICAgICAgICAgIHRoaXMueDIgPSB4O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKGlzTmFOKHRoaXMueTEpIHx8IGlzTmFOKHRoaXMueTIpKSB7XG4gICAgICAgICAgICB0aGlzLnkxID0geTtcbiAgICAgICAgICAgIHRoaXMueTIgPSB5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh5IDwgdGhpcy55MSkge1xuICAgICAgICAgICAgdGhpcy55MSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkgPiB0aGlzLnkyKSB7XG4gICAgICAgICAgICB0aGlzLnkyID0geTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogQWRkIGEgWCBjb29yZGluYXRlIHRvIHRoZSBib3VuZGluZyBib3guXG4gKiBUaGlzIGV4dGVuZHMgdGhlIGJvdW5kaW5nIGJveCB0byBpbmNsdWRlIHRoZSBYIGNvb3JkaW5hdGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgaW50ZXJuYWxseSBpbnNpZGUgb2YgYWRkQmV6aWVyLlxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgWCBjb29yZGluYXRlIG9mIHRoZSBwb2ludC5cbiAqL1xuQm91bmRpbmdCb3gucHJvdG90eXBlLmFkZFggPSBmdW5jdGlvbih4KSB7XG4gICAgdGhpcy5hZGRQb2ludCh4LCBudWxsKTtcbn07XG5cbi8qKlxuICogQWRkIGEgWSBjb29yZGluYXRlIHRvIHRoZSBib3VuZGluZyBib3guXG4gKiBUaGlzIGV4dGVuZHMgdGhlIGJvdW5kaW5nIGJveCB0byBpbmNsdWRlIHRoZSBZIGNvb3JkaW5hdGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgaW50ZXJuYWxseSBpbnNpZGUgb2YgYWRkQmV6aWVyLlxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSBwb2ludC5cbiAqL1xuQm91bmRpbmdCb3gucHJvdG90eXBlLmFkZFkgPSBmdW5jdGlvbih5KSB7XG4gICAgdGhpcy5hZGRQb2ludChudWxsLCB5KTtcbn07XG5cbi8qKlxuICogQWRkIGEgQsOpemllciBjdXJ2ZSB0byB0aGUgYm91bmRpbmcgYm94LlxuICogVGhpcyBleHRlbmRzIHRoZSBib3VuZGluZyBib3ggdG8gaW5jbHVkZSB0aGUgZW50aXJlIELDqXppZXIuXG4gKiBAcGFyYW0ge251bWJlcn0geDAgLSBUaGUgc3RhcnRpbmcgWCBjb29yZGluYXRlLlxuICogQHBhcmFtIHtudW1iZXJ9IHkwIC0gVGhlIHN0YXJ0aW5nIFkgY29vcmRpbmF0ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB4MSAtIFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIGZpcnN0IGNvbnRyb2wgcG9pbnQuXG4gKiBAcGFyYW0ge251bWJlcn0geTEgLSBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSBmaXJzdCBjb250cm9sIHBvaW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHgyIC0gVGhlIFggY29vcmRpbmF0ZSBvZiB0aGUgc2Vjb25kIGNvbnRyb2wgcG9pbnQuXG4gKiBAcGFyYW0ge251bWJlcn0geTIgLSBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIGVuZGluZyBYIGNvb3JkaW5hdGUuXG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBlbmRpbmcgWSBjb29yZGluYXRlLlxuICovXG5Cb3VuZGluZ0JveC5wcm90b3R5cGUuYWRkQmV6aWVyID0gZnVuY3Rpb24oeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIC8vIFRoaXMgY29kZSBpcyBiYXNlZCBvbiBodHRwOi8vbmlzaGlvaGlyb2thenUuYmxvZ3Nwb3QuY29tLzIwMDkvMDYvaG93LXRvLWNhbGN1bGF0ZS1iZXppZXItY3VydmVzLWJvdW5kaW5nLmh0bWxcbiAgICAvLyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2ljb25zOC9zdmctcGF0aC1ib3VuZGluZy1ib3hcblxuICAgIHZhciBwMCA9IFt4MCwgeTBdO1xuICAgIHZhciBwMSA9IFt4MSwgeTFdO1xuICAgIHZhciBwMiA9IFt4MiwgeTJdO1xuICAgIHZhciBwMyA9IFt4LCB5XTtcblxuICAgIHRoaXMuYWRkUG9pbnQoeDAsIHkwKTtcbiAgICB0aGlzLmFkZFBvaW50KHgsIHkpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gMTsgaSsrKSB7XG4gICAgICAgIHZhciBiID0gNiAqIHAwW2ldIC0gMTIgKiBwMVtpXSArIDYgKiBwMltpXTtcbiAgICAgICAgdmFyIGEgPSAtMyAqIHAwW2ldICsgOSAqIHAxW2ldIC0gOSAqIHAyW2ldICsgMyAqIHAzW2ldO1xuICAgICAgICB2YXIgYyA9IDMgKiBwMVtpXSAtIDMgKiBwMFtpXTtcblxuICAgICAgICBpZiAoYSA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKGIgPT09IDApIHsgY29udGludWU7IH1cbiAgICAgICAgICAgIHZhciB0ID0gLWMgLyBiO1xuICAgICAgICAgICAgaWYgKDAgPCB0ICYmIHQgPCAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHsgdGhpcy5hZGRYKGRlcml2ZShwMFtpXSwgcDFbaV0sIHAyW2ldLCBwM1tpXSwgdCkpOyB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDEpIHsgdGhpcy5hZGRZKGRlcml2ZShwMFtpXSwgcDFbaV0sIHAyW2ldLCBwM1tpXSwgdCkpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiMmFjID0gTWF0aC5wb3coYiwgMikgLSA0ICogYyAqIGE7XG4gICAgICAgIGlmIChiMmFjIDwgMCkgeyBjb250aW51ZTsgfVxuICAgICAgICB2YXIgdDEgPSAoLWIgKyBNYXRoLnNxcnQoYjJhYykpIC8gKDIgKiBhKTtcbiAgICAgICAgaWYgKDAgPCB0MSAmJiB0MSA8IDEpIHtcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7IHRoaXMuYWRkWChkZXJpdmUocDBbaV0sIHAxW2ldLCBwMltpXSwgcDNbaV0sIHQxKSk7IH1cbiAgICAgICAgICAgIGlmIChpID09PSAxKSB7IHRoaXMuYWRkWShkZXJpdmUocDBbaV0sIHAxW2ldLCBwMltpXSwgcDNbaV0sIHQxKSk7IH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdDIgPSAoLWIgLSBNYXRoLnNxcnQoYjJhYykpIC8gKDIgKiBhKTtcbiAgICAgICAgaWYgKDAgPCB0MiAmJiB0MiA8IDEpIHtcbiAgICAgICAgICAgIGlmIChpID09PSAwKSB7IHRoaXMuYWRkWChkZXJpdmUocDBbaV0sIHAxW2ldLCBwMltpXSwgcDNbaV0sIHQyKSk7IH1cbiAgICAgICAgICAgIGlmIChpID09PSAxKSB7IHRoaXMuYWRkWShkZXJpdmUocDBbaV0sIHAxW2ldLCBwMltpXSwgcDNbaV0sIHQyKSk7IH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogQWRkIGEgcXVhZHJhdGljIGN1cnZlIHRvIHRoZSBib3VuZGluZyBib3guXG4gKiBUaGlzIGV4dGVuZHMgdGhlIGJvdW5kaW5nIGJveCB0byBpbmNsdWRlIHRoZSBlbnRpcmUgcXVhZHJhdGljIGN1cnZlLlxuICogQHBhcmFtIHtudW1iZXJ9IHgwIC0gVGhlIHN0YXJ0aW5nIFggY29vcmRpbmF0ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB5MCAtIFRoZSBzdGFydGluZyBZIGNvb3JkaW5hdGUuXG4gKiBAcGFyYW0ge251bWJlcn0geDEgLSBUaGUgWCBjb29yZGluYXRlIG9mIHRoZSBjb250cm9sIHBvaW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHkxIC0gVGhlIFkgY29vcmRpbmF0ZSBvZiB0aGUgY29udHJvbCBwb2ludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIGVuZGluZyBYIGNvb3JkaW5hdGUuXG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBlbmRpbmcgWSBjb29yZGluYXRlLlxuICovXG5Cb3VuZGluZ0JveC5wcm90b3R5cGUuYWRkUXVhZCA9IGZ1bmN0aW9uKHgwLCB5MCwgeDEsIHkxLCB4LCB5KSB7XG4gICAgdmFyIGNwMXggPSB4MCArIDIgLyAzICogKHgxIC0geDApO1xuICAgIHZhciBjcDF5ID0geTAgKyAyIC8gMyAqICh5MSAtIHkwKTtcbiAgICB2YXIgY3AyeCA9IGNwMXggKyAxIC8gMyAqICh4IC0geDApO1xuICAgIHZhciBjcDJ5ID0gY3AxeSArIDEgLyAzICogKHkgLSB5MCk7XG4gICAgdGhpcy5hZGRCZXppZXIoeDAsIHkwLCBjcDF4LCBjcDF5LCBjcDJ4LCBjcDJ5LCB4LCB5KTtcbn07XG5cbi8vIEdlb21ldHJpYyBvYmplY3RzXG5cbi8qKlxuICogQSBiw6l6aWVyIHBhdGggY29udGFpbmluZyBhIHNldCBvZiBwYXRoIGNvbW1hbmRzIHNpbWlsYXIgdG8gYSBTVkcgcGF0aC5cbiAqIFBhdGhzIGNhbiBiZSBkcmF3biBvbiBhIGNvbnRleHQgdXNpbmcgYGRyYXdgLlxuICogQGV4cG9ydHMgb3BlbnR5cGUuUGF0aFxuICogQGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGF0aCgpIHtcbiAgICB0aGlzLmNvbW1hbmRzID0gW107XG4gICAgdGhpcy5maWxsID0gJ2JsYWNrJztcbiAgICB0aGlzLnN0cm9rZSA9IG51bGw7XG4gICAgdGhpcy5zdHJva2VXaWR0aCA9IDE7XG59XG5cbi8qKlxuICogQHBhcmFtICB7bnVtYmVyfSB4XG4gKiBAcGFyYW0gIHtudW1iZXJ9IHlcbiAqL1xuUGF0aC5wcm90b3R5cGUubW92ZVRvID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuY29tbWFuZHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdNJyxcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeVxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSAge251bWJlcn0geVxuICovXG5QYXRoLnByb3RvdHlwZS5saW5lVG8gPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5jb21tYW5kcy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ0wnLFxuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIERyYXdzIGN1YmljIGN1cnZlXG4gKiBAZnVuY3Rpb25cbiAqIGN1cnZlVG9cbiAqIEBtZW1iZXJvZiBvcGVudHlwZS5QYXRoLnByb3RvdHlwZVxuICogQHBhcmFtICB7bnVtYmVyfSB4MSAtIHggb2YgY29udHJvbCAxXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHkxIC0geSBvZiBjb250cm9sIDFcbiAqIEBwYXJhbSAge251bWJlcn0geDIgLSB4IG9mIGNvbnRyb2wgMlxuICogQHBhcmFtICB7bnVtYmVyfSB5MiAtIHkgb2YgY29udHJvbCAyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHggLSB4IG9mIHBhdGggcG9pbnRcbiAqIEBwYXJhbSAge251bWJlcn0geSAtIHkgb2YgcGF0aCBwb2ludFxuICovXG5cbi8qKlxuICogRHJhd3MgY3ViaWMgY3VydmVcbiAqIEBmdW5jdGlvblxuICogYmV6aWVyQ3VydmVUb1xuICogQG1lbWJlcm9mIG9wZW50eXBlLlBhdGgucHJvdG90eXBlXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHgxIC0geCBvZiBjb250cm9sIDFcbiAqIEBwYXJhbSAge251bWJlcn0geTEgLSB5IG9mIGNvbnRyb2wgMVxuICogQHBhcmFtICB7bnVtYmVyfSB4MiAtIHggb2YgY29udHJvbCAyXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHkyIC0geSBvZiBjb250cm9sIDJcbiAqIEBwYXJhbSAge251bWJlcn0geCAtIHggb2YgcGF0aCBwb2ludFxuICogQHBhcmFtICB7bnVtYmVyfSB5IC0geSBvZiBwYXRoIHBvaW50XG4gKiBAc2VlIGN1cnZlVG9cbiAqL1xuUGF0aC5wcm90b3R5cGUuY3VydmVUbyA9IFBhdGgucHJvdG90eXBlLmJlemllckN1cnZlVG8gPSBmdW5jdGlvbih4MSwgeTEsIHgyLCB5MiwgeCwgeSkge1xuICAgIHRoaXMuY29tbWFuZHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdDJyxcbiAgICAgICAgeDE6IHgxLFxuICAgICAgICB5MTogeTEsXG4gICAgICAgIHgyOiB4MixcbiAgICAgICAgeTI6IHkyLFxuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIERyYXdzIHF1YWRyYXRpYyBjdXJ2ZVxuICogQGZ1bmN0aW9uXG4gKiBxdWFkcmF0aWNDdXJ2ZVRvXG4gKiBAbWVtYmVyb2Ygb3BlbnR5cGUuUGF0aC5wcm90b3R5cGVcbiAqIEBwYXJhbSAge251bWJlcn0geDEgLSB4IG9mIGNvbnRyb2xcbiAqIEBwYXJhbSAge251bWJlcn0geTEgLSB5IG9mIGNvbnRyb2xcbiAqIEBwYXJhbSAge251bWJlcn0geCAtIHggb2YgcGF0aCBwb2ludFxuICogQHBhcmFtICB7bnVtYmVyfSB5IC0geSBvZiBwYXRoIHBvaW50XG4gKi9cblxuLyoqXG4gKiBEcmF3cyBxdWFkcmF0aWMgY3VydmVcbiAqIEBmdW5jdGlvblxuICogcXVhZFRvXG4gKiBAbWVtYmVyb2Ygb3BlbnR5cGUuUGF0aC5wcm90b3R5cGVcbiAqIEBwYXJhbSAge251bWJlcn0geDEgLSB4IG9mIGNvbnRyb2xcbiAqIEBwYXJhbSAge251bWJlcn0geTEgLSB5IG9mIGNvbnRyb2xcbiAqIEBwYXJhbSAge251bWJlcn0geCAtIHggb2YgcGF0aCBwb2ludFxuICogQHBhcmFtICB7bnVtYmVyfSB5IC0geSBvZiBwYXRoIHBvaW50XG4gKi9cblBhdGgucHJvdG90eXBlLnF1YWRUbyA9IFBhdGgucHJvdG90eXBlLnF1YWRyYXRpY0N1cnZlVG8gPSBmdW5jdGlvbih4MSwgeTEsIHgsIHkpIHtcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goe1xuICAgICAgICB0eXBlOiAnUScsXG4gICAgICAgIHgxOiB4MSxcbiAgICAgICAgeTE6IHkxLFxuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgcGF0aFxuICogQGZ1bmN0aW9uIGNsb3NlUGF0aFxuICogQG1lbWJlcm9mIG9wZW50eXBlLlBhdGgucHJvdG90eXBlXG4gKi9cblxuLyoqXG4gKiBDbG9zZSB0aGUgcGF0aFxuICogQGZ1bmN0aW9uIGNsb3NlXG4gKiBAbWVtYmVyb2Ygb3BlbnR5cGUuUGF0aC5wcm90b3R5cGVcbiAqL1xuUGF0aC5wcm90b3R5cGUuY2xvc2UgPSBQYXRoLnByb3RvdHlwZS5jbG9zZVBhdGggPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goe1xuICAgICAgICB0eXBlOiAnWidcbiAgICB9KTtcbn07XG5cbi8qKlxuICogQWRkIHRoZSBnaXZlbiBwYXRoIG9yIGxpc3Qgb2YgY29tbWFuZHMgdG8gdGhlIGNvbW1hbmRzIG9mIHRoaXMgcGF0aC5cbiAqIEBwYXJhbSAge0FycmF5fSBwYXRoT3JDb21tYW5kcyAtIGFub3RoZXIgb3BlbnR5cGUuUGF0aCwgYW4gb3BlbnR5cGUuQm91bmRpbmdCb3gsIG9yIGFuIGFycmF5IG9mIGNvbW1hbmRzLlxuICovXG5QYXRoLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbihwYXRoT3JDb21tYW5kcykge1xuICAgIGlmIChwYXRoT3JDb21tYW5kcy5jb21tYW5kcykge1xuICAgICAgICBwYXRoT3JDb21tYW5kcyA9IHBhdGhPckNvbW1hbmRzLmNvbW1hbmRzO1xuICAgIH0gZWxzZSBpZiAocGF0aE9yQ29tbWFuZHMgaW5zdGFuY2VvZiBCb3VuZGluZ0JveCkge1xuICAgICAgICB2YXIgYm94ID0gcGF0aE9yQ29tbWFuZHM7XG4gICAgICAgIHRoaXMubW92ZVRvKGJveC54MSwgYm94LnkxKTtcbiAgICAgICAgdGhpcy5saW5lVG8oYm94LngyLCBib3gueTEpO1xuICAgICAgICB0aGlzLmxpbmVUbyhib3gueDIsIGJveC55Mik7XG4gICAgICAgIHRoaXMubGluZVRvKGJveC54MSwgYm94LnkyKTtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jb21tYW5kcywgcGF0aE9yQ29tbWFuZHMpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgcGF0aC5cbiAqIEByZXR1cm5zIHtvcGVudHlwZS5Cb3VuZGluZ0JveH1cbiAqL1xuUGF0aC5wcm90b3R5cGUuZ2V0Qm91bmRpbmdCb3ggPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm94ID0gbmV3IEJvdW5kaW5nQm94KCk7XG5cbiAgICB2YXIgc3RhcnRYID0gMDtcbiAgICB2YXIgc3RhcnRZID0gMDtcbiAgICB2YXIgcHJldlggPSAwO1xuICAgIHZhciBwcmV2WSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbW1hbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjbWQgPSB0aGlzLmNvbW1hbmRzW2ldO1xuICAgICAgICBzd2l0Y2ggKGNtZC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBib3guYWRkUG9pbnQoY21kLngsIGNtZC55KTtcbiAgICAgICAgICAgICAgICBzdGFydFggPSBwcmV2WCA9IGNtZC54O1xuICAgICAgICAgICAgICAgIHN0YXJ0WSA9IHByZXZZID0gY21kLnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdMJzpcbiAgICAgICAgICAgICAgICBib3guYWRkUG9pbnQoY21kLngsIGNtZC55KTtcbiAgICAgICAgICAgICAgICBwcmV2WCA9IGNtZC54O1xuICAgICAgICAgICAgICAgIHByZXZZID0gY21kLnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICBib3guYWRkUXVhZChwcmV2WCwgcHJldlksIGNtZC54MSwgY21kLnkxLCBjbWQueCwgY21kLnkpO1xuICAgICAgICAgICAgICAgIHByZXZYID0gY21kLng7XG4gICAgICAgICAgICAgICAgcHJldlkgPSBjbWQueTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgIGJveC5hZGRCZXppZXIocHJldlgsIHByZXZZLCBjbWQueDEsIGNtZC55MSwgY21kLngyLCBjbWQueTIsIGNtZC54LCBjbWQueSk7XG4gICAgICAgICAgICAgICAgcHJldlggPSBjbWQueDtcbiAgICAgICAgICAgICAgICBwcmV2WSA9IGNtZC55O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnWic6XG4gICAgICAgICAgICAgICAgcHJldlggPSBzdGFydFg7XG4gICAgICAgICAgICAgICAgcHJldlkgPSBzdGFydFk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBwYXRoIGNvbW1hbmQgJyArIGNtZC50eXBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYm94LmlzRW1wdHkoKSkge1xuICAgICAgICBib3guYWRkUG9pbnQoMCwgMCk7XG4gICAgfVxuICAgIHJldHVybiBib3g7XG59O1xuXG4vKipcbiAqIERyYXcgdGhlIHBhdGggdG8gYSAyRCBjb250ZXh0LlxuICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCAtIEEgMkQgZHJhd2luZyBjb250ZXh0LlxuICovXG5QYXRoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oY3R4KSB7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb21tYW5kcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgY21kID0gdGhpcy5jb21tYW5kc1tpXTtcbiAgICAgICAgaWYgKGNtZC50eXBlID09PSAnTScpIHtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oY21kLngsIGNtZC55KTtcbiAgICAgICAgfSBlbHNlIGlmIChjbWQudHlwZSA9PT0gJ0wnKSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKGNtZC54LCBjbWQueSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdDJykge1xuICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8oY21kLngxLCBjbWQueTEsIGNtZC54MiwgY21kLnkyLCBjbWQueCwgY21kLnkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNtZC50eXBlID09PSAnUScpIHtcbiAgICAgICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKGNtZC54MSwgY21kLnkxLCBjbWQueCwgY21kLnkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNtZC50eXBlID09PSAnWicpIHtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmZpbGwpIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuZmlsbDtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdHJva2UpIHtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5zdHJva2U7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLnN0cm9rZVdpZHRoO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0IHRoZSBQYXRoIHRvIGEgc3RyaW5nIG9mIHBhdGggZGF0YSBpbnN0cnVjdGlvbnNcbiAqIFNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvcGF0aHMuaHRtbCNQYXRoRGF0YVxuICogQHBhcmFtICB7bnVtYmVyfSBbZGVjaW1hbFBsYWNlcz0yXSAtIFRoZSBhbW91bnQgb2YgZGVjaW1hbCBwbGFjZXMgZm9yIGZsb2F0aW5nLXBvaW50IHZhbHVlc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5QYXRoLnByb3RvdHlwZS50b1BhdGhEYXRhID0gZnVuY3Rpb24oZGVjaW1hbFBsYWNlcykge1xuICAgIGRlY2ltYWxQbGFjZXMgPSBkZWNpbWFsUGxhY2VzICE9PSB1bmRlZmluZWQgPyBkZWNpbWFsUGxhY2VzIDogMjtcblxuICAgIGZ1bmN0aW9uIGZsb2F0VG9TdHJpbmcodikge1xuICAgICAgICBpZiAoTWF0aC5yb3VuZCh2KSA9PT0gdikge1xuICAgICAgICAgICAgcmV0dXJuICcnICsgTWF0aC5yb3VuZCh2KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2LnRvRml4ZWQoZGVjaW1hbFBsYWNlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYWNrVmFsdWVzKCkge1xuICAgICAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICAgICAgdmFyIHMgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciB2ID0gYXJndW1lbnRzJDFbaV07XG4gICAgICAgICAgICBpZiAodiA+PSAwICYmIGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgcyArPSAnICc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHMgKz0gZmxvYXRUb1N0cmluZyh2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIHZhciBkID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbW1hbmRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBjbWQgPSB0aGlzLmNvbW1hbmRzW2ldO1xuICAgICAgICBpZiAoY21kLnR5cGUgPT09ICdNJykge1xuICAgICAgICAgICAgZCArPSAnTScgKyBwYWNrVmFsdWVzKGNtZC54LCBjbWQueSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdMJykge1xuICAgICAgICAgICAgZCArPSAnTCcgKyBwYWNrVmFsdWVzKGNtZC54LCBjbWQueSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdDJykge1xuICAgICAgICAgICAgZCArPSAnQycgKyBwYWNrVmFsdWVzKGNtZC54MSwgY21kLnkxLCBjbWQueDIsIGNtZC55MiwgY21kLngsIGNtZC55KTtcbiAgICAgICAgfSBlbHNlIGlmIChjbWQudHlwZSA9PT0gJ1EnKSB7XG4gICAgICAgICAgICBkICs9ICdRJyArIHBhY2tWYWx1ZXMoY21kLngxLCBjbWQueTEsIGNtZC54LCBjbWQueSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdaJykge1xuICAgICAgICAgICAgZCArPSAnWic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZDtcbn07XG5cbi8qKlxuICogQ29udmVydCB0aGUgcGF0aCB0byBhbiBTVkcgPHBhdGg+IGVsZW1lbnQsIGFzIGEgc3RyaW5nLlxuICogQHBhcmFtICB7bnVtYmVyfSBbZGVjaW1hbFBsYWNlcz0yXSAtIFRoZSBhbW91bnQgb2YgZGVjaW1hbCBwbGFjZXMgZm9yIGZsb2F0aW5nLXBvaW50IHZhbHVlc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5QYXRoLnByb3RvdHlwZS50b1NWRyA9IGZ1bmN0aW9uKGRlY2ltYWxQbGFjZXMpIHtcbiAgICB2YXIgc3ZnID0gJzxwYXRoIGQ9XCInO1xuICAgIHN2ZyArPSB0aGlzLnRvUGF0aERhdGEoZGVjaW1hbFBsYWNlcyk7XG4gICAgc3ZnICs9ICdcIic7XG4gICAgaWYgKHRoaXMuZmlsbCAmJiB0aGlzLmZpbGwgIT09ICdibGFjaycpIHtcbiAgICAgICAgaWYgKHRoaXMuZmlsbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3ZnICs9ICcgZmlsbD1cIm5vbmVcIic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdmcgKz0gJyBmaWxsPVwiJyArIHRoaXMuZmlsbCArICdcIic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdHJva2UpIHtcbiAgICAgICAgc3ZnICs9ICcgc3Ryb2tlPVwiJyArIHRoaXMuc3Ryb2tlICsgJ1wiIHN0cm9rZS13aWR0aD1cIicgKyB0aGlzLnN0cm9rZVdpZHRoICsgJ1wiJztcbiAgICB9XG5cbiAgICBzdmcgKz0gJy8+JztcbiAgICByZXR1cm4gc3ZnO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IHRoZSBwYXRoIHRvIGEgRE9NIGVsZW1lbnQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtkZWNpbWFsUGxhY2VzPTJdIC0gVGhlIGFtb3VudCBvZiBkZWNpbWFsIHBsYWNlcyBmb3IgZmxvYXRpbmctcG9pbnQgdmFsdWVzXG4gKiBAcmV0dXJuIHtTVkdQYXRoRWxlbWVudH1cbiAqL1xuUGF0aC5wcm90b3R5cGUudG9ET01FbGVtZW50ID0gZnVuY3Rpb24oZGVjaW1hbFBsYWNlcykge1xuICAgIHZhciB0ZW1wb3JhcnlQYXRoID0gdGhpcy50b1BhdGhEYXRhKGRlY2ltYWxQbGFjZXMpO1xuICAgIHZhciBuZXdQYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XG5cbiAgICBuZXdQYXRoLnNldEF0dHJpYnV0ZSgnZCcsIHRlbXBvcmFyeVBhdGgpO1xuXG4gICAgcmV0dXJuIG5ld1BhdGg7XG59O1xuXG4vLyBSdW4tdGltZSBjaGVja2luZyBvZiBwcmVjb25kaXRpb25zLlxuXG5mdW5jdGlvbiBmYWlsKG1lc3NhZ2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG59XG5cbi8vIFByZWNvbmRpdGlvbiBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGUgZ2l2ZW4gcHJlZGljYXRlIGlzIHRydWUuXG4vLyBJZiBub3QsIGl0IHdpbGwgdGhyb3cgYW4gZXJyb3IuXG5mdW5jdGlvbiBhcmd1bWVudChwcmVkaWNhdGUsIG1lc3NhZ2UpIHtcbiAgICBpZiAoIXByZWRpY2F0ZSkge1xuICAgICAgICBmYWlsKG1lc3NhZ2UpO1xuICAgIH1cbn1cbnZhciBjaGVjayA9IHsgZmFpbDogZmFpbCwgYXJndW1lbnQ6IGFyZ3VtZW50LCBhc3NlcnQ6IGFyZ3VtZW50IH07XG5cbi8vIERhdGEgdHlwZXMgdXNlZCBpbiB0aGUgT3BlblR5cGUgZm9udCBmaWxlLlxuXG52YXIgTElNSVQxNiA9IDMyNzY4OyAvLyBUaGUgbGltaXQgYXQgd2hpY2ggYSAxNi1iaXQgbnVtYmVyIHN3aXRjaGVzIHNpZ25zID09IDJeMTVcbnZhciBMSU1JVDMyID0gMjE0NzQ4MzY0ODsgLy8gVGhlIGxpbWl0IGF0IHdoaWNoIGEgMzItYml0IG51bWJlciBzd2l0Y2hlcyBzaWducyA9PSAyIF4gMzFcblxuLyoqXG4gKiBAZXhwb3J0cyBvcGVudHlwZS5kZWNvZGVcbiAqIEBjbGFzc1xuICovXG52YXIgZGVjb2RlID0ge307XG4vKipcbiAqIEBleHBvcnRzIG9wZW50eXBlLmVuY29kZVxuICogQGNsYXNzXG4gKi9cbnZhciBlbmNvZGUgPSB7fTtcbi8qKlxuICogQGV4cG9ydHMgb3BlbnR5cGUuc2l6ZU9mXG4gKiBAY2xhc3NcbiAqL1xudmFyIHNpemVPZiA9IHt9O1xuXG4vLyBSZXR1cm4gYSBmdW5jdGlvbiB0aGF0IGFsd2F5cyByZXR1cm5zIHRoZSBzYW1lIHZhbHVlLlxuZnVuY3Rpb24gY29uc3RhbnQodikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfTtcbn1cblxuLy8gT3BlblR5cGUgZGF0YSB0eXBlcyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDb252ZXJ0IGFuIDgtYml0IHVuc2lnbmVkIGludGVnZXIgdG8gYSBsaXN0IG9mIDEgYnl0ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5lbmNvZGUuQllURSA9IGZ1bmN0aW9uKHYpIHtcbiAgICBjaGVjay5hcmd1bWVudCh2ID49IDAgJiYgdiA8PSAyNTUsICdCeXRlIHZhbHVlIHNob3VsZCBiZSBiZXR3ZWVuIDAgYW5kIDI1NS4nKTtcbiAgICByZXR1cm4gW3ZdO1xufTtcbi8qKlxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5zaXplT2YuQllURSA9IGNvbnN0YW50KDEpO1xuXG4vKipcbiAqIENvbnZlcnQgYSA4LWJpdCBzaWduZWQgaW50ZWdlciB0byBhIGxpc3Qgb2YgMSBieXRlLlxuICogQHBhcmFtIHtzdHJpbmd9XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmVuY29kZS5DSEFSID0gZnVuY3Rpb24odikge1xuICAgIHJldHVybiBbdi5jaGFyQ29kZUF0KDApXTtcbn07XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5zaXplT2YuQ0hBUiA9IGNvbnN0YW50KDEpO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQVNDSUkgc3RyaW5nIHRvIGEgbGlzdCBvZiBieXRlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5lbmNvZGUuQ0hBUkFSUkFZID0gZnVuY3Rpb24odikge1xuICAgIGlmICh0eXBlb2YgdiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdiA9ICcnO1xuICAgICAgICBjb25zb2xlLndhcm4oJ1VuZGVmaW5lZCBDSEFSQVJSQVkgZW5jb3VudGVyZWQgYW5kIHRyZWF0ZWQgYXMgYW4gZW1wdHkgc3RyaW5nLiBUaGlzIGlzIHByb2JhYmx5IGNhdXNlZCBieSBhIG1pc3NpbmcgZ2x5cGggbmFtZS4nKTtcbiAgICB9XG4gICAgdmFyIGIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYltpXSA9IHYuY2hhckNvZGVBdChpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYjtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheX1cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbnNpemVPZi5DSEFSQVJSQVkgPSBmdW5jdGlvbih2KSB7XG4gICAgaWYgKHR5cGVvZiB2ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIHYubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgMTYtYml0IHVuc2lnbmVkIGludGVnZXIgdG8gYSBsaXN0IG9mIDIgYnl0ZXMuXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZW5jb2RlLlVTSE9SVCA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gWyh2ID4+IDgpICYgMHhGRiwgdiAmIDB4RkZdO1xufTtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbnNpemVPZi5VU0hPUlQgPSBjb25zdGFudCgyKTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgMTYtYml0IHNpZ25lZCBpbnRlZ2VyIHRvIGEgbGlzdCBvZiAyIGJ5dGVzLlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmVuY29kZS5TSE9SVCA9IGZ1bmN0aW9uKHYpIHtcbiAgICAvLyBUd28ncyBjb21wbGVtZW50XG4gICAgaWYgKHYgPj0gTElNSVQxNikge1xuICAgICAgICB2ID0gLSgyICogTElNSVQxNiAtIHYpO1xuICAgIH1cblxuICAgIHJldHVybiBbKHYgPj4gOCkgJiAweEZGLCB2ICYgMHhGRl07XG59O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqL1xuc2l6ZU9mLlNIT1JUID0gY29uc3RhbnQoMik7XG5cbi8qKlxuICogQ29udmVydCBhIDI0LWJpdCB1bnNpZ25lZCBpbnRlZ2VyIHRvIGEgbGlzdCBvZiAzIGJ5dGVzLlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmVuY29kZS5VSU5UMjQgPSBmdW5jdGlvbih2KSB7XG4gICAgcmV0dXJuIFsodiA+PiAxNikgJiAweEZGLCAodiA+PiA4KSAmIDB4RkYsIHYgJiAweEZGXTtcbn07XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5zaXplT2YuVUlOVDI0ID0gY29uc3RhbnQoMyk7XG5cbi8qKlxuICogQ29udmVydCBhIDMyLWJpdCB1bnNpZ25lZCBpbnRlZ2VyIHRvIGEgbGlzdCBvZiA0IGJ5dGVzLlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmVuY29kZS5VTE9ORyA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gWyh2ID4+IDI0KSAmIDB4RkYsICh2ID4+IDE2KSAmIDB4RkYsICh2ID4+IDgpICYgMHhGRiwgdiAmIDB4RkZdO1xufTtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbnNpemVPZi5VTE9ORyA9IGNvbnN0YW50KDQpO1xuXG4vKipcbiAqIENvbnZlcnQgYSAzMi1iaXQgdW5zaWduZWQgaW50ZWdlciB0byBhIGxpc3Qgb2YgNCBieXRlcy5cbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5lbmNvZGUuTE9ORyA9IGZ1bmN0aW9uKHYpIHtcbiAgICAvLyBUd28ncyBjb21wbGVtZW50XG4gICAgaWYgKHYgPj0gTElNSVQzMikge1xuICAgICAgICB2ID0gLSgyICogTElNSVQzMiAtIHYpO1xuICAgIH1cblxuICAgIHJldHVybiBbKHYgPj4gMjQpICYgMHhGRiwgKHYgPj4gMTYpICYgMHhGRiwgKHYgPj4gOCkgJiAweEZGLCB2ICYgMHhGRl07XG59O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqL1xuc2l6ZU9mLkxPTkcgPSBjb25zdGFudCg0KTtcblxuZW5jb2RlLkZJWEVEID0gZW5jb2RlLlVMT05HO1xuc2l6ZU9mLkZJWEVEID0gc2l6ZU9mLlVMT05HO1xuXG5lbmNvZGUuRldPUkQgPSBlbmNvZGUuU0hPUlQ7XG5zaXplT2YuRldPUkQgPSBzaXplT2YuU0hPUlQ7XG5cbmVuY29kZS5VRldPUkQgPSBlbmNvZGUuVVNIT1JUO1xuc2l6ZU9mLlVGV09SRCA9IHNpemVPZi5VU0hPUlQ7XG5cbi8qKlxuICogQ29udmVydCBhIDMyLWJpdCBBcHBsZSBNYWMgdGltZXN0YW1wIGludGVnZXIgdG8gYSBsaXN0IG9mIDggYnl0ZXMsIDY0LWJpdCB0aW1lc3RhbXAuXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZW5jb2RlLkxPTkdEQVRFVElNRSA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gWzAsIDAsIDAsIDAsICh2ID4+IDI0KSAmIDB4RkYsICh2ID4+IDE2KSAmIDB4RkYsICh2ID4+IDgpICYgMHhGRiwgdiAmIDB4RkZdO1xufTtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbnNpemVPZi5MT05HREFURVRJTUUgPSBjb25zdGFudCg4KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgNC1jaGFyIHRhZyB0byBhIGxpc3Qgb2YgNCBieXRlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5lbmNvZGUuVEFHID0gZnVuY3Rpb24odikge1xuICAgIGNoZWNrLmFyZ3VtZW50KHYubGVuZ3RoID09PSA0LCAnVGFnIHNob3VsZCBiZSBleGFjdGx5IDQgQVNDSUkgY2hhcmFjdGVycy4nKTtcbiAgICByZXR1cm4gW3YuY2hhckNvZGVBdCgwKSxcbiAgICAgICAgICAgIHYuY2hhckNvZGVBdCgxKSxcbiAgICAgICAgICAgIHYuY2hhckNvZGVBdCgyKSxcbiAgICAgICAgICAgIHYuY2hhckNvZGVBdCgzKV07XG59O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqL1xuc2l6ZU9mLlRBRyA9IGNvbnN0YW50KDQpO1xuXG4vLyBDRkYgZGF0YSB0eXBlcyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5lbmNvZGUuQ2FyZDggPSBlbmNvZGUuQllURTtcbnNpemVPZi5DYXJkOCA9IHNpemVPZi5CWVRFO1xuXG5lbmNvZGUuQ2FyZDE2ID0gZW5jb2RlLlVTSE9SVDtcbnNpemVPZi5DYXJkMTYgPSBzaXplT2YuVVNIT1JUO1xuXG5lbmNvZGUuT2ZmU2l6ZSA9IGVuY29kZS5CWVRFO1xuc2l6ZU9mLk9mZlNpemUgPSBzaXplT2YuQllURTtcblxuZW5jb2RlLlNJRCA9IGVuY29kZS5VU0hPUlQ7XG5zaXplT2YuU0lEID0gc2l6ZU9mLlVTSE9SVDtcblxuLy8gQ29udmVydCBhIG51bWVyaWMgb3BlcmFuZCBvciBjaGFyc3RyaW5nIG51bWJlciB0byBhIHZhcmlhYmxlLXNpemUgbGlzdCBvZiBieXRlcy5cbi8qKlxuICogQ29udmVydCBhIG51bWVyaWMgb3BlcmFuZCBvciBjaGFyc3RyaW5nIG51bWJlciB0byBhIHZhcmlhYmxlLXNpemUgbGlzdCBvZiBieXRlcy5cbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5lbmNvZGUuTlVNQkVSID0gZnVuY3Rpb24odikge1xuICAgIGlmICh2ID49IC0xMDcgJiYgdiA8PSAxMDcpIHtcbiAgICAgICAgcmV0dXJuIFt2ICsgMTM5XTtcbiAgICB9IGVsc2UgaWYgKHYgPj0gMTA4ICYmIHYgPD0gMTEzMSkge1xuICAgICAgICB2ID0gdiAtIDEwODtcbiAgICAgICAgcmV0dXJuIFsodiA+PiA4KSArIDI0NywgdiAmIDB4RkZdO1xuICAgIH0gZWxzZSBpZiAodiA+PSAtMTEzMSAmJiB2IDw9IC0xMDgpIHtcbiAgICAgICAgdiA9IC12IC0gMTA4O1xuICAgICAgICByZXR1cm4gWyh2ID4+IDgpICsgMjUxLCB2ICYgMHhGRl07XG4gICAgfSBlbHNlIGlmICh2ID49IC0zMjc2OCAmJiB2IDw9IDMyNzY3KSB7XG4gICAgICAgIHJldHVybiBlbmNvZGUuTlVNQkVSMTYodik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZS5OVU1CRVIzMih2KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuc2l6ZU9mLk5VTUJFUiA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gZW5jb2RlLk5VTUJFUih2KS5sZW5ndGg7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSBzaWduZWQgbnVtYmVyIGJldHdlZW4gLTMyNzY4IGFuZCArMzI3NjcgdG8gYSB0aHJlZS1ieXRlIHZhbHVlLlxuICogVGhpcyBlbnN1cmVzIHdlIGFsd2F5cyB1c2UgdGhyZWUgYnl0ZXMsIGJ1dCBpcyBub3QgdGhlIG1vc3QgY29tcGFjdCBmb3JtYXQuXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZW5jb2RlLk5VTUJFUjE2ID0gZnVuY3Rpb24odikge1xuICAgIHJldHVybiBbMjgsICh2ID4+IDgpICYgMHhGRiwgdiAmIDB4RkZdO1xufTtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbnNpemVPZi5OVU1CRVIxNiA9IGNvbnN0YW50KDMpO1xuXG4vKipcbiAqIENvbnZlcnQgYSBzaWduZWQgbnVtYmVyIGJldHdlZW4gLSgyXjMxKSBhbmQgKygyXjMxLTEpIHRvIGEgZml2ZS1ieXRlIHZhbHVlLlxuICogVGhpcyBpcyB1c2VmdWwgaWYgeW91IHdhbnQgdG8gYmUgc3VyZSB5b3UgYWx3YXlzIHVzZSBmb3VyIGJ5dGVzLFxuICogYXQgdGhlIGV4cGVuc2Ugb2Ygd2FzdGluZyBhIGZldyBieXRlcyBmb3Igc21hbGxlciBudW1iZXJzLlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmVuY29kZS5OVU1CRVIzMiA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gWzI5LCAodiA+PiAyNCkgJiAweEZGLCAodiA+PiAxNikgJiAweEZGLCAodiA+PiA4KSAmIDB4RkYsIHYgJiAweEZGXTtcbn07XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5zaXplT2YuTlVNQkVSMzIgPSBjb25zdGFudCg1KTtcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZW5jb2RlLlJFQUwgPSBmdW5jdGlvbih2KSB7XG4gICAgdmFyIHZhbHVlID0gdi50b1N0cmluZygpO1xuXG4gICAgLy8gU29tZSBudW1iZXJzIHVzZSBhbiBlcHNpbG9uIHRvIGVuY29kZSB0aGUgdmFsdWUuIChlLmcuIEphdmFTY3JpcHQgd2lsbCBzdG9yZSAwLjAwMDAwMDEgYXMgMWUtNylcbiAgICAvLyBUaGlzIGNvZGUgY29udmVydHMgaXQgYmFjayB0byBhIG51bWJlciB3aXRob3V0IHRoZSBlcHNpbG9uLlxuICAgIHZhciBtID0gL1xcLihcXGQqPykoPzo5ezUsMjB9fDB7NSwyMH0pXFxkezAsMn0oPzplKC4rKXwkKS8uZXhlYyh2YWx1ZSk7XG4gICAgaWYgKG0pIHtcbiAgICAgICAgdmFyIGVwc2lsb24gPSBwYXJzZUZsb2F0KCcxZScgKyAoKG1bMl0gPyArbVsyXSA6IDApICsgbVsxXS5sZW5ndGgpKTtcbiAgICAgICAgdmFsdWUgPSAoTWF0aC5yb3VuZCh2ICogZXBzaWxvbikgLyBlcHNpbG9uKS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHZhciBuaWJibGVzID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gdmFsdWUubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMSkge1xuICAgICAgICB2YXIgYyA9IHZhbHVlW2ldO1xuICAgICAgICBpZiAoYyA9PT0gJ2UnKSB7XG4gICAgICAgICAgICBuaWJibGVzICs9IHZhbHVlWysraV0gPT09ICctJyA/ICdjJyA6ICdiJztcbiAgICAgICAgfSBlbHNlIGlmIChjID09PSAnLicpIHtcbiAgICAgICAgICAgIG5pYmJsZXMgKz0gJ2EnO1xuICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICctJykge1xuICAgICAgICAgICAgbmliYmxlcyArPSAnZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuaWJibGVzICs9IGM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuaWJibGVzICs9IChuaWJibGVzLmxlbmd0aCAmIDEpID8gJ2YnIDogJ2ZmJztcbiAgICB2YXIgb3V0ID0gWzMwXTtcbiAgICBmb3IgKHZhciBpJDEgPSAwLCBpaSQxID0gbmliYmxlcy5sZW5ndGg7IGkkMSA8IGlpJDE7IGkkMSArPSAyKSB7XG4gICAgICAgIG91dC5wdXNoKHBhcnNlSW50KG5pYmJsZXMuc3Vic3RyKGkkMSwgMiksIDE2KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5zaXplT2YuUkVBTCA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gZW5jb2RlLlJFQUwodikubGVuZ3RoO1xufTtcblxuZW5jb2RlLk5BTUUgPSBlbmNvZGUuQ0hBUkFSUkFZO1xuc2l6ZU9mLk5BTUUgPSBzaXplT2YuQ0hBUkFSUkFZO1xuXG5lbmNvZGUuU1RSSU5HID0gZW5jb2RlLkNIQVJBUlJBWTtcbnNpemVPZi5TVFJJTkcgPSBzaXplT2YuQ0hBUkFSUkFZO1xuXG4vKipcbiAqIEBwYXJhbSB7RGF0YVZpZXd9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1CeXRlc1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZGVjb2RlLlVURjggPSBmdW5jdGlvbihkYXRhLCBvZmZzZXQsIG51bUJ5dGVzKSB7XG4gICAgdmFyIGNvZGVQb2ludHMgPSBbXTtcbiAgICB2YXIgbnVtQ2hhcnMgPSBudW1CeXRlcztcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG51bUNoYXJzOyBqKyssIG9mZnNldCArPSAxKSB7XG4gICAgICAgIGNvZGVQb2ludHNbal0gPSBkYXRhLmdldFVpbnQ4KG9mZnNldCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY29kZVBvaW50cyk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7RGF0YVZpZXd9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1CeXRlc1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZGVjb2RlLlVURjE2ID0gZnVuY3Rpb24oZGF0YSwgb2Zmc2V0LCBudW1CeXRlcykge1xuICAgIHZhciBjb2RlUG9pbnRzID0gW107XG4gICAgdmFyIG51bUNoYXJzID0gbnVtQnl0ZXMgLyAyO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbnVtQ2hhcnM7IGorKywgb2Zmc2V0ICs9IDIpIHtcbiAgICAgICAgY29kZVBvaW50c1tqXSA9IGRhdGEuZ2V0VWludDE2KG9mZnNldCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY29kZVBvaW50cyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSBKYXZhU2NyaXB0IHN0cmluZyB0byBVVEYxNi1CRS5cbiAqIEBwYXJhbSB7c3RyaW5nfVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5lbmNvZGUuVVRGMTYgPSBmdW5jdGlvbih2KSB7XG4gICAgdmFyIGIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGNvZGVwb2ludCA9IHYuY2hhckNvZGVBdChpKTtcbiAgICAgICAgYltiLmxlbmd0aF0gPSAoY29kZXBvaW50ID4+IDgpICYgMHhGRjtcbiAgICAgICAgYltiLmxlbmd0aF0gPSBjb2RlcG9pbnQgJiAweEZGO1xuICAgIH1cblxuICAgIHJldHVybiBiO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ31cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbnNpemVPZi5VVEYxNiA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gdi5sZW5ndGggKiAyO1xufTtcblxuLy8gRGF0YSBmb3IgY29udmVydGluZyBvbGQgZWlnaHQtYml0IE1hY2ludG9zaCBlbmNvZGluZ3MgdG8gVW5pY29kZS5cbi8vIFRoaXMgcmVwcmVzZW50YXRpb24gaXMgb3B0aW1pemVkIGZvciBkZWNvZGluZzsgZW5jb2RpbmcgaXMgc2xvd2VyXG4vLyBhbmQgbmVlZHMgbW9yZSBtZW1vcnkuIFRoZSBhc3N1bXB0aW9uIGlzIHRoYXQgYWxsIG9wZW50eXBlLmpzIHVzZXJzXG4vLyB3YW50IHRvIG9wZW4gZm9udHMsIGJ1dCBzYXZpbmcgYSBmb250IHdpbGwgYmUgY29tcGFyYXRpdmVseSByYXJlXG4vLyBzbyBpdCBjYW4gYmUgbW9yZSBleHBlbnNpdmUuIEtleWVkIGJ5IElBTkEgY2hhcmFjdGVyIHNldCBuYW1lLlxuLy9cbi8vIFB5dGhvbiBzY3JpcHQgZm9yIGdlbmVyYXRpbmcgdGhlc2Ugc3RyaW5nczpcbi8vXG4vLyAgICAgcyA9IHUnJy5qb2luKFtjaHIoYykuZGVjb2RlKCdtYWNfZ3JlZWsnKSBmb3IgYyBpbiByYW5nZSgxMjgsIDI1NildKVxuLy8gICAgIHByaW50KHMuZW5jb2RlKCd1dGYtOCcpKVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZWlnaHRCaXRNYWNFbmNvZGluZ3MgPSB7XG4gICAgJ3gtbWFjLWNyb2F0aWFuJzogIC8vIFB5dGhvbjogJ21hY19jcm9hdGlhbidcbiAgICAnw4TDhcOHw4nDkcOWw5zDocOgw6LDpMOjw6XDp8Opw6jDqsOrw63DrMOuw6/DscOzw7LDtMO2w7XDusO5w7vDvOKAoMKwwqLCo8Kn4oCiwrbDn8KuxaDihKLCtMKo4omgxb3DmOKInsKx4omk4oml4oiGwrXiiILiiJHiiI/FoeKIq8KqwrrOqcW+w7gnICtcbiAgICAnwr/CocKs4oiaxpLiiYjEhsKrxIzigKbCoMOAw4PDlcWSxZPEkOKAlOKAnOKAneKAmOKAmcO34peK76O/wqnigYTigqzigLnigLrDhsK74oCTwrfigJrigJ7igLDDgsSHw4HEjcOIw43DjsOPw4zDk8OUxJHDksOaw5vDmcSxy4bLnMKvz4DDi8uawrjDisOmy4cnLFxuICAgICd4LW1hYy1jeXJpbGxpYyc6ICAvLyBQeXRob246ICdtYWNfY3lyaWxsaWMnXG4gICAgJ9CQ0JHQktCT0JTQldCW0JfQmNCZ0JrQm9Cc0J3QntCf0KDQodCi0KPQpNCl0KbQp9Co0KnQqtCr0KzQrdCu0K/igKDCsNKQwqPCp+KAosK20IbCrsKp4oSi0ILRkuKJoNCD0ZPiiJ7CseKJpOKJpdGWwrXSkdCI0ITRlNCH0ZfQidGZ0IrRmicgK1xuICAgICfRmNCFwqziiJrGkuKJiOKIhsKrwrvigKbCoNCL0ZvQjNGc0ZXigJPigJTigJzigJ3igJjigJnDt+KAntCO0Z7Qj9Gf4oSW0IHRkdGP0LDQsdCy0LPQtNC10LbQt9C40LnQutC70LzQvdC+0L/RgNGB0YLRg9GE0YXRhtGH0YjRidGK0YvRjNGN0Y4nLFxuICAgICd4LW1hYy1nYWVsaWMnOiAvLyBodHRwOi8vdW5pY29kZS5vcmcvUHVibGljL01BUFBJTkdTL1ZFTkRPUlMvQVBQTEUvR0FFTElDLlRYVFxuICAgICfDhMOFw4fDicORw5bDnMOhw6DDosOkw6PDpcOnw6nDqMOqw6vDrcOsw67Dr8Oxw7PDssO0w7bDtcO6w7nDu8O84oCgwrDCosKjwqfigKLCtsOfwq7CqeKEosK0wqjiiaDDhsOY4biCwrHiiaTiiaXhuIPEisSL4biK4biL4bie4bifxKDEoeG5gMOmw7gnICtcbiAgICAn4bmB4bmW4bmXybzGksW/4bmgwqvCu+KApsKgw4DDg8OVxZLFk+KAk+KAlOKAnOKAneKAmOKAmeG5oeG6m8O/xbjhuarigqzigLnigLrFtsW34bmrwrfhu7Lhu7PigYrDgsOKw4HDi8OIw43DjsOPw4zDk8OU4pmjw5LDmsObw5nEscOdw73FtMW14bqE4bqF4bqA4bqB4bqC4bqDJyxcbiAgICAneC1tYWMtZ3JlZWsnOiAgLy8gUHl0aG9uOiAnbWFjX2dyZWVrJ1xuICAgICfDhMK5wrLDicKzw5bDnM6Fw6DDosOkzoTCqMOnw6nDqMOqw6vCo+KEosOuw6/igKLCveKAsMO0w7bCpuKCrMO5w7vDvOKAoM6TzpTOmM6bzp7OoMOfwq7Cqc6jzqrCp+KJoMKwwrfOkcKx4omk4omlwqXOks6VzpbOl86ZzprOnM6mzqvOqM6pJyArXG4gICAgJ86szp3CrM6fzqHiiYjOpMKrwrvigKbCoM6lzqfOhs6IxZPigJPigJXigJzigJ3igJjigJnDt86JzorOjM6Ozq3Ors6vz4zOj8+NzrHOss+IzrTOtc+GzrPOt865zr7Ous67zrzOvc6/z4DPjs+Bz4PPhM64z4nPgs+Hz4XOts+Kz4vOkM6wXFx1MDBBRCcsXG4gICAgJ3gtbWFjLWljZWxhbmRpYyc6ICAvLyBQeXRob246ICdtYWNfaWNlbGFuZCdcbiAgICAnw4TDhcOHw4nDkcOWw5zDocOgw6LDpMOjw6XDp8Opw6jDqsOrw63DrMOuw6/DscOzw7LDtMO2w7XDusO5w7vDvMOdwrDCosKjwqfigKLCtsOfwq7CqeKEosK0wqjiiaDDhsOY4oiewrHiiaTiiaXCpcK14oiC4oiR4oiPz4DiiKvCqsK6zqnDpsO4JyArXG4gICAgJ8K/wqHCrOKImsaS4omI4oiGwqvCu+KApsKgw4DDg8OVxZLFk+KAk+KAlOKAnOKAneKAmOKAmcO34peKw7/FuOKBhOKCrMOQw7DDnsO+w73Ct+KAmuKAnuKAsMOCw4rDgcOLw4jDjcOOw4/DjMOTw5Tvo7/DksOaw5vDmcSxy4bLnMKvy5jLmcuawrjLncuby4cnLFxuICAgICd4LW1hYy1pbnVpdCc6IC8vIGh0dHA6Ly91bmljb2RlLm9yZy9QdWJsaWMvTUFQUElOR1MvVkVORE9SUy9BUFBMRS9JTlVJVC5UWFRcbiAgICAn4ZCD4ZCE4ZCF4ZCG4ZCK4ZCL4ZCx4ZCy4ZCz4ZC04ZC44ZC54ZGJ4ZGO4ZGP4ZGQ4ZGR4ZGV4ZGW4ZGm4ZGt4ZGu4ZGv4ZGw4ZGy4ZGz4ZKD4ZKL4ZKM4ZKN4ZKO4ZKQ4ZKRwrDhkqHhkqXhkqbigKLCtuGSp8KuwqnihKLhkqjhkqrhkqvhkrvhk4Lhk4Phk4Thk4Xhk4fhk4jhk5Dhk6/hk7Dhk7Hhk7Lhk7Thk7XhlIXhk5Xhk5bhk5cnICtcbiAgICAn4ZOY4ZOa4ZOb4ZOq4ZSo4ZSp4ZSq4ZSr4ZSt4oCmwqDhlK7hlL7hlZXhlZbhlZfigJPigJTigJzigJ3igJjigJnhlZjhlZnhlZrhlZ3hlYbhlYfhlYjhlYnhlYvhlYzhlZDhlb/hloDhloHhloLhloPhloThloXhlo/hlpDhlpHhlpLhlpPhlpThlpXhmbHhmbLhmbPhmbThmbXhmbbhlpbhlqDhlqHhlqLhlqPhlqThlqXhlqbhlbzFgcWCJyxcbiAgICAneC1tYWMtY2UnOiAgLy8gUHl0aG9uOiAnbWFjX2xhdGluMidcbiAgICAnw4TEgMSBw4nEhMOWw5zDocSFxIzDpMSNxIbEh8OpxbnFusSOw63Ej8SSxJPElsOzxJfDtMO2w7XDusSaxJvDvOKAoMKwxJjCo8Kn4oCiwrbDn8KuwqnihKLEmcKo4omgxKPErsSvxKriiaTiiaXEq8S24oiC4oiRxYLEu8S8xL3EvsS5xLrFhScgK1xuICAgICfFhsWDwqziiJrFhMWH4oiGwqvCu+KApsKgxYjFkMOVxZHFjOKAk+KAlOKAnOKAneKAmOKAmcO34peKxY3FlMWVxZjigLnigLrFmcWWxZfFoOKAmuKAnsWhxZrFm8OBxaTFpcONxb3FvsWqw5PDlMWrxa7DmsWvxbDFscWyxbPDncO9xLfFu8WBxbzEosuHJyxcbiAgICBtYWNpbnRvc2g6ICAvLyBQeXRob246ICdtYWNfcm9tYW4nXG4gICAgJ8OEw4XDh8OJw5HDlsOcw6HDoMOiw6TDo8Olw6fDqcOow6rDq8Otw6zDrsOvw7HDs8Oyw7TDtsO1w7rDucO7w7zigKDCsMKiwqPCp+KAosK2w5/CrsKp4oSiwrTCqOKJoMOGw5jiiJ7CseKJpOKJpcKlwrXiiILiiJHiiI/PgOKIq8KqwrrOqcOmw7gnICtcbiAgICAnwr/CocKs4oiaxpLiiYjiiIbCq8K74oCmwqDDgMODw5XFksWT4oCT4oCU4oCc4oCd4oCY4oCZw7fil4rDv8W44oGE4oKs4oC54oC676yB76yC4oChwrfigJrigJ7igLDDgsOKw4HDi8OIw43DjsOPw4zDk8OU76O/w5LDmsObw5nEscuGy5zCr8uYy5nLmsK4y53Lm8uHJyxcbiAgICAneC1tYWMtcm9tYW5pYW4nOiAgLy8gUHl0aG9uOiAnbWFjX3JvbWFuaWFuJ1xuICAgICfDhMOFw4fDicORw5bDnMOhw6DDosOkw6PDpcOnw6nDqMOqw6vDrcOsw67Dr8Oxw7PDssO0w7bDtcO6w7nDu8O84oCgwrDCosKjwqfigKLCtsOfwq7CqeKEosK0wqjiiaDEgsiY4oiewrHiiaTiiaXCpcK14oiC4oiR4oiPz4DiiKvCqsK6zqnEg8iZJyArXG4gICAgJ8K/wqHCrOKImsaS4omI4oiGwqvCu+KApsKgw4DDg8OVxZLFk+KAk+KAlOKAnOKAneKAmOKAmcO34peKw7/FuOKBhOKCrOKAueKAusiayJvigKHCt+KAmuKAnuKAsMOCw4rDgcOLw4jDjcOOw4/DjMOTw5Tvo7/DksOaw5vDmcSxy4bLnMKvy5jLmcuawrjLncuby4cnLFxuICAgICd4LW1hYy10dXJraXNoJzogIC8vIFB5dGhvbjogJ21hY190dXJraXNoJ1xuICAgICfDhMOFw4fDicORw5bDnMOhw6DDosOkw6PDpcOnw6nDqMOqw6vDrcOsw67Dr8Oxw7PDssO0w7bDtcO6w7nDu8O84oCgwrDCosKjwqfigKLCtsOfwq7CqeKEosK0wqjiiaDDhsOY4oiewrHiiaTiiaXCpcK14oiC4oiR4oiPz4DiiKvCqsK6zqnDpsO4JyArXG4gICAgJ8K/wqHCrOKImsaS4omI4oiGwqvCu+KApsKgw4DDg8OVxZLFk+KAk+KAlOKAnOKAneKAmOKAmcO34peKw7/FuMSexJ/EsMSxxZ7Fn+KAocK34oCa4oCe4oCww4LDisOBw4vDiMONw47Dj8OMw5PDlO+jv8OSw5rDm8OZ76Kgy4bLnMKvy5jLmcuawrjLncuby4cnXG59O1xuXG4vKipcbiAqIERlY29kZXMgYW4gb2xkLXN0eWxlIE1hY2ludG9zaCBzdHJpbmcuIFJldHVybnMgZWl0aGVyIGEgVW5pY29kZSBKYXZhU2NyaXB0XG4gKiBzdHJpbmcsIG9yICd1bmRlZmluZWQnIGlmIHRoZSBlbmNvZGluZyBpcyB1bnN1cHBvcnRlZC4gRm9yIGV4YW1wbGUsIHdlIGRvXG4gKiBub3Qgc3VwcG9ydCBDaGluZXNlLCBKYXBhbmVzZSBvciBLb3JlYW4gYmVjYXVzZSB0aGVzZSB3b3VsZCBuZWVkIGxhcmdlXG4gKiBtYXBwaW5nIHRhYmxlcy5cbiAqIEBwYXJhbSB7RGF0YVZpZXd9IGRhdGFWaWV3XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcGFyYW0ge251bWJlcn0gZGF0YUxlbmd0aFxuICogQHBhcmFtIHtzdHJpbmd9IGVuY29kaW5nXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5kZWNvZGUuTUFDU1RSSU5HID0gZnVuY3Rpb24oZGF0YVZpZXcsIG9mZnNldCwgZGF0YUxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgICB2YXIgdGFibGUgPSBlaWdodEJpdE1hY0VuY29kaW5nc1tlbmNvZGluZ107XG4gICAgaWYgKHRhYmxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBkYXRhVmlldy5nZXRVaW50OChvZmZzZXQgKyBpKTtcbiAgICAgICAgLy8gSW4gYWxsIGVpZ2h0LWJpdCBNYWMgZW5jb2RpbmdzLCB0aGUgY2hhcmFjdGVycyAweDAwLi4weDdGIGFyZVxuICAgICAgICAvLyBtYXBwZWQgdG8gVSswMDAwLi5VKzAwN0Y7IHdlIG9ubHkgbmVlZCB0byBsb29rIHVwIHRoZSBvdGhlcnMuXG4gICAgICAgIGlmIChjIDw9IDB4N0YpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHRhYmxlW2MgJiAweDdGXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gZm9yIGVuY29kZS5NQUNTVFJJTkcuIFJldHVybnMgYSBkaWN0aW9uYXJ5IGZvciBtYXBwaW5nXG4vLyBVbmljb2RlIGNoYXJhY3RlciBjb2RlcyB0byB0aGVpciA4LWJpdCBNYWNPUyBlcXVpdmFsZW50LiBUaGlzIHRhYmxlXG4vLyBpcyBub3QgZXhhY3RseSBhIHN1cGVyIGNoZWFwIGRhdGEgc3RydWN0dXJlLCBidXQgd2UgZG8gbm90IGNhcmUgYmVjYXVzZVxuLy8gZW5jb2RpbmcgTWFjaW50b3NoIHN0cmluZ3MgaXMgb25seSByYXJlbHkgbmVlZGVkIGluIHR5cGljYWwgYXBwbGljYXRpb25zLlxudmFyIG1hY0VuY29kaW5nVGFibGVDYWNoZSA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIG5ldyBXZWFrTWFwKCk7XG52YXIgbWFjRW5jb2RpbmdDYWNoZUtleXM7XG52YXIgZ2V0TWFjRW5jb2RpbmdUYWJsZSA9IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICAgIC8vIFNpbmNlIHdlIHVzZSBlbmNvZGluZyBhcyBhIGNhY2hlIGtleSBmb3IgV2Vha01hcCwgaXQgaGFzIHRvIGJlXG4gICAgLy8gYSBTdHJpbmcgb2JqZWN0IGFuZCBub3QgYSBsaXRlcmFsLiBBbmQgYXQgbGVhc3Qgb24gTm9kZUpTIDIuMTAuMSxcbiAgICAvLyBXZWFrTWFwIHJlcXVpcmVzIHRoYXQgdGhlIHNhbWUgU3RyaW5nIGluc3RhbmNlIGlzIHBhc3NlZCBmb3IgY2FjaGUgaGl0cy5cbiAgICBpZiAoIW1hY0VuY29kaW5nQ2FjaGVLZXlzKSB7XG4gICAgICAgIG1hY0VuY29kaW5nQ2FjaGVLZXlzID0ge307XG4gICAgICAgIGZvciAodmFyIGUgaW4gZWlnaHRCaXRNYWNFbmNvZGluZ3MpIHtcbiAgICAgICAgICAgIC8qanNoaW50IC1XMDUzICovICAvLyBTdXBwcmVzcyBcIkRvIG5vdCB1c2UgU3RyaW5nIGFzIGEgY29uc3RydWN0b3IuXCJcbiAgICAgICAgICAgIG1hY0VuY29kaW5nQ2FjaGVLZXlzW2VdID0gbmV3IFN0cmluZyhlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjYWNoZUtleSA9IG1hY0VuY29kaW5nQ2FjaGVLZXlzW2VuY29kaW5nXTtcbiAgICBpZiAoY2FjaGVLZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIFdlIGNhbid0IGRvIFwiaWYgKGNhY2hlLmhhcyhrZXkpKSB7cmV0dXJuIGNhY2hlLmdldChrZXkpfVwiIGhlcmU6XG4gICAgLy8gc2luY2UgZ2FyYmFnZSBjb2xsZWN0aW9uIG1heSBydW4gYXQgYW55IHRpbWUsIGl0IGNvdWxkIGFsc28ga2ljayBpblxuICAgIC8vIGJldHdlZW4gdGhlIGNhbGxzIHRvIGNhY2hlLmhhcygpIGFuZCBjYWNoZS5nZXQoKS4gSW4gdGhhdCBjYXNlLFxuICAgIC8vIHdlIHdvdWxkIHJldHVybiAndW5kZWZpbmVkJyBldmVuIHRob3VnaCB3ZSBkbyBzdXBwb3J0IHRoZSBlbmNvZGluZy5cbiAgICBpZiAobWFjRW5jb2RpbmdUYWJsZUNhY2hlKSB7XG4gICAgICAgIHZhciBjYWNoZWRUYWJsZSA9IG1hY0VuY29kaW5nVGFibGVDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgICAgICBpZiAoY2FjaGVkVGFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFRhYmxlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlY29kaW5nVGFibGUgPSBlaWdodEJpdE1hY0VuY29kaW5nc1tlbmNvZGluZ107XG4gICAgaWYgKGRlY29kaW5nVGFibGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBlbmNvZGluZ1RhYmxlID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWNvZGluZ1RhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVuY29kaW5nVGFibGVbZGVjb2RpbmdUYWJsZS5jaGFyQ29kZUF0KGkpXSA9IGkgKyAweDgwO1xuICAgIH1cblxuICAgIGlmIChtYWNFbmNvZGluZ1RhYmxlQ2FjaGUpIHtcbiAgICAgICAgbWFjRW5jb2RpbmdUYWJsZUNhY2hlLnNldChjYWNoZUtleSwgZW5jb2RpbmdUYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuY29kaW5nVGFibGU7XG59O1xuXG4vKipcbiAqIEVuY29kZXMgYW4gb2xkLXN0eWxlIE1hY2ludG9zaCBzdHJpbmcuIFJldHVybnMgYSBieXRlIGFycmF5IHVwb24gc3VjY2Vzcy5cbiAqIElmIHRoZSByZXF1ZXN0ZWQgZW5jb2RpbmcgaXMgdW5zdXBwb3J0ZWQsIG9yIGlmIHRoZSBpbnB1dCBzdHJpbmcgY29udGFpbnNcbiAqIGEgY2hhcmFjdGVyIHRoYXQgY2Fubm90IGJlIGV4cHJlc3NlZCBpbiB0aGUgZW5jb2RpbmcsIHRoZSBmdW5jdGlvbiByZXR1cm5zXG4gKiAndW5kZWZpbmVkJy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmNvZGluZ1xuICogQHJldHVybnMge0FycmF5fVxuICovXG5lbmNvZGUuTUFDU1RSSU5HID0gZnVuY3Rpb24oc3RyLCBlbmNvZGluZykge1xuICAgIHZhciB0YWJsZSA9IGdldE1hY0VuY29kaW5nVGFibGUoZW5jb2RpbmcpO1xuICAgIGlmICh0YWJsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgLy8gSW4gYWxsIGVpZ2h0LWJpdCBNYWMgZW5jb2RpbmdzLCB0aGUgY2hhcmFjdGVycyAweDAwLi4weDdGIGFyZVxuICAgICAgICAvLyBtYXBwZWQgdG8gVSswMDAwLi5VKzAwN0Y7IHdlIG9ubHkgbmVlZCB0byBsb29rIHVwIHRoZSBvdGhlcnMuXG4gICAgICAgIGlmIChjID49IDB4ODApIHtcbiAgICAgICAgICAgIGMgPSB0YWJsZVtjXTtcbiAgICAgICAgICAgIGlmIChjID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdHIgY29udGFpbnMgYSBVbmljb2RlIGNoYXJhY3RlciB0aGF0IGNhbm5vdCBiZSBlbmNvZGVkXG4gICAgICAgICAgICAgICAgLy8gaW4gdGhlIHJlcXVlc3RlZCBlbmNvZGluZy5cbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtpXSA9IGM7XG4gICAgICAgIC8vIHJlc3VsdC5wdXNoKGMpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmNvZGluZ1xuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuc2l6ZU9mLk1BQ1NUUklORyA9IGZ1bmN0aW9uKHN0ciwgZW5jb2RpbmcpIHtcbiAgICB2YXIgYiA9IGVuY29kZS5NQUNTVFJJTkcoc3RyLCBlbmNvZGluZyk7XG4gICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gYi5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufTtcblxuLy8gSGVscGVyIGZvciBlbmNvZGUuVkFSREVMVEFTXG5mdW5jdGlvbiBpc0J5dGVFbmNvZGFibGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPj0gLTEyOCAmJiB2YWx1ZSA8PSAxMjc7XG59XG5cbi8vIEhlbHBlciBmb3IgZW5jb2RlLlZBUkRFTFRBU1xuZnVuY3Rpb24gZW5jb2RlVmFyRGVsdGFSdW5Bc1plcm9lcyhkZWx0YXMsIHBvcywgcmVzdWx0KSB7XG4gICAgdmFyIHJ1bkxlbmd0aCA9IDA7XG4gICAgdmFyIG51bURlbHRhcyA9IGRlbHRhcy5sZW5ndGg7XG4gICAgd2hpbGUgKHBvcyA8IG51bURlbHRhcyAmJiBydW5MZW5ndGggPCA2NCAmJiBkZWx0YXNbcG9zXSA9PT0gMCkge1xuICAgICAgICArK3BvcztcbiAgICAgICAgKytydW5MZW5ndGg7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKDB4ODAgfCAocnVuTGVuZ3RoIC0gMSkpO1xuICAgIHJldHVybiBwb3M7XG59XG5cbi8vIEhlbHBlciBmb3IgZW5jb2RlLlZBUkRFTFRBU1xuZnVuY3Rpb24gZW5jb2RlVmFyRGVsdGFSdW5Bc0J5dGVzKGRlbHRhcywgb2Zmc2V0LCByZXN1bHQpIHtcbiAgICB2YXIgcnVuTGVuZ3RoID0gMDtcbiAgICB2YXIgbnVtRGVsdGFzID0gZGVsdGFzLmxlbmd0aDtcbiAgICB2YXIgcG9zID0gb2Zmc2V0O1xuICAgIHdoaWxlIChwb3MgPCBudW1EZWx0YXMgJiYgcnVuTGVuZ3RoIDwgNjQpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZGVsdGFzW3Bvc107XG4gICAgICAgIGlmICghaXNCeXRlRW5jb2RhYmxlKHZhbHVlKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaXRoaW4gYSBieXRlLWVuY29kZWQgcnVuIG9mIGRlbHRhcywgYSBzaW5nbGUgemVybyBpcyBiZXN0XG4gICAgICAgIC8vIHN0b3JlZCBsaXRlcmFsbHkgYXMgMHgwMCB2YWx1ZS4gSG93ZXZlciwgaWYgd2UgaGF2ZSB0d28gb3JcbiAgICAgICAgLy8gbW9yZSB6ZXJvZXMgaW4gYSBzZXF1ZW5jZSwgaXQgaXMgYmV0dGVyIHRvIHN0YXJ0IGEgbmV3IHJ1bi5cbiAgICAgICAgLy8gRm9yZSBleGFtcGxlLCB0aGUgc2VxdWVuY2Ugb2YgZGVsdGFzIFsxNSwgMTUsIDAsIDE1LCAxNV1cbiAgICAgICAgLy8gYmVjb21lcyA2IGJ5dGVzICgwNCAwRiAwRiAwMCAwRiAwRikgd2hlbiBzdG9yaW5nIHRoZSB6ZXJvXG4gICAgICAgIC8vIHdpdGhpbiB0aGUgY3VycmVudCBydW4sIGJ1dCA3IGJ5dGVzICgwMSAwRiAwRiA4MCAwMSAwRiAwRilcbiAgICAgICAgLy8gd2hlbiBzdGFydGluZyBhIG5ldyBydW4uXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMCAmJiBwb3MgKyAxIDwgbnVtRGVsdGFzICYmIGRlbHRhc1twb3MgKyAxXSA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICArK3BvcztcbiAgICAgICAgKytydW5MZW5ndGg7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKHJ1bkxlbmd0aCAtIDEpO1xuICAgIGZvciAodmFyIGkgPSBvZmZzZXQ7IGkgPCBwb3M7ICsraSkge1xuICAgICAgICByZXN1bHQucHVzaCgoZGVsdGFzW2ldICsgMjU2KSAmIDB4ZmYpO1xuICAgIH1cbiAgICByZXR1cm4gcG9zO1xufVxuXG4vLyBIZWxwZXIgZm9yIGVuY29kZS5WQVJERUxUQVNcbmZ1bmN0aW9uIGVuY29kZVZhckRlbHRhUnVuQXNXb3JkcyhkZWx0YXMsIG9mZnNldCwgcmVzdWx0KSB7XG4gICAgdmFyIHJ1bkxlbmd0aCA9IDA7XG4gICAgdmFyIG51bURlbHRhcyA9IGRlbHRhcy5sZW5ndGg7XG4gICAgdmFyIHBvcyA9IG9mZnNldDtcbiAgICB3aGlsZSAocG9zIDwgbnVtRGVsdGFzICYmIHJ1bkxlbmd0aCA8IDY0KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGRlbHRhc1twb3NdO1xuXG4gICAgICAgIC8vIFdpdGhpbiBhIHdvcmQtZW5jb2RlZCBydW4gb2YgZGVsdGFzLCBpdCBpcyBlYXNpZXN0IHRvIHN0YXJ0XG4gICAgICAgIC8vIGEgbmV3IHJ1biAod2l0aCBhIGRpZmZlcmVudCBlbmNvZGluZykgd2hlbmV2ZXIgd2UgZW5jb3VudGVyXG4gICAgICAgIC8vIGEgemVybyB2YWx1ZS4gRm9yIGV4YW1wbGUsIHRoZSBzZXF1ZW5jZSBbMHg2NjY2LCAwLCAweDc3NzddXG4gICAgICAgIC8vIG5lZWRzIDcgYnl0ZXMgd2hlbiBzdG9yaW5nIHRoZSB6ZXJvIGluc2lkZSB0aGUgY3VycmVudCBydW5cbiAgICAgICAgLy8gKDQyIDY2IDY2IDAwIDAwIDc3IDc3KSwgYW5kIGVxdWFsbHkgNyBieXRlcyB3aGVuIHN0YXJ0aW5nIGFcbiAgICAgICAgLy8gbmV3IHJ1biAoNDAgNjYgNjYgODAgNDAgNzcgNzcpLlxuICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2l0aGluIGEgd29yZC1lbmNvZGVkIHJ1biBvZiBkZWx0YXMsIGEgc2luZ2xlIHZhbHVlIGluIHRoZVxuICAgICAgICAvLyByYW5nZSAoLTEyOC4uMTI3KSBzaG91bGQgYmUgZW5jb2RlZCB3aXRoaW4gdGhlIGN1cnJlbnQgcnVuXG4gICAgICAgIC8vIGJlY2F1c2UgaXQgaXMgbW9yZSBjb21wYWN0LiBGb3IgZXhhbXBsZSwgdGhlIHNlcXVlbmNlXG4gICAgICAgIC8vIFsweDY2NjYsIDIsIDB4Nzc3N10gYmVjb21lcyA3IGJ5dGVzIHdoZW4gc3RvcmluZyB0aGUgdmFsdWVcbiAgICAgICAgLy8gbGl0ZXJhbGx5ICg0MiA2NiA2NiAwMCAwMiA3NyA3NyksIGJ1dCA4IGJ5dGVzIHdoZW4gc3RhcnRpbmdcbiAgICAgICAgLy8gYSBuZXcgcnVuICg0MCA2NiA2NiAwMCAwMiA0MCA3NyA3NykuXG4gICAgICAgIGlmIChpc0J5dGVFbmNvZGFibGUodmFsdWUpICYmIHBvcyArIDEgPCBudW1EZWx0YXMgJiYgaXNCeXRlRW5jb2RhYmxlKGRlbHRhc1twb3MgKyAxXSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgKytwb3M7XG4gICAgICAgICsrcnVuTGVuZ3RoO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCgweDQwIHwgKHJ1bkxlbmd0aCAtIDEpKTtcbiAgICBmb3IgKHZhciBpID0gb2Zmc2V0OyBpIDwgcG9zOyArK2kpIHtcbiAgICAgICAgdmFyIHZhbCA9IGRlbHRhc1tpXTtcbiAgICAgICAgcmVzdWx0LnB1c2goKCh2YWwgKyAweDEwMDAwKSA+PiA4KSAmIDB4ZmYsICh2YWwgKyAweDEwMCkgJiAweGZmKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvcztcbn1cblxuLyoqXG4gKiBFbmNvZGUgYSBsaXN0IG9mIHZhcmlhdGlvbiBhZGp1c3RtZW50IGRlbHRhcy5cbiAqXG4gKiBWYXJpYXRpb24gYWRqdXN0bWVudCBkZWx0YXMgYXJlIHVzZWQgaW4g4oCYZ3ZhcuKAmSBhbmQg4oCYY3ZhcuKAmSB0YWJsZXMuXG4gKiBUaGV5IGluZGljYXRlIGhvdyBwb2ludHMgKGluIOKAmGd2YXLigJkpIG9yIHZhbHVlcyAoaW4g4oCYY3ZhcuKAmSkgZ2V0IGFkanVzdGVkXG4gKiB3aGVuIGdlbmVyYXRpbmcgaW5zdGFuY2VzIG9mIHZhcmlhdGlvbiBmb250cy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9vdHNwZWMvZ3Zhci5odG1cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2ZvbnRzL1RydWVUeXBlLVJlZmVyZW5jZS1NYW51YWwvUk0wNi9DaGFwNmd2YXIuaHRtbFxuICogQHBhcmFtIHtBcnJheX1cbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5lbmNvZGUuVkFSREVMVEFTID0gZnVuY3Rpb24oZGVsdGFzKSB7XG4gICAgdmFyIHBvcyA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHdoaWxlIChwb3MgPCBkZWx0YXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGRlbHRhc1twb3NdO1xuICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHBvcyA9IGVuY29kZVZhckRlbHRhUnVuQXNaZXJvZXMoZGVsdGFzLCBwb3MsIHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPj0gLTEyOCAmJiB2YWx1ZSA8PSAxMjcpIHtcbiAgICAgICAgICAgIHBvcyA9IGVuY29kZVZhckRlbHRhUnVuQXNCeXRlcyhkZWx0YXMsIHBvcywgcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvcyA9IGVuY29kZVZhckRlbHRhUnVuQXNXb3JkcyhkZWx0YXMsIHBvcywgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gQ29udmVydCBhIGxpc3Qgb2YgdmFsdWVzIHRvIGEgQ0ZGIElOREVYIHN0cnVjdHVyZS5cbi8vIFRoZSB2YWx1ZXMgc2hvdWxkIGJlIG9iamVjdHMgY29udGFpbmluZyBuYW1lIC8gdHlwZSAvIHZhbHVlLlxuLyoqXG4gKiBAcGFyYW0ge0FycmF5fSBsXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmVuY29kZS5JTkRFWCA9IGZ1bmN0aW9uKGwpIHtcbiAgICAvL3ZhciBvZmZzZXQsIG9mZnNldHMsIG9mZnNldEVuY29kZXIsIGVuY29kZWRPZmZzZXRzLCBlbmNvZGVkT2Zmc2V0LCBkYXRhLFxuICAgIC8vICAgIGksIHY7XG4gICAgLy8gQmVjYXVzZSB3ZSBoYXZlIHRvIGtub3cgd2hpY2ggZGF0YSB0eXBlIHRvIHVzZSB0byBlbmNvZGUgdGhlIG9mZnNldHMsXG4gICAgLy8gd2UgaGF2ZSB0byBnbyB0aHJvdWdoIHRoZSB2YWx1ZXMgdHdpY2U6IG9uY2UgdG8gZW5jb2RlIHRoZSBkYXRhIGFuZFxuICAgIC8vIGNhbGN1bGF0ZSB0aGUgb2Zmc2V0cywgdGhlbiBhZ2FpbiB0byBlbmNvZGUgdGhlIG9mZnNldHMgdXNpbmcgdGhlIGZpdHRpbmcgZGF0YSB0eXBlLlxuICAgIHZhciBvZmZzZXQgPSAxOyAvLyBGaXJzdCBvZmZzZXQgaXMgYWx3YXlzIDEuXG4gICAgdmFyIG9mZnNldHMgPSBbb2Zmc2V0XTtcbiAgICB2YXIgZGF0YSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgdiA9IGVuY29kZS5PQkpFQ1QobFtpXSk7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGRhdGEsIHYpO1xuICAgICAgICBvZmZzZXQgKz0gdi5sZW5ndGg7XG4gICAgICAgIG9mZnNldHMucHVzaChvZmZzZXQpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gWzAsIDBdO1xuICAgIH1cblxuICAgIHZhciBlbmNvZGVkT2Zmc2V0cyA9IFtdO1xuICAgIHZhciBvZmZTaXplID0gKDEgKyBNYXRoLmZsb29yKE1hdGgubG9nKG9mZnNldCkgLyBNYXRoLmxvZygyKSkgLyA4KSB8IDA7XG4gICAgdmFyIG9mZnNldEVuY29kZXIgPSBbdW5kZWZpbmVkLCBlbmNvZGUuQllURSwgZW5jb2RlLlVTSE9SVCwgZW5jb2RlLlVJTlQyNCwgZW5jb2RlLlVMT05HXVtvZmZTaXplXTtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBvZmZzZXRzLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgICAgdmFyIGVuY29kZWRPZmZzZXQgPSBvZmZzZXRFbmNvZGVyKG9mZnNldHNbaSQxXSk7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVuY29kZWRPZmZzZXRzLCBlbmNvZGVkT2Zmc2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdChlbmNvZGUuQ2FyZDE2KGwubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZS5PZmZTaXplKG9mZlNpemUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlZE9mZnNldHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheX1cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbnNpemVPZi5JTkRFWCA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gZW5jb2RlLklOREVYKHYpLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQ29udmVydCBhbiBvYmplY3QgdG8gYSBDRkYgRElDVCBzdHJ1Y3R1cmUuXG4gKiBUaGUga2V5cyBzaG91bGQgYmUgbnVtZXJpYy5cbiAqIFRoZSB2YWx1ZXMgc2hvdWxkIGJlIG9iamVjdHMgY29udGFpbmluZyBuYW1lIC8gdHlwZSAvIHZhbHVlLlxuICogQHBhcmFtIHtPYmplY3R9IG1cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZW5jb2RlLkRJQ1QgPSBmdW5jdGlvbihtKSB7XG4gICAgdmFyIGQgPSBbXTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG0pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgLy8gT2JqZWN0LmtleXMoKSByZXR1cm4gc3RyaW5nIGtleXMsIGJ1dCBvdXIga2V5cyBhcmUgYWx3YXlzIG51bWVyaWMuXG4gICAgICAgIHZhciBrID0gcGFyc2VJbnQoa2V5c1tpXSwgMCk7XG4gICAgICAgIHZhciB2ID0gbVtrXTtcbiAgICAgICAgLy8gVmFsdWUgY29tZXMgYmVmb3JlIHRoZSBrZXkuXG4gICAgICAgIGQgPSBkLmNvbmNhdChlbmNvZGUuT1BFUkFORCh2LnZhbHVlLCB2LnR5cGUpKTtcbiAgICAgICAgZCA9IGQuY29uY2F0KGVuY29kZS5PUEVSQVRPUihrKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuc2l6ZU9mLkRJQ1QgPSBmdW5jdGlvbihtKSB7XG4gICAgcmV0dXJuIGVuY29kZS5ESUNUKG0pLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmVuY29kZS5PUEVSQVRPUiA9IGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAodiA8IDEyMDApIHtcbiAgICAgICAgcmV0dXJuIFt2XTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWzEyLCB2IC0gMTIwMF07XG4gICAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5fSB2XG4gKiBAcGFyYW0ge3N0cmluZ31cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZW5jb2RlLk9QRVJBTkQgPSBmdW5jdGlvbih2LCB0eXBlKSB7XG4gICAgdmFyIGQgPSBbXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNoZWNrLmFyZ3VtZW50KHYubGVuZ3RoID09PSB0eXBlLmxlbmd0aCwgJ05vdCBlbm91Z2ggYXJndW1lbnRzIGdpdmVuIGZvciB0eXBlJyArIHR5cGUpO1xuICAgICAgICAgICAgZCA9IGQuY29uY2F0KGVuY29kZS5PUEVSQU5EKHZbaV0sIHR5cGVbaV0pKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnU0lEJykge1xuICAgICAgICAgICAgZCA9IGQuY29uY2F0KGVuY29kZS5OVU1CRVIodikpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvZmZzZXQnKSB7XG4gICAgICAgICAgICAvLyBXZSBtYWtlIGl0IGVhc3kgZm9yIG91cnNlbHZlcyBhbmQgYWx3YXlzIGVuY29kZSBvZmZzZXRzIGFzXG4gICAgICAgICAgICAvLyA0IGJ5dGVzLiBUaGlzIG1ha2VzIG9mZnNldCBjYWxjdWxhdGlvbiBmb3IgdGhlIHRvcCBkaWN0IGVhc2llci5cbiAgICAgICAgICAgIGQgPSBkLmNvbmNhdChlbmNvZGUuTlVNQkVSMzIodikpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBkID0gZC5jb25jYXQoZW5jb2RlLk5VTUJFUih2KSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3JlYWwnKSB7XG4gICAgICAgICAgICBkID0gZC5jb25jYXQoZW5jb2RlLlJFQUwodikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG9wZXJhbmQgdHlwZSAnICsgdHlwZSk7XG4gICAgICAgICAgICAvLyBGSVhNRSBBZGQgc3VwcG9ydCBmb3IgYm9vbGVhbnNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkO1xufTtcblxuZW5jb2RlLk9QID0gZW5jb2RlLkJZVEU7XG5zaXplT2YuT1AgPSBzaXplT2YuQllURTtcblxuLy8gbWVtb2l6ZSBjaGFyc3RyaW5nIGVuY29kaW5nIHVzaW5nIFdlYWtNYXAgaWYgYXZhaWxhYmxlXG52YXIgd21tID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgbGlzdCBvZiBDaGFyU3RyaW5nIG9wZXJhdGlvbnMgdG8gYnl0ZXMuXG4gKiBAcGFyYW0ge0FycmF5fVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5lbmNvZGUuQ0hBUlNUUklORyA9IGZ1bmN0aW9uKG9wcykge1xuICAgIC8vIFNlZSBlbmNvZGUuTUFDU1RSSU5HIGZvciB3aHkgd2UgZG9uJ3QgZG8gXCJpZiAod21tICYmIHdtbS5oYXMob3BzKSlcIi5cbiAgICBpZiAod21tKSB7XG4gICAgICAgIHZhciBjYWNoZWRWYWx1ZSA9IHdtbS5nZXQob3BzKTtcbiAgICAgICAgaWYgKGNhY2hlZFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkID0gW107XG4gICAgdmFyIGxlbmd0aCA9IG9wcy5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBvcCA9IG9wc1tpXTtcbiAgICAgICAgZCA9IGQuY29uY2F0KGVuY29kZVtvcC50eXBlXShvcC52YWx1ZSkpO1xuICAgIH1cblxuICAgIGlmICh3bW0pIHtcbiAgICAgICAgd21tLnNldChvcHMsIGQpO1xuICAgIH1cblxuICAgIHJldHVybiBkO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5fVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuc2l6ZU9mLkNIQVJTVFJJTkcgPSBmdW5jdGlvbihvcHMpIHtcbiAgICByZXR1cm4gZW5jb2RlLkNIQVJTVFJJTkcob3BzKS5sZW5ndGg7XG59O1xuXG4vLyBVdGlsaXR5IGZ1bmN0aW9ucyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENvbnZlcnQgYW4gb2JqZWN0IGNvbnRhaW5pbmcgbmFtZSAvIHR5cGUgLyB2YWx1ZSB0byBieXRlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5lbmNvZGUuT0JKRUNUID0gZnVuY3Rpb24odikge1xuICAgIHZhciBlbmNvZGluZ0Z1bmN0aW9uID0gZW5jb2RlW3YudHlwZV07XG4gICAgY2hlY2suYXJndW1lbnQoZW5jb2RpbmdGdW5jdGlvbiAhPT0gdW5kZWZpbmVkLCAnTm8gZW5jb2RpbmcgZnVuY3Rpb24gZm9yIHR5cGUgJyArIHYudHlwZSk7XG4gICAgcmV0dXJuIGVuY29kaW5nRnVuY3Rpb24odi52YWx1ZSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuc2l6ZU9mLk9CSkVDVCA9IGZ1bmN0aW9uKHYpIHtcbiAgICB2YXIgc2l6ZU9mRnVuY3Rpb24gPSBzaXplT2Zbdi50eXBlXTtcbiAgICBjaGVjay5hcmd1bWVudChzaXplT2ZGdW5jdGlvbiAhPT0gdW5kZWZpbmVkLCAnTm8gc2l6ZU9mIGZ1bmN0aW9uIGZvciB0eXBlICcgKyB2LnR5cGUpO1xuICAgIHJldHVybiBzaXplT2ZGdW5jdGlvbih2LnZhbHVlKTtcbn07XG5cbi8qKlxuICogQ29udmVydCBhIHRhYmxlIG9iamVjdCB0byBieXRlcy5cbiAqIEEgdGFibGUgY29udGFpbnMgYSBsaXN0IG9mIGZpZWxkcyBjb250YWluaW5nIHRoZSBtZXRhZGF0YSAobmFtZSwgdHlwZSBhbmQgZGVmYXVsdCB2YWx1ZSkuXG4gKiBUaGUgdGFibGUgaXRzZWxmIGhhcyB0aGUgZmllbGQgdmFsdWVzIHNldCBhcyBhdHRyaWJ1dGVzLlxuICogQHBhcmFtIHtvcGVudHlwZS5UYWJsZX1cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZW5jb2RlLlRBQkxFID0gZnVuY3Rpb24odGFibGUpIHtcbiAgICB2YXIgZCA9IFtdO1xuICAgIHZhciBsZW5ndGggPSB0YWJsZS5maWVsZHMubGVuZ3RoO1xuICAgIHZhciBzdWJ0YWJsZXMgPSBbXTtcbiAgICB2YXIgc3VidGFibGVPZmZzZXRzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBmaWVsZCA9IHRhYmxlLmZpZWxkc1tpXTtcbiAgICAgICAgdmFyIGVuY29kaW5nRnVuY3Rpb24gPSBlbmNvZGVbZmllbGQudHlwZV07XG4gICAgICAgIGNoZWNrLmFyZ3VtZW50KGVuY29kaW5nRnVuY3Rpb24gIT09IHVuZGVmaW5lZCwgJ05vIGVuY29kaW5nIGZ1bmN0aW9uIGZvciBmaWVsZCB0eXBlICcgKyBmaWVsZC50eXBlICsgJyAoJyArIGZpZWxkLm5hbWUgKyAnKScpO1xuICAgICAgICB2YXIgdmFsdWUgPSB0YWJsZVtmaWVsZC5uYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhbHVlID0gZmllbGQudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYnl0ZXMgPSBlbmNvZGluZ0Z1bmN0aW9uKHZhbHVlKTtcblxuICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gJ1RBQkxFJykge1xuICAgICAgICAgICAgc3VidGFibGVPZmZzZXRzLnB1c2goZC5sZW5ndGgpO1xuICAgICAgICAgICAgZCA9IGQuY29uY2F0KFswLCAwXSk7XG4gICAgICAgICAgICBzdWJ0YWJsZXMucHVzaChieXRlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkID0gZC5jb25jYXQoYnl0ZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgc3VidGFibGVzLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgICAgdmFyIG8gPSBzdWJ0YWJsZU9mZnNldHNbaSQxXTtcbiAgICAgICAgdmFyIG9mZnNldCA9IGQubGVuZ3RoO1xuICAgICAgICBjaGVjay5hcmd1bWVudChvZmZzZXQgPCA2NTUzNiwgJ1RhYmxlICcgKyB0YWJsZS50YWJsZU5hbWUgKyAnIHRvbyBiaWcuJyk7XG4gICAgICAgIGRbb10gPSBvZmZzZXQgPj4gODtcbiAgICAgICAgZFtvICsgMV0gPSBvZmZzZXQgJiAweGZmO1xuICAgICAgICBkID0gZC5jb25jYXQoc3VidGFibGVzW2kkMV0pO1xuICAgIH1cblxuICAgIHJldHVybiBkO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge29wZW50eXBlLlRhYmxlfVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuc2l6ZU9mLlRBQkxFID0gZnVuY3Rpb24odGFibGUpIHtcbiAgICB2YXIgbnVtQnl0ZXMgPSAwO1xuICAgIHZhciBsZW5ndGggPSB0YWJsZS5maWVsZHMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgZmllbGQgPSB0YWJsZS5maWVsZHNbaV07XG4gICAgICAgIHZhciBzaXplT2ZGdW5jdGlvbiA9IHNpemVPZltmaWVsZC50eXBlXTtcbiAgICAgICAgY2hlY2suYXJndW1lbnQoc2l6ZU9mRnVuY3Rpb24gIT09IHVuZGVmaW5lZCwgJ05vIHNpemVPZiBmdW5jdGlvbiBmb3IgZmllbGQgdHlwZSAnICsgZmllbGQudHlwZSArICcgKCcgKyBmaWVsZC5uYW1lICsgJyknKTtcbiAgICAgICAgdmFyIHZhbHVlID0gdGFibGVbZmllbGQubmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZpZWxkLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbnVtQnl0ZXMgKz0gc2l6ZU9mRnVuY3Rpb24odmFsdWUpO1xuXG4gICAgICAgIC8vIFN1YnRhYmxlcyB0YWtlIDIgbW9yZSBieXRlcyBmb3Igb2Zmc2V0cy5cbiAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdUQUJMRScpIHtcbiAgICAgICAgICAgIG51bUJ5dGVzICs9IDI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVtQnl0ZXM7XG59O1xuXG5lbmNvZGUuUkVDT1JEID0gZW5jb2RlLlRBQkxFO1xuc2l6ZU9mLlJFQ09SRCA9IHNpemVPZi5UQUJMRTtcblxuLy8gTWVyZ2UgaW4gYSBsaXN0IG9mIGJ5dGVzLlxuZW5jb2RlLkxJVEVSQUwgPSBmdW5jdGlvbih2KSB7XG4gICAgcmV0dXJuIHY7XG59O1xuXG5zaXplT2YuTElURVJBTCA9IGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gdi5sZW5ndGg7XG59O1xuXG4vLyBUYWJsZSBtZXRhZGF0YVxuXG4vKipcbiAqIEBleHBvcnRzIG9wZW50eXBlLlRhYmxlXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWJsZU5hbWVcbiAqIEBwYXJhbSB7QXJyYXl9IGZpZWxkc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBUYWJsZSh0YWJsZU5hbWUsIGZpZWxkcywgb3B0aW9ucykge1xuICAgIC8vIEZvciBjb3ZlcmFnZSB0YWJsZXMgd2l0aCBjb3ZlcmFnZSBmb3JtYXQgMiwgd2UgZG8gbm90IHdhbnQgdG8gYWRkIHRoZSBjb3ZlcmFnZSBkYXRhIGRpcmVjdGx5IHRvIHRoZSB0YWJsZSBvYmplY3QsXG4gICAgLy8gYXMgdGhpcyB3aWxsIHJlc3VsdCBpbiB3cm9uZyBlbmNvZGluZyBvcmRlciBvZiB0aGUgY292ZXJhZ2UgZGF0YSBvbiBzZXJpYWxpemF0aW9uIHRvIGJ5dGVzLlxuICAgIC8vIFRoZSBmYWxsYmFjayBvZiB1c2luZyB0aGUgZmllbGQgdmFsdWVzIGRpcmVjdGx5IHdoZW4gbm90IHByZXNlbnQgb24gdGhlIHRhYmxlIGlzIGhhbmRsZWQgaW4gdHlwZXMuZW5jb2RlLlRBQkxFKCkgYWxyZWFkeS5cbiAgICBpZiAoZmllbGRzLmxlbmd0aCAmJiAoZmllbGRzWzBdLm5hbWUgIT09ICdjb3ZlcmFnZUZvcm1hdCcgfHwgZmllbGRzWzBdLnZhbHVlID09PSAxKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGZpZWxkID0gZmllbGRzW2ldO1xuICAgICAgICAgICAgdGhpc1tmaWVsZC5uYW1lXSA9IGZpZWxkLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy50YWJsZU5hbWUgPSB0YWJsZU5hbWU7XG4gICAgdGhpcy5maWVsZHMgPSBmaWVsZHM7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIG9wdGlvbktleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgb3B0aW9uS2V5cy5sZW5ndGg7IGkkMSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgayA9IG9wdGlvbktleXNbaSQxXTtcbiAgICAgICAgICAgIHZhciB2ID0gb3B0aW9uc1trXTtcbiAgICAgICAgICAgIGlmICh0aGlzW2tdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2tdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBFbmNvZGVzIHRoZSB0YWJsZSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBieXRlc1xuICogQHJldHVybiB7QXJyYXl9XG4gKi9cblRhYmxlLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZW5jb2RlLlRBQkxFKHRoaXMpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIHNpemUgb2YgdGhlIHRhYmxlLlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5UYWJsZS5wcm90b3R5cGUuc2l6ZU9mID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNpemVPZi5UQUJMRSh0aGlzKTtcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gdXNob3J0TGlzdChpdGVtTmFtZSwgbGlzdCwgY291bnQpIHtcbiAgICBpZiAoY291bnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb3VudCA9IGxpc3QubGVuZ3RoO1xuICAgIH1cbiAgICB2YXIgZmllbGRzID0gbmV3IEFycmF5KGxpc3QubGVuZ3RoICsgMSk7XG4gICAgZmllbGRzWzBdID0ge25hbWU6IGl0ZW1OYW1lICsgJ0NvdW50JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBjb3VudH07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZpZWxkc1tpICsgMV0gPSB7bmFtZTogaXRlbU5hbWUgKyBpLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IGxpc3RbaV19O1xuICAgIH1cbiAgICByZXR1cm4gZmllbGRzO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHRhYmxlTGlzdChpdGVtTmFtZSwgcmVjb3JkcywgaXRlbUNhbGxiYWNrKSB7XG4gICAgdmFyIGNvdW50ID0gcmVjb3Jkcy5sZW5ndGg7XG4gICAgdmFyIGZpZWxkcyA9IG5ldyBBcnJheShjb3VudCArIDEpO1xuICAgIGZpZWxkc1swXSA9IHtuYW1lOiBpdGVtTmFtZSArICdDb3VudCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogY291bnR9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBmaWVsZHNbaSArIDFdID0ge25hbWU6IGl0ZW1OYW1lICsgaSwgdHlwZTogJ1RBQkxFJywgdmFsdWU6IGl0ZW1DYWxsYmFjayhyZWNvcmRzW2ldLCBpKX07XG4gICAgfVxuICAgIHJldHVybiBmaWVsZHM7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjb3JkTGlzdChpdGVtTmFtZSwgcmVjb3JkcywgaXRlbUNhbGxiYWNrKSB7XG4gICAgdmFyIGNvdW50ID0gcmVjb3Jkcy5sZW5ndGg7XG4gICAgdmFyIGZpZWxkcyA9IFtdO1xuICAgIGZpZWxkc1swXSA9IHtuYW1lOiBpdGVtTmFtZSArICdDb3VudCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogY291bnR9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBmaWVsZHMgPSBmaWVsZHMuY29uY2F0KGl0ZW1DYWxsYmFjayhyZWNvcmRzW2ldLCBpKSk7XG4gICAgfVxuICAgIHJldHVybiBmaWVsZHM7XG59XG5cbi8vIENvbW1vbiBMYXlvdXQgVGFibGVzXG5cbi8qKlxuICogQGV4cG9ydHMgb3BlbnR5cGUuQ292ZXJhZ2VcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtvcGVudHlwZS5UYWJsZX1cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgb3BlbnR5cGUuVGFibGVcbiAqL1xuZnVuY3Rpb24gQ292ZXJhZ2UoY292ZXJhZ2VUYWJsZSkge1xuICAgIGlmIChjb3ZlcmFnZVRhYmxlLmZvcm1hdCA9PT0gMSkge1xuICAgICAgICBUYWJsZS5jYWxsKHRoaXMsICdjb3ZlcmFnZVRhYmxlJyxcbiAgICAgICAgICAgIFt7bmFtZTogJ2NvdmVyYWdlRm9ybWF0JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAxfV1cbiAgICAgICAgICAgIC5jb25jYXQodXNob3J0TGlzdCgnZ2x5cGgnLCBjb3ZlcmFnZVRhYmxlLmdseXBocykpXG4gICAgICAgICk7XG4gICAgfSBlbHNlIGlmIChjb3ZlcmFnZVRhYmxlLmZvcm1hdCA9PT0gMikge1xuICAgICAgICBUYWJsZS5jYWxsKHRoaXMsICdjb3ZlcmFnZVRhYmxlJyxcbiAgICAgICAgICAgIFt7bmFtZTogJ2NvdmVyYWdlRm9ybWF0JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAyfV1cbiAgICAgICAgICAgIC5jb25jYXQocmVjb3JkTGlzdCgncmFuZ2VSZWNvcmQnLCBjb3ZlcmFnZVRhYmxlLnJhbmdlcywgZnVuY3Rpb24oUmFuZ2VSZWNvcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ3N0YXJ0R2x5cGhJRCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogUmFuZ2VSZWNvcmQuc3RhcnR9LFxuICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ2VuZEdseXBoSUQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IFJhbmdlUmVjb3JkLmVuZH0sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnc3RhcnRDb3ZlcmFnZUluZGV4JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBSYW5nZVJlY29yZC5pbmRleH0gXTtcbiAgICAgICAgICAgIH0pKVxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNoZWNrLmFzc2VydChmYWxzZSwgJ0NvdmVyYWdlIGZvcm1hdCBtdXN0IGJlIDEgb3IgMi4nKTtcbiAgICB9XG59XG5Db3ZlcmFnZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRhYmxlLnByb3RvdHlwZSk7XG5Db3ZlcmFnZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb3ZlcmFnZTtcblxuZnVuY3Rpb24gU2NyaXB0TGlzdChzY3JpcHRMaXN0VGFibGUpIHtcbiAgICBUYWJsZS5jYWxsKHRoaXMsICdzY3JpcHRMaXN0VGFibGUnLFxuICAgICAgICByZWNvcmRMaXN0KCdzY3JpcHRSZWNvcmQnLCBzY3JpcHRMaXN0VGFibGUsIGZ1bmN0aW9uKHNjcmlwdFJlY29yZCwgaSkge1xuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IHNjcmlwdFJlY29yZC5zY3JpcHQ7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdExhbmdTeXMgPSBzY3JpcHQuZGVmYXVsdExhbmdTeXM7XG4gICAgICAgICAgICBjaGVjay5hc3NlcnQoISFkZWZhdWx0TGFuZ1N5cywgJ1VuYWJsZSB0byB3cml0ZSBHU1VCOiBzY3JpcHQgJyArIHNjcmlwdFJlY29yZC50YWcgKyAnIGhhcyBubyBkZWZhdWx0IGxhbmd1YWdlIHN5c3RlbS4nKTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAge25hbWU6ICdzY3JpcHRUYWcnICsgaSwgdHlwZTogJ1RBRycsIHZhbHVlOiBzY3JpcHRSZWNvcmQudGFnfSxcbiAgICAgICAgICAgICAgICB7bmFtZTogJ3NjcmlwdCcgKyBpLCB0eXBlOiAnVEFCTEUnLCB2YWx1ZTogbmV3IFRhYmxlKCdzY3JpcHRUYWJsZScsIFtcbiAgICAgICAgICAgICAgICAgICAge25hbWU6ICdkZWZhdWx0TGFuZ1N5cycsIHR5cGU6ICdUQUJMRScsIHZhbHVlOiBuZXcgVGFibGUoJ2RlZmF1bHRMYW5nU3lzJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6ICdsb29rdXBPcmRlcicsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ3JlcUZlYXR1cmVJbmRleCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogZGVmYXVsdExhbmdTeXMucmVxRmVhdHVyZUluZGV4fV1cbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQodXNob3J0TGlzdCgnZmVhdHVyZUluZGV4JywgZGVmYXVsdExhbmdTeXMuZmVhdHVyZUluZGV4ZXMpKSl9XG4gICAgICAgICAgICAgICAgICAgIF0uY29uY2F0KHJlY29yZExpc3QoJ2xhbmdTeXMnLCBzY3JpcHQubGFuZ1N5c1JlY29yZHMsIGZ1bmN0aW9uKGxhbmdTeXNSZWNvcmQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5nU3lzID0gbGFuZ1N5c1JlY29yZC5sYW5nU3lzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ2xhbmdTeXNUYWcnICsgaSwgdHlwZTogJ1RBRycsIHZhbHVlOiBsYW5nU3lzUmVjb3JkLnRhZ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6ICdsYW5nU3lzJyArIGksIHR5cGU6ICdUQUJMRScsIHZhbHVlOiBuZXcgVGFibGUoJ2xhbmdTeXMnLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnbG9va3VwT3JkZXInLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ3JlcUZlYXR1cmVJbmRleCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogbGFuZ1N5cy5yZXFGZWF0dXJlSW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uY29uY2F0KHVzaG9ydExpc3QoJ2ZlYXR1cmVJbmRleCcsIGxhbmdTeXMuZmVhdHVyZUluZGV4ZXMpKSl9XG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB9KSkpfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSlcbiAgICApO1xufVxuU2NyaXB0TGlzdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRhYmxlLnByb3RvdHlwZSk7XG5TY3JpcHRMaXN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNjcmlwdExpc3Q7XG5cbi8qKlxuICogQGV4cG9ydHMgb3BlbnR5cGUuRmVhdHVyZUxpc3RcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtvcGVudHlwZS5UYWJsZX1cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgb3BlbnR5cGUuVGFibGVcbiAqL1xuZnVuY3Rpb24gRmVhdHVyZUxpc3QoZmVhdHVyZUxpc3RUYWJsZSkge1xuICAgIFRhYmxlLmNhbGwodGhpcywgJ2ZlYXR1cmVMaXN0VGFibGUnLFxuICAgICAgICByZWNvcmRMaXN0KCdmZWF0dXJlUmVjb3JkJywgZmVhdHVyZUxpc3RUYWJsZSwgZnVuY3Rpb24oZmVhdHVyZVJlY29yZCwgaSkge1xuICAgICAgICAgICAgdmFyIGZlYXR1cmUgPSBmZWF0dXJlUmVjb3JkLmZlYXR1cmU7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHtuYW1lOiAnZmVhdHVyZVRhZycgKyBpLCB0eXBlOiAnVEFHJywgdmFsdWU6IGZlYXR1cmVSZWNvcmQudGFnfSxcbiAgICAgICAgICAgICAgICB7bmFtZTogJ2ZlYXR1cmUnICsgaSwgdHlwZTogJ1RBQkxFJywgdmFsdWU6IG5ldyBUYWJsZSgnZmVhdHVyZVRhYmxlJywgW1xuICAgICAgICAgICAgICAgICAgICB7bmFtZTogJ2ZlYXR1cmVQYXJhbXMnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IGZlYXR1cmUuZmVhdHVyZVBhcmFtc30gXS5jb25jYXQodXNob3J0TGlzdCgnbG9va3VwTGlzdEluZGV4JywgZmVhdHVyZS5sb29rdXBMaXN0SW5kZXhlcykpKX1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH0pXG4gICAgKTtcbn1cbkZlYXR1cmVMaXN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVGFibGUucHJvdG90eXBlKTtcbkZlYXR1cmVMaXN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZlYXR1cmVMaXN0O1xuXG4vKipcbiAqIEBleHBvcnRzIG9wZW50eXBlLkxvb2t1cExpc3RcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtvcGVudHlwZS5UYWJsZX1cbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBvcGVudHlwZS5UYWJsZVxuICovXG5mdW5jdGlvbiBMb29rdXBMaXN0KGxvb2t1cExpc3RUYWJsZSwgc3VidGFibGVNYWtlcnMpIHtcbiAgICBUYWJsZS5jYWxsKHRoaXMsICdsb29rdXBMaXN0VGFibGUnLCB0YWJsZUxpc3QoJ2xvb2t1cCcsIGxvb2t1cExpc3RUYWJsZSwgZnVuY3Rpb24obG9va3VwVGFibGUpIHtcbiAgICAgICAgdmFyIHN1YnRhYmxlQ2FsbGJhY2sgPSBzdWJ0YWJsZU1ha2Vyc1tsb29rdXBUYWJsZS5sb29rdXBUeXBlXTtcbiAgICAgICAgY2hlY2suYXNzZXJ0KCEhc3VidGFibGVDYWxsYmFjaywgJ1VuYWJsZSB0byB3cml0ZSBHU1VCIGxvb2t1cCB0eXBlICcgKyBsb29rdXBUYWJsZS5sb29rdXBUeXBlICsgJyB0YWJsZXMuJyk7XG4gICAgICAgIHJldHVybiBuZXcgVGFibGUoJ2xvb2t1cFRhYmxlJywgW1xuICAgICAgICAgICAge25hbWU6ICdsb29rdXBUeXBlJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBsb29rdXBUYWJsZS5sb29rdXBUeXBlfSxcbiAgICAgICAgICAgIHtuYW1lOiAnbG9va3VwRmxhZycsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogbG9va3VwVGFibGUubG9va3VwRmxhZ31cbiAgICAgICAgXS5jb25jYXQodGFibGVMaXN0KCdzdWJ0YWJsZScsIGxvb2t1cFRhYmxlLnN1YnRhYmxlcywgc3VidGFibGVDYWxsYmFjaykpKTtcbiAgICB9KSk7XG59XG5Mb29rdXBMaXN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVGFibGUucHJvdG90eXBlKTtcbkxvb2t1cExpc3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTG9va3VwTGlzdDtcblxuLy8gUmVjb3JkID0gc2FtZSBhcyBUYWJsZSwgYnV0IGlubGluZWQgKGEgVGFibGUgaGFzIGFuIG9mZnNldCBhbmQgaXRzIGRhdGEgaXMgZnVydGhlciBpbiB0aGUgc3RyZWFtKVxuLy8gRG9uJ3QgdXNlIG9mZnNldHMgaW5zaWRlIFJlY29yZHMgKHByb2JhYmxlIGJ1ZyksIG9ubHkgaW4gVGFibGVzLlxudmFyIHRhYmxlID0ge1xuICAgIFRhYmxlOiBUYWJsZSxcbiAgICBSZWNvcmQ6IFRhYmxlLFxuICAgIENvdmVyYWdlOiBDb3ZlcmFnZSxcbiAgICBTY3JpcHRMaXN0OiBTY3JpcHRMaXN0LFxuICAgIEZlYXR1cmVMaXN0OiBGZWF0dXJlTGlzdCxcbiAgICBMb29rdXBMaXN0OiBMb29rdXBMaXN0LFxuICAgIHVzaG9ydExpc3Q6IHVzaG9ydExpc3QsXG4gICAgdGFibGVMaXN0OiB0YWJsZUxpc3QsXG4gICAgcmVjb3JkTGlzdDogcmVjb3JkTGlzdCxcbn07XG5cbi8vIFBhcnNpbmcgdXRpbGl0eSBmdW5jdGlvbnNcblxuLy8gUmV0cmlldmUgYW4gdW5zaWduZWQgYnl0ZSBmcm9tIHRoZSBEYXRhVmlldy5cbmZ1bmN0aW9uIGdldEJ5dGUoZGF0YVZpZXcsIG9mZnNldCkge1xuICAgIHJldHVybiBkYXRhVmlldy5nZXRVaW50OChvZmZzZXQpO1xufVxuXG4vLyBSZXRyaWV2ZSBhbiB1bnNpZ25lZCAxNi1iaXQgc2hvcnQgZnJvbSB0aGUgRGF0YVZpZXcuXG4vLyBUaGUgdmFsdWUgaXMgc3RvcmVkIGluIGJpZyBlbmRpYW4uXG5mdW5jdGlvbiBnZXRVU2hvcnQoZGF0YVZpZXcsIG9mZnNldCkge1xuICAgIHJldHVybiBkYXRhVmlldy5nZXRVaW50MTYob2Zmc2V0LCBmYWxzZSk7XG59XG5cbi8vIFJldHJpZXZlIGEgc2lnbmVkIDE2LWJpdCBzaG9ydCBmcm9tIHRoZSBEYXRhVmlldy5cbi8vIFRoZSB2YWx1ZSBpcyBzdG9yZWQgaW4gYmlnIGVuZGlhbi5cbmZ1bmN0aW9uIGdldFNob3J0KGRhdGFWaWV3LCBvZmZzZXQpIHtcbiAgICByZXR1cm4gZGF0YVZpZXcuZ2V0SW50MTYob2Zmc2V0LCBmYWxzZSk7XG59XG5cbi8vIFJldHJpZXZlIGFuIHVuc2lnbmVkIDMyLWJpdCBsb25nIGZyb20gdGhlIERhdGFWaWV3LlxuLy8gVGhlIHZhbHVlIGlzIHN0b3JlZCBpbiBiaWcgZW5kaWFuLlxuZnVuY3Rpb24gZ2V0VUxvbmcoZGF0YVZpZXcsIG9mZnNldCkge1xuICAgIHJldHVybiBkYXRhVmlldy5nZXRVaW50MzIob2Zmc2V0LCBmYWxzZSk7XG59XG5cbi8vIFJldHJpZXZlIGEgMzItYml0IHNpZ25lZCBmaXhlZC1wb2ludCBudW1iZXIgKDE2LjE2KSBmcm9tIHRoZSBEYXRhVmlldy5cbi8vIFRoZSB2YWx1ZSBpcyBzdG9yZWQgaW4gYmlnIGVuZGlhbi5cbmZ1bmN0aW9uIGdldEZpeGVkKGRhdGFWaWV3LCBvZmZzZXQpIHtcbiAgICB2YXIgZGVjaW1hbCA9IGRhdGFWaWV3LmdldEludDE2KG9mZnNldCwgZmFsc2UpO1xuICAgIHZhciBmcmFjdGlvbiA9IGRhdGFWaWV3LmdldFVpbnQxNihvZmZzZXQgKyAyLCBmYWxzZSk7XG4gICAgcmV0dXJuIGRlY2ltYWwgKyBmcmFjdGlvbiAvIDY1NTM1O1xufVxuXG4vLyBSZXRyaWV2ZSBhIDQtY2hhcmFjdGVyIHRhZyBmcm9tIHRoZSBEYXRhVmlldy5cbi8vIFRhZ3MgYXJlIHVzZWQgdG8gaWRlbnRpZnkgdGFibGVzLlxuZnVuY3Rpb24gZ2V0VGFnKGRhdGFWaWV3LCBvZmZzZXQpIHtcbiAgICB2YXIgdGFnID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IG9mZnNldDsgaSA8IG9mZnNldCArIDQ7IGkgKz0gMSkge1xuICAgICAgICB0YWcgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShkYXRhVmlldy5nZXRJbnQ4KGkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFnO1xufVxuXG4vLyBSZXRyaWV2ZSBhbiBvZmZzZXQgZnJvbSB0aGUgRGF0YVZpZXcuXG4vLyBPZmZzZXRzIGFyZSAxIHRvIDQgYnl0ZXMgaW4gbGVuZ3RoLCBkZXBlbmRpbmcgb24gdGhlIG9mZlNpemUgYXJndW1lbnQuXG5mdW5jdGlvbiBnZXRPZmZzZXQoZGF0YVZpZXcsIG9mZnNldCwgb2ZmU2l6ZSkge1xuICAgIHZhciB2ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9mZlNpemU7IGkgKz0gMSkge1xuICAgICAgICB2IDw8PSA4O1xuICAgICAgICB2ICs9IGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCArIGkpO1xuICAgIH1cblxuICAgIHJldHVybiB2O1xufVxuXG4vLyBSZXRyaWV2ZSBhIG51bWJlciBvZiBieXRlcyBmcm9tIHN0YXJ0IG9mZnNldCB0byB0aGUgZW5kIG9mZnNldCBmcm9tIHRoZSBEYXRhVmlldy5cbmZ1bmN0aW9uIGdldEJ5dGVzKGRhdGFWaWV3LCBzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSB7XG4gICAgdmFyIGJ5dGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0T2Zmc2V0OyBpIDwgZW5kT2Zmc2V0OyBpICs9IDEpIHtcbiAgICAgICAgYnl0ZXMucHVzaChkYXRhVmlldy5nZXRVaW50OChpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ5dGVzO1xufVxuXG4vLyBDb252ZXJ0IHRoZSBsaXN0IG9mIGJ5dGVzIHRvIGEgc3RyaW5nLlxuZnVuY3Rpb24gYnl0ZXNUb1N0cmluZyhieXRlcykge1xuICAgIHZhciBzID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBzO1xufVxuXG52YXIgdHlwZU9mZnNldHMgPSB7XG4gICAgYnl0ZTogMSxcbiAgICB1U2hvcnQ6IDIsXG4gICAgc2hvcnQ6IDIsXG4gICAgdUxvbmc6IDQsXG4gICAgZml4ZWQ6IDQsXG4gICAgbG9uZ0RhdGVUaW1lOiA4LFxuICAgIHRhZzogNFxufTtcblxuLy8gQSBzdGF0ZWZ1bCBwYXJzZXIgdGhhdCBjaGFuZ2VzIHRoZSBvZmZzZXQgd2hlbmV2ZXIgYSB2YWx1ZSBpcyByZXRyaWV2ZWQuXG4vLyBUaGUgZGF0YSBpcyBhIERhdGFWaWV3LlxuZnVuY3Rpb24gUGFyc2VyKGRhdGEsIG9mZnNldCkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgdGhpcy5yZWxhdGl2ZU9mZnNldCA9IDA7XG59XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VCeXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB0aGlzLmRhdGEuZ2V0VWludDgodGhpcy5vZmZzZXQgKyB0aGlzLnJlbGF0aXZlT2Zmc2V0KTtcbiAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0ICs9IDE7XG4gICAgcmV0dXJuIHY7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlQ2hhciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdGhpcy5kYXRhLmdldEludDgodGhpcy5vZmZzZXQgKyB0aGlzLnJlbGF0aXZlT2Zmc2V0KTtcbiAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0ICs9IDE7XG4gICAgcmV0dXJuIHY7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlQ2FyZDggPSBQYXJzZXIucHJvdG90eXBlLnBhcnNlQnl0ZTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVVTaG9ydCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdGhpcy5kYXRhLmdldFVpbnQxNih0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQpO1xuICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgKz0gMjtcbiAgICByZXR1cm4gdjtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VDYXJkMTYgPSBQYXJzZXIucHJvdG90eXBlLnBhcnNlVVNob3J0O1xuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVNJRCA9IFBhcnNlci5wcm90b3R5cGUucGFyc2VVU2hvcnQ7XG5QYXJzZXIucHJvdG90eXBlLnBhcnNlT2Zmc2V0MTYgPSBQYXJzZXIucHJvdG90eXBlLnBhcnNlVVNob3J0O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlU2hvcnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHRoaXMuZGF0YS5nZXRJbnQxNih0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQpO1xuICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgKz0gMjtcbiAgICByZXR1cm4gdjtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VGMkRvdDE0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB0aGlzLmRhdGEuZ2V0SW50MTYodGhpcy5vZmZzZXQgKyB0aGlzLnJlbGF0aXZlT2Zmc2V0KSAvIDE2Mzg0O1xuICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgKz0gMjtcbiAgICByZXR1cm4gdjtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VVTG9uZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gZ2V0VUxvbmcodGhpcy5kYXRhLCB0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQpO1xuICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgKz0gNDtcbiAgICByZXR1cm4gdjtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VPZmZzZXQzMiA9IFBhcnNlci5wcm90b3R5cGUucGFyc2VVTG9uZztcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUZpeGVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSBnZXRGaXhlZCh0aGlzLmRhdGEsIHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldCk7XG4gICAgdGhpcy5yZWxhdGl2ZU9mZnNldCArPSA0O1xuICAgIHJldHVybiB2O1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVN0cmluZyA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIHZhciBkYXRhVmlldyA9IHRoaXMuZGF0YTtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQgKyB0aGlzLnJlbGF0aXZlT2Zmc2V0O1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0ICs9IGxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGFWaWV3LmdldFVpbnQ4KG9mZnNldCArIGkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVRhZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlU3RyaW5nKDQpO1xufTtcblxuLy8gTE9OR0RBVEVUSU1FIGlzIGEgNjQtYml0IGludGVnZXIuXG4vLyBKYXZhU2NyaXB0IGFuZCB1bml4IHRpbWVzdGFtcHMgdHJhZGl0aW9uYWxseSB1c2UgMzIgYml0cywgc28gd2Vcbi8vIG9ubHkgdGFrZSB0aGUgbGFzdCAzMiBiaXRzLlxuLy8gKyBTaW5jZSB1bnRpbCAyMDM4IHRob3NlIGJpdHMgd2lsbCBiZSBmaWxsZWQgYnkgemVyb3Mgd2UgY2FuIGlnbm9yZSB0aGVtLlxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUxvbmdEYXRlVGltZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gZ2V0VUxvbmcodGhpcy5kYXRhLCB0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQgKyA0KTtcbiAgICAvLyBTdWJ0cmFjdCBzZWNvbmRzIGJldHdlZW4gMDEvMDEvMTkwNCBhbmQgMDEvMDEvMTk3MFxuICAgIC8vIHRvIGNvbnZlcnQgQXBwbGUgTWFjIHRpbWVzdGFtcCB0byBTdGFuZGFyZCBVbml4IHRpbWVzdGFtcFxuICAgIHYgLT0gMjA4Mjg0NDgwMDtcbiAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0ICs9IDg7XG4gICAgcmV0dXJuIHY7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlVmVyc2lvbiA9IGZ1bmN0aW9uKG1pbm9yQmFzZSkge1xuICAgIHZhciBtYWpvciA9IGdldFVTaG9ydCh0aGlzLmRhdGEsIHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldCk7XG5cbiAgICAvLyBIb3cgdG8gaW50ZXJwcmV0IHRoZSBtaW5vciB2ZXJzaW9uIGlzIHZlcnkgdmFndWUgaW4gdGhlIHNwZWMuIDB4NTAwMCBpcyA1LCAweDEwMDAgaXMgMVxuICAgIC8vIERlZmF1bHQgcmV0dXJucyB0aGUgY29ycmVjdCBudW1iZXIgaWYgbWlub3IgPSAweE4wMDAgd2hlcmUgTiBpcyAwLTlcbiAgICAvLyBTZXQgbWlub3JCYXNlIHRvIDEgZm9yIHRhYmxlcyB0aGF0IHVzZSBtaW5vciA9IE4gd2hlcmUgTiBpcyAwLTlcbiAgICB2YXIgbWlub3IgPSBnZXRVU2hvcnQodGhpcy5kYXRhLCB0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQgKyAyKTtcbiAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0ICs9IDQ7XG4gICAgaWYgKG1pbm9yQmFzZSA9PT0gdW5kZWZpbmVkKSB7IG1pbm9yQmFzZSA9IDB4MTAwMDsgfVxuICAgIHJldHVybiBtYWpvciArIG1pbm9yIC8gbWlub3JCYXNlIC8gMTA7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbih0eXBlLCBhbW91bnQpIHtcbiAgICBpZiAoYW1vdW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYW1vdW50ID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0ICs9IHR5cGVPZmZzZXRzW3R5cGVdICogYW1vdW50O1xufTtcblxuLy8vLy8gUGFyc2luZyBsaXN0cyBhbmQgcmVjb3JkcyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8vIFBhcnNlIGEgbGlzdCBvZiAzMiBiaXQgdW5zaWduZWQgaW50ZWdlcnMuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlVUxvbmdMaXN0ID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICBpZiAoY291bnQgPT09IHVuZGVmaW5lZCkgeyBjb3VudCA9IHRoaXMucGFyc2VVTG9uZygpOyB9XG4gICAgdmFyIG9mZnNldHMgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIHZhciBkYXRhVmlldyA9IHRoaXMuZGF0YTtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQgKyB0aGlzLnJlbGF0aXZlT2Zmc2V0O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBvZmZzZXRzW2ldID0gZGF0YVZpZXcuZ2V0VWludDMyKG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSA0O1xuICAgIH1cblxuICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgKz0gY291bnQgKiA0O1xuICAgIHJldHVybiBvZmZzZXRzO1xufTtcblxuLy8gUGFyc2UgYSBsaXN0IG9mIDE2IGJpdCB1bnNpZ25lZCBpbnRlZ2Vycy4gVGhlIGxlbmd0aCBvZiB0aGUgbGlzdCBjYW4gYmUgcmVhZCBvbiB0aGUgc3RyZWFtXG4vLyBvciBwcm92aWRlZCBhcyBhbiBhcmd1bWVudC5cblBhcnNlci5wcm90b3R5cGUucGFyc2VPZmZzZXQxNkxpc3QgPVxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVVTaG9ydExpc3QgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PT0gdW5kZWZpbmVkKSB7IGNvdW50ID0gdGhpcy5wYXJzZVVTaG9ydCgpOyB9XG4gICAgdmFyIG9mZnNldHMgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIHZhciBkYXRhVmlldyA9IHRoaXMuZGF0YTtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQgKyB0aGlzLnJlbGF0aXZlT2Zmc2V0O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBvZmZzZXRzW2ldID0gZGF0YVZpZXcuZ2V0VWludDE2KG9mZnNldCk7XG4gICAgICAgIG9mZnNldCArPSAyO1xuICAgIH1cblxuICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgKz0gY291bnQgKiAyO1xuICAgIHJldHVybiBvZmZzZXRzO1xufTtcblxuLy8gUGFyc2VzIGEgbGlzdCBvZiAxNiBiaXQgc2lnbmVkIGludGVnZXJzLlxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVNob3J0TGlzdCA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGxpc3QgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIHZhciBkYXRhVmlldyA9IHRoaXMuZGF0YTtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQgKyB0aGlzLnJlbGF0aXZlT2Zmc2V0O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBsaXN0W2ldID0gZGF0YVZpZXcuZ2V0SW50MTYob2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0ICs9IDI7XG4gICAgfVxuXG4gICAgdGhpcy5yZWxhdGl2ZU9mZnNldCArPSBjb3VudCAqIDI7XG4gICAgcmV0dXJuIGxpc3Q7XG59O1xuXG4vLyBQYXJzZXMgYSBsaXN0IG9mIGJ5dGVzLlxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUJ5dGVMaXN0ID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgbGlzdCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgdmFyIGRhdGFWaWV3ID0gdGhpcy5kYXRhO1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIGxpc3RbaV0gPSBkYXRhVmlldy5nZXRVaW50OChvZmZzZXQrKyk7XG4gICAgfVxuXG4gICAgdGhpcy5yZWxhdGl2ZU9mZnNldCArPSBjb3VudDtcbiAgICByZXR1cm4gbGlzdDtcbn07XG5cbi8qKlxuICogUGFyc2UgYSBsaXN0IG9mIGl0ZW1zLlxuICogUmVjb3JkIGNvdW50IGlzIG9wdGlvbmFsLCBpZiBvbWl0dGVkIGl0IGlzIHJlYWQgZnJvbSB0aGUgc3RyZWFtLlxuICogaXRlbUNhbGxiYWNrIGlzIG9uZSBvZiB0aGUgUGFyc2VyIG1ldGhvZHMuXG4gKi9cblBhcnNlci5wcm90b3R5cGUucGFyc2VMaXN0ID0gZnVuY3Rpb24oY291bnQsIGl0ZW1DYWxsYmFjaykge1xuICAgIGlmICghaXRlbUNhbGxiYWNrKSB7XG4gICAgICAgIGl0ZW1DYWxsYmFjayA9IGNvdW50O1xuICAgICAgICBjb3VudCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICB9XG4gICAgdmFyIGxpc3QgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBsaXN0W2ldID0gaXRlbUNhbGxiYWNrLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBsaXN0O1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUxpc3QzMiA9IGZ1bmN0aW9uKGNvdW50LCBpdGVtQ2FsbGJhY2spIHtcbiAgICBpZiAoIWl0ZW1DYWxsYmFjaykge1xuICAgICAgICBpdGVtQ2FsbGJhY2sgPSBjb3VudDtcbiAgICAgICAgY291bnQgPSB0aGlzLnBhcnNlVUxvbmcoKTtcbiAgICB9XG4gICAgdmFyIGxpc3QgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBsaXN0W2ldID0gaXRlbUNhbGxiYWNrLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBsaXN0O1xufTtcblxuLyoqXG4gKiBQYXJzZSBhIGxpc3Qgb2YgcmVjb3Jkcy5cbiAqIFJlY29yZCBjb3VudCBpcyBvcHRpb25hbCwgaWYgb21pdHRlZCBpdCBpcyByZWFkIGZyb20gdGhlIHN0cmVhbS5cbiAqIEV4YW1wbGUgb2YgcmVjb3JkRGVzY3JpcHRpb246IHsgc2VxdWVuY2VJbmRleDogUGFyc2VyLnVTaG9ydCwgbG9va3VwTGlzdEluZGV4OiBQYXJzZXIudVNob3J0IH1cbiAqL1xuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVJlY29yZExpc3QgPSBmdW5jdGlvbihjb3VudCwgcmVjb3JkRGVzY3JpcHRpb24pIHtcbiAgICAvLyBJZiB0aGUgY291bnQgYXJndW1lbnQgaXMgYWJzZW50LCByZWFkIGl0IGluIHRoZSBzdHJlYW0uXG4gICAgaWYgKCFyZWNvcmREZXNjcmlwdGlvbikge1xuICAgICAgICByZWNvcmREZXNjcmlwdGlvbiA9IGNvdW50O1xuICAgICAgICBjb3VudCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICB9XG4gICAgdmFyIHJlY29yZHMgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIHZhciBmaWVsZHMgPSBPYmplY3Qua2V5cyhyZWNvcmREZXNjcmlwdGlvbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIHZhciByZWMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBmaWVsZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSBmaWVsZHNbal07XG4gICAgICAgICAgICB2YXIgZmllbGRUeXBlID0gcmVjb3JkRGVzY3JpcHRpb25bZmllbGROYW1lXTtcbiAgICAgICAgICAgIHJlY1tmaWVsZE5hbWVdID0gZmllbGRUeXBlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVjb3Jkc1tpXSA9IHJlYztcbiAgICB9XG4gICAgcmV0dXJuIHJlY29yZHM7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlUmVjb3JkTGlzdDMyID0gZnVuY3Rpb24oY291bnQsIHJlY29yZERlc2NyaXB0aW9uKSB7XG4gICAgLy8gSWYgdGhlIGNvdW50IGFyZ3VtZW50IGlzIGFic2VudCwgcmVhZCBpdCBpbiB0aGUgc3RyZWFtLlxuICAgIGlmICghcmVjb3JkRGVzY3JpcHRpb24pIHtcbiAgICAgICAgcmVjb3JkRGVzY3JpcHRpb24gPSBjb3VudDtcbiAgICAgICAgY291bnQgPSB0aGlzLnBhcnNlVUxvbmcoKTtcbiAgICB9XG4gICAgdmFyIHJlY29yZHMgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIHZhciBmaWVsZHMgPSBPYmplY3Qua2V5cyhyZWNvcmREZXNjcmlwdGlvbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIHZhciByZWMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBmaWVsZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSBmaWVsZHNbal07XG4gICAgICAgICAgICB2YXIgZmllbGRUeXBlID0gcmVjb3JkRGVzY3JpcHRpb25bZmllbGROYW1lXTtcbiAgICAgICAgICAgIHJlY1tmaWVsZE5hbWVdID0gZmllbGRUeXBlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVjb3Jkc1tpXSA9IHJlYztcbiAgICB9XG4gICAgcmV0dXJuIHJlY29yZHM7XG59O1xuXG4vLyBQYXJzZSBhIGRhdGEgc3RydWN0dXJlIGludG8gYW4gb2JqZWN0XG4vLyBFeGFtcGxlIG9mIGRlc2NyaXB0aW9uOiB7IHNlcXVlbmNlSW5kZXg6IFBhcnNlci51U2hvcnQsIGxvb2t1cExpc3RJbmRleDogUGFyc2VyLnVTaG9ydCB9XG5QYXJzZXIucHJvdG90eXBlLnBhcnNlU3RydWN0ID0gZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICBpZiAodHlwZW9mIGRlc2NyaXB0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbi5jYWxsKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBmaWVsZHMgPSBPYmplY3Qua2V5cyhkZXNjcmlwdGlvbik7XG4gICAgICAgIHZhciBzdHJ1Y3QgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBmaWVsZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSBmaWVsZHNbal07XG4gICAgICAgICAgICB2YXIgZmllbGRUeXBlID0gZGVzY3JpcHRpb25bZmllbGROYW1lXTtcbiAgICAgICAgICAgIHN0cnVjdFtmaWVsZE5hbWVdID0gZmllbGRUeXBlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cnVjdDtcbiAgICB9XG59O1xuXG4vKipcbiAqIFBhcnNlIGEgR1BPUyB2YWx1ZVJlY29yZFxuICogaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvdHlwb2dyYXBoeS9vcGVudHlwZS9zcGVjL2dwb3MjdmFsdWUtcmVjb3JkXG4gKiB2YWx1ZUZvcm1hdCBpcyBvcHRpb25hbCwgaWYgb21pdHRlZCBpdCBpcyByZWFkIGZyb20gdGhlIHN0cmVhbS5cbiAqL1xuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVZhbHVlUmVjb3JkID0gZnVuY3Rpb24odmFsdWVGb3JtYXQpIHtcbiAgICBpZiAodmFsdWVGb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZUZvcm1hdCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlRm9ybWF0ID09PSAwKSB7XG4gICAgICAgIC8vIHZhbHVlRm9ybWF0MiBpbiBrZXJuaW5nIHBhaXJzIGlzIG1vc3Qgb2Z0ZW4gMFxuICAgICAgICAvLyBpbiB0aGlzIGNhc2UgcmV0dXJuIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIGFuIGVtcHR5IG9iamVjdCwgdG8gc2F2ZSBzcGFjZVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB2YWx1ZVJlY29yZCA9IHt9O1xuXG4gICAgaWYgKHZhbHVlRm9ybWF0ICYgMHgwMDAxKSB7IHZhbHVlUmVjb3JkLnhQbGFjZW1lbnQgPSB0aGlzLnBhcnNlU2hvcnQoKTsgfVxuICAgIGlmICh2YWx1ZUZvcm1hdCAmIDB4MDAwMikgeyB2YWx1ZVJlY29yZC55UGxhY2VtZW50ID0gdGhpcy5wYXJzZVNob3J0KCk7IH1cbiAgICBpZiAodmFsdWVGb3JtYXQgJiAweDAwMDQpIHsgdmFsdWVSZWNvcmQueEFkdmFuY2UgPSB0aGlzLnBhcnNlU2hvcnQoKTsgfVxuICAgIGlmICh2YWx1ZUZvcm1hdCAmIDB4MDAwOCkgeyB2YWx1ZVJlY29yZC55QWR2YW5jZSA9IHRoaXMucGFyc2VTaG9ydCgpOyB9XG5cbiAgICAvLyBEZXZpY2UgdGFibGUgKG5vbi12YXJpYWJsZSBmb250KSAvIFZhcmlhdGlvbkluZGV4IHRhYmxlICh2YXJpYWJsZSBmb250KSBub3Qgc3VwcG9ydGVkXG4gICAgLy8gaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZnItZnIvdHlwb2dyYXBoeS9vcGVudHlwZS9zcGVjL2NoYXB0ZXIyI2RldlZhcklkeFRibHNcbiAgICBpZiAodmFsdWVGb3JtYXQgJiAweDAwMTApIHsgdmFsdWVSZWNvcmQueFBsYURldmljZSA9IHVuZGVmaW5lZDsgdGhpcy5wYXJzZVNob3J0KCk7IH1cbiAgICBpZiAodmFsdWVGb3JtYXQgJiAweDAwMjApIHsgdmFsdWVSZWNvcmQueVBsYURldmljZSA9IHVuZGVmaW5lZDsgdGhpcy5wYXJzZVNob3J0KCk7IH1cbiAgICBpZiAodmFsdWVGb3JtYXQgJiAweDAwNDApIHsgdmFsdWVSZWNvcmQueEFkdkRldmljZSA9IHVuZGVmaW5lZDsgdGhpcy5wYXJzZVNob3J0KCk7IH1cbiAgICBpZiAodmFsdWVGb3JtYXQgJiAweDAwODApIHsgdmFsdWVSZWNvcmQueUFkdkRldmljZSA9IHVuZGVmaW5lZDsgdGhpcy5wYXJzZVNob3J0KCk7IH1cblxuICAgIHJldHVybiB2YWx1ZVJlY29yZDtcbn07XG5cbi8qKlxuICogUGFyc2UgYSBsaXN0IG9mIEdQT1MgdmFsdWVSZWNvcmRzXG4gKiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy90eXBvZ3JhcGh5L29wZW50eXBlL3NwZWMvZ3BvcyN2YWx1ZS1yZWNvcmRcbiAqIHZhbHVlRm9ybWF0IGFuZCB2YWx1ZUNvdW50IGFyZSByZWFkIGZyb20gdGhlIHN0cmVhbS5cbiAqL1xuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVZhbHVlUmVjb3JkTGlzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZUZvcm1hdCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICB2YXIgdmFsdWVDb3VudCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KHZhbHVlQ291bnQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVDb3VudDsgaSsrKSB7XG4gICAgICAgIHZhbHVlc1tpXSA9IHRoaXMucGFyc2VWYWx1ZVJlY29yZCh2YWx1ZUZvcm1hdCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlUG9pbnRlciA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgdmFyIHN0cnVjdE9mZnNldCA9IHRoaXMucGFyc2VPZmZzZXQxNigpO1xuICAgIGlmIChzdHJ1Y3RPZmZzZXQgPiAwKSB7XG4gICAgICAgIC8vIE5VTEwgb2Zmc2V0ID0+IHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZXIodGhpcy5kYXRhLCB0aGlzLm9mZnNldCArIHN0cnVjdE9mZnNldCkucGFyc2VTdHJ1Y3QoZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVBvaW50ZXIzMiA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgdmFyIHN0cnVjdE9mZnNldCA9IHRoaXMucGFyc2VPZmZzZXQzMigpO1xuICAgIGlmIChzdHJ1Y3RPZmZzZXQgPiAwKSB7XG4gICAgICAgIC8vIE5VTEwgb2Zmc2V0ID0+IHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzZXIodGhpcy5kYXRhLCB0aGlzLm9mZnNldCArIHN0cnVjdE9mZnNldCkucGFyc2VTdHJ1Y3QoZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuLyoqXG4gKiBQYXJzZSBhIGxpc3Qgb2Ygb2Zmc2V0cyB0byBsaXN0cyBvZiAxNi1iaXQgaW50ZWdlcnMsXG4gKiBvciBhIGxpc3Qgb2Ygb2Zmc2V0cyB0byBsaXN0cyBvZiBvZmZzZXRzIHRvIGFueSBraW5kIG9mIGl0ZW1zLlxuICogSWYgaXRlbUNhbGxiYWNrIGlzIG5vdCBwcm92aWRlZCwgYSBsaXN0IG9mIGxpc3Qgb2YgVVNob3J0IGlzIGFzc3VtZWQuXG4gKiBJZiBwcm92aWRlZCwgaXRlbUNhbGxiYWNrIGlzIGNhbGxlZCBvbiBlYWNoIGl0ZW0gYW5kIG11c3QgcGFyc2UgdGhlIGl0ZW0uXG4gKiBTZWUgZXhhbXBsZXMgaW4gdGFibGVzL2dzdWIuanNcbiAqL1xuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUxpc3RPZkxpc3RzID0gZnVuY3Rpb24oaXRlbUNhbGxiYWNrKSB7XG4gICAgdmFyIG9mZnNldHMgPSB0aGlzLnBhcnNlT2Zmc2V0MTZMaXN0KCk7XG4gICAgdmFyIGNvdW50ID0gb2Zmc2V0cy5sZW5ndGg7XG4gICAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gdGhpcy5yZWxhdGl2ZU9mZnNldDtcbiAgICB2YXIgbGlzdCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIHZhciBzdGFydCA9IG9mZnNldHNbaV07XG4gICAgICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gTlVMTCBvZmZzZXRcbiAgICAgICAgICAgIC8vIEFkZCBpIGFzIG93bmVkIHByb3BlcnR5IHRvIGxpc3QuIENvbnZlbmllbnQgd2l0aCBhc3NlcnQuXG4gICAgICAgICAgICBsaXN0W2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWxhdGl2ZU9mZnNldCA9IHN0YXJ0O1xuICAgICAgICBpZiAoaXRlbUNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgc3ViT2Zmc2V0cyA9IHRoaXMucGFyc2VPZmZzZXQxNkxpc3QoKTtcbiAgICAgICAgICAgIHZhciBzdWJMaXN0ID0gbmV3IEFycmF5KHN1Yk9mZnNldHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3ViT2Zmc2V0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmVPZmZzZXQgPSBzdGFydCArIHN1Yk9mZnNldHNbal07XG4gICAgICAgICAgICAgICAgc3ViTGlzdFtqXSA9IGl0ZW1DYWxsYmFjay5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGlzdFtpXSA9IHN1Ykxpc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0W2ldID0gdGhpcy5wYXJzZVVTaG9ydExpc3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlbGF0aXZlT2Zmc2V0ID0gcmVsYXRpdmVPZmZzZXQ7XG4gICAgcmV0dXJuIGxpc3Q7XG59O1xuXG4vLy8vLyBDb21wbGV4IHRhYmxlcyBwYXJzaW5nIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLy8gUGFyc2UgYSBjb3ZlcmFnZSB0YWJsZSBpbiBhIEdTVUIsIEdQT1Mgb3IgR0RFRiB0YWJsZS5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvY2hhcHRlcjIuaHRtXG4vLyBwYXJzZXIub2Zmc2V0IG11c3QgcG9pbnQgdG8gdGhlIHN0YXJ0IG9mIHRoZSB0YWJsZSBjb250YWluaW5nIHRoZSBjb3ZlcmFnZS5cblBhcnNlci5wcm90b3R5cGUucGFyc2VDb3ZlcmFnZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFydE9mZnNldCA9IHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldDtcbiAgICB2YXIgZm9ybWF0ID0gdGhpcy5wYXJzZVVTaG9ydCgpO1xuICAgIHZhciBjb3VudCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICBpZiAoZm9ybWF0ID09PSAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3JtYXQ6IDEsXG4gICAgICAgICAgICBnbHlwaHM6IHRoaXMucGFyc2VVU2hvcnRMaXN0KGNvdW50KVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAyKSB7XG4gICAgICAgIHZhciByYW5nZXMgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIHJhbmdlc1tpXSA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5wYXJzZVVTaG9ydCgpLFxuICAgICAgICAgICAgICAgIGVuZDogdGhpcy5wYXJzZVVTaG9ydCgpLFxuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLnBhcnNlVVNob3J0KClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvcm1hdDogMixcbiAgICAgICAgICAgIHJhbmdlczogcmFuZ2VzXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignMHgnICsgc3RhcnRPZmZzZXQudG9TdHJpbmcoMTYpICsgJzogQ292ZXJhZ2UgZm9ybWF0IG11c3QgYmUgMSBvciAyLicpO1xufTtcblxuLy8gUGFyc2UgYSBDbGFzcyBEZWZpbml0aW9uIFRhYmxlIGluIGEgR1NVQiwgR1BPUyBvciBHREVGIHRhYmxlLlxuLy8gaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L09UU1BFQy9jaGFwdGVyMi5odG1cblBhcnNlci5wcm90b3R5cGUucGFyc2VDbGFzc0RlZiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFydE9mZnNldCA9IHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldDtcbiAgICB2YXIgZm9ybWF0ID0gdGhpcy5wYXJzZVVTaG9ydCgpO1xuICAgIGlmIChmb3JtYXQgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvcm1hdDogMSxcbiAgICAgICAgICAgIHN0YXJ0R2x5cGg6IHRoaXMucGFyc2VVU2hvcnQoKSxcbiAgICAgICAgICAgIGNsYXNzZXM6IHRoaXMucGFyc2VVU2hvcnRMaXN0KClcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gMikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0OiAyLFxuICAgICAgICAgICAgcmFuZ2VzOiB0aGlzLnBhcnNlUmVjb3JkTGlzdCh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IFBhcnNlci51U2hvcnQsXG4gICAgICAgICAgICAgICAgZW5kOiBQYXJzZXIudVNob3J0LFxuICAgICAgICAgICAgICAgIGNsYXNzSWQ6IFBhcnNlci51U2hvcnRcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignMHgnICsgc3RhcnRPZmZzZXQudG9TdHJpbmcoMTYpICsgJzogQ2xhc3NEZWYgZm9ybWF0IG11c3QgYmUgMSBvciAyLicpO1xufTtcblxuLy8vLy8gU3RhdGljIG1ldGhvZHMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFRoZXNlIGNvbnZlbmllbmNlIG1ldGhvZHMgY2FuIGJlIHVzZWQgYXMgY2FsbGJhY2tzIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggXCJ0aGlzXCIgY29udGV4dCBzZXQgdG8gYSBQYXJzZXIgaW5zdGFuY2UuXG5cblBhcnNlci5saXN0ID0gZnVuY3Rpb24oY291bnQsIGl0ZW1DYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VMaXN0KGNvdW50LCBpdGVtQ2FsbGJhY2spO1xuICAgIH07XG59O1xuXG5QYXJzZXIubGlzdDMyID0gZnVuY3Rpb24oY291bnQsIGl0ZW1DYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VMaXN0MzIoY291bnQsIGl0ZW1DYWxsYmFjayk7XG4gICAgfTtcbn07XG5cblBhcnNlci5yZWNvcmRMaXN0ID0gZnVuY3Rpb24oY291bnQsIHJlY29yZERlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVJlY29yZExpc3QoY291bnQsIHJlY29yZERlc2NyaXB0aW9uKTtcbiAgICB9O1xufTtcblxuUGFyc2VyLnJlY29yZExpc3QzMiA9IGZ1bmN0aW9uKGNvdW50LCByZWNvcmREZXNjcmlwdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VSZWNvcmRMaXN0MzIoY291bnQsIHJlY29yZERlc2NyaXB0aW9uKTtcbiAgICB9O1xufTtcblxuUGFyc2VyLnBvaW50ZXIgPSBmdW5jdGlvbihkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VQb2ludGVyKGRlc2NyaXB0aW9uKTtcbiAgICB9O1xufTtcblxuUGFyc2VyLnBvaW50ZXIzMiA9IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVBvaW50ZXIzMihkZXNjcmlwdGlvbik7XG4gICAgfTtcbn07XG5cblBhcnNlci50YWcgPSBQYXJzZXIucHJvdG90eXBlLnBhcnNlVGFnO1xuUGFyc2VyLmJ5dGUgPSBQYXJzZXIucHJvdG90eXBlLnBhcnNlQnl0ZTtcblBhcnNlci51U2hvcnQgPSBQYXJzZXIub2Zmc2V0MTYgPSBQYXJzZXIucHJvdG90eXBlLnBhcnNlVVNob3J0O1xuUGFyc2VyLnVTaG9ydExpc3QgPSBQYXJzZXIucHJvdG90eXBlLnBhcnNlVVNob3J0TGlzdDtcblBhcnNlci51TG9uZyA9IFBhcnNlci5vZmZzZXQzMiA9IFBhcnNlci5wcm90b3R5cGUucGFyc2VVTG9uZztcblBhcnNlci51TG9uZ0xpc3QgPSBQYXJzZXIucHJvdG90eXBlLnBhcnNlVUxvbmdMaXN0O1xuUGFyc2VyLnN0cnVjdCA9IFBhcnNlci5wcm90b3R5cGUucGFyc2VTdHJ1Y3Q7XG5QYXJzZXIuY292ZXJhZ2UgPSBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ292ZXJhZ2U7XG5QYXJzZXIuY2xhc3NEZWYgPSBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ2xhc3NEZWY7XG5cbi8vLy8vIFNjcmlwdCwgRmVhdHVyZSwgTG9va3VwIGxpc3RzIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBodHRwczovL3d3dy5taWNyb3NvZnQuY29tL3R5cG9ncmFwaHkvT1RTUEVDL2NoYXB0ZXIyLmh0bVxuXG52YXIgbGFuZ1N5c1RhYmxlID0ge1xuICAgIHJlc2VydmVkOiBQYXJzZXIudVNob3J0LFxuICAgIHJlcUZlYXR1cmVJbmRleDogUGFyc2VyLnVTaG9ydCxcbiAgICBmZWF0dXJlSW5kZXhlczogUGFyc2VyLnVTaG9ydExpc3Rcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VTY3JpcHRMaXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VQb2ludGVyKFBhcnNlci5yZWNvcmRMaXN0KHtcbiAgICAgICAgdGFnOiBQYXJzZXIudGFnLFxuICAgICAgICBzY3JpcHQ6IFBhcnNlci5wb2ludGVyKHtcbiAgICAgICAgICAgIGRlZmF1bHRMYW5nU3lzOiBQYXJzZXIucG9pbnRlcihsYW5nU3lzVGFibGUpLFxuICAgICAgICAgICAgbGFuZ1N5c1JlY29yZHM6IFBhcnNlci5yZWNvcmRMaXN0KHtcbiAgICAgICAgICAgICAgICB0YWc6IFBhcnNlci50YWcsXG4gICAgICAgICAgICAgICAgbGFuZ1N5czogUGFyc2VyLnBvaW50ZXIobGFuZ1N5c1RhYmxlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9KSkgfHwgW107XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlRmVhdHVyZUxpc3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZVBvaW50ZXIoUGFyc2VyLnJlY29yZExpc3Qoe1xuICAgICAgICB0YWc6IFBhcnNlci50YWcsXG4gICAgICAgIGZlYXR1cmU6IFBhcnNlci5wb2ludGVyKHtcbiAgICAgICAgICAgIGZlYXR1cmVQYXJhbXM6IFBhcnNlci5vZmZzZXQxNixcbiAgICAgICAgICAgIGxvb2t1cExpc3RJbmRleGVzOiBQYXJzZXIudVNob3J0TGlzdFxuICAgICAgICB9KVxuICAgIH0pKSB8fCBbXTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VMb29rdXBMaXN0ID0gZnVuY3Rpb24obG9va3VwVGFibGVQYXJzZXJzKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VQb2ludGVyKFBhcnNlci5saXN0KFBhcnNlci5wb2ludGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbG9va3VwVHlwZSA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgY2hlY2suYXJndW1lbnQoMSA8PSBsb29rdXBUeXBlICYmIGxvb2t1cFR5cGUgPD0gOSwgJ0dQT1MvR1NVQiBsb29rdXAgdHlwZSAnICsgbG9va3VwVHlwZSArICcgdW5rbm93bi4nKTtcbiAgICAgICAgdmFyIGxvb2t1cEZsYWcgPSB0aGlzLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciB1c2VNYXJrRmlsdGVyaW5nU2V0ID0gbG9va3VwRmxhZyAmIDB4MTA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb29rdXBUeXBlOiBsb29rdXBUeXBlLFxuICAgICAgICAgICAgbG9va3VwRmxhZzogbG9va3VwRmxhZyxcbiAgICAgICAgICAgIHN1YnRhYmxlczogdGhpcy5wYXJzZUxpc3QoUGFyc2VyLnBvaW50ZXIobG9va3VwVGFibGVQYXJzZXJzW2xvb2t1cFR5cGVdKSksXG4gICAgICAgICAgICBtYXJrRmlsdGVyaW5nU2V0OiB1c2VNYXJrRmlsdGVyaW5nU2V0ID8gdGhpcy5wYXJzZVVTaG9ydCgpIDogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgfSkpKSB8fCBbXTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VGZWF0dXJlVmFyaWF0aW9uc0xpc3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZVBvaW50ZXIzMihmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1ham9yVmVyc2lvbiA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgdmFyIG1pbm9yVmVyc2lvbiA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgY2hlY2suYXJndW1lbnQobWFqb3JWZXJzaW9uID09PSAxICYmIG1pbm9yVmVyc2lvbiA8IDEsICdHUE9TL0dTVUIgZmVhdHVyZSB2YXJpYXRpb25zIHRhYmxlIHVua25vd24uJyk7XG4gICAgICAgIHZhciBmZWF0dXJlVmFyaWF0aW9ucyA9IHRoaXMucGFyc2VSZWNvcmRMaXN0MzIoe1xuICAgICAgICAgICAgY29uZGl0aW9uU2V0T2Zmc2V0OiBQYXJzZXIub2Zmc2V0MzIsXG4gICAgICAgICAgICBmZWF0dXJlVGFibGVTdWJzdGl0dXRpb25PZmZzZXQ6IFBhcnNlci5vZmZzZXQzMlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZlYXR1cmVWYXJpYXRpb25zO1xuICAgIH0pIHx8IFtdO1xufTtcblxudmFyIHBhcnNlID0ge1xuICAgIGdldEJ5dGU6IGdldEJ5dGUsXG4gICAgZ2V0Q2FyZDg6IGdldEJ5dGUsXG4gICAgZ2V0VVNob3J0OiBnZXRVU2hvcnQsXG4gICAgZ2V0Q2FyZDE2OiBnZXRVU2hvcnQsXG4gICAgZ2V0U2hvcnQ6IGdldFNob3J0LFxuICAgIGdldFVMb25nOiBnZXRVTG9uZyxcbiAgICBnZXRGaXhlZDogZ2V0Rml4ZWQsXG4gICAgZ2V0VGFnOiBnZXRUYWcsXG4gICAgZ2V0T2Zmc2V0OiBnZXRPZmZzZXQsXG4gICAgZ2V0Qnl0ZXM6IGdldEJ5dGVzLFxuICAgIGJ5dGVzVG9TdHJpbmc6IGJ5dGVzVG9TdHJpbmcsXG4gICAgUGFyc2VyOiBQYXJzZXIsXG59O1xuXG4vLyBUaGUgYGNtYXBgIHRhYmxlIHN0b3JlcyB0aGUgbWFwcGluZ3MgZnJvbSBjaGFyYWN0ZXJzIHRvIGdseXBocy5cblxuZnVuY3Rpb24gcGFyc2VDbWFwVGFibGVGb3JtYXQxMihjbWFwLCBwKSB7XG4gICAgLy9Ta2lwIHJlc2VydmVkLlxuICAgIHAucGFyc2VVU2hvcnQoKTtcblxuICAgIC8vIExlbmd0aCBpbiBieXRlcyBvZiB0aGUgc3ViLXRhYmxlcy5cbiAgICBjbWFwLmxlbmd0aCA9IHAucGFyc2VVTG9uZygpO1xuICAgIGNtYXAubGFuZ3VhZ2UgPSBwLnBhcnNlVUxvbmcoKTtcblxuICAgIHZhciBncm91cENvdW50O1xuICAgIGNtYXAuZ3JvdXBDb3VudCA9IGdyb3VwQ291bnQgPSBwLnBhcnNlVUxvbmcoKTtcbiAgICBjbWFwLmdseXBoSW5kZXhNYXAgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBDb3VudDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBzdGFydENoYXJDb2RlID0gcC5wYXJzZVVMb25nKCk7XG4gICAgICAgIHZhciBlbmRDaGFyQ29kZSA9IHAucGFyc2VVTG9uZygpO1xuICAgICAgICB2YXIgc3RhcnRHbHlwaElkID0gcC5wYXJzZVVMb25nKCk7XG5cbiAgICAgICAgZm9yICh2YXIgYyA9IHN0YXJ0Q2hhckNvZGU7IGMgPD0gZW5kQ2hhckNvZGU7IGMgKz0gMSkge1xuICAgICAgICAgICAgY21hcC5nbHlwaEluZGV4TWFwW2NdID0gc3RhcnRHbHlwaElkO1xuICAgICAgICAgICAgc3RhcnRHbHlwaElkKys7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ21hcFRhYmxlRm9ybWF0NChjbWFwLCBwLCBkYXRhLCBzdGFydCwgb2Zmc2V0KSB7XG4gICAgLy8gTGVuZ3RoIGluIGJ5dGVzIG9mIHRoZSBzdWItdGFibGVzLlxuICAgIGNtYXAubGVuZ3RoID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIGNtYXAubGFuZ3VhZ2UgPSBwLnBhcnNlVVNob3J0KCk7XG5cbiAgICAvLyBzZWdDb3VudCBpcyBzdG9yZWQgeCAyLlxuICAgIHZhciBzZWdDb3VudDtcbiAgICBjbWFwLnNlZ0NvdW50ID0gc2VnQ291bnQgPSBwLnBhcnNlVVNob3J0KCkgPj4gMTtcblxuICAgIC8vIFNraXAgc2VhcmNoUmFuZ2UsIGVudHJ5U2VsZWN0b3IsIHJhbmdlU2hpZnQuXG4gICAgcC5za2lwKCd1U2hvcnQnLCAzKTtcblxuICAgIC8vIFRoZSBcInVucm9sbGVkXCIgbWFwcGluZyBmcm9tIGNoYXJhY3RlciBjb2RlcyB0byBnbHlwaCBpbmRpY2VzLlxuICAgIGNtYXAuZ2x5cGhJbmRleE1hcCA9IHt9O1xuICAgIHZhciBlbmRDb3VudFBhcnNlciA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQgKyBvZmZzZXQgKyAxNCk7XG4gICAgdmFyIHN0YXJ0Q291bnRQYXJzZXIgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0ICsgb2Zmc2V0ICsgMTYgKyBzZWdDb3VudCAqIDIpO1xuICAgIHZhciBpZERlbHRhUGFyc2VyID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCArIG9mZnNldCArIDE2ICsgc2VnQ291bnQgKiA0KTtcbiAgICB2YXIgaWRSYW5nZU9mZnNldFBhcnNlciA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQgKyBvZmZzZXQgKyAxNiArIHNlZ0NvdW50ICogNik7XG4gICAgdmFyIGdseXBoSW5kZXhPZmZzZXQgPSBzdGFydCArIG9mZnNldCArIDE2ICsgc2VnQ291bnQgKiA4O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnQ291bnQgLSAxOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGdseXBoSW5kZXggPSAodm9pZCAwKTtcbiAgICAgICAgdmFyIGVuZENvdW50ID0gZW5kQ291bnRQYXJzZXIucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgdmFyIHN0YXJ0Q291bnQgPSBzdGFydENvdW50UGFyc2VyLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciBpZERlbHRhID0gaWREZWx0YVBhcnNlci5wYXJzZVNob3J0KCk7XG4gICAgICAgIHZhciBpZFJhbmdlT2Zmc2V0ID0gaWRSYW5nZU9mZnNldFBhcnNlci5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBmb3IgKHZhciBjID0gc3RhcnRDb3VudDsgYyA8PSBlbmRDb3VudDsgYyArPSAxKSB7XG4gICAgICAgICAgICBpZiAoaWRSYW5nZU9mZnNldCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBpZFJhbmdlT2Zmc2V0IGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBpZFJhbmdlT2Zmc2V0IGFycmF5LlxuICAgICAgICAgICAgICAgIC8vIFRha2UgdGhlIGN1cnJlbnQgb2Zmc2V0IGluIHRoZSBpZFJhbmdlT2Zmc2V0IGFycmF5LlxuICAgICAgICAgICAgICAgIGdseXBoSW5kZXhPZmZzZXQgPSAoaWRSYW5nZU9mZnNldFBhcnNlci5vZmZzZXQgKyBpZFJhbmdlT2Zmc2V0UGFyc2VyLnJlbGF0aXZlT2Zmc2V0IC0gMik7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIHZhbHVlIG9mIHRoZSBpZFJhbmdlT2Zmc2V0LCB3aGljaCB3aWxsIG1vdmUgdXMgaW50byB0aGUgZ2x5cGhJbmRleCBhcnJheS5cbiAgICAgICAgICAgICAgICBnbHlwaEluZGV4T2Zmc2V0ICs9IGlkUmFuZ2VPZmZzZXQ7XG5cbiAgICAgICAgICAgICAgICAvLyBUaGVuIGFkZCB0aGUgY2hhcmFjdGVyIGluZGV4IG9mIHRoZSBjdXJyZW50IHNlZ21lbnQsIG11bHRpcGxpZWQgYnkgMiBmb3IgVVNIT1JUcy5cbiAgICAgICAgICAgICAgICBnbHlwaEluZGV4T2Zmc2V0ICs9IChjIC0gc3RhcnRDb3VudCkgKiAyO1xuICAgICAgICAgICAgICAgIGdseXBoSW5kZXggPSBwYXJzZS5nZXRVU2hvcnQoZGF0YSwgZ2x5cGhJbmRleE9mZnNldCk7XG4gICAgICAgICAgICAgICAgaWYgKGdseXBoSW5kZXggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhJbmRleCA9IChnbHlwaEluZGV4ICsgaWREZWx0YSkgJiAweEZGRkY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbHlwaEluZGV4ID0gKGMgKyBpZERlbHRhKSAmIDB4RkZGRjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY21hcC5nbHlwaEluZGV4TWFwW2NdID0gZ2x5cGhJbmRleDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gUGFyc2UgdGhlIGBjbWFwYCB0YWJsZS4gVGhpcyB0YWJsZSBzdG9yZXMgdGhlIG1hcHBpbmdzIGZyb20gY2hhcmFjdGVycyB0byBnbHlwaHMuXG4vLyBUaGVyZSBhcmUgbWFueSBhdmFpbGFibGUgZm9ybWF0cywgYnV0IHdlIG9ubHkgc3VwcG9ydCB0aGUgV2luZG93cyBmb3JtYXQgNCBhbmQgMTIuXG4vLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBgQ21hcEVuY29kaW5nYCBvYmplY3Qgb3IgbnVsbCBpZiBubyBzdXBwb3J0ZWQgZm9ybWF0IGNvdWxkIGJlIGZvdW5kLlxuZnVuY3Rpb24gcGFyc2VDbWFwVGFibGUoZGF0YSwgc3RhcnQpIHtcbiAgICB2YXIgY21hcCA9IHt9O1xuICAgIGNtYXAudmVyc2lvbiA9IHBhcnNlLmdldFVTaG9ydChkYXRhLCBzdGFydCk7XG4gICAgY2hlY2suYXJndW1lbnQoY21hcC52ZXJzaW9uID09PSAwLCAnY21hcCB0YWJsZSB2ZXJzaW9uIHNob3VsZCBiZSAwLicpO1xuXG4gICAgLy8gVGhlIGNtYXAgdGFibGUgY2FuIGNvbnRhaW4gbWFueSBzdWItdGFibGVzLCBlYWNoIHdpdGggdGhlaXIgb3duIGZvcm1hdC5cbiAgICAvLyBXZSdyZSBvbmx5IGludGVyZXN0ZWQgaW4gYSBcInBsYXRmb3JtIDBcIiAoVW5pY29kZSBmb3JtYXQpIGFuZCBcInBsYXRmb3JtIDNcIiAoV2luZG93cyBmb3JtYXQpIHRhYmxlLlxuICAgIGNtYXAubnVtVGFibGVzID0gcGFyc2UuZ2V0VVNob3J0KGRhdGEsIHN0YXJ0ICsgMik7XG4gICAgdmFyIG9mZnNldCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSBjbWFwLm51bVRhYmxlcyAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIHZhciBwbGF0Zm9ybUlkID0gcGFyc2UuZ2V0VVNob3J0KGRhdGEsIHN0YXJ0ICsgNCArIChpICogOCkpO1xuICAgICAgICB2YXIgZW5jb2RpbmdJZCA9IHBhcnNlLmdldFVTaG9ydChkYXRhLCBzdGFydCArIDQgKyAoaSAqIDgpICsgMik7XG4gICAgICAgIGlmICgocGxhdGZvcm1JZCA9PT0gMyAmJiAoZW5jb2RpbmdJZCA9PT0gMCB8fCBlbmNvZGluZ0lkID09PSAxIHx8IGVuY29kaW5nSWQgPT09IDEwKSkgfHxcbiAgICAgICAgICAgIChwbGF0Zm9ybUlkID09PSAwICYmIChlbmNvZGluZ0lkID09PSAwIHx8IGVuY29kaW5nSWQgPT09IDEgfHwgZW5jb2RpbmdJZCA9PT0gMiB8fCBlbmNvZGluZ0lkID09PSAzIHx8IGVuY29kaW5nSWQgPT09IDQpKSkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gcGFyc2UuZ2V0VUxvbmcoZGF0YSwgc3RhcnQgKyA0ICsgKGkgKiA4KSArIDQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0ID09PSAtMSkge1xuICAgICAgICAvLyBUaGVyZSBpcyBubyBjbWFwIHRhYmxlIGluIHRoZSBmb250IHRoYXQgd2Ugc3VwcG9ydC5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB2YWxpZCBjbWFwIHN1Yi10YWJsZXMgZm91bmQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHAgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0ICsgb2Zmc2V0KTtcbiAgICBjbWFwLmZvcm1hdCA9IHAucGFyc2VVU2hvcnQoKTtcblxuICAgIGlmIChjbWFwLmZvcm1hdCA9PT0gMTIpIHtcbiAgICAgICAgcGFyc2VDbWFwVGFibGVGb3JtYXQxMihjbWFwLCBwKTtcbiAgICB9IGVsc2UgaWYgKGNtYXAuZm9ybWF0ID09PSA0KSB7XG4gICAgICAgIHBhcnNlQ21hcFRhYmxlRm9ybWF0NChjbWFwLCBwLCBkYXRhLCBzdGFydCwgb2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgZm9ybWF0IDQgYW5kIDEyIGNtYXAgdGFibGVzIGFyZSBzdXBwb3J0ZWQgKGZvdW5kIGZvcm1hdCAnICsgY21hcC5mb3JtYXQgKyAnKS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY21hcDtcbn1cblxuZnVuY3Rpb24gYWRkU2VnbWVudCh0LCBjb2RlLCBnbHlwaEluZGV4KSB7XG4gICAgdC5zZWdtZW50cy5wdXNoKHtcbiAgICAgICAgZW5kOiBjb2RlLFxuICAgICAgICBzdGFydDogY29kZSxcbiAgICAgICAgZGVsdGE6IC0oY29kZSAtIGdseXBoSW5kZXgpLFxuICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgIGdseXBoSW5kZXg6IGdseXBoSW5kZXhcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVGVybWluYXRvclNlZ21lbnQodCkge1xuICAgIHQuc2VnbWVudHMucHVzaCh7XG4gICAgICAgIGVuZDogMHhGRkZGLFxuICAgICAgICBzdGFydDogMHhGRkZGLFxuICAgICAgICBkZWx0YTogMSxcbiAgICAgICAgb2Zmc2V0OiAwXG4gICAgfSk7XG59XG5cbi8vIE1ha2UgY21hcCB0YWJsZSwgZm9ybWF0IDQgYnkgZGVmYXVsdCwgMTIgaWYgbmVlZGVkIG9ubHlcbmZ1bmN0aW9uIG1ha2VDbWFwVGFibGUoZ2x5cGhzKSB7XG4gICAgLy8gUGxhbiAwIGlzIHRoZSBiYXNlIFVuaWNvZGUgUGxhbiBidXQgZW1vamlzLCBmb3IgZXhhbXBsZSBhcmUgb24gYW5vdGhlciBwbGFuLCBhbmQgbmVlZHMgY21hcCAxMiBmb3JtYXQgKHdpdGggMzJiaXQpXG4gICAgdmFyIGlzUGxhbjBPbmx5ID0gdHJ1ZTtcbiAgICB2YXIgaTtcblxuICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gYWRkIGNtYXAgZm9ybWF0IDEyIG9yIGlmIGZvcm1hdCA0IG9ubHkgaXMgZmluZVxuICAgIGZvciAoaSA9IGdseXBocy5sZW5ndGggLSAxOyBpID4gMDsgaSAtPSAxKSB7XG4gICAgICAgIHZhciBnID0gZ2x5cGhzLmdldChpKTtcbiAgICAgICAgaWYgKGcudW5pY29kZSA+IDY1NTM1KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQWRkaW5nIENNQVAgZm9ybWF0IDEyIChuZWVkZWQhKScpO1xuICAgICAgICAgICAgaXNQbGFuME9ubHkgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNtYXBUYWJsZSA9IFtcbiAgICAgICAge25hbWU6ICd2ZXJzaW9uJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdudW1UYWJsZXMnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IGlzUGxhbjBPbmx5ID8gMSA6IDJ9LFxuXG4gICAgICAgIC8vIENNQVAgNCBoZWFkZXJcbiAgICAgICAge25hbWU6ICdwbGF0Zm9ybUlEJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAzfSxcbiAgICAgICAge25hbWU6ICdlbmNvZGluZ0lEJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAxfSxcbiAgICAgICAge25hbWU6ICdvZmZzZXQnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogaXNQbGFuME9ubHkgPyAxMiA6ICgxMiArIDgpfVxuICAgIF07XG5cbiAgICBpZiAoIWlzUGxhbjBPbmx5KVxuICAgICAgICB7IGNtYXBUYWJsZSA9IGNtYXBUYWJsZS5jb25jYXQoW1xuICAgICAgICAgICAgLy8gQ01BUCAxMiBoZWFkZXJcbiAgICAgICAgICAgIHtuYW1lOiAnY21hcDEyUGxhdGZvcm1JRCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogM30sIC8vIFdlIGVuY29kZSBvbmx5IGZvciBQbGF0Zm9ybUlEID0gMyAoV2luZG93cykgYmVjYXVzZSBpdCBpcyBzdXBwb3J0ZWQgZXZlcnl3aGVyZVxuICAgICAgICAgICAge25hbWU6ICdjbWFwMTJFbmNvZGluZ0lEJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAxMH0sXG4gICAgICAgICAgICB7bmFtZTogJ2NtYXAxMk9mZnNldCcsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiAwfVxuICAgICAgICBdKTsgfVxuXG4gICAgY21hcFRhYmxlID0gY21hcFRhYmxlLmNvbmNhdChbXG4gICAgICAgIC8vIENNQVAgNCBTdWJ0YWJsZVxuICAgICAgICB7bmFtZTogJ2Zvcm1hdCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogNH0sXG4gICAgICAgIHtuYW1lOiAnY21hcDRMZW5ndGgnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2xhbmd1YWdlJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdzZWdDb3VudFgyJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdzZWFyY2hSYW5nZScsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnZW50cnlTZWxlY3RvcicsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAncmFuZ2VTaGlmdCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH1cbiAgICBdKTtcblxuICAgIHZhciB0ID0gbmV3IHRhYmxlLlRhYmxlKCdjbWFwJywgY21hcFRhYmxlKTtcblxuICAgIHQuc2VnbWVudHMgPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZ2x5cGhzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBnbHlwaCA9IGdseXBocy5nZXQoaSk7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZ2x5cGgudW5pY29kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGFkZFNlZ21lbnQodCwgZ2x5cGgudW5pY29kZXNbal0sIGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdC5zZWdtZW50cyA9IHQuc2VnbWVudHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEuc3RhcnQgLSBiLnN0YXJ0O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRUZXJtaW5hdG9yU2VnbWVudCh0KTtcblxuICAgIHZhciBzZWdDb3VudCA9IHQuc2VnbWVudHMubGVuZ3RoO1xuICAgIHZhciBzZWdDb3VudFRvUmVtb3ZlID0gMDtcblxuICAgIC8vIENNQVAgNFxuICAgIC8vIFNldCB1cCBwYXJhbGxlbCBzZWdtZW50IGFycmF5cy5cbiAgICB2YXIgZW5kQ291bnRzID0gW107XG4gICAgdmFyIHN0YXJ0Q291bnRzID0gW107XG4gICAgdmFyIGlkRGVsdGFzID0gW107XG4gICAgdmFyIGlkUmFuZ2VPZmZzZXRzID0gW107XG4gICAgdmFyIGdseXBoSWRzID0gW107XG5cbiAgICAvLyBDTUFQIDEyXG4gICAgdmFyIGNtYXAxMkdyb3VwcyA9IFtdO1xuXG4gICAgLy8gUmVtaW5kZXIgdGhpcyBsb29wIGlzIG5vdCBmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb24gYXQgMTAwJVxuICAgIC8vIFRoZSBzcGVjaWZpY2F0aW9uIC0+IGZpbmQgc3VpdGVzIG9mIGNoYXJhY3RlcnMgYW5kIG1ha2UgYSBncm91cFxuICAgIC8vIEhlcmUgd2UncmUgZG9pbmcgb25lIGdyb3VwIGZvciBlYWNoIGxldHRlclxuICAgIC8vIERvaW5nIGFzIHRoZSBzcGVjIGNhbiBzYXZlIDggdGltZXMgKG9yIG1vcmUpIHNwYWNlXG4gICAgZm9yIChpID0gMDsgaSA8IHNlZ0NvdW50OyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHNlZ21lbnQgPSB0LnNlZ21lbnRzW2ldO1xuXG4gICAgICAgIC8vIENNQVAgNFxuICAgICAgICBpZiAoc2VnbWVudC5lbmQgPD0gNjU1MzUgJiYgc2VnbWVudC5zdGFydCA8PSA2NTUzNSkge1xuICAgICAgICAgICAgZW5kQ291bnRzID0gZW5kQ291bnRzLmNvbmNhdCh7bmFtZTogJ2VuZF8nICsgaSwgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBzZWdtZW50LmVuZH0pO1xuICAgICAgICAgICAgc3RhcnRDb3VudHMgPSBzdGFydENvdW50cy5jb25jYXQoe25hbWU6ICdzdGFydF8nICsgaSwgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBzZWdtZW50LnN0YXJ0fSk7XG4gICAgICAgICAgICBpZERlbHRhcyA9IGlkRGVsdGFzLmNvbmNhdCh7bmFtZTogJ2lkRGVsdGFfJyArIGksIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiBzZWdtZW50LmRlbHRhfSk7XG4gICAgICAgICAgICBpZFJhbmdlT2Zmc2V0cyA9IGlkUmFuZ2VPZmZzZXRzLmNvbmNhdCh7bmFtZTogJ2lkUmFuZ2VPZmZzZXRfJyArIGksIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogc2VnbWVudC5vZmZzZXR9KTtcbiAgICAgICAgICAgIGlmIChzZWdtZW50LmdseXBoSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGdseXBoSWRzID0gZ2x5cGhJZHMuY29uY2F0KHtuYW1lOiAnZ2x5cGhfJyArIGksIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogc2VnbWVudC5nbHlwaElkfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTa2lwIFVuaWNvZGUgPiA2NTUzNSAoMTZiaXQgdW5zaWduZWQgbWF4KSBmb3IgQ01BUCA0LCB3aWxsIGJlIGFkZGVkIGluIENNQVAgMTJcbiAgICAgICAgICAgIHNlZ0NvdW50VG9SZW1vdmUgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENNQVAgMTJcbiAgICAgICAgLy8gU2tpcCBUZXJtaW5hdG9yIFNlZ21lbnRcbiAgICAgICAgaWYgKCFpc1BsYW4wT25seSAmJiBzZWdtZW50LmdseXBoSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY21hcDEyR3JvdXBzID0gY21hcDEyR3JvdXBzLmNvbmNhdCh7bmFtZTogJ2NtYXAxMlN0YXJ0XycgKyBpLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogc2VnbWVudC5zdGFydH0pO1xuICAgICAgICAgICAgY21hcDEyR3JvdXBzID0gY21hcDEyR3JvdXBzLmNvbmNhdCh7bmFtZTogJ2NtYXAxMkVuZF8nICsgaSwgdHlwZTogJ1VMT05HJywgdmFsdWU6IHNlZ21lbnQuZW5kfSk7XG4gICAgICAgICAgICBjbWFwMTJHcm91cHMgPSBjbWFwMTJHcm91cHMuY29uY2F0KHtuYW1lOiAnY21hcDEyR2x5cGhfJyArIGksIHR5cGU6ICdVTE9ORycsIHZhbHVlOiBzZWdtZW50LmdseXBoSW5kZXh9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENNQVAgNCBTdWJ0YWJsZVxuICAgIHQuc2VnQ291bnRYMiA9IChzZWdDb3VudCAtIHNlZ0NvdW50VG9SZW1vdmUpICogMjtcbiAgICB0LnNlYXJjaFJhbmdlID0gTWF0aC5wb3coMiwgTWF0aC5mbG9vcihNYXRoLmxvZygoc2VnQ291bnQgLSBzZWdDb3VudFRvUmVtb3ZlKSkgLyBNYXRoLmxvZygyKSkpICogMjtcbiAgICB0LmVudHJ5U2VsZWN0b3IgPSBNYXRoLmxvZyh0LnNlYXJjaFJhbmdlIC8gMikgLyBNYXRoLmxvZygyKTtcbiAgICB0LnJhbmdlU2hpZnQgPSB0LnNlZ0NvdW50WDIgLSB0LnNlYXJjaFJhbmdlO1xuXG4gICAgdC5maWVsZHMgPSB0LmZpZWxkcy5jb25jYXQoZW5kQ291bnRzKTtcbiAgICB0LmZpZWxkcy5wdXNoKHtuYW1lOiAncmVzZXJ2ZWRQYWQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9KTtcbiAgICB0LmZpZWxkcyA9IHQuZmllbGRzLmNvbmNhdChzdGFydENvdW50cyk7XG4gICAgdC5maWVsZHMgPSB0LmZpZWxkcy5jb25jYXQoaWREZWx0YXMpO1xuICAgIHQuZmllbGRzID0gdC5maWVsZHMuY29uY2F0KGlkUmFuZ2VPZmZzZXRzKTtcbiAgICB0LmZpZWxkcyA9IHQuZmllbGRzLmNvbmNhdChnbHlwaElkcyk7XG5cbiAgICB0LmNtYXA0TGVuZ3RoID0gMTQgKyAvLyBTdWJ0YWJsZSBoZWFkZXJcbiAgICAgICAgZW5kQ291bnRzLmxlbmd0aCAqIDIgK1xuICAgICAgICAyICsgLy8gcmVzZXJ2ZWRQYWRcbiAgICAgICAgc3RhcnRDb3VudHMubGVuZ3RoICogMiArXG4gICAgICAgIGlkRGVsdGFzLmxlbmd0aCAqIDIgK1xuICAgICAgICBpZFJhbmdlT2Zmc2V0cy5sZW5ndGggKiAyICtcbiAgICAgICAgZ2x5cGhJZHMubGVuZ3RoICogMjtcblxuICAgIGlmICghaXNQbGFuME9ubHkpIHtcbiAgICAgICAgLy8gQ01BUCAxMiBTdWJ0YWJsZVxuICAgICAgICB2YXIgY21hcDEyTGVuZ3RoID0gMTYgKyAvLyBTdWJ0YWJsZSBoZWFkZXJcbiAgICAgICAgICAgIGNtYXAxMkdyb3Vwcy5sZW5ndGggKiA0O1xuXG4gICAgICAgIHQuY21hcDEyT2Zmc2V0ID0gMTIgKyAoMiAqIDIpICsgNCArIHQuY21hcDRMZW5ndGg7XG4gICAgICAgIHQuZmllbGRzID0gdC5maWVsZHMuY29uY2F0KFtcbiAgICAgICAgICAgIHtuYW1lOiAnY21hcDEyRm9ybWF0JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAxMn0sXG4gICAgICAgICAgICB7bmFtZTogJ2NtYXAxMlJlc2VydmVkJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAgICAgIHtuYW1lOiAnY21hcDEyTGVuZ3RoJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IGNtYXAxMkxlbmd0aH0sXG4gICAgICAgICAgICB7bmFtZTogJ2NtYXAxMkxhbmd1YWdlJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IDB9LFxuICAgICAgICAgICAge25hbWU6ICdjbWFwMTJuR3JvdXBzJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IGNtYXAxMkdyb3Vwcy5sZW5ndGggLyAzfVxuICAgICAgICBdKTtcblxuICAgICAgICB0LmZpZWxkcyA9IHQuZmllbGRzLmNvbmNhdChjbWFwMTJHcm91cHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0O1xufVxuXG52YXIgY21hcCA9IHsgcGFyc2U6IHBhcnNlQ21hcFRhYmxlLCBtYWtlOiBtYWtlQ21hcFRhYmxlIH07XG5cbi8vIEdseXBoIGVuY29kaW5nXG5cbnZhciBjZmZTdGFuZGFyZFN0cmluZ3MgPSBbXG4gICAgJy5ub3RkZWYnLCAnc3BhY2UnLCAnZXhjbGFtJywgJ3F1b3RlZGJsJywgJ251bWJlcnNpZ24nLCAnZG9sbGFyJywgJ3BlcmNlbnQnLCAnYW1wZXJzYW5kJywgJ3F1b3RlcmlnaHQnLFxuICAgICdwYXJlbmxlZnQnLCAncGFyZW5yaWdodCcsICdhc3RlcmlzaycsICdwbHVzJywgJ2NvbW1hJywgJ2h5cGhlbicsICdwZXJpb2QnLCAnc2xhc2gnLCAnemVybycsICdvbmUnLCAndHdvJyxcbiAgICAndGhyZWUnLCAnZm91cicsICdmaXZlJywgJ3NpeCcsICdzZXZlbicsICdlaWdodCcsICduaW5lJywgJ2NvbG9uJywgJ3NlbWljb2xvbicsICdsZXNzJywgJ2VxdWFsJywgJ2dyZWF0ZXInLFxuICAgICdxdWVzdGlvbicsICdhdCcsICdBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJywgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJyxcbiAgICAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWicsICdicmFja2V0bGVmdCcsICdiYWNrc2xhc2gnLCAnYnJhY2tldHJpZ2h0JywgJ2FzY2lpY2lyY3VtJywgJ3VuZGVyc2NvcmUnLFxuICAgICdxdW90ZWxlZnQnLCAnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJywgJ2knLCAnaicsICdrJywgJ2wnLCAnbScsICduJywgJ28nLCAncCcsICdxJywgJ3InLCAncycsICd0JyxcbiAgICAndScsICd2JywgJ3cnLCAneCcsICd5JywgJ3onLCAnYnJhY2VsZWZ0JywgJ2JhcicsICdicmFjZXJpZ2h0JywgJ2FzY2lpdGlsZGUnLCAnZXhjbGFtZG93bicsICdjZW50JywgJ3N0ZXJsaW5nJyxcbiAgICAnZnJhY3Rpb24nLCAneWVuJywgJ2Zsb3JpbicsICdzZWN0aW9uJywgJ2N1cnJlbmN5JywgJ3F1b3Rlc2luZ2xlJywgJ3F1b3RlZGJsbGVmdCcsICdndWlsbGVtb3RsZWZ0JyxcbiAgICAnZ3VpbHNpbmdsbGVmdCcsICdndWlsc2luZ2xyaWdodCcsICdmaScsICdmbCcsICdlbmRhc2gnLCAnZGFnZ2VyJywgJ2RhZ2dlcmRibCcsICdwZXJpb2RjZW50ZXJlZCcsICdwYXJhZ3JhcGgnLFxuICAgICdidWxsZXQnLCAncXVvdGVzaW5nbGJhc2UnLCAncXVvdGVkYmxiYXNlJywgJ3F1b3RlZGJscmlnaHQnLCAnZ3VpbGxlbW90cmlnaHQnLCAnZWxsaXBzaXMnLCAncGVydGhvdXNhbmQnLFxuICAgICdxdWVzdGlvbmRvd24nLCAnZ3JhdmUnLCAnYWN1dGUnLCAnY2lyY3VtZmxleCcsICd0aWxkZScsICdtYWNyb24nLCAnYnJldmUnLCAnZG90YWNjZW50JywgJ2RpZXJlc2lzJywgJ3JpbmcnLFxuICAgICdjZWRpbGxhJywgJ2h1bmdhcnVtbGF1dCcsICdvZ29uZWsnLCAnY2Fyb24nLCAnZW1kYXNoJywgJ0FFJywgJ29yZGZlbWluaW5lJywgJ0xzbGFzaCcsICdPc2xhc2gnLCAnT0UnLFxuICAgICdvcmRtYXNjdWxpbmUnLCAnYWUnLCAnZG90bGVzc2knLCAnbHNsYXNoJywgJ29zbGFzaCcsICdvZScsICdnZXJtYW5kYmxzJywgJ29uZXN1cGVyaW9yJywgJ2xvZ2ljYWxub3QnLCAnbXUnLFxuICAgICd0cmFkZW1hcmsnLCAnRXRoJywgJ29uZWhhbGYnLCAncGx1c21pbnVzJywgJ1Rob3JuJywgJ29uZXF1YXJ0ZXInLCAnZGl2aWRlJywgJ2Jyb2tlbmJhcicsICdkZWdyZWUnLCAndGhvcm4nLFxuICAgICd0aHJlZXF1YXJ0ZXJzJywgJ3R3b3N1cGVyaW9yJywgJ3JlZ2lzdGVyZWQnLCAnbWludXMnLCAnZXRoJywgJ211bHRpcGx5JywgJ3RocmVlc3VwZXJpb3InLCAnY29weXJpZ2h0JyxcbiAgICAnQWFjdXRlJywgJ0FjaXJjdW1mbGV4JywgJ0FkaWVyZXNpcycsICdBZ3JhdmUnLCAnQXJpbmcnLCAnQXRpbGRlJywgJ0NjZWRpbGxhJywgJ0VhY3V0ZScsICdFY2lyY3VtZmxleCcsXG4gICAgJ0VkaWVyZXNpcycsICdFZ3JhdmUnLCAnSWFjdXRlJywgJ0ljaXJjdW1mbGV4JywgJ0lkaWVyZXNpcycsICdJZ3JhdmUnLCAnTnRpbGRlJywgJ09hY3V0ZScsICdPY2lyY3VtZmxleCcsXG4gICAgJ09kaWVyZXNpcycsICdPZ3JhdmUnLCAnT3RpbGRlJywgJ1NjYXJvbicsICdVYWN1dGUnLCAnVWNpcmN1bWZsZXgnLCAnVWRpZXJlc2lzJywgJ1VncmF2ZScsICdZYWN1dGUnLFxuICAgICdZZGllcmVzaXMnLCAnWmNhcm9uJywgJ2FhY3V0ZScsICdhY2lyY3VtZmxleCcsICdhZGllcmVzaXMnLCAnYWdyYXZlJywgJ2FyaW5nJywgJ2F0aWxkZScsICdjY2VkaWxsYScsICdlYWN1dGUnLFxuICAgICdlY2lyY3VtZmxleCcsICdlZGllcmVzaXMnLCAnZWdyYXZlJywgJ2lhY3V0ZScsICdpY2lyY3VtZmxleCcsICdpZGllcmVzaXMnLCAnaWdyYXZlJywgJ250aWxkZScsICdvYWN1dGUnLFxuICAgICdvY2lyY3VtZmxleCcsICdvZGllcmVzaXMnLCAnb2dyYXZlJywgJ290aWxkZScsICdzY2Fyb24nLCAndWFjdXRlJywgJ3VjaXJjdW1mbGV4JywgJ3VkaWVyZXNpcycsICd1Z3JhdmUnLFxuICAgICd5YWN1dGUnLCAneWRpZXJlc2lzJywgJ3pjYXJvbicsICdleGNsYW1zbWFsbCcsICdIdW5nYXJ1bWxhdXRzbWFsbCcsICdkb2xsYXJvbGRzdHlsZScsICdkb2xsYXJzdXBlcmlvcicsXG4gICAgJ2FtcGVyc2FuZHNtYWxsJywgJ0FjdXRlc21hbGwnLCAncGFyZW5sZWZ0c3VwZXJpb3InLCAncGFyZW5yaWdodHN1cGVyaW9yJywgJzI2NiBmZicsICdvbmVkb3RlbmxlYWRlcicsXG4gICAgJ3plcm9vbGRzdHlsZScsICdvbmVvbGRzdHlsZScsICd0d29vbGRzdHlsZScsICd0aHJlZW9sZHN0eWxlJywgJ2ZvdXJvbGRzdHlsZScsICdmaXZlb2xkc3R5bGUnLCAnc2l4b2xkc3R5bGUnLFxuICAgICdzZXZlbm9sZHN0eWxlJywgJ2VpZ2h0b2xkc3R5bGUnLCAnbmluZW9sZHN0eWxlJywgJ2NvbW1hc3VwZXJpb3InLCAndGhyZWVxdWFydGVyc2VtZGFzaCcsICdwZXJpb2RzdXBlcmlvcicsXG4gICAgJ3F1ZXN0aW9uc21hbGwnLCAnYXN1cGVyaW9yJywgJ2JzdXBlcmlvcicsICdjZW50c3VwZXJpb3InLCAnZHN1cGVyaW9yJywgJ2VzdXBlcmlvcicsICdpc3VwZXJpb3InLCAnbHN1cGVyaW9yJyxcbiAgICAnbXN1cGVyaW9yJywgJ25zdXBlcmlvcicsICdvc3VwZXJpb3InLCAncnN1cGVyaW9yJywgJ3NzdXBlcmlvcicsICd0c3VwZXJpb3InLCAnZmYnLCAnZmZpJywgJ2ZmbCcsXG4gICAgJ3BhcmVubGVmdGluZmVyaW9yJywgJ3BhcmVucmlnaHRpbmZlcmlvcicsICdDaXJjdW1mbGV4c21hbGwnLCAnaHlwaGVuc3VwZXJpb3InLCAnR3JhdmVzbWFsbCcsICdBc21hbGwnLFxuICAgICdCc21hbGwnLCAnQ3NtYWxsJywgJ0RzbWFsbCcsICdFc21hbGwnLCAnRnNtYWxsJywgJ0dzbWFsbCcsICdIc21hbGwnLCAnSXNtYWxsJywgJ0pzbWFsbCcsICdLc21hbGwnLCAnTHNtYWxsJyxcbiAgICAnTXNtYWxsJywgJ05zbWFsbCcsICdPc21hbGwnLCAnUHNtYWxsJywgJ1FzbWFsbCcsICdSc21hbGwnLCAnU3NtYWxsJywgJ1RzbWFsbCcsICdVc21hbGwnLCAnVnNtYWxsJywgJ1dzbWFsbCcsXG4gICAgJ1hzbWFsbCcsICdZc21hbGwnLCAnWnNtYWxsJywgJ2NvbG9ubW9uZXRhcnknLCAnb25lZml0dGVkJywgJ3J1cGlhaCcsICdUaWxkZXNtYWxsJywgJ2V4Y2xhbWRvd25zbWFsbCcsXG4gICAgJ2NlbnRvbGRzdHlsZScsICdMc2xhc2hzbWFsbCcsICdTY2Fyb25zbWFsbCcsICdaY2Fyb25zbWFsbCcsICdEaWVyZXNpc3NtYWxsJywgJ0JyZXZlc21hbGwnLCAnQ2Fyb25zbWFsbCcsXG4gICAgJ0RvdGFjY2VudHNtYWxsJywgJ01hY3JvbnNtYWxsJywgJ2ZpZ3VyZWRhc2gnLCAnaHlwaGVuaW5mZXJpb3InLCAnT2dvbmVrc21hbGwnLCAnUmluZ3NtYWxsJywgJ0NlZGlsbGFzbWFsbCcsXG4gICAgJ3F1ZXN0aW9uZG93bnNtYWxsJywgJ29uZWVpZ2h0aCcsICd0aHJlZWVpZ2h0aHMnLCAnZml2ZWVpZ2h0aHMnLCAnc2V2ZW5laWdodGhzJywgJ29uZXRoaXJkJywgJ3R3b3RoaXJkcycsXG4gICAgJ3plcm9zdXBlcmlvcicsICdmb3Vyc3VwZXJpb3InLCAnZml2ZXN1cGVyaW9yJywgJ3NpeHN1cGVyaW9yJywgJ3NldmVuc3VwZXJpb3InLCAnZWlnaHRzdXBlcmlvcicsICduaW5lc3VwZXJpb3InLFxuICAgICd6ZXJvaW5mZXJpb3InLCAnb25laW5mZXJpb3InLCAndHdvaW5mZXJpb3InLCAndGhyZWVpbmZlcmlvcicsICdmb3VyaW5mZXJpb3InLCAnZml2ZWluZmVyaW9yJywgJ3NpeGluZmVyaW9yJyxcbiAgICAnc2V2ZW5pbmZlcmlvcicsICdlaWdodGluZmVyaW9yJywgJ25pbmVpbmZlcmlvcicsICdjZW50aW5mZXJpb3InLCAnZG9sbGFyaW5mZXJpb3InLCAncGVyaW9kaW5mZXJpb3InLFxuICAgICdjb21tYWluZmVyaW9yJywgJ0FncmF2ZXNtYWxsJywgJ0FhY3V0ZXNtYWxsJywgJ0FjaXJjdW1mbGV4c21hbGwnLCAnQXRpbGRlc21hbGwnLCAnQWRpZXJlc2lzc21hbGwnLFxuICAgICdBcmluZ3NtYWxsJywgJ0FFc21hbGwnLCAnQ2NlZGlsbGFzbWFsbCcsICdFZ3JhdmVzbWFsbCcsICdFYWN1dGVzbWFsbCcsICdFY2lyY3VtZmxleHNtYWxsJywgJ0VkaWVyZXNpc3NtYWxsJyxcbiAgICAnSWdyYXZlc21hbGwnLCAnSWFjdXRlc21hbGwnLCAnSWNpcmN1bWZsZXhzbWFsbCcsICdJZGllcmVzaXNzbWFsbCcsICdFdGhzbWFsbCcsICdOdGlsZGVzbWFsbCcsICdPZ3JhdmVzbWFsbCcsXG4gICAgJ09hY3V0ZXNtYWxsJywgJ09jaXJjdW1mbGV4c21hbGwnLCAnT3RpbGRlc21hbGwnLCAnT2RpZXJlc2lzc21hbGwnLCAnT0VzbWFsbCcsICdPc2xhc2hzbWFsbCcsICdVZ3JhdmVzbWFsbCcsXG4gICAgJ1VhY3V0ZXNtYWxsJywgJ1VjaXJjdW1mbGV4c21hbGwnLCAnVWRpZXJlc2lzc21hbGwnLCAnWWFjdXRlc21hbGwnLCAnVGhvcm5zbWFsbCcsICdZZGllcmVzaXNzbWFsbCcsICcwMDEuMDAwJyxcbiAgICAnMDAxLjAwMScsICcwMDEuMDAyJywgJzAwMS4wMDMnLCAnQmxhY2snLCAnQm9sZCcsICdCb29rJywgJ0xpZ2h0JywgJ01lZGl1bScsICdSZWd1bGFyJywgJ1JvbWFuJywgJ1NlbWlib2xkJ107XG5cbnZhciBjZmZTdGFuZGFyZEVuY29kaW5nID0gW1xuICAgICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLFxuICAgICcnLCAnJywgJycsICcnLCAnc3BhY2UnLCAnZXhjbGFtJywgJ3F1b3RlZGJsJywgJ251bWJlcnNpZ24nLCAnZG9sbGFyJywgJ3BlcmNlbnQnLCAnYW1wZXJzYW5kJywgJ3F1b3RlcmlnaHQnLFxuICAgICdwYXJlbmxlZnQnLCAncGFyZW5yaWdodCcsICdhc3RlcmlzaycsICdwbHVzJywgJ2NvbW1hJywgJ2h5cGhlbicsICdwZXJpb2QnLCAnc2xhc2gnLCAnemVybycsICdvbmUnLCAndHdvJyxcbiAgICAndGhyZWUnLCAnZm91cicsICdmaXZlJywgJ3NpeCcsICdzZXZlbicsICdlaWdodCcsICduaW5lJywgJ2NvbG9uJywgJ3NlbWljb2xvbicsICdsZXNzJywgJ2VxdWFsJywgJ2dyZWF0ZXInLFxuICAgICdxdWVzdGlvbicsICdhdCcsICdBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJywgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJyxcbiAgICAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWicsICdicmFja2V0bGVmdCcsICdiYWNrc2xhc2gnLCAnYnJhY2tldHJpZ2h0JywgJ2FzY2lpY2lyY3VtJywgJ3VuZGVyc2NvcmUnLFxuICAgICdxdW90ZWxlZnQnLCAnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJywgJ2knLCAnaicsICdrJywgJ2wnLCAnbScsICduJywgJ28nLCAncCcsICdxJywgJ3InLCAncycsICd0JyxcbiAgICAndScsICd2JywgJ3cnLCAneCcsICd5JywgJ3onLCAnYnJhY2VsZWZ0JywgJ2JhcicsICdicmFjZXJpZ2h0JywgJ2FzY2lpdGlsZGUnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsXG4gICAgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLFxuICAgICdleGNsYW1kb3duJywgJ2NlbnQnLCAnc3RlcmxpbmcnLCAnZnJhY3Rpb24nLCAneWVuJywgJ2Zsb3JpbicsICdzZWN0aW9uJywgJ2N1cnJlbmN5JywgJ3F1b3Rlc2luZ2xlJyxcbiAgICAncXVvdGVkYmxsZWZ0JywgJ2d1aWxsZW1vdGxlZnQnLCAnZ3VpbHNpbmdsbGVmdCcsICdndWlsc2luZ2xyaWdodCcsICdmaScsICdmbCcsICcnLCAnZW5kYXNoJywgJ2RhZ2dlcicsXG4gICAgJ2RhZ2dlcmRibCcsICdwZXJpb2RjZW50ZXJlZCcsICcnLCAncGFyYWdyYXBoJywgJ2J1bGxldCcsICdxdW90ZXNpbmdsYmFzZScsICdxdW90ZWRibGJhc2UnLCAncXVvdGVkYmxyaWdodCcsXG4gICAgJ2d1aWxsZW1vdHJpZ2h0JywgJ2VsbGlwc2lzJywgJ3BlcnRob3VzYW5kJywgJycsICdxdWVzdGlvbmRvd24nLCAnJywgJ2dyYXZlJywgJ2FjdXRlJywgJ2NpcmN1bWZsZXgnLCAndGlsZGUnLFxuICAgICdtYWNyb24nLCAnYnJldmUnLCAnZG90YWNjZW50JywgJ2RpZXJlc2lzJywgJycsICdyaW5nJywgJ2NlZGlsbGEnLCAnJywgJ2h1bmdhcnVtbGF1dCcsICdvZ29uZWsnLCAnY2Fyb24nLFxuICAgICdlbWRhc2gnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJ0FFJywgJycsICdvcmRmZW1pbmluZScsICcnLCAnJywgJycsXG4gICAgJycsICdMc2xhc2gnLCAnT3NsYXNoJywgJ09FJywgJ29yZG1hc2N1bGluZScsICcnLCAnJywgJycsICcnLCAnJywgJ2FlJywgJycsICcnLCAnJywgJ2RvdGxlc3NpJywgJycsICcnLFxuICAgICdsc2xhc2gnLCAnb3NsYXNoJywgJ29lJywgJ2dlcm1hbmRibHMnXTtcblxudmFyIGNmZkV4cGVydEVuY29kaW5nID0gW1xuICAgICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLFxuICAgICcnLCAnJywgJycsICcnLCAnc3BhY2UnLCAnZXhjbGFtc21hbGwnLCAnSHVuZ2FydW1sYXV0c21hbGwnLCAnJywgJ2RvbGxhcm9sZHN0eWxlJywgJ2RvbGxhcnN1cGVyaW9yJyxcbiAgICAnYW1wZXJzYW5kc21hbGwnLCAnQWN1dGVzbWFsbCcsICdwYXJlbmxlZnRzdXBlcmlvcicsICdwYXJlbnJpZ2h0c3VwZXJpb3InLCAndHdvZG90ZW5sZWFkZXInLCAnb25lZG90ZW5sZWFkZXInLFxuICAgICdjb21tYScsICdoeXBoZW4nLCAncGVyaW9kJywgJ2ZyYWN0aW9uJywgJ3plcm9vbGRzdHlsZScsICdvbmVvbGRzdHlsZScsICd0d29vbGRzdHlsZScsICd0aHJlZW9sZHN0eWxlJyxcbiAgICAnZm91cm9sZHN0eWxlJywgJ2ZpdmVvbGRzdHlsZScsICdzaXhvbGRzdHlsZScsICdzZXZlbm9sZHN0eWxlJywgJ2VpZ2h0b2xkc3R5bGUnLCAnbmluZW9sZHN0eWxlJywgJ2NvbG9uJyxcbiAgICAnc2VtaWNvbG9uJywgJ2NvbW1hc3VwZXJpb3InLCAndGhyZWVxdWFydGVyc2VtZGFzaCcsICdwZXJpb2RzdXBlcmlvcicsICdxdWVzdGlvbnNtYWxsJywgJycsICdhc3VwZXJpb3InLFxuICAgICdic3VwZXJpb3InLCAnY2VudHN1cGVyaW9yJywgJ2RzdXBlcmlvcicsICdlc3VwZXJpb3InLCAnJywgJycsICdpc3VwZXJpb3InLCAnJywgJycsICdsc3VwZXJpb3InLCAnbXN1cGVyaW9yJyxcbiAgICAnbnN1cGVyaW9yJywgJ29zdXBlcmlvcicsICcnLCAnJywgJ3JzdXBlcmlvcicsICdzc3VwZXJpb3InLCAndHN1cGVyaW9yJywgJycsICdmZicsICdmaScsICdmbCcsICdmZmknLCAnZmZsJyxcbiAgICAncGFyZW5sZWZ0aW5mZXJpb3InLCAnJywgJ3BhcmVucmlnaHRpbmZlcmlvcicsICdDaXJjdW1mbGV4c21hbGwnLCAnaHlwaGVuc3VwZXJpb3InLCAnR3JhdmVzbWFsbCcsICdBc21hbGwnLFxuICAgICdCc21hbGwnLCAnQ3NtYWxsJywgJ0RzbWFsbCcsICdFc21hbGwnLCAnRnNtYWxsJywgJ0dzbWFsbCcsICdIc21hbGwnLCAnSXNtYWxsJywgJ0pzbWFsbCcsICdLc21hbGwnLCAnTHNtYWxsJyxcbiAgICAnTXNtYWxsJywgJ05zbWFsbCcsICdPc21hbGwnLCAnUHNtYWxsJywgJ1FzbWFsbCcsICdSc21hbGwnLCAnU3NtYWxsJywgJ1RzbWFsbCcsICdVc21hbGwnLCAnVnNtYWxsJywgJ1dzbWFsbCcsXG4gICAgJ1hzbWFsbCcsICdZc21hbGwnLCAnWnNtYWxsJywgJ2NvbG9ubW9uZXRhcnknLCAnb25lZml0dGVkJywgJ3J1cGlhaCcsICdUaWxkZXNtYWxsJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsXG4gICAgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJyxcbiAgICAnZXhjbGFtZG93bnNtYWxsJywgJ2NlbnRvbGRzdHlsZScsICdMc2xhc2hzbWFsbCcsICcnLCAnJywgJ1NjYXJvbnNtYWxsJywgJ1pjYXJvbnNtYWxsJywgJ0RpZXJlc2lzc21hbGwnLFxuICAgICdCcmV2ZXNtYWxsJywgJ0Nhcm9uc21hbGwnLCAnJywgJ0RvdGFjY2VudHNtYWxsJywgJycsICcnLCAnTWFjcm9uc21hbGwnLCAnJywgJycsICdmaWd1cmVkYXNoJywgJ2h5cGhlbmluZmVyaW9yJyxcbiAgICAnJywgJycsICdPZ29uZWtzbWFsbCcsICdSaW5nc21hbGwnLCAnQ2VkaWxsYXNtYWxsJywgJycsICcnLCAnJywgJ29uZXF1YXJ0ZXInLCAnb25laGFsZicsICd0aHJlZXF1YXJ0ZXJzJyxcbiAgICAncXVlc3Rpb25kb3duc21hbGwnLCAnb25lZWlnaHRoJywgJ3RocmVlZWlnaHRocycsICdmaXZlZWlnaHRocycsICdzZXZlbmVpZ2h0aHMnLCAnb25ldGhpcmQnLCAndHdvdGhpcmRzJywgJycsXG4gICAgJycsICd6ZXJvc3VwZXJpb3InLCAnb25lc3VwZXJpb3InLCAndHdvc3VwZXJpb3InLCAndGhyZWVzdXBlcmlvcicsICdmb3Vyc3VwZXJpb3InLCAnZml2ZXN1cGVyaW9yJyxcbiAgICAnc2l4c3VwZXJpb3InLCAnc2V2ZW5zdXBlcmlvcicsICdlaWdodHN1cGVyaW9yJywgJ25pbmVzdXBlcmlvcicsICd6ZXJvaW5mZXJpb3InLCAnb25laW5mZXJpb3InLCAndHdvaW5mZXJpb3InLFxuICAgICd0aHJlZWluZmVyaW9yJywgJ2ZvdXJpbmZlcmlvcicsICdmaXZlaW5mZXJpb3InLCAnc2l4aW5mZXJpb3InLCAnc2V2ZW5pbmZlcmlvcicsICdlaWdodGluZmVyaW9yJyxcbiAgICAnbmluZWluZmVyaW9yJywgJ2NlbnRpbmZlcmlvcicsICdkb2xsYXJpbmZlcmlvcicsICdwZXJpb2RpbmZlcmlvcicsICdjb21tYWluZmVyaW9yJywgJ0FncmF2ZXNtYWxsJyxcbiAgICAnQWFjdXRlc21hbGwnLCAnQWNpcmN1bWZsZXhzbWFsbCcsICdBdGlsZGVzbWFsbCcsICdBZGllcmVzaXNzbWFsbCcsICdBcmluZ3NtYWxsJywgJ0FFc21hbGwnLCAnQ2NlZGlsbGFzbWFsbCcsXG4gICAgJ0VncmF2ZXNtYWxsJywgJ0VhY3V0ZXNtYWxsJywgJ0VjaXJjdW1mbGV4c21hbGwnLCAnRWRpZXJlc2lzc21hbGwnLCAnSWdyYXZlc21hbGwnLCAnSWFjdXRlc21hbGwnLFxuICAgICdJY2lyY3VtZmxleHNtYWxsJywgJ0lkaWVyZXNpc3NtYWxsJywgJ0V0aHNtYWxsJywgJ050aWxkZXNtYWxsJywgJ09ncmF2ZXNtYWxsJywgJ09hY3V0ZXNtYWxsJyxcbiAgICAnT2NpcmN1bWZsZXhzbWFsbCcsICdPdGlsZGVzbWFsbCcsICdPZGllcmVzaXNzbWFsbCcsICdPRXNtYWxsJywgJ09zbGFzaHNtYWxsJywgJ1VncmF2ZXNtYWxsJywgJ1VhY3V0ZXNtYWxsJyxcbiAgICAnVWNpcmN1bWZsZXhzbWFsbCcsICdVZGllcmVzaXNzbWFsbCcsICdZYWN1dGVzbWFsbCcsICdUaG9ybnNtYWxsJywgJ1lkaWVyZXNpc3NtYWxsJ107XG5cbnZhciBzdGFuZGFyZE5hbWVzID0gW1xuICAgICcubm90ZGVmJywgJy5udWxsJywgJ25vbm1hcmtpbmdyZXR1cm4nLCAnc3BhY2UnLCAnZXhjbGFtJywgJ3F1b3RlZGJsJywgJ251bWJlcnNpZ24nLCAnZG9sbGFyJywgJ3BlcmNlbnQnLFxuICAgICdhbXBlcnNhbmQnLCAncXVvdGVzaW5nbGUnLCAncGFyZW5sZWZ0JywgJ3BhcmVucmlnaHQnLCAnYXN0ZXJpc2snLCAncGx1cycsICdjb21tYScsICdoeXBoZW4nLCAncGVyaW9kJywgJ3NsYXNoJyxcbiAgICAnemVybycsICdvbmUnLCAndHdvJywgJ3RocmVlJywgJ2ZvdXInLCAnZml2ZScsICdzaXgnLCAnc2V2ZW4nLCAnZWlnaHQnLCAnbmluZScsICdjb2xvbicsICdzZW1pY29sb24nLCAnbGVzcycsXG4gICAgJ2VxdWFsJywgJ2dyZWF0ZXInLCAncXVlc3Rpb24nLCAnYXQnLCAnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsICdOJywgJ08nLFxuICAgICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onLCAnYnJhY2tldGxlZnQnLCAnYmFja3NsYXNoJywgJ2JyYWNrZXRyaWdodCcsXG4gICAgJ2FzY2lpY2lyY3VtJywgJ3VuZGVyc2NvcmUnLCAnZ3JhdmUnLCAnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnLCAnZycsICdoJywgJ2knLCAnaicsICdrJywgJ2wnLCAnbScsICduJywgJ28nLFxuICAgICdwJywgJ3EnLCAncicsICdzJywgJ3QnLCAndScsICd2JywgJ3cnLCAneCcsICd5JywgJ3onLCAnYnJhY2VsZWZ0JywgJ2JhcicsICdicmFjZXJpZ2h0JywgJ2FzY2lpdGlsZGUnLFxuICAgICdBZGllcmVzaXMnLCAnQXJpbmcnLCAnQ2NlZGlsbGEnLCAnRWFjdXRlJywgJ050aWxkZScsICdPZGllcmVzaXMnLCAnVWRpZXJlc2lzJywgJ2FhY3V0ZScsICdhZ3JhdmUnLFxuICAgICdhY2lyY3VtZmxleCcsICdhZGllcmVzaXMnLCAnYXRpbGRlJywgJ2FyaW5nJywgJ2NjZWRpbGxhJywgJ2VhY3V0ZScsICdlZ3JhdmUnLCAnZWNpcmN1bWZsZXgnLCAnZWRpZXJlc2lzJyxcbiAgICAnaWFjdXRlJywgJ2lncmF2ZScsICdpY2lyY3VtZmxleCcsICdpZGllcmVzaXMnLCAnbnRpbGRlJywgJ29hY3V0ZScsICdvZ3JhdmUnLCAnb2NpcmN1bWZsZXgnLCAnb2RpZXJlc2lzJyxcbiAgICAnb3RpbGRlJywgJ3VhY3V0ZScsICd1Z3JhdmUnLCAndWNpcmN1bWZsZXgnLCAndWRpZXJlc2lzJywgJ2RhZ2dlcicsICdkZWdyZWUnLCAnY2VudCcsICdzdGVybGluZycsICdzZWN0aW9uJyxcbiAgICAnYnVsbGV0JywgJ3BhcmFncmFwaCcsICdnZXJtYW5kYmxzJywgJ3JlZ2lzdGVyZWQnLCAnY29weXJpZ2h0JywgJ3RyYWRlbWFyaycsICdhY3V0ZScsICdkaWVyZXNpcycsICdub3RlcXVhbCcsXG4gICAgJ0FFJywgJ09zbGFzaCcsICdpbmZpbml0eScsICdwbHVzbWludXMnLCAnbGVzc2VxdWFsJywgJ2dyZWF0ZXJlcXVhbCcsICd5ZW4nLCAnbXUnLCAncGFydGlhbGRpZmYnLCAnc3VtbWF0aW9uJyxcbiAgICAncHJvZHVjdCcsICdwaScsICdpbnRlZ3JhbCcsICdvcmRmZW1pbmluZScsICdvcmRtYXNjdWxpbmUnLCAnT21lZ2EnLCAnYWUnLCAnb3NsYXNoJywgJ3F1ZXN0aW9uZG93bicsXG4gICAgJ2V4Y2xhbWRvd24nLCAnbG9naWNhbG5vdCcsICdyYWRpY2FsJywgJ2Zsb3JpbicsICdhcHByb3hlcXVhbCcsICdEZWx0YScsICdndWlsbGVtb3RsZWZ0JywgJ2d1aWxsZW1vdHJpZ2h0JyxcbiAgICAnZWxsaXBzaXMnLCAnbm9uYnJlYWtpbmdzcGFjZScsICdBZ3JhdmUnLCAnQXRpbGRlJywgJ090aWxkZScsICdPRScsICdvZScsICdlbmRhc2gnLCAnZW1kYXNoJywgJ3F1b3RlZGJsbGVmdCcsXG4gICAgJ3F1b3RlZGJscmlnaHQnLCAncXVvdGVsZWZ0JywgJ3F1b3RlcmlnaHQnLCAnZGl2aWRlJywgJ2xvemVuZ2UnLCAneWRpZXJlc2lzJywgJ1lkaWVyZXNpcycsICdmcmFjdGlvbicsXG4gICAgJ2N1cnJlbmN5JywgJ2d1aWxzaW5nbGxlZnQnLCAnZ3VpbHNpbmdscmlnaHQnLCAnZmknLCAnZmwnLCAnZGFnZ2VyZGJsJywgJ3BlcmlvZGNlbnRlcmVkJywgJ3F1b3Rlc2luZ2xiYXNlJyxcbiAgICAncXVvdGVkYmxiYXNlJywgJ3BlcnRob3VzYW5kJywgJ0FjaXJjdW1mbGV4JywgJ0VjaXJjdW1mbGV4JywgJ0FhY3V0ZScsICdFZGllcmVzaXMnLCAnRWdyYXZlJywgJ0lhY3V0ZScsXG4gICAgJ0ljaXJjdW1mbGV4JywgJ0lkaWVyZXNpcycsICdJZ3JhdmUnLCAnT2FjdXRlJywgJ09jaXJjdW1mbGV4JywgJ2FwcGxlJywgJ09ncmF2ZScsICdVYWN1dGUnLCAnVWNpcmN1bWZsZXgnLFxuICAgICdVZ3JhdmUnLCAnZG90bGVzc2knLCAnY2lyY3VtZmxleCcsICd0aWxkZScsICdtYWNyb24nLCAnYnJldmUnLCAnZG90YWNjZW50JywgJ3JpbmcnLCAnY2VkaWxsYScsICdodW5nYXJ1bWxhdXQnLFxuICAgICdvZ29uZWsnLCAnY2Fyb24nLCAnTHNsYXNoJywgJ2xzbGFzaCcsICdTY2Fyb24nLCAnc2Nhcm9uJywgJ1pjYXJvbicsICd6Y2Fyb24nLCAnYnJva2VuYmFyJywgJ0V0aCcsICdldGgnLFxuICAgICdZYWN1dGUnLCAneWFjdXRlJywgJ1Rob3JuJywgJ3Rob3JuJywgJ21pbnVzJywgJ211bHRpcGx5JywgJ29uZXN1cGVyaW9yJywgJ3R3b3N1cGVyaW9yJywgJ3RocmVlc3VwZXJpb3InLFxuICAgICdvbmVoYWxmJywgJ29uZXF1YXJ0ZXInLCAndGhyZWVxdWFydGVycycsICdmcmFuYycsICdHYnJldmUnLCAnZ2JyZXZlJywgJ0lkb3RhY2NlbnQnLCAnU2NlZGlsbGEnLCAnc2NlZGlsbGEnLFxuICAgICdDYWN1dGUnLCAnY2FjdXRlJywgJ0NjYXJvbicsICdjY2Fyb24nLCAnZGNyb2F0J107XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgZW5jb2RpbmcgdXNlZCBmb3IgZm9udHMgY3JlYXRlZCBmcm9tIHNjcmF0Y2guXG4gKiBJdCBsb29wcyB0aHJvdWdoIGFsbCBnbHlwaHMgYW5kIGZpbmRzIHRoZSBhcHByb3ByaWF0ZSB1bmljb2RlIHZhbHVlLlxuICogU2luY2UgaXQncyBsaW5lYXIgdGltZSwgb3RoZXIgZW5jb2RpbmdzIHdpbGwgYmUgZmFzdGVyLlxuICogQGV4cG9ydHMgb3BlbnR5cGUuRGVmYXVsdEVuY29kaW5nXG4gKiBAY2xhc3NcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvcGVudHlwZS5Gb250fVxuICovXG5mdW5jdGlvbiBEZWZhdWx0RW5jb2RpbmcoZm9udCkge1xuICAgIHRoaXMuZm9udCA9IGZvbnQ7XG59XG5cbkRlZmF1bHRFbmNvZGluZy5wcm90b3R5cGUuY2hhclRvR2x5cGhJbmRleCA9IGZ1bmN0aW9uKGMpIHtcbiAgICB2YXIgY29kZSA9IGMuY29kZVBvaW50QXQoMCk7XG4gICAgdmFyIGdseXBocyA9IHRoaXMuZm9udC5nbHlwaHM7XG4gICAgaWYgKGdseXBocykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdseXBocy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGdseXBoID0gZ2x5cGhzLmdldChpKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZ2x5cGgudW5pY29kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2x5cGgudW5pY29kZXNbal0gPT09IGNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBAZXhwb3J0cyBvcGVudHlwZS5DbWFwRW5jb2RpbmdcbiAqIEBjbGFzc1xuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gY21hcCAtIGEgb2JqZWN0IHdpdGggdGhlIGNtYXAgZW5jb2RlZCBkYXRhXG4gKi9cbmZ1bmN0aW9uIENtYXBFbmNvZGluZyhjbWFwKSB7XG4gICAgdGhpcy5jbWFwID0gY21hcDtcbn1cblxuLyoqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGMgLSB0aGUgY2hhcmFjdGVyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBnbHlwaCBpbmRleC5cbiAqL1xuQ21hcEVuY29kaW5nLnByb3RvdHlwZS5jaGFyVG9HbHlwaEluZGV4ID0gZnVuY3Rpb24oYykge1xuICAgIHJldHVybiB0aGlzLmNtYXAuZ2x5cGhJbmRleE1hcFtjLmNvZGVQb2ludEF0KDApXSB8fCAwO1xufTtcblxuLyoqXG4gKiBAZXhwb3J0cyBvcGVudHlwZS5DZmZFbmNvZGluZ1xuICogQGNsYXNzXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmNvZGluZyAtIFRoZSBlbmNvZGluZ1xuICogQHBhcmFtIHtBcnJheX0gY2hhcnNldCAtIFRoZSBjaGFyYWN0ZXIgc2V0LlxuICovXG5mdW5jdGlvbiBDZmZFbmNvZGluZyhlbmNvZGluZywgY2hhcnNldCkge1xuICAgIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgICB0aGlzLmNoYXJzZXQgPSBjaGFyc2V0O1xufVxuXG4vKipcbiAqIEBwYXJhbSAge3N0cmluZ30gcyAtIFRoZSBjaGFyYWN0ZXJcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGluZGV4LlxuICovXG5DZmZFbmNvZGluZy5wcm90b3R5cGUuY2hhclRvR2x5cGhJbmRleCA9IGZ1bmN0aW9uKHMpIHtcbiAgICB2YXIgY29kZSA9IHMuY29kZVBvaW50QXQoMCk7XG4gICAgdmFyIGNoYXJOYW1lID0gdGhpcy5lbmNvZGluZ1tjb2RlXTtcbiAgICByZXR1cm4gdGhpcy5jaGFyc2V0LmluZGV4T2YoY2hhck5hbWUpO1xufTtcblxuLyoqXG4gKiBAZXhwb3J0cyBvcGVudHlwZS5HbHlwaE5hbWVzXG4gKiBAY2xhc3NcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R9IHBvc3RcbiAqL1xuZnVuY3Rpb24gR2x5cGhOYW1lcyhwb3N0KSB7XG4gICAgc3dpdGNoIChwb3N0LnZlcnNpb24pIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdGhpcy5uYW1lcyA9IHN0YW5kYXJkTmFtZXMuc2xpY2UoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICB0aGlzLm5hbWVzID0gbmV3IEFycmF5KHBvc3QubnVtYmVyT2ZHbHlwaHMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3N0Lm51bWJlck9mR2x5cGhzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocG9zdC5nbHlwaE5hbWVJbmRleFtpXSA8IHN0YW5kYXJkTmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZXNbaV0gPSBzdGFuZGFyZE5hbWVzW3Bvc3QuZ2x5cGhOYW1lSW5kZXhbaV1dO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZXNbaV0gPSBwb3N0Lm5hbWVzW3Bvc3QuZ2x5cGhOYW1lSW5kZXhbaV0gLSBzdGFuZGFyZE5hbWVzLmxlbmd0aF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyLjU6XG4gICAgICAgICAgICB0aGlzLm5hbWVzID0gbmV3IEFycmF5KHBvc3QubnVtYmVyT2ZHbHlwaHMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcG9zdC5udW1iZXJPZkdseXBoczsgaSQxKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWVzW2kkMV0gPSBzdGFuZGFyZE5hbWVzW2kkMSArIHBvc3QuZ2x5cGhOYW1lSW5kZXhbaSQxXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICB0aGlzLm5hbWVzID0gW107XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRoaXMubmFtZXMgPSBbXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBvZiBhIGdseXBoIGJ5IG5hbWUuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IG5hbWUgLSBUaGUgZ2x5cGggbmFtZVxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgaW5kZXhcbiAqL1xuR2x5cGhOYW1lcy5wcm90b3R5cGUubmFtZVRvR2x5cGhJbmRleCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lcy5pbmRleE9mKG5hbWUpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IGdpZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5HbHlwaE5hbWVzLnByb3RvdHlwZS5nbHlwaEluZGV4VG9OYW1lID0gZnVuY3Rpb24oZ2lkKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZXNbZ2lkXTtcbn07XG5cbmZ1bmN0aW9uIGFkZEdseXBoTmFtZXNBbGwoZm9udCkge1xuICAgIHZhciBnbHlwaDtcbiAgICB2YXIgZ2x5cGhJbmRleE1hcCA9IGZvbnQudGFibGVzLmNtYXAuZ2x5cGhJbmRleE1hcDtcbiAgICB2YXIgY2hhckNvZGVzID0gT2JqZWN0LmtleXMoZ2x5cGhJbmRleE1hcCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJDb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgYyA9IGNoYXJDb2Rlc1tpXTtcbiAgICAgICAgdmFyIGdseXBoSW5kZXggPSBnbHlwaEluZGV4TWFwW2NdO1xuICAgICAgICBnbHlwaCA9IGZvbnQuZ2x5cGhzLmdldChnbHlwaEluZGV4KTtcbiAgICAgICAgZ2x5cGguYWRkVW5pY29kZShwYXJzZUludChjKSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgZm9udC5nbHlwaHMubGVuZ3RoOyBpJDEgKz0gMSkge1xuICAgICAgICBnbHlwaCA9IGZvbnQuZ2x5cGhzLmdldChpJDEpO1xuICAgICAgICBpZiAoZm9udC5jZmZFbmNvZGluZykge1xuICAgICAgICAgICAgaWYgKGZvbnQuaXNDSURGb250KSB7XG4gICAgICAgICAgICAgICAgZ2x5cGgubmFtZSA9ICdnaWQnICsgaSQxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbHlwaC5uYW1lID0gZm9udC5jZmZFbmNvZGluZy5jaGFyc2V0W2kkMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZm9udC5nbHlwaE5hbWVzLm5hbWVzKSB7XG4gICAgICAgICAgICBnbHlwaC5uYW1lID0gZm9udC5nbHlwaE5hbWVzLmdseXBoSW5kZXhUb05hbWUoaSQxKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkR2x5cGhOYW1lc1RvVW5pY29kZU1hcChmb250KSB7XG4gICAgZm9udC5fSW5kZXhUb1VuaWNvZGVNYXAgPSB7fTtcblxuICAgIHZhciBnbHlwaEluZGV4TWFwID0gZm9udC50YWJsZXMuY21hcC5nbHlwaEluZGV4TWFwO1xuICAgIHZhciBjaGFyQ29kZXMgPSBPYmplY3Qua2V5cyhnbHlwaEluZGV4TWFwKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhckNvZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBjID0gY2hhckNvZGVzW2ldO1xuICAgICAgICB2YXIgZ2x5cGhJbmRleCA9IGdseXBoSW5kZXhNYXBbY107XG4gICAgICAgIGlmIChmb250Ll9JbmRleFRvVW5pY29kZU1hcFtnbHlwaEluZGV4XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb250Ll9JbmRleFRvVW5pY29kZU1hcFtnbHlwaEluZGV4XSA9IHtcbiAgICAgICAgICAgICAgICB1bmljb2RlczogW3BhcnNlSW50KGMpXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvbnQuX0luZGV4VG9Vbmljb2RlTWFwW2dseXBoSW5kZXhdLnVuaWNvZGVzLnB1c2gocGFyc2VJbnQoYykpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEBhbGlhcyBvcGVudHlwZS5hZGRHbHlwaE5hbWVzXG4gKiBAcGFyYW0ge29wZW50eXBlLkZvbnR9XG4gKiBAcGFyYW0ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gYWRkR2x5cGhOYW1lcyhmb250LCBvcHQpIHtcbiAgICBpZiAob3B0Lmxvd01lbW9yeSkge1xuICAgICAgICBhZGRHbHlwaE5hbWVzVG9Vbmljb2RlTWFwKGZvbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFkZEdseXBoTmFtZXNBbGwoZm9udCk7XG4gICAgfVxufVxuXG4vLyBEcmF3aW5nIHV0aWxpdHkgZnVuY3Rpb25zLlxuXG4vLyBEcmF3IGEgbGluZSBvbiB0aGUgZ2l2ZW4gY29udGV4dCBmcm9tIHBvaW50IGB4MSx5MWAgdG8gcG9pbnQgYHgyLHkyYC5cbmZ1bmN0aW9uIGxpbmUoY3R4LCB4MSwgeTEsIHgyLCB5Mikge1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubW92ZVRvKHgxLCB5MSk7XG4gICAgY3R4LmxpbmVUbyh4MiwgeTIpO1xuICAgIGN0eC5zdHJva2UoKTtcbn1cblxudmFyIGRyYXcgPSB7IGxpbmU6IGxpbmUgfTtcblxuLy8gVGhlIEdseXBoIG9iamVjdFxuLy8gaW1wb3J0IGdseWYgZnJvbSAnLi90YWJsZXMvZ2x5ZicgQ2FuJ3QgYmUgaW1wb3J0ZWQgaGVyZSwgYmVjYXVzZSBpdCdzIGEgY2lyY3VsYXIgZGVwZW5kZW5jeVxuXG5mdW5jdGlvbiBnZXRQYXRoRGVmaW5pdGlvbihnbHlwaCwgcGF0aCkge1xuICAgIHZhciBfcGF0aCA9IHBhdGggfHwgbmV3IFBhdGgoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG5cbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgX3BhdGggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBfcGF0aCA9IF9wYXRoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfcGF0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICAgIF9wYXRoID0gcDtcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIEB0eXBlZGVmIEdseXBoT3B0aW9uc1xuICogQHR5cGUgT2JqZWN0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gW25hbWVdIC0gVGhlIGdseXBoIG5hbWVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdW5pY29kZV1cbiAqIEBwcm9wZXJ0eSB7QXJyYXl9IFt1bmljb2Rlc11cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbeE1pbl1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbeU1pbl1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbeE1heF1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbeU1heF1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbYWR2YW5jZVdpZHRoXVxuICovXG5cbi8vIEEgR2x5cGggaXMgYW4gaW5kaXZpZHVhbCBtYXJrIHRoYXQgb2Z0ZW4gY29ycmVzcG9uZHMgdG8gYSBjaGFyYWN0ZXIuXG4vLyBTb21lIGdseXBocywgc3VjaCBhcyBsaWdhdHVyZXMsIGFyZSBhIGNvbWJpbmF0aW9uIG9mIG1hbnkgY2hhcmFjdGVycy5cbi8vIEdseXBocyBhcmUgdGhlIGJhc2ljIGJ1aWxkaW5nIGJsb2NrcyBvZiBhIGZvbnQuXG4vL1xuLy8gVGhlIGBHbHlwaGAgY2xhc3MgY29udGFpbnMgdXRpbGl0eSBtZXRob2RzIGZvciBkcmF3aW5nIHRoZSBwYXRoIGFuZCBpdHMgcG9pbnRzLlxuLyoqXG4gKiBAZXhwb3J0cyBvcGVudHlwZS5HbHlwaFxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0dseXBoT3B0aW9uc31cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBHbHlwaChvcHRpb25zKSB7XG4gICAgLy8gQnkgcHV0dGluZyBhbGwgdGhlIGNvZGUgb24gYSBwcm90b3R5cGUgZnVuY3Rpb24gKHdoaWNoIGlzIG9ubHkgZGVjbGFyZWQgb25jZSlcbiAgICAvLyB3ZSByZWR1Y2UgdGhlIG1lbW9yeSByZXF1aXJlbWVudHMgZm9yIGxhcmdlciBmb250cyBieSBzb21lIDIlXG4gICAgdGhpcy5iaW5kQ29uc3RydWN0b3JWYWx1ZXMob3B0aW9ucyk7XG59XG5cbi8qKlxuICogQHBhcmFtICB7R2x5cGhPcHRpb25zfVxuICovXG5HbHlwaC5wcm90b3R5cGUuYmluZENvbnN0cnVjdG9yVmFsdWVzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuaW5kZXggPSBvcHRpb25zLmluZGV4IHx8IDA7XG5cbiAgICAvLyBUaGVzZSB0aHJlZSB2YWx1ZXMgY2Fubm90IGJlIGRlZmVycmVkIGZvciBtZW1vcnkgb3B0aW1pemF0aW9uOlxuICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCBudWxsO1xuICAgIHRoaXMudW5pY29kZSA9IG9wdGlvbnMudW5pY29kZSB8fCB1bmRlZmluZWQ7XG4gICAgdGhpcy51bmljb2RlcyA9IG9wdGlvbnMudW5pY29kZXMgfHwgb3B0aW9ucy51bmljb2RlICE9PSB1bmRlZmluZWQgPyBbb3B0aW9ucy51bmljb2RlXSA6IFtdO1xuXG4gICAgLy8gQnV0IGJ5IGJpbmRpbmcgdGhlc2UgdmFsdWVzIG9ubHkgd2hlbiBuZWNlc3NhcnksIHdlIHJlZHVjZSBjYW5cbiAgICAvLyB0aGUgbWVtb3J5IHJlcXVpcmVtZW50cyBieSBhbG1vc3QgMyUgZm9yIGxhcmdlciBmb250cy5cbiAgICBpZiAoJ3hNaW4nIGluIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy54TWluID0gb3B0aW9ucy54TWluO1xuICAgIH1cblxuICAgIGlmICgneU1pbicgaW4gb3B0aW9ucykge1xuICAgICAgICB0aGlzLnlNaW4gPSBvcHRpb25zLnlNaW47XG4gICAgfVxuXG4gICAgaWYgKCd4TWF4JyBpbiBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMueE1heCA9IG9wdGlvbnMueE1heDtcbiAgICB9XG5cbiAgICBpZiAoJ3lNYXgnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy55TWF4ID0gb3B0aW9ucy55TWF4O1xuICAgIH1cblxuICAgIGlmICgnYWR2YW5jZVdpZHRoJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuYWR2YW5jZVdpZHRoID0gb3B0aW9ucy5hZHZhbmNlV2lkdGg7XG4gICAgfVxuXG4gICAgLy8gVGhlIHBhdGggZm9yIGEgZ2x5cGggaXMgdGhlIG1vc3QgbWVtb3J5IGludGVuc2l2ZSwgYW5kIGlzIGJvdW5kIGFzIGEgdmFsdWVcbiAgICAvLyB3aXRoIGEgZ2V0dGVyL3NldHRlciB0byBlbnN1cmUgd2UgYWN0dWFsbHkgZG8gcGF0aCBwYXJzaW5nIG9ubHkgb25jZSB0aGVcbiAgICAvLyBwYXRoIGlzIGFjdHVhbGx5IG5lZWRlZCBieSBhbnl0aGluZy5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3BhdGgnLCBnZXRQYXRoRGVmaW5pdGlvbih0aGlzLCBvcHRpb25zLnBhdGgpKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKi9cbkdseXBoLnByb3RvdHlwZS5hZGRVbmljb2RlID0gZnVuY3Rpb24odW5pY29kZSkge1xuICAgIGlmICh0aGlzLnVuaWNvZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLnVuaWNvZGUgPSB1bmljb2RlO1xuICAgIH1cblxuICAgIHRoaXMudW5pY29kZXMucHVzaCh1bmljb2RlKTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBtaW5pbXVtIGJvdW5kaW5nIGJveCBmb3IgdGhpcyBnbHlwaC5cbiAqIEByZXR1cm4ge29wZW50eXBlLkJvdW5kaW5nQm94fVxuICovXG5HbHlwaC5wcm90b3R5cGUuZ2V0Qm91bmRpbmdCb3ggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXRoLmdldEJvdW5kaW5nQm94KCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgdGhlIGdseXBoIHRvIGEgUGF0aCB3ZSBjYW4gZHJhdyBvbiBhIGRyYXdpbmcgY29udGV4dC5cbiAqIEBwYXJhbSAge251bWJlcn0gW3g9MF0gLSBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHRleHQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFt5PTBdIC0gVmVydGljYWwgcG9zaXRpb24gb2YgdGhlICpiYXNlbGluZSogb2YgdGhlIHRleHQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtmb250U2l6ZT03Ml0gLSBGb250IHNpemUgaW4gcGl4ZWxzLiBXZSBzY2FsZSB0aGUgZ2x5cGggdW5pdHMgYnkgYDEgLyB1bml0c1BlckVtICogZm9udFNpemVgLlxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9ucyAtIHhTY2FsZSwgeVNjYWxlIHRvIHN0cmV0Y2ggdGhlIGdseXBoLlxuICogQHBhcmFtICB7b3BlbnR5cGUuRm9udH0gaWYgaGludGluZyBpcyB0byBiZSB1c2VkLCB0aGUgZm9udFxuICogQHJldHVybiB7b3BlbnR5cGUuUGF0aH1cbiAqL1xuR2x5cGgucHJvdG90eXBlLmdldFBhdGggPSBmdW5jdGlvbih4LCB5LCBmb250U2l6ZSwgb3B0aW9ucywgZm9udCkge1xuICAgIHggPSB4ICE9PSB1bmRlZmluZWQgPyB4IDogMDtcbiAgICB5ID0geSAhPT0gdW5kZWZpbmVkID8geSA6IDA7XG4gICAgZm9udFNpemUgPSBmb250U2l6ZSAhPT0gdW5kZWZpbmVkID8gZm9udFNpemUgOiA3MjtcbiAgICB2YXIgY29tbWFuZHM7XG4gICAgdmFyIGhQb2ludHM7XG4gICAgaWYgKCFvcHRpb25zKSB7IG9wdGlvbnMgPSB7IH07IH1cbiAgICB2YXIgeFNjYWxlID0gb3B0aW9ucy54U2NhbGU7XG4gICAgdmFyIHlTY2FsZSA9IG9wdGlvbnMueVNjYWxlO1xuXG4gICAgaWYgKG9wdGlvbnMuaGludGluZyAmJiBmb250ICYmIGZvbnQuaGludGluZykge1xuICAgICAgICAvLyBpbiBjYXNlIG9mIGhpbnRpbmcsIHRoZSBoaW50aW5nIGVuZ2luZSB0YWtlcyBjYXJlXG4gICAgICAgIC8vIG9mIHNjYWxpbmcgdGhlIHBvaW50cyAobm90IHRoZSBwYXRoKSBiZWZvcmUgaGludGluZy5cbiAgICAgICAgaFBvaW50cyA9IHRoaXMucGF0aCAmJiBmb250LmhpbnRpbmcuZXhlYyh0aGlzLCBmb250U2l6ZSk7XG4gICAgICAgIC8vIGluIGNhc2UgdGhlIGhpbnRpbmcgZW5naW5lIGZhaWxlZCBoUG9pbnRzIGlzIHVuZGVmaW5lZFxuICAgICAgICAvLyBhbmQgdGh1cyByZXZlcnRzIHRvIHBsYWluIHJlbmRpbmdcbiAgICB9XG5cbiAgICBpZiAoaFBvaW50cykge1xuICAgICAgICAvLyBDYWxsIGZvbnQuaGludGluZy5nZXRDb21tYW5kcyBpbnN0ZWFkIG9mIGBnbHlmLmdldFBhdGgoaFBvaW50cykuY29tbWFuZHNgIHRvIGF2b2lkIGEgY2lyY3VsYXIgZGVwZW5kZW5jeVxuICAgICAgICBjb21tYW5kcyA9IGZvbnQuaGludGluZy5nZXRDb21tYW5kcyhoUG9pbnRzKTtcbiAgICAgICAgeCA9IE1hdGgucm91bmQoeCk7XG4gICAgICAgIHkgPSBNYXRoLnJvdW5kKHkpO1xuICAgICAgICAvLyBUT0RPIGluIGNhc2Ugb2YgaGludGluZyB4eVNjYWxpbmcgaXMgbm90IHlldCBzdXBwb3J0ZWRcbiAgICAgICAgeFNjYWxlID0geVNjYWxlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb21tYW5kcyA9IHRoaXMucGF0aC5jb21tYW5kcztcbiAgICAgICAgdmFyIHNjYWxlID0gMSAvICh0aGlzLnBhdGgudW5pdHNQZXJFbSB8fCAxMDAwKSAqIGZvbnRTaXplO1xuICAgICAgICBpZiAoeFNjYWxlID09PSB1bmRlZmluZWQpIHsgeFNjYWxlID0gc2NhbGU7IH1cbiAgICAgICAgaWYgKHlTY2FsZSA9PT0gdW5kZWZpbmVkKSB7IHlTY2FsZSA9IHNjYWxlOyB9XG4gICAgfVxuXG4gICAgdmFyIHAgPSBuZXcgUGF0aCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tbWFuZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGNtZCA9IGNvbW1hbmRzW2ldO1xuICAgICAgICBpZiAoY21kLnR5cGUgPT09ICdNJykge1xuICAgICAgICAgICAgcC5tb3ZlVG8oeCArIChjbWQueCAqIHhTY2FsZSksIHkgKyAoLWNtZC55ICogeVNjYWxlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdMJykge1xuICAgICAgICAgICAgcC5saW5lVG8oeCArIChjbWQueCAqIHhTY2FsZSksIHkgKyAoLWNtZC55ICogeVNjYWxlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdRJykge1xuICAgICAgICAgICAgcC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyAoY21kLngxICogeFNjYWxlKSwgeSArICgtY21kLnkxICogeVNjYWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICsgKGNtZC54ICogeFNjYWxlKSwgeSArICgtY21kLnkgKiB5U2NhbGUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjbWQudHlwZSA9PT0gJ0MnKSB7XG4gICAgICAgICAgICBwLmN1cnZlVG8oeCArIChjbWQueDEgKiB4U2NhbGUpLCB5ICsgKC1jbWQueTEgKiB5U2NhbGUpLFxuICAgICAgICAgICAgICAgICAgICAgIHggKyAoY21kLngyICogeFNjYWxlKSwgeSArICgtY21kLnkyICogeVNjYWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICB4ICsgKGNtZC54ICogeFNjYWxlKSwgeSArICgtY21kLnkgKiB5U2NhbGUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjbWQudHlwZSA9PT0gJ1onKSB7XG4gICAgICAgICAgICBwLmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHA7XG59O1xuXG4vKipcbiAqIFNwbGl0IHRoZSBnbHlwaCBpbnRvIGNvbnRvdXJzLlxuICogVGhpcyBmdW5jdGlvbiBpcyBoZXJlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgYW5kIHRvXG4gKiBwcm92aWRlIHJhdyBhY2Nlc3MgdG8gdGhlIFRydWVUeXBlIGdseXBoIG91dGxpbmVzLlxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbkdseXBoLnByb3RvdHlwZS5nZXRDb250b3VycyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnBvaW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB2YXIgY29udG91cnMgPSBbXTtcbiAgICB2YXIgY3VycmVudENvbnRvdXIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBwdCA9IHRoaXMucG9pbnRzW2ldO1xuICAgICAgICBjdXJyZW50Q29udG91ci5wdXNoKHB0KTtcbiAgICAgICAgaWYgKHB0Lmxhc3RQb2ludE9mQ29udG91cikge1xuICAgICAgICAgICAgY29udG91cnMucHVzaChjdXJyZW50Q29udG91cik7XG4gICAgICAgICAgICBjdXJyZW50Q29udG91ciA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2suYXJndW1lbnQoY3VycmVudENvbnRvdXIubGVuZ3RoID09PSAwLCAnVGhlcmUgYXJlIHN0aWxsIHBvaW50cyBsZWZ0IGluIHRoZSBjdXJyZW50IGNvbnRvdXIuJyk7XG4gICAgcmV0dXJuIGNvbnRvdXJzO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHhNaW4veU1pbi94TWF4L3lNYXgvbHNiL3JzYiBmb3IgYSBHbHlwaC5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuR2x5cGgucHJvdG90eXBlLmdldE1ldHJpY3MgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29tbWFuZHMgPSB0aGlzLnBhdGguY29tbWFuZHM7XG4gICAgdmFyIHhDb29yZHMgPSBbXTtcbiAgICB2YXIgeUNvb3JkcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tbWFuZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGNtZCA9IGNvbW1hbmRzW2ldO1xuICAgICAgICBpZiAoY21kLnR5cGUgIT09ICdaJykge1xuICAgICAgICAgICAgeENvb3Jkcy5wdXNoKGNtZC54KTtcbiAgICAgICAgICAgIHlDb29yZHMucHVzaChjbWQueSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY21kLnR5cGUgPT09ICdRJyB8fCBjbWQudHlwZSA9PT0gJ0MnKSB7XG4gICAgICAgICAgICB4Q29vcmRzLnB1c2goY21kLngxKTtcbiAgICAgICAgICAgIHlDb29yZHMucHVzaChjbWQueTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNtZC50eXBlID09PSAnQycpIHtcbiAgICAgICAgICAgIHhDb29yZHMucHVzaChjbWQueDIpO1xuICAgICAgICAgICAgeUNvb3Jkcy5wdXNoKGNtZC55Mik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbWV0cmljcyA9IHtcbiAgICAgICAgeE1pbjogTWF0aC5taW4uYXBwbHkobnVsbCwgeENvb3JkcyksXG4gICAgICAgIHlNaW46IE1hdGgubWluLmFwcGx5KG51bGwsIHlDb29yZHMpLFxuICAgICAgICB4TWF4OiBNYXRoLm1heC5hcHBseShudWxsLCB4Q29vcmRzKSxcbiAgICAgICAgeU1heDogTWF0aC5tYXguYXBwbHkobnVsbCwgeUNvb3JkcyksXG4gICAgICAgIGxlZnRTaWRlQmVhcmluZzogdGhpcy5sZWZ0U2lkZUJlYXJpbmdcbiAgICB9O1xuXG4gICAgaWYgKCFpc0Zpbml0ZShtZXRyaWNzLnhNaW4pKSB7XG4gICAgICAgIG1ldHJpY3MueE1pbiA9IDA7XG4gICAgfVxuXG4gICAgaWYgKCFpc0Zpbml0ZShtZXRyaWNzLnhNYXgpKSB7XG4gICAgICAgIG1ldHJpY3MueE1heCA9IHRoaXMuYWR2YW5jZVdpZHRoO1xuICAgIH1cblxuICAgIGlmICghaXNGaW5pdGUobWV0cmljcy55TWluKSkge1xuICAgICAgICBtZXRyaWNzLnlNaW4gPSAwO1xuICAgIH1cblxuICAgIGlmICghaXNGaW5pdGUobWV0cmljcy55TWF4KSkge1xuICAgICAgICBtZXRyaWNzLnlNYXggPSAwO1xuICAgIH1cblxuICAgIG1ldHJpY3MucmlnaHRTaWRlQmVhcmluZyA9IHRoaXMuYWR2YW5jZVdpZHRoIC0gbWV0cmljcy5sZWZ0U2lkZUJlYXJpbmcgLSAobWV0cmljcy54TWF4IC0gbWV0cmljcy54TWluKTtcbiAgICByZXR1cm4gbWV0cmljcztcbn07XG5cbi8qKlxuICogRHJhdyB0aGUgZ2x5cGggb24gdGhlIGdpdmVuIGNvbnRleHQuXG4gKiBAcGFyYW0gIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCAtIEEgMkQgZHJhd2luZyBjb250ZXh0LCBsaWtlIENhbnZhcy5cbiAqIEBwYXJhbSAge251bWJlcn0gW3g9MF0gLSBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHRleHQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFt5PTBdIC0gVmVydGljYWwgcG9zaXRpb24gb2YgdGhlICpiYXNlbGluZSogb2YgdGhlIHRleHQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtmb250U2l6ZT03Ml0gLSBGb250IHNpemUgaW4gcGl4ZWxzLiBXZSBzY2FsZSB0aGUgZ2x5cGggdW5pdHMgYnkgYDEgLyB1bml0c1BlckVtICogZm9udFNpemVgLlxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9ucyAtIHhTY2FsZSwgeVNjYWxlIHRvIHN0cmV0Y2ggdGhlIGdseXBoLlxuICovXG5HbHlwaC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGN0eCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmdldFBhdGgoeCwgeSwgZm9udFNpemUsIG9wdGlvbnMpLmRyYXcoY3R4KTtcbn07XG5cbi8qKlxuICogRHJhdyB0aGUgcG9pbnRzIG9mIHRoZSBnbHlwaC5cbiAqIE9uLWN1cnZlIHBvaW50cyB3aWxsIGJlIGRyYXduIGluIGJsdWUsIG9mZi1jdXJ2ZSBwb2ludHMgd2lsbCBiZSBkcmF3biBpbiByZWQuXG4gKiBAcGFyYW0gIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCAtIEEgMkQgZHJhd2luZyBjb250ZXh0LCBsaWtlIENhbnZhcy5cbiAqIEBwYXJhbSAge251bWJlcn0gW3g9MF0gLSBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHRleHQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFt5PTBdIC0gVmVydGljYWwgcG9zaXRpb24gb2YgdGhlICpiYXNlbGluZSogb2YgdGhlIHRleHQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtmb250U2l6ZT03Ml0gLSBGb250IHNpemUgaW4gcGl4ZWxzLiBXZSBzY2FsZSB0aGUgZ2x5cGggdW5pdHMgYnkgYDEgLyB1bml0c1BlckVtICogZm9udFNpemVgLlxuICovXG5HbHlwaC5wcm90b3R5cGUuZHJhd1BvaW50cyA9IGZ1bmN0aW9uKGN0eCwgeCwgeSwgZm9udFNpemUpIHtcbiAgICBmdW5jdGlvbiBkcmF3Q2lyY2xlcyhsLCB4LCB5LCBzY2FsZSkge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgKGxbal0ueCAqIHNjYWxlKSwgeSArIChsW2pdLnkgKiBzY2FsZSkpO1xuICAgICAgICAgICAgY3R4LmFyYyh4ICsgKGxbal0ueCAqIHNjYWxlKSwgeSArIChsW2pdLnkgKiBzY2FsZSksIDIsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgfVxuXG4gICAgeCA9IHggIT09IHVuZGVmaW5lZCA/IHggOiAwO1xuICAgIHkgPSB5ICE9PSB1bmRlZmluZWQgPyB5IDogMDtcbiAgICBmb250U2l6ZSA9IGZvbnRTaXplICE9PSB1bmRlZmluZWQgPyBmb250U2l6ZSA6IDI0O1xuICAgIHZhciBzY2FsZSA9IDEgLyB0aGlzLnBhdGgudW5pdHNQZXJFbSAqIGZvbnRTaXplO1xuXG4gICAgdmFyIGJsdWVDaXJjbGVzID0gW107XG4gICAgdmFyIHJlZENpcmNsZXMgPSBbXTtcbiAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGguY29tbWFuZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGNtZCA9IHBhdGguY29tbWFuZHNbaV07XG4gICAgICAgIGlmIChjbWQueCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBibHVlQ2lyY2xlcy5wdXNoKHt4OiBjbWQueCwgeTogLWNtZC55fSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY21kLngxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlZENpcmNsZXMucHVzaCh7eDogY21kLngxLCB5OiAtY21kLnkxfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY21kLngyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlZENpcmNsZXMucHVzaCh7eDogY21kLngyLCB5OiAtY21kLnkyfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjdHguZmlsbFN0eWxlID0gJ2JsdWUnO1xuICAgIGRyYXdDaXJjbGVzKGJsdWVDaXJjbGVzLCB4LCB5LCBzY2FsZSk7XG4gICAgY3R4LmZpbGxTdHlsZSA9ICdyZWQnO1xuICAgIGRyYXdDaXJjbGVzKHJlZENpcmNsZXMsIHgsIHksIHNjYWxlKTtcbn07XG5cbi8qKlxuICogRHJhdyBsaW5lcyBpbmRpY2F0aW5nIGltcG9ydGFudCBmb250IG1lYXN1cmVtZW50cy5cbiAqIEJsYWNrIGxpbmVzIGluZGljYXRlIHRoZSBvcmlnaW4gb2YgdGhlIGNvb3JkaW5hdGUgc3lzdGVtIChwb2ludCAwLDApLlxuICogQmx1ZSBsaW5lcyBpbmRpY2F0ZSB0aGUgZ2x5cGggYm91bmRpbmcgYm94LlxuICogR3JlZW4gbGluZSBpbmRpY2F0ZXMgdGhlIGFkdmFuY2Ugd2lkdGggb2YgdGhlIGdseXBoLlxuICogQHBhcmFtICB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggLSBBIDJEIGRyYXdpbmcgY29udGV4dCwgbGlrZSBDYW52YXMuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFt4PTBdIC0gSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0ZXh0LlxuICogQHBhcmFtICB7bnVtYmVyfSBbeT0wXSAtIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSAqYmFzZWxpbmUqIG9mIHRoZSB0ZXh0LlxuICogQHBhcmFtICB7bnVtYmVyfSBbZm9udFNpemU9NzJdIC0gRm9udCBzaXplIGluIHBpeGVscy4gV2Ugc2NhbGUgdGhlIGdseXBoIHVuaXRzIGJ5IGAxIC8gdW5pdHNQZXJFbSAqIGZvbnRTaXplYC5cbiAqL1xuR2x5cGgucHJvdG90eXBlLmRyYXdNZXRyaWNzID0gZnVuY3Rpb24oY3R4LCB4LCB5LCBmb250U2l6ZSkge1xuICAgIHZhciBzY2FsZTtcbiAgICB4ID0geCAhPT0gdW5kZWZpbmVkID8geCA6IDA7XG4gICAgeSA9IHkgIT09IHVuZGVmaW5lZCA/IHkgOiAwO1xuICAgIGZvbnRTaXplID0gZm9udFNpemUgIT09IHVuZGVmaW5lZCA/IGZvbnRTaXplIDogMjQ7XG4gICAgc2NhbGUgPSAxIC8gdGhpcy5wYXRoLnVuaXRzUGVyRW0gKiBmb250U2l6ZTtcbiAgICBjdHgubGluZVdpZHRoID0gMTtcblxuICAgIC8vIERyYXcgdGhlIG9yaWdpblxuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdibGFjayc7XG4gICAgZHJhdy5saW5lKGN0eCwgeCwgLTEwMDAwLCB4LCAxMDAwMCk7XG4gICAgZHJhdy5saW5lKGN0eCwgLTEwMDAwLCB5LCAxMDAwMCwgeSk7XG5cbiAgICAvLyBUaGlzIGNvZGUgaXMgaGVyZSBkdWUgdG8gbWVtb3J5IG9wdGltaXphdGlvbjogYnkgbm90IHVzaW5nXG4gICAgLy8gZGVmYXVsdHMgaW4gdGhlIGNvbnN0cnVjdG9yLCB3ZSBzYXZlIGEgbm90YWJsZSBhbW91bnQgb2YgbWVtb3J5LlxuICAgIHZhciB4TWluID0gdGhpcy54TWluIHx8IDA7XG4gICAgdmFyIHlNaW4gPSB0aGlzLnlNaW4gfHwgMDtcbiAgICB2YXIgeE1heCA9IHRoaXMueE1heCB8fCAwO1xuICAgIHZhciB5TWF4ID0gdGhpcy55TWF4IHx8IDA7XG4gICAgdmFyIGFkdmFuY2VXaWR0aCA9IHRoaXMuYWR2YW5jZVdpZHRoIHx8IDA7XG5cbiAgICAvLyBEcmF3IHRoZSBnbHlwaCBib3hcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnYmx1ZSc7XG4gICAgZHJhdy5saW5lKGN0eCwgeCArICh4TWluICogc2NhbGUpLCAtMTAwMDAsIHggKyAoeE1pbiAqIHNjYWxlKSwgMTAwMDApO1xuICAgIGRyYXcubGluZShjdHgsIHggKyAoeE1heCAqIHNjYWxlKSwgLTEwMDAwLCB4ICsgKHhNYXggKiBzY2FsZSksIDEwMDAwKTtcbiAgICBkcmF3LmxpbmUoY3R4LCAtMTAwMDAsIHkgKyAoLXlNaW4gKiBzY2FsZSksIDEwMDAwLCB5ICsgKC15TWluICogc2NhbGUpKTtcbiAgICBkcmF3LmxpbmUoY3R4LCAtMTAwMDAsIHkgKyAoLXlNYXggKiBzY2FsZSksIDEwMDAwLCB5ICsgKC15TWF4ICogc2NhbGUpKTtcblxuICAgIC8vIERyYXcgdGhlIGFkdmFuY2Ugd2lkdGhcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnZ3JlZW4nO1xuICAgIGRyYXcubGluZShjdHgsIHggKyAoYWR2YW5jZVdpZHRoICogc2NhbGUpLCAtMTAwMDAsIHggKyAoYWR2YW5jZVdpZHRoICogc2NhbGUpLCAxMDAwMCk7XG59O1xuXG4vLyBUaGUgR2x5cGhTZXQgb2JqZWN0XG5cbi8vIERlZmluZSBhIHByb3BlcnR5IG9uIHRoZSBnbHlwaCB0aGF0IGRlcGVuZHMgb24gdGhlIHBhdGggYmVpbmcgbG9hZGVkLlxuZnVuY3Rpb24gZGVmaW5lRGVwZW5kZW50UHJvcGVydHkoZ2x5cGgsIGV4dGVybmFsTmFtZSwgaW50ZXJuYWxOYW1lKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdseXBoLCBleHRlcm5hbE5hbWUsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIFJlcXVlc3QgdGhlIHBhdGggcHJvcGVydHkgdG8gbWFrZSBzdXJlIHRoZSBwYXRoIGlzIGxvYWRlZC5cbiAgICAgICAgICAgIGdseXBoLnBhdGg7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgICAgICAgcmV0dXJuIGdseXBoW2ludGVybmFsTmFtZV07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24obmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGdseXBoW2ludGVybmFsTmFtZV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG59XG5cbi8qKlxuICogQSBHbHlwaFNldCByZXByZXNlbnRzIGFsbCBnbHlwaHMgYXZhaWxhYmxlIGluIHRoZSBmb250LCBidXQgbW9kZWxsZWQgdXNpbmdcbiAqIGEgZGVmZXJyZWQgZ2x5cGggbG9hZGVyLCBmb3IgcmV0cmlldmluZyBnbHlwaHMgb25seSBvbmNlIHRoZXkgYXJlIGFic29sdXRlbHlcbiAqIG5lY2Vzc2FyeSwgdG8ga2VlcCB0aGUgbWVtb3J5IGZvb3RwcmludCBkb3duLlxuICogQGV4cG9ydHMgb3BlbnR5cGUuR2x5cGhTZXRcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtvcGVudHlwZS5Gb250fVxuICogQHBhcmFtIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gR2x5cGhTZXQoZm9udCwgZ2x5cGhzKSB7XG4gICAgdGhpcy5mb250ID0gZm9udDtcbiAgICB0aGlzLmdseXBocyA9IHt9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KGdseXBocykpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICAgICAgICAgIGdseXBoLnBhdGgudW5pdHNQZXJFbSA9IGZvbnQudW5pdHNQZXJFbTtcbiAgICAgICAgICAgIHRoaXMuZ2x5cGhzW2ldID0gZ2x5cGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IChnbHlwaHMgJiYgZ2x5cGhzLmxlbmd0aCkgfHwgMDtcbn1cblxuLyoqXG4gKiBAcGFyYW0gIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtvcGVudHlwZS5HbHlwaH1cbiAqL1xuR2x5cGhTZXQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgLy8gdGhpcy5nbHlwaHNbaW5kZXhdIGlzICd1bmRlZmluZWQnIHdoZW4gbG93IG1lbW9yeSBtb2RlIGlzIG9uLiBnbHlwaCBpcyBwdXNoZWQgb24gcmVxdWVzdCBvbmx5LlxuICAgIGlmICh0aGlzLmdseXBoc1tpbmRleF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmZvbnQuX3B1c2goaW5kZXgpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZ2x5cGhzW2luZGV4XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5nbHlwaHNbaW5kZXhdID0gdGhpcy5nbHlwaHNbaW5kZXhdKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZ2x5cGggPSB0aGlzLmdseXBoc1tpbmRleF07XG4gICAgICAgIHZhciB1bmljb2RlT2JqID0gdGhpcy5mb250Ll9JbmRleFRvVW5pY29kZU1hcFtpbmRleF07XG5cbiAgICAgICAgaWYgKHVuaWNvZGVPYmopIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdW5pY29kZU9iai51bmljb2Rlcy5sZW5ndGg7IGorKylcbiAgICAgICAgICAgICAgICB7IGdseXBoLmFkZFVuaWNvZGUodW5pY29kZU9iai51bmljb2Rlc1tqXSk7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZvbnQuY2ZmRW5jb2RpbmcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZvbnQuaXNDSURGb250KSB7XG4gICAgICAgICAgICAgICAgZ2x5cGgubmFtZSA9ICdnaWQnICsgaW5kZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdseXBoLm5hbWUgPSB0aGlzLmZvbnQuY2ZmRW5jb2RpbmcuY2hhcnNldFtpbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5mb250LmdseXBoTmFtZXMubmFtZXMpIHtcbiAgICAgICAgICAgIGdseXBoLm5hbWUgPSB0aGlzLmZvbnQuZ2x5cGhOYW1lcy5nbHlwaEluZGV4VG9OYW1lKGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2x5cGhzW2luZGV4XS5hZHZhbmNlV2lkdGggPSB0aGlzLmZvbnQuX2htdHhUYWJsZURhdGFbaW5kZXhdLmFkdmFuY2VXaWR0aDtcbiAgICAgICAgdGhpcy5nbHlwaHNbaW5kZXhdLmxlZnRTaWRlQmVhcmluZyA9IHRoaXMuZm9udC5faG10eFRhYmxlRGF0YVtpbmRleF0ubGVmdFNpZGVCZWFyaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5nbHlwaHNbaW5kZXhdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLmdseXBoc1tpbmRleF0gPSB0aGlzLmdseXBoc1tpbmRleF0oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdseXBoc1tpbmRleF07XG59O1xuXG4vKipcbiAqIEBwYXJhbSAge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSAge09iamVjdH1cbiAqL1xuR2x5cGhTZXQucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihpbmRleCwgbG9hZGVyKSB7XG4gICAgdGhpcy5nbHlwaHNbaW5kZXhdID0gbG9hZGVyO1xuICAgIHRoaXMubGVuZ3RoKys7XG59O1xuXG4vKipcbiAqIEBhbGlhcyBvcGVudHlwZS5nbHlwaExvYWRlclxuICogQHBhcmFtICB7b3BlbnR5cGUuRm9udH0gZm9udFxuICogQHBhcmFtICB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7b3BlbnR5cGUuR2x5cGh9XG4gKi9cbmZ1bmN0aW9uIGdseXBoTG9hZGVyKGZvbnQsIGluZGV4KSB7XG4gICAgcmV0dXJuIG5ldyBHbHlwaCh7aW5kZXg6IGluZGV4LCBmb250OiBmb250fSk7XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzdHViIGdseXBoIHRoYXQgY2FuIGJlIGZpbGxlZCB3aXRoIGFsbCBtZXRhZGF0YSAqZXhjZXB0KlxuICogdGhlIFwicG9pbnRzXCIgYW5kIFwicGF0aFwiIHByb3BlcnRpZXMsIHdoaWNoIG11c3QgYmUgbG9hZGVkIG9ubHkgb25jZVxuICogdGhlIGdseXBoJ3MgcGF0aCBpcyBhY3R1YWxseSByZXF1ZXN0ZWQgZm9yIHRleHQgc2hhcGluZy5cbiAqIEBhbGlhcyBvcGVudHlwZS50dGZHbHlwaExvYWRlclxuICogQHBhcmFtICB7b3BlbnR5cGUuRm9udH0gZm9udFxuICogQHBhcmFtICB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtICB7RnVuY3Rpb259IHBhcnNlR2x5cGhcbiAqIEBwYXJhbSAge09iamVjdH0gZGF0YVxuICogQHBhcmFtICB7bnVtYmVyfSBwb3NpdGlvblxuICogQHBhcmFtICB7RnVuY3Rpb259IGJ1aWxkUGF0aFxuICogQHJldHVybiB7b3BlbnR5cGUuR2x5cGh9XG4gKi9cbmZ1bmN0aW9uIHR0ZkdseXBoTG9hZGVyKGZvbnQsIGluZGV4LCBwYXJzZUdseXBoLCBkYXRhLCBwb3NpdGlvbiwgYnVpbGRQYXRoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZ2x5cGggPSBuZXcgR2x5cGgoe2luZGV4OiBpbmRleCwgZm9udDogZm9udH0pO1xuXG4gICAgICAgIGdseXBoLnBhdGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHBhcnNlR2x5cGgoZ2x5cGgsIGRhdGEsIHBvc2l0aW9uKTtcbiAgICAgICAgICAgIHZhciBwYXRoID0gYnVpbGRQYXRoKGZvbnQuZ2x5cGhzLCBnbHlwaCk7XG4gICAgICAgICAgICBwYXRoLnVuaXRzUGVyRW0gPSBmb250LnVuaXRzUGVyRW07XG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgfTtcblxuICAgICAgICBkZWZpbmVEZXBlbmRlbnRQcm9wZXJ0eShnbHlwaCwgJ3hNaW4nLCAnX3hNaW4nKTtcbiAgICAgICAgZGVmaW5lRGVwZW5kZW50UHJvcGVydHkoZ2x5cGgsICd4TWF4JywgJ194TWF4Jyk7XG4gICAgICAgIGRlZmluZURlcGVuZGVudFByb3BlcnR5KGdseXBoLCAneU1pbicsICdfeU1pbicpO1xuICAgICAgICBkZWZpbmVEZXBlbmRlbnRQcm9wZXJ0eShnbHlwaCwgJ3lNYXgnLCAnX3lNYXgnKTtcblxuICAgICAgICByZXR1cm4gZ2x5cGg7XG4gICAgfTtcbn1cbi8qKlxuICogQGFsaWFzIG9wZW50eXBlLmNmZkdseXBoTG9hZGVyXG4gKiBAcGFyYW0gIHtvcGVudHlwZS5Gb250fSBmb250XG4gKiBAcGFyYW0gIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gcGFyc2VDRkZDaGFyc3RyaW5nXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGNoYXJzdHJpbmdcbiAqIEByZXR1cm4ge29wZW50eXBlLkdseXBofVxuICovXG5mdW5jdGlvbiBjZmZHbHlwaExvYWRlcihmb250LCBpbmRleCwgcGFyc2VDRkZDaGFyc3RyaW5nLCBjaGFyc3RyaW5nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZ2x5cGggPSBuZXcgR2x5cGgoe2luZGV4OiBpbmRleCwgZm9udDogZm9udH0pO1xuXG4gICAgICAgIGdseXBoLnBhdGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBwYXRoID0gcGFyc2VDRkZDaGFyc3RyaW5nKGZvbnQsIGdseXBoLCBjaGFyc3RyaW5nKTtcbiAgICAgICAgICAgIHBhdGgudW5pdHNQZXJFbSA9IGZvbnQudW5pdHNQZXJFbTtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBnbHlwaDtcbiAgICB9O1xufVxuXG52YXIgZ2x5cGhzZXQgPSB7IEdseXBoU2V0OiBHbHlwaFNldCwgZ2x5cGhMb2FkZXI6IGdseXBoTG9hZGVyLCB0dGZHbHlwaExvYWRlcjogdHRmR2x5cGhMb2FkZXIsIGNmZkdseXBoTG9hZGVyOiBjZmZHbHlwaExvYWRlciB9O1xuXG4vLyBUaGUgYENGRmAgdGFibGUgY29udGFpbnMgdGhlIGdseXBoIG91dGxpbmVzIGluIFBvc3RTY3JpcHQgZm9ybWF0LlxuXG4vLyBDdXN0b20gZXF1YWxzIGZ1bmN0aW9uIHRoYXQgY2FuIGFsc28gY2hlY2sgbGlzdHMuXG5mdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhKSAmJiBBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKCFlcXVhbHMoYVtpXSwgYltpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vLyBTdWJyb3V0aW5lcyBhcmUgZW5jb2RlZCB1c2luZyB0aGUgbmVnYXRpdmUgaGFsZiBvZiB0aGUgbnVtYmVyIHNwYWNlLlxuLy8gU2VlIHR5cGUgMiBjaGFwdGVyIDQuNyBcIlN1YnJvdXRpbmUgb3BlcmF0b3JzXCIuXG5mdW5jdGlvbiBjYWxjQ0ZGU3Vicm91dGluZUJpYXMoc3VicnMpIHtcbiAgICB2YXIgYmlhcztcbiAgICBpZiAoc3VicnMubGVuZ3RoIDwgMTI0MCkge1xuICAgICAgICBiaWFzID0gMTA3O1xuICAgIH0gZWxzZSBpZiAoc3VicnMubGVuZ3RoIDwgMzM5MDApIHtcbiAgICAgICAgYmlhcyA9IDExMzE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYmlhcyA9IDMyNzY4O1xuICAgIH1cblxuICAgIHJldHVybiBiaWFzO1xufVxuXG4vLyBQYXJzZSBhIGBDRkZgIElOREVYIGFycmF5LlxuLy8gQW4gaW5kZXggYXJyYXkgY29uc2lzdHMgb2YgYSBsaXN0IG9mIG9mZnNldHMsIHRoZW4gYSBsaXN0IG9mIG9iamVjdHMgYXQgdGhvc2Ugb2Zmc2V0cy5cbmZ1bmN0aW9uIHBhcnNlQ0ZGSW5kZXgoZGF0YSwgc3RhcnQsIGNvbnZlcnNpb25Gbikge1xuICAgIHZhciBvZmZzZXRzID0gW107XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICB2YXIgY291bnQgPSBwYXJzZS5nZXRDYXJkMTYoZGF0YSwgc3RhcnQpO1xuICAgIHZhciBvYmplY3RPZmZzZXQ7XG4gICAgdmFyIGVuZE9mZnNldDtcbiAgICBpZiAoY291bnQgIT09IDApIHtcbiAgICAgICAgdmFyIG9mZnNldFNpemUgPSBwYXJzZS5nZXRCeXRlKGRhdGEsIHN0YXJ0ICsgMik7XG4gICAgICAgIG9iamVjdE9mZnNldCA9IHN0YXJ0ICsgKChjb3VudCArIDEpICogb2Zmc2V0U2l6ZSkgKyAyO1xuICAgICAgICB2YXIgcG9zID0gc3RhcnQgKyAzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50ICsgMTsgaSArPSAxKSB7XG4gICAgICAgICAgICBvZmZzZXRzLnB1c2gocGFyc2UuZ2V0T2Zmc2V0KGRhdGEsIHBvcywgb2Zmc2V0U2l6ZSkpO1xuICAgICAgICAgICAgcG9zICs9IG9mZnNldFNpemU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgdG90YWwgc2l6ZSBvZiB0aGUgaW5kZXggYXJyYXkgaXMgNCBoZWFkZXIgYnl0ZXMgKyB0aGUgdmFsdWUgb2YgdGhlIGxhc3Qgb2Zmc2V0LlxuICAgICAgICBlbmRPZmZzZXQgPSBvYmplY3RPZmZzZXQgKyBvZmZzZXRzW2NvdW50XTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBlbmRPZmZzZXQgPSBzdGFydCArIDI7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgb2Zmc2V0cy5sZW5ndGggLSAxOyBpJDEgKz0gMSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZS5nZXRCeXRlcyhkYXRhLCBvYmplY3RPZmZzZXQgKyBvZmZzZXRzW2kkMV0sIG9iamVjdE9mZnNldCArIG9mZnNldHNbaSQxICsgMV0pO1xuICAgICAgICBpZiAoY29udmVyc2lvbkZuKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbnZlcnNpb25Gbih2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBvYmplY3RzLnB1c2godmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB7b2JqZWN0czogb2JqZWN0cywgc3RhcnRPZmZzZXQ6IHN0YXJ0LCBlbmRPZmZzZXQ6IGVuZE9mZnNldH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ0ZGSW5kZXhMb3dNZW1vcnkoZGF0YSwgc3RhcnQpIHtcbiAgICB2YXIgb2Zmc2V0cyA9IFtdO1xuICAgIHZhciBjb3VudCA9IHBhcnNlLmdldENhcmQxNihkYXRhLCBzdGFydCk7XG4gICAgdmFyIG9iamVjdE9mZnNldDtcbiAgICB2YXIgZW5kT2Zmc2V0O1xuICAgIGlmIChjb3VudCAhPT0gMCkge1xuICAgICAgICB2YXIgb2Zmc2V0U2l6ZSA9IHBhcnNlLmdldEJ5dGUoZGF0YSwgc3RhcnQgKyAyKTtcbiAgICAgICAgb2JqZWN0T2Zmc2V0ID0gc3RhcnQgKyAoKGNvdW50ICsgMSkgKiBvZmZzZXRTaXplKSArIDI7XG4gICAgICAgIHZhciBwb3MgPSBzdGFydCArIDM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQgKyAxOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG9mZnNldHMucHVzaChwYXJzZS5nZXRPZmZzZXQoZGF0YSwgcG9zLCBvZmZzZXRTaXplKSk7XG4gICAgICAgICAgICBwb3MgKz0gb2Zmc2V0U2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSB0b3RhbCBzaXplIG9mIHRoZSBpbmRleCBhcnJheSBpcyA0IGhlYWRlciBieXRlcyArIHRoZSB2YWx1ZSBvZiB0aGUgbGFzdCBvZmZzZXQuXG4gICAgICAgIGVuZE9mZnNldCA9IG9iamVjdE9mZnNldCArIG9mZnNldHNbY291bnRdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZE9mZnNldCA9IHN0YXJ0ICsgMjtcbiAgICB9XG5cbiAgICByZXR1cm4ge29mZnNldHM6IG9mZnNldHMsIHN0YXJ0T2Zmc2V0OiBzdGFydCwgZW5kT2Zmc2V0OiBlbmRPZmZzZXR9O1xufVxuZnVuY3Rpb24gZ2V0Q2ZmSW5kZXhPYmplY3QoaSwgb2Zmc2V0cywgZGF0YSwgc3RhcnQsIGNvbnZlcnNpb25Gbikge1xuICAgIHZhciBjb3VudCA9IHBhcnNlLmdldENhcmQxNihkYXRhLCBzdGFydCk7XG4gICAgdmFyIG9iamVjdE9mZnNldCA9IDA7XG4gICAgaWYgKGNvdW50ICE9PSAwKSB7XG4gICAgICAgIHZhciBvZmZzZXRTaXplID0gcGFyc2UuZ2V0Qnl0ZShkYXRhLCBzdGFydCArIDIpO1xuICAgICAgICBvYmplY3RPZmZzZXQgPSBzdGFydCArICgoY291bnQgKyAxKSAqIG9mZnNldFNpemUpICsgMjtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBwYXJzZS5nZXRCeXRlcyhkYXRhLCBvYmplY3RPZmZzZXQgKyBvZmZzZXRzW2ldLCBvYmplY3RPZmZzZXQgKyBvZmZzZXRzW2kgKyAxXSk7XG4gICAgaWYgKGNvbnZlcnNpb25Gbikge1xuICAgICAgICB2YWx1ZSA9IGNvbnZlcnNpb25Gbih2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gUGFyc2UgYSBgQ0ZGYCBESUNUIHJlYWwgdmFsdWUuXG5mdW5jdGlvbiBwYXJzZUZsb2F0T3BlcmFuZChwYXJzZXIpIHtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBlb2YgPSAxNTtcbiAgICB2YXIgbG9va3VwID0gWycwJywgJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5JywgJy4nLCAnRScsICdFLScsIG51bGwsICctJ107XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGIgPSBwYXJzZXIucGFyc2VCeXRlKCk7XG4gICAgICAgIHZhciBuMSA9IGIgPj4gNDtcbiAgICAgICAgdmFyIG4yID0gYiAmIDE1O1xuXG4gICAgICAgIGlmIChuMSA9PT0gZW9mKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHMgKz0gbG9va3VwW24xXTtcblxuICAgICAgICBpZiAobjIgPT09IGVvZikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzICs9IGxvb2t1cFtuMl07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQocyk7XG59XG5cbi8vIFBhcnNlIGEgYENGRmAgRElDVCBvcGVyYW5kLlxuZnVuY3Rpb24gcGFyc2VPcGVyYW5kKHBhcnNlciwgYjApIHtcbiAgICB2YXIgYjE7XG4gICAgdmFyIGIyO1xuICAgIHZhciBiMztcbiAgICB2YXIgYjQ7XG4gICAgaWYgKGIwID09PSAyOCkge1xuICAgICAgICBiMSA9IHBhcnNlci5wYXJzZUJ5dGUoKTtcbiAgICAgICAgYjIgPSBwYXJzZXIucGFyc2VCeXRlKCk7XG4gICAgICAgIHJldHVybiBiMSA8PCA4IHwgYjI7XG4gICAgfVxuXG4gICAgaWYgKGIwID09PSAyOSkge1xuICAgICAgICBiMSA9IHBhcnNlci5wYXJzZUJ5dGUoKTtcbiAgICAgICAgYjIgPSBwYXJzZXIucGFyc2VCeXRlKCk7XG4gICAgICAgIGIzID0gcGFyc2VyLnBhcnNlQnl0ZSgpO1xuICAgICAgICBiNCA9IHBhcnNlci5wYXJzZUJ5dGUoKTtcbiAgICAgICAgcmV0dXJuIGIxIDw8IDI0IHwgYjIgPDwgMTYgfCBiMyA8PCA4IHwgYjQ7XG4gICAgfVxuXG4gICAgaWYgKGIwID09PSAzMCkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdE9wZXJhbmQocGFyc2VyKTtcbiAgICB9XG5cbiAgICBpZiAoYjAgPj0gMzIgJiYgYjAgPD0gMjQ2KSB7XG4gICAgICAgIHJldHVybiBiMCAtIDEzOTtcbiAgICB9XG5cbiAgICBpZiAoYjAgPj0gMjQ3ICYmIGIwIDw9IDI1MCkge1xuICAgICAgICBiMSA9IHBhcnNlci5wYXJzZUJ5dGUoKTtcbiAgICAgICAgcmV0dXJuIChiMCAtIDI0NykgKiAyNTYgKyBiMSArIDEwODtcbiAgICB9XG5cbiAgICBpZiAoYjAgPj0gMjUxICYmIGIwIDw9IDI1NCkge1xuICAgICAgICBiMSA9IHBhcnNlci5wYXJzZUJ5dGUoKTtcbiAgICAgICAgcmV0dXJuIC0oYjAgLSAyNTEpICogMjU2IC0gYjEgLSAxMDg7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGIwICcgKyBiMCk7XG59XG5cbi8vIENvbnZlcnQgdGhlIGVudHJpZXMgcmV0dXJuZWQgYnkgYHBhcnNlRGljdGAgdG8gYSBwcm9wZXIgZGljdGlvbmFyeS5cbi8vIElmIGEgdmFsdWUgaXMgYSBsaXN0IG9mIG9uZSwgaXQgaXMgdW5wYWNrZWQuXG5mdW5jdGlvbiBlbnRyaWVzVG9PYmplY3QoZW50cmllcykge1xuICAgIHZhciBvID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBrZXkgPSBlbnRyaWVzW2ldWzBdO1xuICAgICAgICB2YXIgdmFsdWVzID0gZW50cmllc1tpXVsxXTtcbiAgICAgICAgdmFyIHZhbHVlID0gKHZvaWQgMCk7XG4gICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG8uaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhaXNOYU4ob1trZXldKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QgJyArIG8gKyAnIGFscmVhZHkgaGFzIGtleSAnICsga2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9ba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBvO1xufVxuXG4vLyBQYXJzZSBhIGBDRkZgIERJQ1Qgb2JqZWN0LlxuLy8gQSBkaWN0aW9uYXJ5IGNvbnRhaW5zIGtleS12YWx1ZSBwYWlycyBpbiBhIGNvbXBhY3QgdG9rZW5pemVkIGZvcm1hdC5cbmZ1bmN0aW9uIHBhcnNlQ0ZGRGljdChkYXRhLCBzdGFydCwgc2l6ZSkge1xuICAgIHN0YXJ0ID0gc3RhcnQgIT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogMDtcbiAgICB2YXIgcGFyc2VyID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICB2YXIgb3BlcmFuZHMgPSBbXTtcbiAgICBzaXplID0gc2l6ZSAhPT0gdW5kZWZpbmVkID8gc2l6ZSA6IGRhdGEubGVuZ3RoO1xuXG4gICAgd2hpbGUgKHBhcnNlci5yZWxhdGl2ZU9mZnNldCA8IHNpemUpIHtcbiAgICAgICAgdmFyIG9wID0gcGFyc2VyLnBhcnNlQnl0ZSgpO1xuXG4gICAgICAgIC8vIFRoZSBmaXJzdCBieXRlIGZvciBlYWNoIGRpY3QgaXRlbSBkaXN0aW5ndWlzaGVzIGJldHdlZW4gb3BlcmF0b3IgKGtleSkgYW5kIG9wZXJhbmQgKHZhbHVlKS5cbiAgICAgICAgLy8gVmFsdWVzIDw9IDIxIGFyZSBvcGVyYXRvcnMuXG4gICAgICAgIGlmIChvcCA8PSAyMSkge1xuICAgICAgICAgICAgLy8gVHdvLWJ5dGUgb3BlcmF0b3JzIGhhdmUgYW4gaW5pdGlhbCBlc2NhcGUgYnl0ZSBvZiAxMi5cbiAgICAgICAgICAgIGlmIChvcCA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBvcCA9IDEyMDAgKyBwYXJzZXIucGFyc2VCeXRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVudHJpZXMucHVzaChbb3AsIG9wZXJhbmRzXSk7XG4gICAgICAgICAgICBvcGVyYW5kcyA9IFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU2luY2UgdGhlIG9wZXJhbmRzICh2YWx1ZXMpIGNvbWUgYmVmb3JlIHRoZSBvcGVyYXRvcnMgKGtleXMpLCB3ZSBzdG9yZSBhbGwgb3BlcmFuZHMgaW4gYSBsaXN0XG4gICAgICAgICAgICAvLyB1bnRpbCB3ZSBlbmNvdW50ZXIgYW4gb3BlcmF0b3IuXG4gICAgICAgICAgICBvcGVyYW5kcy5wdXNoKHBhcnNlT3BlcmFuZChwYXJzZXIsIG9wKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZW50cmllc1RvT2JqZWN0KGVudHJpZXMpO1xufVxuXG4vLyBHaXZlbiBhIFN0cmluZyBJbmRleCAoU0lEKSwgcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgc3RyaW5nLlxuLy8gU3RyaW5ncyBiZWxvdyBpbmRleCAzOTIgYXJlIHN0YW5kYXJkIENGRiBzdHJpbmdzIGFuZCBhcmUgbm90IGVuY29kZWQgaW4gdGhlIGZvbnQuXG5mdW5jdGlvbiBnZXRDRkZTdHJpbmcoc3RyaW5ncywgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPD0gMzkwKSB7XG4gICAgICAgIGluZGV4ID0gY2ZmU3RhbmRhcmRTdHJpbmdzW2luZGV4XTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleCA9IHN0cmluZ3NbaW5kZXggLSAzOTFdO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleDtcbn1cblxuLy8gSW50ZXJwcmV0IGEgZGljdGlvbmFyeSBhbmQgcmV0dXJuIGEgbmV3IGRpY3Rpb25hcnkgd2l0aCByZWFkYWJsZSBrZXlzIGFuZCB2YWx1ZXMgZm9yIG1pc3NpbmcgZW50cmllcy5cbi8vIFRoaXMgZnVuY3Rpb24gdGFrZXMgYG1ldGFgIHdoaWNoIGlzIGEgbGlzdCBvZiBvYmplY3RzIGNvbnRhaW5pbmcgYG9wZXJhbmRgLCBgbmFtZWAgYW5kIGBkZWZhdWx0YC5cbmZ1bmN0aW9uIGludGVycHJldERpY3QoZGljdCwgbWV0YSwgc3RyaW5ncykge1xuICAgIHZhciBuZXdEaWN0ID0ge307XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgLy8gQmVjYXVzZSB3ZSBhbHNvIHdhbnQgdG8gaW5jbHVkZSBtaXNzaW5nIHZhbHVlcywgd2Ugc3RhcnQgb3V0IGZyb20gdGhlIG1ldGEgbGlzdFxuICAgIC8vIGFuZCBsb29rdXAgdmFsdWVzIGluIHRoZSBkaWN0LlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWV0YS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgbSA9IG1ldGFbaV07XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobS50eXBlKSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgdmFsdWVzLmxlbmd0aCA9IG0udHlwZS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0udHlwZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZGljdFttLm9wXSAhPT0gdW5kZWZpbmVkID8gZGljdFttLm9wXVtqXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG0udmFsdWUgIT09IHVuZGVmaW5lZCAmJiBtLnZhbHVlW2pdICE9PSB1bmRlZmluZWQgPyBtLnZhbHVlW2pdIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG0udHlwZVtqXSA9PT0gJ1NJRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBnZXRDRkZTdHJpbmcoc3RyaW5ncywgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZXNbal0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0RpY3RbbS5uYW1lXSA9IHZhbHVlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gZGljdFttLm9wXTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtLnZhbHVlICE9PSB1bmRlZmluZWQgPyBtLnZhbHVlIDogbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG0udHlwZSA9PT0gJ1NJRCcpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGdldENGRlN0cmluZyhzdHJpbmdzLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdEaWN0W20ubmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXdEaWN0O1xufVxuXG4vLyBQYXJzZSB0aGUgQ0ZGIGhlYWRlci5cbmZ1bmN0aW9uIHBhcnNlQ0ZGSGVhZGVyKGRhdGEsIHN0YXJ0KSB7XG4gICAgdmFyIGhlYWRlciA9IHt9O1xuICAgIGhlYWRlci5mb3JtYXRNYWpvciA9IHBhcnNlLmdldENhcmQ4KGRhdGEsIHN0YXJ0KTtcbiAgICBoZWFkZXIuZm9ybWF0TWlub3IgPSBwYXJzZS5nZXRDYXJkOChkYXRhLCBzdGFydCArIDEpO1xuICAgIGhlYWRlci5zaXplID0gcGFyc2UuZ2V0Q2FyZDgoZGF0YSwgc3RhcnQgKyAyKTtcbiAgICBoZWFkZXIub2Zmc2V0U2l6ZSA9IHBhcnNlLmdldENhcmQ4KGRhdGEsIHN0YXJ0ICsgMyk7XG4gICAgaGVhZGVyLnN0YXJ0T2Zmc2V0ID0gc3RhcnQ7XG4gICAgaGVhZGVyLmVuZE9mZnNldCA9IHN0YXJ0ICsgNDtcbiAgICByZXR1cm4gaGVhZGVyO1xufVxuXG52YXIgVE9QX0RJQ1RfTUVUQSA9IFtcbiAgICB7bmFtZTogJ3ZlcnNpb24nLCBvcDogMCwgdHlwZTogJ1NJRCd9LFxuICAgIHtuYW1lOiAnbm90aWNlJywgb3A6IDEsIHR5cGU6ICdTSUQnfSxcbiAgICB7bmFtZTogJ2NvcHlyaWdodCcsIG9wOiAxMjAwLCB0eXBlOiAnU0lEJ30sXG4gICAge25hbWU6ICdmdWxsTmFtZScsIG9wOiAyLCB0eXBlOiAnU0lEJ30sXG4gICAge25hbWU6ICdmYW1pbHlOYW1lJywgb3A6IDMsIHR5cGU6ICdTSUQnfSxcbiAgICB7bmFtZTogJ3dlaWdodCcsIG9wOiA0LCB0eXBlOiAnU0lEJ30sXG4gICAge25hbWU6ICdpc0ZpeGVkUGl0Y2gnLCBvcDogMTIwMSwgdHlwZTogJ251bWJlcicsIHZhbHVlOiAwfSxcbiAgICB7bmFtZTogJ2l0YWxpY0FuZ2xlJywgb3A6IDEyMDIsIHR5cGU6ICdudW1iZXInLCB2YWx1ZTogMH0sXG4gICAge25hbWU6ICd1bmRlcmxpbmVQb3NpdGlvbicsIG9wOiAxMjAzLCB0eXBlOiAnbnVtYmVyJywgdmFsdWU6IC0xMDB9LFxuICAgIHtuYW1lOiAndW5kZXJsaW5lVGhpY2tuZXNzJywgb3A6IDEyMDQsIHR5cGU6ICdudW1iZXInLCB2YWx1ZTogNTB9LFxuICAgIHtuYW1lOiAncGFpbnRUeXBlJywgb3A6IDEyMDUsIHR5cGU6ICdudW1iZXInLCB2YWx1ZTogMH0sXG4gICAge25hbWU6ICdjaGFyc3RyaW5nVHlwZScsIG9wOiAxMjA2LCB0eXBlOiAnbnVtYmVyJywgdmFsdWU6IDJ9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ2ZvbnRNYXRyaXgnLFxuICAgICAgICBvcDogMTIwNyxcbiAgICAgICAgdHlwZTogWydyZWFsJywgJ3JlYWwnLCAncmVhbCcsICdyZWFsJywgJ3JlYWwnLCAncmVhbCddLFxuICAgICAgICB2YWx1ZTogWzAuMDAxLCAwLCAwLCAwLjAwMSwgMCwgMF1cbiAgICB9LFxuICAgIHtuYW1lOiAndW5pcXVlSWQnLCBvcDogMTMsIHR5cGU6ICdudW1iZXInfSxcbiAgICB7bmFtZTogJ2ZvbnRCQm94Jywgb3A6IDUsIHR5cGU6IFsnbnVtYmVyJywgJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJ10sIHZhbHVlOiBbMCwgMCwgMCwgMF19LFxuICAgIHtuYW1lOiAnc3Ryb2tlV2lkdGgnLCBvcDogMTIwOCwgdHlwZTogJ251bWJlcicsIHZhbHVlOiAwfSxcbiAgICB7bmFtZTogJ3h1aWQnLCBvcDogMTQsIHR5cGU6IFtdLCB2YWx1ZTogbnVsbH0sXG4gICAge25hbWU6ICdjaGFyc2V0Jywgb3A6IDE1LCB0eXBlOiAnb2Zmc2V0JywgdmFsdWU6IDB9LFxuICAgIHtuYW1lOiAnZW5jb2RpbmcnLCBvcDogMTYsIHR5cGU6ICdvZmZzZXQnLCB2YWx1ZTogMH0sXG4gICAge25hbWU6ICdjaGFyU3RyaW5ncycsIG9wOiAxNywgdHlwZTogJ29mZnNldCcsIHZhbHVlOiAwfSxcbiAgICB7bmFtZTogJ3ByaXZhdGUnLCBvcDogMTgsIHR5cGU6IFsnbnVtYmVyJywgJ29mZnNldCddLCB2YWx1ZTogWzAsIDBdfSxcbiAgICB7bmFtZTogJ3JvcycsIG9wOiAxMjMwLCB0eXBlOiBbJ1NJRCcsICdTSUQnLCAnbnVtYmVyJ119LFxuICAgIHtuYW1lOiAnY2lkRm9udFZlcnNpb24nLCBvcDogMTIzMSwgdHlwZTogJ251bWJlcicsIHZhbHVlOiAwfSxcbiAgICB7bmFtZTogJ2NpZEZvbnRSZXZpc2lvbicsIG9wOiAxMjMyLCB0eXBlOiAnbnVtYmVyJywgdmFsdWU6IDB9LFxuICAgIHtuYW1lOiAnY2lkRm9udFR5cGUnLCBvcDogMTIzMywgdHlwZTogJ251bWJlcicsIHZhbHVlOiAwfSxcbiAgICB7bmFtZTogJ2NpZENvdW50Jywgb3A6IDEyMzQsIHR5cGU6ICdudW1iZXInLCB2YWx1ZTogODcyMH0sXG4gICAge25hbWU6ICd1aWRCYXNlJywgb3A6IDEyMzUsIHR5cGU6ICdudW1iZXInfSxcbiAgICB7bmFtZTogJ2ZkQXJyYXknLCBvcDogMTIzNiwgdHlwZTogJ29mZnNldCd9LFxuICAgIHtuYW1lOiAnZmRTZWxlY3QnLCBvcDogMTIzNywgdHlwZTogJ29mZnNldCd9LFxuICAgIHtuYW1lOiAnZm9udE5hbWUnLCBvcDogMTIzOCwgdHlwZTogJ1NJRCd9XG5dO1xuXG52YXIgUFJJVkFURV9ESUNUX01FVEEgPSBbXG4gICAge25hbWU6ICdzdWJycycsIG9wOiAxOSwgdHlwZTogJ29mZnNldCcsIHZhbHVlOiAwfSxcbiAgICB7bmFtZTogJ2RlZmF1bHRXaWR0aFgnLCBvcDogMjAsIHR5cGU6ICdudW1iZXInLCB2YWx1ZTogMH0sXG4gICAge25hbWU6ICdub21pbmFsV2lkdGhYJywgb3A6IDIxLCB0eXBlOiAnbnVtYmVyJywgdmFsdWU6IDB9XG5dO1xuXG4vLyBQYXJzZSB0aGUgQ0ZGIHRvcCBkaWN0aW9uYXJ5LiBBIENGRiB0YWJsZSBjYW4gY29udGFpbiBtdWx0aXBsZSBmb250cywgZWFjaCB3aXRoIHRoZWlyIG93biB0b3AgZGljdGlvbmFyeS5cbi8vIFRoZSB0b3AgZGljdGlvbmFyeSBjb250YWlucyB0aGUgZXNzZW50aWFsIG1ldGFkYXRhIGZvciB0aGUgZm9udCwgdG9nZXRoZXIgd2l0aCB0aGUgcHJpdmF0ZSBkaWN0aW9uYXJ5LlxuZnVuY3Rpb24gcGFyc2VDRkZUb3BEaWN0KGRhdGEsIHN0cmluZ3MpIHtcbiAgICB2YXIgZGljdCA9IHBhcnNlQ0ZGRGljdChkYXRhLCAwLCBkYXRhLmJ5dGVMZW5ndGgpO1xuICAgIHJldHVybiBpbnRlcnByZXREaWN0KGRpY3QsIFRPUF9ESUNUX01FVEEsIHN0cmluZ3MpO1xufVxuXG4vLyBQYXJzZSB0aGUgQ0ZGIHByaXZhdGUgZGljdGlvbmFyeS4gV2UgZG9uJ3QgZnVsbHkgcGFyc2Ugb3V0IGFsbCB0aGUgdmFsdWVzLCBvbmx5IHRoZSBvbmVzIHdlIG5lZWQuXG5mdW5jdGlvbiBwYXJzZUNGRlByaXZhdGVEaWN0KGRhdGEsIHN0YXJ0LCBzaXplLCBzdHJpbmdzKSB7XG4gICAgdmFyIGRpY3QgPSBwYXJzZUNGRkRpY3QoZGF0YSwgc3RhcnQsIHNpemUpO1xuICAgIHJldHVybiBpbnRlcnByZXREaWN0KGRpY3QsIFBSSVZBVEVfRElDVF9NRVRBLCBzdHJpbmdzKTtcbn1cblxuLy8gUmV0dXJucyBhIGxpc3Qgb2YgXCJUb3AgRElDVFwicyBmb3VuZCB1c2luZyBhbiBJTkRFWCBsaXN0LlxuLy8gVXNlZCB0byByZWFkIGJvdGggdGhlIHVzdWFsIGhpZ2gtbGV2ZWwgVG9wIERJQ1RzIGFuZCBhbHNvIHRoZSBGREFycmF5XG4vLyBkaXNjb3ZlcmVkIGluc2lkZSBDSUQta2V5ZWQgZm9udHMuICBXaGVuIGEgVG9wIERJQ1QgaGFzIGEgcmVmZXJlbmNlIHRvXG4vLyBhIFByaXZhdGUgRElDVCB0aGF0IGlzIHJlYWQgYW5kIHNhdmVkIGludG8gdGhlIFRvcCBESUNULlxuLy9cbi8vIEluIGFkZGl0aW9uIHRvIHRoZSBleHBlY3RlZC9vcHRpb25hbCB2YWx1ZXMgYXMgb3V0bGluZWQgaW4gVE9QX0RJQ1RfTUVUQVxuLy8gdGhlIGZvbGxvd2luZyB2YWx1ZXMgbWlnaHQgYmUgc2F2ZWQgaW50byB0aGUgVG9wIERJQ1QuXG4vL1xuLy8gICAgX3N1YnJzIFtdICAgICAgICBhcnJheSBvZiBsb2NhbCBDRkYgc3Vicm91dGluZXMgZnJvbSBQcml2YXRlIERJQ1Rcbi8vICAgIF9zdWJyc0JpYXMgICAgICAgYmlhcyB2YWx1ZSBjb21wdXRlZCBmcm9tIG51bWJlciBvZiBzdWJyb3V0aW5lc1xuLy8gICAgICAgICAgICAgICAgICAgICAgKHNlZSBjYWxjQ0ZGU3Vicm91dGluZUJpYXMoKSBhbmQgcGFyc2VDRkZDaGFyc3RyaW5nKCkpXG4vLyAgICBfZGVmYXVsdFdpZHRoWCAgIGRlZmF1bHQgd2lkdGhzIGZvciBDRkYgY2hhcmFjdGVyc1xuLy8gICAgX25vbWluYWxXaWR0aFggICBiaWFzIGFkZGVkIHRvIHdpZHRoIGVtYmVkZGVkIHdpdGhpbiBnbHlwaCBkZXNjcmlwdGlvblxuLy9cbi8vICAgIF9wcml2YXRlRGljdCAgICAgc2F2ZWQgY29weSBvZiBwYXJzZWQgUHJpdmF0ZSBESUNUIGZyb20gVG9wIERJQ1RcbmZ1bmN0aW9uIGdhdGhlckNGRlRvcERpY3RzKGRhdGEsIHN0YXJ0LCBjZmZJbmRleCwgc3RyaW5ncykge1xuICAgIHZhciB0b3BEaWN0QXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpVG9wRGljdCA9IDA7IGlUb3BEaWN0IDwgY2ZmSW5kZXgubGVuZ3RoOyBpVG9wRGljdCArPSAxKSB7XG4gICAgICAgIHZhciB0b3BEaWN0RGF0YSA9IG5ldyBEYXRhVmlldyhuZXcgVWludDhBcnJheShjZmZJbmRleFtpVG9wRGljdF0pLmJ1ZmZlcik7XG4gICAgICAgIHZhciB0b3BEaWN0ID0gcGFyc2VDRkZUb3BEaWN0KHRvcERpY3REYXRhLCBzdHJpbmdzKTtcbiAgICAgICAgdG9wRGljdC5fc3VicnMgPSBbXTtcbiAgICAgICAgdG9wRGljdC5fc3VicnNCaWFzID0gMDtcbiAgICAgICAgdG9wRGljdC5fZGVmYXVsdFdpZHRoWCA9IDA7XG4gICAgICAgIHRvcERpY3QuX25vbWluYWxXaWR0aFggPSAwO1xuICAgICAgICB2YXIgcHJpdmF0ZVNpemUgPSB0b3BEaWN0LnByaXZhdGVbMF07XG4gICAgICAgIHZhciBwcml2YXRlT2Zmc2V0ID0gdG9wRGljdC5wcml2YXRlWzFdO1xuICAgICAgICBpZiAocHJpdmF0ZVNpemUgIT09IDAgJiYgcHJpdmF0ZU9mZnNldCAhPT0gMCkge1xuICAgICAgICAgICAgdmFyIHByaXZhdGVEaWN0ID0gcGFyc2VDRkZQcml2YXRlRGljdChkYXRhLCBwcml2YXRlT2Zmc2V0ICsgc3RhcnQsIHByaXZhdGVTaXplLCBzdHJpbmdzKTtcbiAgICAgICAgICAgIHRvcERpY3QuX2RlZmF1bHRXaWR0aFggPSBwcml2YXRlRGljdC5kZWZhdWx0V2lkdGhYO1xuICAgICAgICAgICAgdG9wRGljdC5fbm9taW5hbFdpZHRoWCA9IHByaXZhdGVEaWN0Lm5vbWluYWxXaWR0aFg7XG4gICAgICAgICAgICBpZiAocHJpdmF0ZURpY3Quc3VicnMgIT09IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgc3Vick9mZnNldCA9IHByaXZhdGVPZmZzZXQgKyBwcml2YXRlRGljdC5zdWJycztcbiAgICAgICAgICAgICAgICB2YXIgc3VickluZGV4ID0gcGFyc2VDRkZJbmRleChkYXRhLCBzdWJyT2Zmc2V0ICsgc3RhcnQpO1xuICAgICAgICAgICAgICAgIHRvcERpY3QuX3N1YnJzID0gc3VickluZGV4Lm9iamVjdHM7XG4gICAgICAgICAgICAgICAgdG9wRGljdC5fc3VicnNCaWFzID0gY2FsY0NGRlN1YnJvdXRpbmVCaWFzKHRvcERpY3QuX3N1YnJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvcERpY3QuX3ByaXZhdGVEaWN0ID0gcHJpdmF0ZURpY3Q7XG4gICAgICAgIH1cbiAgICAgICAgdG9wRGljdEFycmF5LnB1c2godG9wRGljdCk7XG4gICAgfVxuICAgIHJldHVybiB0b3BEaWN0QXJyYXk7XG59XG5cbi8vIFBhcnNlIHRoZSBDRkYgY2hhcnNldCB0YWJsZSwgd2hpY2ggY29udGFpbnMgaW50ZXJuYWwgbmFtZXMgZm9yIGFsbCB0aGUgZ2x5cGhzLlxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBhIGxpc3Qgb2YgZ2x5cGggbmFtZXMuXG4vLyBTZWUgQWRvYmUgVE4gIzUxNzYgY2hhcHRlciAxMywgXCJDaGFyc2V0c1wiLlxuZnVuY3Rpb24gcGFyc2VDRkZDaGFyc2V0KGRhdGEsIHN0YXJ0LCBuR2x5cGhzLCBzdHJpbmdzKSB7XG4gICAgdmFyIHNpZDtcbiAgICB2YXIgY291bnQ7XG4gICAgdmFyIHBhcnNlciA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuXG4gICAgLy8gVGhlIC5ub3RkZWYgZ2x5cGggaXMgbm90IGluY2x1ZGVkLCBzbyBzdWJ0cmFjdCAxLlxuICAgIG5HbHlwaHMgLT0gMTtcbiAgICB2YXIgY2hhcnNldCA9IFsnLm5vdGRlZiddO1xuXG4gICAgdmFyIGZvcm1hdCA9IHBhcnNlci5wYXJzZUNhcmQ4KCk7XG4gICAgaWYgKGZvcm1hdCA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5HbHlwaHM7IGkgKz0gMSkge1xuICAgICAgICAgICAgc2lkID0gcGFyc2VyLnBhcnNlU0lEKCk7XG4gICAgICAgICAgICBjaGFyc2V0LnB1c2goZ2V0Q0ZGU3RyaW5nKHN0cmluZ3MsIHNpZCkpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IDEpIHtcbiAgICAgICAgd2hpbGUgKGNoYXJzZXQubGVuZ3RoIDw9IG5HbHlwaHMpIHtcbiAgICAgICAgICAgIHNpZCA9IHBhcnNlci5wYXJzZVNJRCgpO1xuICAgICAgICAgICAgY291bnQgPSBwYXJzZXIucGFyc2VDYXJkOCgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDw9IGNvdW50OyBpJDEgKz0gMSkge1xuICAgICAgICAgICAgICAgIGNoYXJzZXQucHVzaChnZXRDRkZTdHJpbmcoc3RyaW5ncywgc2lkKSk7XG4gICAgICAgICAgICAgICAgc2lkICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gMikge1xuICAgICAgICB3aGlsZSAoY2hhcnNldC5sZW5ndGggPD0gbkdseXBocykge1xuICAgICAgICAgICAgc2lkID0gcGFyc2VyLnBhcnNlU0lEKCk7XG4gICAgICAgICAgICBjb3VudCA9IHBhcnNlci5wYXJzZUNhcmQxNigpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSQyID0gMDsgaSQyIDw9IGNvdW50OyBpJDIgKz0gMSkge1xuICAgICAgICAgICAgICAgIGNoYXJzZXQucHVzaChnZXRDRkZTdHJpbmcoc3RyaW5ncywgc2lkKSk7XG4gICAgICAgICAgICAgICAgc2lkICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY2hhcnNldCBmb3JtYXQgJyArIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoYXJzZXQ7XG59XG5cbi8vIFBhcnNlIHRoZSBDRkYgZW5jb2RpbmcgZGF0YS4gT25seSBvbmUgZW5jb2RpbmcgY2FuIGJlIHNwZWNpZmllZCBwZXIgZm9udC5cbi8vIFNlZSBBZG9iZSBUTiAjNTE3NiBjaGFwdGVyIDEyLCBcIkVuY29kaW5nc1wiLlxuZnVuY3Rpb24gcGFyc2VDRkZFbmNvZGluZyhkYXRhLCBzdGFydCwgY2hhcnNldCkge1xuICAgIHZhciBjb2RlO1xuICAgIHZhciBlbmMgPSB7fTtcbiAgICB2YXIgcGFyc2VyID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIGZvcm1hdCA9IHBhcnNlci5wYXJzZUNhcmQ4KCk7XG4gICAgaWYgKGZvcm1hdCA9PT0gMCkge1xuICAgICAgICB2YXIgbkNvZGVzID0gcGFyc2VyLnBhcnNlQ2FyZDgoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuQ29kZXM7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29kZSA9IHBhcnNlci5wYXJzZUNhcmQ4KCk7XG4gICAgICAgICAgICBlbmNbY29kZV0gPSBpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IDEpIHtcbiAgICAgICAgdmFyIG5SYW5nZXMgPSBwYXJzZXIucGFyc2VDYXJkOCgpO1xuICAgICAgICBjb2RlID0gMTtcbiAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgblJhbmdlczsgaSQxICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBmaXJzdCA9IHBhcnNlci5wYXJzZUNhcmQ4KCk7XG4gICAgICAgICAgICB2YXIgbkxlZnQgPSBwYXJzZXIucGFyc2VDYXJkOCgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGZpcnN0OyBqIDw9IGZpcnN0ICsgbkxlZnQ7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgIGVuY1tqXSA9IGNvZGU7XG4gICAgICAgICAgICAgICAgY29kZSArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nIGZvcm1hdCAnICsgZm9ybWF0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENmZkVuY29kaW5nKGVuYywgY2hhcnNldCk7XG59XG5cbi8vIFRha2UgaW4gY2hhcnN0cmluZyBjb2RlIGFuZCByZXR1cm4gYSBHbHlwaCBvYmplY3QuXG4vLyBUaGUgZW5jb2RpbmcgaXMgZGVzY3JpYmVkIGluIHRoZSBUeXBlIDIgQ2hhcnN0cmluZyBGb3JtYXRcbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvY2hhcnN0cjIuaHRtXG5mdW5jdGlvbiBwYXJzZUNGRkNoYXJzdHJpbmcoZm9udCwgZ2x5cGgsIGNvZGUpIHtcbiAgICB2YXIgYzF4O1xuICAgIHZhciBjMXk7XG4gICAgdmFyIGMyeDtcbiAgICB2YXIgYzJ5O1xuICAgIHZhciBwID0gbmV3IFBhdGgoKTtcbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgblN0ZW1zID0gMDtcbiAgICB2YXIgaGF2ZVdpZHRoID0gZmFsc2U7XG4gICAgdmFyIG9wZW4gPSBmYWxzZTtcbiAgICB2YXIgeCA9IDA7XG4gICAgdmFyIHkgPSAwO1xuICAgIHZhciBzdWJycztcbiAgICB2YXIgc3VicnNCaWFzO1xuICAgIHZhciBkZWZhdWx0V2lkdGhYO1xuICAgIHZhciBub21pbmFsV2lkdGhYO1xuICAgIGlmIChmb250LmlzQ0lERm9udCkge1xuICAgICAgICB2YXIgZmRJbmRleCA9IGZvbnQudGFibGVzLmNmZi50b3BEaWN0Ll9mZFNlbGVjdFtnbHlwaC5pbmRleF07XG4gICAgICAgIHZhciBmZERpY3QgPSBmb250LnRhYmxlcy5jZmYudG9wRGljdC5fZmRBcnJheVtmZEluZGV4XTtcbiAgICAgICAgc3VicnMgPSBmZERpY3QuX3N1YnJzO1xuICAgICAgICBzdWJyc0JpYXMgPSBmZERpY3QuX3N1YnJzQmlhcztcbiAgICAgICAgZGVmYXVsdFdpZHRoWCA9IGZkRGljdC5fZGVmYXVsdFdpZHRoWDtcbiAgICAgICAgbm9taW5hbFdpZHRoWCA9IGZkRGljdC5fbm9taW5hbFdpZHRoWDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdWJycyA9IGZvbnQudGFibGVzLmNmZi50b3BEaWN0Ll9zdWJycztcbiAgICAgICAgc3VicnNCaWFzID0gZm9udC50YWJsZXMuY2ZmLnRvcERpY3QuX3N1YnJzQmlhcztcbiAgICAgICAgZGVmYXVsdFdpZHRoWCA9IGZvbnQudGFibGVzLmNmZi50b3BEaWN0Ll9kZWZhdWx0V2lkdGhYO1xuICAgICAgICBub21pbmFsV2lkdGhYID0gZm9udC50YWJsZXMuY2ZmLnRvcERpY3QuX25vbWluYWxXaWR0aFg7XG4gICAgfVxuICAgIHZhciB3aWR0aCA9IGRlZmF1bHRXaWR0aFg7XG5cbiAgICBmdW5jdGlvbiBuZXdDb250b3VyKHgsIHkpIHtcbiAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgIHAuY2xvc2VQYXRoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwLm1vdmVUbyh4LCB5KTtcbiAgICAgICAgb3BlbiA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTdGVtcygpIHtcbiAgICAgICAgdmFyIGhhc1dpZHRoQXJnO1xuXG4gICAgICAgIC8vIFRoZSBudW1iZXIgb2Ygc3RlbSBvcGVyYXRvcnMgb24gdGhlIHN0YWNrIGlzIGFsd2F5cyBldmVuLlxuICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgdW5ldmVuLCB0aGF0IG1lYW5zIGEgd2lkdGggaXMgc3BlY2lmaWVkLlxuICAgICAgICBoYXNXaWR0aEFyZyA9IHN0YWNrLmxlbmd0aCAlIDIgIT09IDA7XG4gICAgICAgIGlmIChoYXNXaWR0aEFyZyAmJiAhaGF2ZVdpZHRoKSB7XG4gICAgICAgICAgICB3aWR0aCA9IHN0YWNrLnNoaWZ0KCkgKyBub21pbmFsV2lkdGhYO1xuICAgICAgICB9XG5cbiAgICAgICAgblN0ZW1zICs9IHN0YWNrLmxlbmd0aCA+PiAxO1xuICAgICAgICBzdGFjay5sZW5ndGggPSAwO1xuICAgICAgICBoYXZlV2lkdGggPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlKGNvZGUpIHtcbiAgICAgICAgdmFyIGIxO1xuICAgICAgICB2YXIgYjI7XG4gICAgICAgIHZhciBiMztcbiAgICAgICAgdmFyIGI0O1xuICAgICAgICB2YXIgY29kZUluZGV4O1xuICAgICAgICB2YXIgc3VickNvZGU7XG4gICAgICAgIHZhciBqcHg7XG4gICAgICAgIHZhciBqcHk7XG4gICAgICAgIHZhciBjM3g7XG4gICAgICAgIHZhciBjM3k7XG4gICAgICAgIHZhciBjNHg7XG4gICAgICAgIHZhciBjNHk7XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IGNvZGUubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgdiA9IGNvZGVbaV07XG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICBzd2l0Y2ggKHYpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IC8vIGhzdGVtXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlU3RlbXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiAvLyB2c3RlbVxuICAgICAgICAgICAgICAgICAgICBwYXJzZVN0ZW1zKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogLy8gdm1vdmV0b1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMSAmJiAhaGF2ZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHN0YWNrLnNoaWZ0KCkgKyBub21pbmFsV2lkdGhYO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZVdpZHRoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHkgKz0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbnRvdXIoeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTogLy8gcmxpbmV0b1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeCArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6IC8vIGhsaW5ldG9cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB5ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogLy8gdmxpbmV0b1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OiAvLyBycmN1cnZldG9cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYzF5ID0geSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSBjMnggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IC8vIGNhbGxzdWJyXG4gICAgICAgICAgICAgICAgICAgIGNvZGVJbmRleCA9IHN0YWNrLnBvcCgpICsgc3VicnNCaWFzO1xuICAgICAgICAgICAgICAgICAgICBzdWJyQ29kZSA9IHN1YnJzW2NvZGVJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJyQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2Uoc3VickNvZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMTogLy8gcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlIDEyOiAvLyBmbGV4IG9wZXJhdG9yc1xuICAgICAgICAgICAgICAgICAgICB2ID0gY29kZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzU6IC8vIGZsZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB8LSBkeDEgZHkxIGR4MiBkeTIgZHgzIGR5MyBkeDQgZHk0IGR4NSBkeTUgZHg2IGR5NiBmZCBmbGV4ICgxMiAzNSkgfC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMXggPSB4ICAgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMXkgPSB5ICAgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeTFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeTJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcHggPSBjMnggKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcHkgPSBjMnkgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeTNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjM3ggPSBqcHggKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjM3kgPSBqcHkgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeTRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjNHggPSBjM3ggKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjNHkgPSBjM3kgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeTVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gYzR4ICAgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeDZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gYzR5ICAgKyBzdGFjay5zaGlmdCgpOyAgICAvLyBkeTZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5zaGlmdCgpOyAgICAgICAgICAgICAgICAvLyBmbGV4IGRlcHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5jdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwganB4LCBqcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjM3gsIGMzeSwgYzR4LCBjNHksIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNDogLy8gaGZsZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB8LSBkeDEgZHgyIGR5MiBkeDMgZHg0IGR4NSBkeDYgaGZsZXggKDEyIDM0KSB8LVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHggICArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4MVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeSA9IHk7ICAgICAgICAgICAgICAgICAgICAgIC8vIGR5MVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4MlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeSA9IGMxeSArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5MlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpweCA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4M1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpweSA9IGMyeTsgICAgICAgICAgICAgICAgICAgIC8vIGR5M1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMzeCA9IGpweCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4NFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMzeSA9IGMyeTsgICAgICAgICAgICAgICAgICAgIC8vIGR5NFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM0eCA9IGMzeCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4NVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM0eSA9IHk7ICAgICAgICAgICAgICAgICAgICAgIC8vIGR5NVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBjNHggKyBzdGFjay5zaGlmdCgpOyAgICAgIC8vIGR4NlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIGpweCwganB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzN4LCBjM3ksIGM0eCwgYzR5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzY6IC8vIGhmbGV4MVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHwtIGR4MSBkeTEgZHgyIGR5MiBkeDMgZHg0IGR4NSBkeTUgZHg2IGhmbGV4MSAoMTIgMzYpIHwtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzF4ID0geCAgICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHgxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzF5ID0geSAgICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHkxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHgyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHkyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganB4ID0gYzJ4ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHgzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganB5ID0gYzJ5OyAgICAgICAgICAgICAgICAgICAgLy8gZHkzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzN4ID0ganB4ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHg0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzN5ID0gYzJ5OyAgICAgICAgICAgICAgICAgICAgLy8gZHk0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzR4ID0gYzN4ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHg1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzR5ID0gYzN5ICsgc3RhY2suc2hpZnQoKTsgICAgLy8gZHk1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGM0eCArIHN0YWNrLnNoaWZ0KCk7ICAgICAgLy8gZHg2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5jdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwganB4LCBqcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjM3gsIGMzeSwgYzR4LCBjNHksIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNzogLy8gZmxleDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB8LSBkeDEgZHkxIGR4MiBkeTIgZHgzIGR5MyBkeDQgZHk0IGR4NSBkeTUgZDYgZmxleDEgKDEyIDM3KSB8LVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHggICArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4MVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMxeSA9IHkgICArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5MVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4MlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMyeSA9IGMxeSArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5MlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpweCA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4M1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpweSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5M1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMzeCA9IGpweCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4NFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMzeSA9IGpweSArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5NFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM0eCA9IGMzeCArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR4NVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM0eSA9IGMzeSArIHN0YWNrLnNoaWZ0KCk7ICAgIC8vIGR5NVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhjNHggLSB4KSA+IE1hdGguYWJzKGM0eSAtIHkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBjNHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBjNHkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIGpweCwganB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzN4LCBjM3ksIGM0eCwgYzR5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0dseXBoICcgKyBnbHlwaC5pbmRleCArICc6IHVua25vd24gb3BlcmF0b3IgJyArIDEyMDAgKyB2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTQ6IC8vIGVuZGNoYXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDAgJiYgIWhhdmVXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBzdGFjay5zaGlmdCgpICsgbm9taW5hbFdpZHRoWDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhdmVXaWR0aCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAob3Blbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTg6IC8vIGhzdGVtaG1cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VTdGVtcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE5OiAvLyBoaW50bWFza1xuICAgICAgICAgICAgICAgIGNhc2UgMjA6IC8vIGNudHJtYXNrXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlU3RlbXMoKTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAoblN0ZW1zICsgNykgPj4gMztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyMTogLy8gcm1vdmV0b1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMiAmJiAhaGF2ZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHN0YWNrLnNoaWZ0KCkgKyBub21pbmFsV2lkdGhYO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZVdpZHRoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHkgKz0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbnRvdXIoeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjI6IC8vIGhtb3ZldG9cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDEgJiYgIWhhdmVXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBzdGFjay5zaGlmdCgpICsgbm9taW5hbFdpZHRoWDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhdmVXaWR0aCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB4ICs9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBuZXdDb250b3VyKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDIzOiAvLyB2c3RlbWhtXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlU3RlbXMoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyNDogLy8gcmN1cnZlbGluZVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYzF4ID0geCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjMXkgPSB5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gYzJ5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgeCArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB5ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHAubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI1OiAvLyBybGluZWN1cnZlXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmxpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBjMXkgPSB5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgeCA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHkgPSBjMnkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyNjogLy8gdnZjdXJ2ZXRvXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggJSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ICs9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYzF4ID0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMxeSA9IHkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMyeSA9IGMxeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gYzJ4O1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjc6IC8vIGhoY3VydmV0b1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoICUgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgeSArPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYzF5ID0geTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGMyeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gYzJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgcC5jdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI4OiAvLyBzaG9ydGludFxuICAgICAgICAgICAgICAgICAgICBiMSA9IGNvZGVbaV07XG4gICAgICAgICAgICAgICAgICAgIGIyID0gY29kZVtpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goKChiMSA8PCAyNCkgfCAoYjIgPDwgMTYpKSA+PiAxNik7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOTogLy8gY2FsbGdzdWJyXG4gICAgICAgICAgICAgICAgICAgIGNvZGVJbmRleCA9IHN0YWNrLnBvcCgpICsgZm9udC5nc3VicnNCaWFzO1xuICAgICAgICAgICAgICAgICAgICBzdWJyQ29kZSA9IGZvbnQuZ3N1YnJzW2NvZGVJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJyQ29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2Uoc3VickNvZGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzMDogLy8gdmhjdXJ2ZXRvXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjMXggPSB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYzF5ID0geSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSBjMnggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIChzdGFjay5sZW5ndGggPT09IDEgPyBzdGFjay5zaGlmdCgpIDogMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYzF4ID0geCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjMXkgPSB5O1xuICAgICAgICAgICAgICAgICAgICAgICAgYzJ4ID0gYzF4ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMyeSA9IGMxeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gYzJ5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSBjMnggKyAoc3RhY2subGVuZ3RoID09PSAxID8gc3RhY2suc2hpZnQoKSA6IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcC5jdXJ2ZVRvKGMxeCwgYzF5LCBjMngsIGMyeSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDMxOiAvLyBodmN1cnZldG9cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMxeCA9IHggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYzF5ID0geTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMyeCA9IGMxeCArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjMnkgPSBjMXkgKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gYzJ4ICsgKHN0YWNrLmxlbmd0aCA9PT0gMSA/IHN0YWNrLnNoaWZ0KCkgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAuY3VydmVUbyhjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjMXggPSB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYzF5ID0geSArIHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjMnggPSBjMXggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYzJ5ID0gYzF5ICsgc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSBjMnggKyBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGMyeSArIChzdGFjay5sZW5ndGggPT09IDEgPyBzdGFjay5zaGlmdCgpIDogMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwLmN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh2IDwgMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHbHlwaCAnICsgZ2x5cGguaW5kZXggKyAnOiB1bmtub3duIG9wZXJhdG9yICcgKyB2KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2IDwgMjQ3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHYgLSAxMzkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHYgPCAyNTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIxID0gY29kZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goKHYgLSAyNDcpICogMjU2ICsgYjEgKyAxMDgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHYgPCAyNTUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIxID0gY29kZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goLSh2IC0gMjUxKSAqIDI1NiAtIGIxIC0gMTA4KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIxID0gY29kZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIyID0gY29kZVtpICsgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBiMyA9IGNvZGVbaSArIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYjQgPSBjb2RlW2kgKyAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goKChiMSA8PCAyNCkgfCAoYjIgPDwgMTYpIHwgKGIzIDw8IDgpIHwgYjQpIC8gNjU1MzYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZShjb2RlKTtcblxuICAgIGdseXBoLmFkdmFuY2VXaWR0aCA9IHdpZHRoO1xuICAgIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiBwYXJzZUNGRkZEU2VsZWN0KGRhdGEsIHN0YXJ0LCBuR2x5cGhzLCBmZEFycmF5Q291bnQpIHtcbiAgICB2YXIgZmRTZWxlY3QgPSBbXTtcbiAgICB2YXIgZmRJbmRleDtcbiAgICB2YXIgcGFyc2VyID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIGZvcm1hdCA9IHBhcnNlci5wYXJzZUNhcmQ4KCk7XG4gICAgaWYgKGZvcm1hdCA9PT0gMCkge1xuICAgICAgICAvLyBTaW1wbGUgbGlzdCBvZiBuR2x5cGhzIGVsZW1lbnRzXG4gICAgICAgIGZvciAodmFyIGlHaWQgPSAwOyBpR2lkIDwgbkdseXBoczsgaUdpZCsrKSB7XG4gICAgICAgICAgICBmZEluZGV4ID0gcGFyc2VyLnBhcnNlQ2FyZDgoKTtcbiAgICAgICAgICAgIGlmIChmZEluZGV4ID49IGZkQXJyYXlDb3VudCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ0ZGIHRhYmxlIENJRCBGb250IEZEU2VsZWN0IGhhcyBiYWQgRkQgaW5kZXggdmFsdWUgJyArIGZkSW5kZXggKyAnIChGRCBjb3VudCAnICsgZmRBcnJheUNvdW50ICsgJyknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZkU2VsZWN0LnB1c2goZmRJbmRleCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gMykge1xuICAgICAgICAvLyBSYW5nZXNcbiAgICAgICAgdmFyIG5SYW5nZXMgPSBwYXJzZXIucGFyc2VDYXJkMTYoKTtcbiAgICAgICAgdmFyIGZpcnN0ID0gcGFyc2VyLnBhcnNlQ2FyZDE2KCk7XG4gICAgICAgIGlmIChmaXJzdCAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDRkYgVGFibGUgQ0lEIEZvbnQgRkRTZWxlY3QgZm9ybWF0IDMgcmFuZ2UgaGFzIGJhZCBpbml0aWFsIEdJRCAnICsgZmlyc3QpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICBmb3IgKHZhciBpUmFuZ2UgPSAwOyBpUmFuZ2UgPCBuUmFuZ2VzOyBpUmFuZ2UrKykge1xuICAgICAgICAgICAgZmRJbmRleCA9IHBhcnNlci5wYXJzZUNhcmQ4KCk7XG4gICAgICAgICAgICBuZXh0ID0gcGFyc2VyLnBhcnNlQ2FyZDE2KCk7XG4gICAgICAgICAgICBpZiAoZmRJbmRleCA+PSBmZEFycmF5Q291bnQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NGRiB0YWJsZSBDSUQgRm9udCBGRFNlbGVjdCBoYXMgYmFkIEZEIGluZGV4IHZhbHVlICcgKyBmZEluZGV4ICsgJyAoRkQgY291bnQgJyArIGZkQXJyYXlDb3VudCArICcpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV4dCA+IG5HbHlwaHMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NGRiBUYWJsZSBDSUQgRm9udCBGRFNlbGVjdCBmb3JtYXQgMyByYW5nZSBoYXMgYmFkIEdJRCAnICsgbmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDsgZmlyc3QgPCBuZXh0OyBmaXJzdCsrKSB7XG4gICAgICAgICAgICAgICAgZmRTZWxlY3QucHVzaChmZEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpcnN0ID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dCAhPT0gbkdseXBocykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDRkYgVGFibGUgQ0lEIEZvbnQgRkRTZWxlY3QgZm9ybWF0IDMgcmFuZ2UgaGFzIGJhZCBmaW5hbCBHSUQgJyArIG5leHQpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDRkYgVGFibGUgQ0lEIEZvbnQgRkRTZWxlY3QgdGFibGUgaGFzIHVuc3VwcG9ydGVkIGZvcm1hdCAnICsgZm9ybWF0KTtcbiAgICB9XG4gICAgcmV0dXJuIGZkU2VsZWN0O1xufVxuXG4vLyBQYXJzZSB0aGUgYENGRmAgdGFibGUsIHdoaWNoIGNvbnRhaW5zIHRoZSBnbHlwaCBvdXRsaW5lcyBpbiBQb3N0U2NyaXB0IGZvcm1hdC5cbmZ1bmN0aW9uIHBhcnNlQ0ZGVGFibGUoZGF0YSwgc3RhcnQsIGZvbnQsIG9wdCkge1xuICAgIGZvbnQudGFibGVzLmNmZiA9IHt9O1xuICAgIHZhciBoZWFkZXIgPSBwYXJzZUNGRkhlYWRlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIG5hbWVJbmRleCA9IHBhcnNlQ0ZGSW5kZXgoZGF0YSwgaGVhZGVyLmVuZE9mZnNldCwgcGFyc2UuYnl0ZXNUb1N0cmluZyk7XG4gICAgdmFyIHRvcERpY3RJbmRleCA9IHBhcnNlQ0ZGSW5kZXgoZGF0YSwgbmFtZUluZGV4LmVuZE9mZnNldCk7XG4gICAgdmFyIHN0cmluZ0luZGV4ID0gcGFyc2VDRkZJbmRleChkYXRhLCB0b3BEaWN0SW5kZXguZW5kT2Zmc2V0LCBwYXJzZS5ieXRlc1RvU3RyaW5nKTtcbiAgICB2YXIgZ2xvYmFsU3VickluZGV4ID0gcGFyc2VDRkZJbmRleChkYXRhLCBzdHJpbmdJbmRleC5lbmRPZmZzZXQpO1xuICAgIGZvbnQuZ3N1YnJzID0gZ2xvYmFsU3VickluZGV4Lm9iamVjdHM7XG4gICAgZm9udC5nc3VicnNCaWFzID0gY2FsY0NGRlN1YnJvdXRpbmVCaWFzKGZvbnQuZ3N1YnJzKTtcblxuICAgIHZhciB0b3BEaWN0QXJyYXkgPSBnYXRoZXJDRkZUb3BEaWN0cyhkYXRhLCBzdGFydCwgdG9wRGljdEluZGV4Lm9iamVjdHMsIHN0cmluZ0luZGV4Lm9iamVjdHMpO1xuICAgIGlmICh0b3BEaWN0QXJyYXkubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ0ZGIHRhYmxlIGhhcyB0b28gbWFueSBmb250cyBpbiBcXCdGb250U2V0XFwnIC0gY291bnQgb2YgZm9udHMgTmFtZUluZGV4Lmxlbmd0aCA9ICcgKyB0b3BEaWN0QXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICB2YXIgdG9wRGljdCA9IHRvcERpY3RBcnJheVswXTtcbiAgICBmb250LnRhYmxlcy5jZmYudG9wRGljdCA9IHRvcERpY3Q7XG5cbiAgICBpZiAodG9wRGljdC5fcHJpdmF0ZURpY3QpIHtcbiAgICAgICAgZm9udC5kZWZhdWx0V2lkdGhYID0gdG9wRGljdC5fcHJpdmF0ZURpY3QuZGVmYXVsdFdpZHRoWDtcbiAgICAgICAgZm9udC5ub21pbmFsV2lkdGhYID0gdG9wRGljdC5fcHJpdmF0ZURpY3Qubm9taW5hbFdpZHRoWDtcbiAgICB9XG5cbiAgICBpZiAodG9wRGljdC5yb3NbMF0gIT09IHVuZGVmaW5lZCAmJiB0b3BEaWN0LnJvc1sxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvbnQuaXNDSURGb250ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZm9udC5pc0NJREZvbnQpIHtcbiAgICAgICAgdmFyIGZkQXJyYXlPZmZzZXQgPSB0b3BEaWN0LmZkQXJyYXk7XG4gICAgICAgIHZhciBmZFNlbGVjdE9mZnNldCA9IHRvcERpY3QuZmRTZWxlY3Q7XG4gICAgICAgIGlmIChmZEFycmF5T2Zmc2V0ID09PSAwIHx8IGZkU2VsZWN0T2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvbnQgaXMgbWFya2VkIGFzIGEgQ0lEIGZvbnQsIGJ1dCBGREFycmF5IGFuZC9vciBGRFNlbGVjdCBpbmZvcm1hdGlvbiBpcyBtaXNzaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgZmRBcnJheU9mZnNldCArPSBzdGFydDtcbiAgICAgICAgdmFyIGZkQXJyYXlJbmRleCA9IHBhcnNlQ0ZGSW5kZXgoZGF0YSwgZmRBcnJheU9mZnNldCk7XG4gICAgICAgIHZhciBmZEFycmF5ID0gZ2F0aGVyQ0ZGVG9wRGljdHMoZGF0YSwgc3RhcnQsIGZkQXJyYXlJbmRleC5vYmplY3RzLCBzdHJpbmdJbmRleC5vYmplY3RzKTtcbiAgICAgICAgdG9wRGljdC5fZmRBcnJheSA9IGZkQXJyYXk7XG4gICAgICAgIGZkU2VsZWN0T2Zmc2V0ICs9IHN0YXJ0O1xuICAgICAgICB0b3BEaWN0Ll9mZFNlbGVjdCA9IHBhcnNlQ0ZGRkRTZWxlY3QoZGF0YSwgZmRTZWxlY3RPZmZzZXQsIGZvbnQubnVtR2x5cGhzLCBmZEFycmF5Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgdmFyIHByaXZhdGVEaWN0T2Zmc2V0ID0gc3RhcnQgKyB0b3BEaWN0LnByaXZhdGVbMV07XG4gICAgdmFyIHByaXZhdGVEaWN0ID0gcGFyc2VDRkZQcml2YXRlRGljdChkYXRhLCBwcml2YXRlRGljdE9mZnNldCwgdG9wRGljdC5wcml2YXRlWzBdLCBzdHJpbmdJbmRleC5vYmplY3RzKTtcbiAgICBmb250LmRlZmF1bHRXaWR0aFggPSBwcml2YXRlRGljdC5kZWZhdWx0V2lkdGhYO1xuICAgIGZvbnQubm9taW5hbFdpZHRoWCA9IHByaXZhdGVEaWN0Lm5vbWluYWxXaWR0aFg7XG5cbiAgICBpZiAocHJpdmF0ZURpY3Quc3VicnMgIT09IDApIHtcbiAgICAgICAgdmFyIHN1YnJPZmZzZXQgPSBwcml2YXRlRGljdE9mZnNldCArIHByaXZhdGVEaWN0LnN1YnJzO1xuICAgICAgICB2YXIgc3VickluZGV4ID0gcGFyc2VDRkZJbmRleChkYXRhLCBzdWJyT2Zmc2V0KTtcbiAgICAgICAgZm9udC5zdWJycyA9IHN1YnJJbmRleC5vYmplY3RzO1xuICAgICAgICBmb250LnN1YnJzQmlhcyA9IGNhbGNDRkZTdWJyb3V0aW5lQmlhcyhmb250LnN1YnJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb250LnN1YnJzID0gW107XG4gICAgICAgIGZvbnQuc3VicnNCaWFzID0gMDtcbiAgICB9XG5cbiAgICAvLyBPZmZzZXRzIGluIHRoZSB0b3AgZGljdCBhcmUgcmVsYXRpdmUgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgQ0ZGIGRhdGEsIHNvIGFkZCB0aGUgQ0ZGIHN0YXJ0IG9mZnNldC5cbiAgICB2YXIgY2hhclN0cmluZ3NJbmRleDtcbiAgICBpZiAob3B0Lmxvd01lbW9yeSkge1xuICAgICAgICBjaGFyU3RyaW5nc0luZGV4ID0gcGFyc2VDRkZJbmRleExvd01lbW9yeShkYXRhLCBzdGFydCArIHRvcERpY3QuY2hhclN0cmluZ3MpO1xuICAgICAgICBmb250Lm5HbHlwaHMgPSBjaGFyU3RyaW5nc0luZGV4Lm9mZnNldHMubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYXJTdHJpbmdzSW5kZXggPSBwYXJzZUNGRkluZGV4KGRhdGEsIHN0YXJ0ICsgdG9wRGljdC5jaGFyU3RyaW5ncyk7XG4gICAgICAgIGZvbnQubkdseXBocyA9IGNoYXJTdHJpbmdzSW5kZXgub2JqZWN0cy5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIGNoYXJzZXQgPSBwYXJzZUNGRkNoYXJzZXQoZGF0YSwgc3RhcnQgKyB0b3BEaWN0LmNoYXJzZXQsIGZvbnQubkdseXBocywgc3RyaW5nSW5kZXgub2JqZWN0cyk7XG4gICAgaWYgKHRvcERpY3QuZW5jb2RpbmcgPT09IDApIHtcbiAgICAgICAgLy8gU3RhbmRhcmQgZW5jb2RpbmdcbiAgICAgICAgZm9udC5jZmZFbmNvZGluZyA9IG5ldyBDZmZFbmNvZGluZyhjZmZTdGFuZGFyZEVuY29kaW5nLCBjaGFyc2V0KTtcbiAgICB9IGVsc2UgaWYgKHRvcERpY3QuZW5jb2RpbmcgPT09IDEpIHtcbiAgICAgICAgLy8gRXhwZXJ0IGVuY29kaW5nXG4gICAgICAgIGZvbnQuY2ZmRW5jb2RpbmcgPSBuZXcgQ2ZmRW5jb2RpbmcoY2ZmRXhwZXJ0RW5jb2RpbmcsIGNoYXJzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvbnQuY2ZmRW5jb2RpbmcgPSBwYXJzZUNGRkVuY29kaW5nKGRhdGEsIHN0YXJ0ICsgdG9wRGljdC5lbmNvZGluZywgY2hhcnNldCk7XG4gICAgfVxuXG4gICAgLy8gUHJlZmVyIHRoZSBDTUFQIGVuY29kaW5nIHRvIHRoZSBDRkYgZW5jb2RpbmcuXG4gICAgZm9udC5lbmNvZGluZyA9IGZvbnQuZW5jb2RpbmcgfHwgZm9udC5jZmZFbmNvZGluZztcblxuICAgIGZvbnQuZ2x5cGhzID0gbmV3IGdseXBoc2V0LkdseXBoU2V0KGZvbnQpO1xuICAgIGlmIChvcHQubG93TWVtb3J5KSB7XG4gICAgICAgIGZvbnQuX3B1c2ggPSBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICB2YXIgY2hhclN0cmluZyA9IGdldENmZkluZGV4T2JqZWN0KGksIGNoYXJTdHJpbmdzSW5kZXgub2Zmc2V0cywgZGF0YSwgc3RhcnQgKyB0b3BEaWN0LmNoYXJTdHJpbmdzKTtcbiAgICAgICAgICAgIGZvbnQuZ2x5cGhzLnB1c2goaSwgZ2x5cGhzZXQuY2ZmR2x5cGhMb2FkZXIoZm9udCwgaSwgcGFyc2VDRkZDaGFyc3RyaW5nLCBjaGFyU3RyaW5nKSk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb250Lm5HbHlwaHM7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGNoYXJTdHJpbmcgPSBjaGFyU3RyaW5nc0luZGV4Lm9iamVjdHNbaV07XG4gICAgICAgICAgICBmb250LmdseXBocy5wdXNoKGksIGdseXBoc2V0LmNmZkdseXBoTG9hZGVyKGZvbnQsIGksIHBhcnNlQ0ZGQ2hhcnN0cmluZywgY2hhclN0cmluZykpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBDb252ZXJ0IGEgc3RyaW5nIHRvIGEgU3RyaW5nIElEIChTSUQpLlxuLy8gVGhlIGxpc3Qgb2Ygc3RyaW5ncyBpcyBtb2RpZmllZCBpbiBwbGFjZS5cbmZ1bmN0aW9uIGVuY29kZVN0cmluZyhzLCBzdHJpbmdzKSB7XG4gICAgdmFyIHNpZDtcblxuICAgIC8vIElzIHRoZSBzdHJpbmcgaW4gdGhlIENGRiBzdGFuZGFyZCBzdHJpbmdzP1xuICAgIHZhciBpID0gY2ZmU3RhbmRhcmRTdHJpbmdzLmluZGV4T2Yocyk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgICBzaWQgPSBpO1xuICAgIH1cblxuICAgIC8vIElzIHRoZSBzdHJpbmcgYWxyZWFkeSBpbiB0aGUgc3RyaW5nIGluZGV4P1xuICAgIGkgPSBzdHJpbmdzLmluZGV4T2Yocyk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgICBzaWQgPSBpICsgY2ZmU3RhbmRhcmRTdHJpbmdzLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzaWQgPSBjZmZTdGFuZGFyZFN0cmluZ3MubGVuZ3RoICsgc3RyaW5ncy5sZW5ndGg7XG4gICAgICAgIHN0cmluZ3MucHVzaChzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2lkO1xufVxuXG5mdW5jdGlvbiBtYWtlSGVhZGVyKCkge1xuICAgIHJldHVybiBuZXcgdGFibGUuUmVjb3JkKCdIZWFkZXInLCBbXG4gICAgICAgIHtuYW1lOiAnbWFqb3InLCB0eXBlOiAnQ2FyZDgnLCB2YWx1ZTogMX0sXG4gICAgICAgIHtuYW1lOiAnbWlub3InLCB0eXBlOiAnQ2FyZDgnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnaGRyU2l6ZScsIHR5cGU6ICdDYXJkOCcsIHZhbHVlOiA0fSxcbiAgICAgICAge25hbWU6ICdtYWpvcicsIHR5cGU6ICdDYXJkOCcsIHZhbHVlOiAxfVxuICAgIF0pO1xufVxuXG5mdW5jdGlvbiBtYWtlTmFtZUluZGV4KGZvbnROYW1lcykge1xuICAgIHZhciB0ID0gbmV3IHRhYmxlLlJlY29yZCgnTmFtZSBJTkRFWCcsIFtcbiAgICAgICAge25hbWU6ICduYW1lcycsIHR5cGU6ICdJTkRFWCcsIHZhbHVlOiBbXX1cbiAgICBdKTtcbiAgICB0Lm5hbWVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb250TmFtZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdC5uYW1lcy5wdXNoKHtuYW1lOiAnbmFtZV8nICsgaSwgdHlwZTogJ05BTUUnLCB2YWx1ZTogZm9udE5hbWVzW2ldfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG59XG5cbi8vIEdpdmVuIGEgZGljdGlvbmFyeSdzIG1ldGFkYXRhLCBjcmVhdGUgYSBESUNUIHN0cnVjdHVyZS5cbmZ1bmN0aW9uIG1ha2VEaWN0KG1ldGEsIGF0dHJzLCBzdHJpbmdzKSB7XG4gICAgdmFyIG0gPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1ldGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gbWV0YVtpXTtcbiAgICAgICAgdmFyIHZhbHVlID0gYXR0cnNbZW50cnkubmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcXVhbHModmFsdWUsIGVudHJ5LnZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKGVudHJ5LnR5cGUgPT09ICdTSUQnKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBlbmNvZGVTdHJpbmcodmFsdWUsIHN0cmluZ3MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtW2VudHJ5Lm9wXSA9IHtuYW1lOiBlbnRyeS5uYW1lLCB0eXBlOiBlbnRyeS50eXBlLCB2YWx1ZTogdmFsdWV9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG07XG59XG5cbi8vIFRoZSBUb3AgRElDVCBob3VzZXMgdGhlIGdsb2JhbCBmb250IGF0dHJpYnV0ZXMuXG5mdW5jdGlvbiBtYWtlVG9wRGljdChhdHRycywgc3RyaW5ncykge1xuICAgIHZhciB0ID0gbmV3IHRhYmxlLlJlY29yZCgnVG9wIERJQ1QnLCBbXG4gICAgICAgIHtuYW1lOiAnZGljdCcsIHR5cGU6ICdESUNUJywgdmFsdWU6IHt9fVxuICAgIF0pO1xuICAgIHQuZGljdCA9IG1ha2VEaWN0KFRPUF9ESUNUX01FVEEsIGF0dHJzLCBzdHJpbmdzKTtcbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gbWFrZVRvcERpY3RJbmRleCh0b3BEaWN0KSB7XG4gICAgdmFyIHQgPSBuZXcgdGFibGUuUmVjb3JkKCdUb3AgRElDVCBJTkRFWCcsIFtcbiAgICAgICAge25hbWU6ICd0b3BEaWN0cycsIHR5cGU6ICdJTkRFWCcsIHZhbHVlOiBbXX1cbiAgICBdKTtcbiAgICB0LnRvcERpY3RzID0gW3tuYW1lOiAndG9wRGljdF8wJywgdHlwZTogJ1RBQkxFJywgdmFsdWU6IHRvcERpY3R9XTtcbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gbWFrZVN0cmluZ0luZGV4KHN0cmluZ3MpIHtcbiAgICB2YXIgdCA9IG5ldyB0YWJsZS5SZWNvcmQoJ1N0cmluZyBJTkRFWCcsIFtcbiAgICAgICAge25hbWU6ICdzdHJpbmdzJywgdHlwZTogJ0lOREVYJywgdmFsdWU6IFtdfVxuICAgIF0pO1xuICAgIHQuc3RyaW5ncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0LnN0cmluZ3MucHVzaCh7bmFtZTogJ3N0cmluZ18nICsgaSwgdHlwZTogJ1NUUklORycsIHZhbHVlOiBzdHJpbmdzW2ldfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIG1ha2VHbG9iYWxTdWJySW5kZXgoKSB7XG4gICAgLy8gQ3VycmVudGx5IHdlIGRvbid0IHVzZSBzdWJyb3V0aW5lcy5cbiAgICByZXR1cm4gbmV3IHRhYmxlLlJlY29yZCgnR2xvYmFsIFN1YnIgSU5ERVgnLCBbXG4gICAgICAgIHtuYW1lOiAnc3VicnMnLCB0eXBlOiAnSU5ERVgnLCB2YWx1ZTogW119XG4gICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VDaGFyc2V0cyhnbHlwaE5hbWVzLCBzdHJpbmdzKSB7XG4gICAgdmFyIHQgPSBuZXcgdGFibGUuUmVjb3JkKCdDaGFyc2V0cycsIFtcbiAgICAgICAge25hbWU6ICdmb3JtYXQnLCB0eXBlOiAnQ2FyZDgnLCB2YWx1ZTogMH1cbiAgICBdKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdseXBoTmFtZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGdseXBoTmFtZSA9IGdseXBoTmFtZXNbaV07XG4gICAgICAgIHZhciBnbHlwaFNJRCA9IGVuY29kZVN0cmluZyhnbHlwaE5hbWUsIHN0cmluZ3MpO1xuICAgICAgICB0LmZpZWxkcy5wdXNoKHtuYW1lOiAnZ2x5cGhfJyArIGksIHR5cGU6ICdTSUQnLCB2YWx1ZTogZ2x5cGhTSUR9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gZ2x5cGhUb09wcyhnbHlwaCkge1xuICAgIHZhciBvcHMgPSBbXTtcbiAgICB2YXIgcGF0aCA9IGdseXBoLnBhdGg7XG4gICAgb3BzLnB1c2goe25hbWU6ICd3aWR0aCcsIHR5cGU6ICdOVU1CRVInLCB2YWx1ZTogZ2x5cGguYWR2YW5jZVdpZHRofSk7XG4gICAgdmFyIHggPSAwO1xuICAgIHZhciB5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGguY29tbWFuZHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGR4ID0gKHZvaWQgMCk7XG4gICAgICAgIHZhciBkeSA9ICh2b2lkIDApO1xuICAgICAgICB2YXIgY21kID0gcGF0aC5jb21tYW5kc1tpXTtcbiAgICAgICAgaWYgKGNtZC50eXBlID09PSAnUScpIHtcbiAgICAgICAgICAgIC8vIENGRiBvbmx5IHN1cHBvcnRzIGLDqXppZXIgY3VydmVzLCBzbyBjb252ZXJ0IHRoZSBxdWFkIHRvIGEgYsOpemllci5cbiAgICAgICAgICAgIHZhciBfMTMgPSAxIC8gMztcbiAgICAgICAgICAgIHZhciBfMjMgPSAyIC8gMztcblxuICAgICAgICAgICAgLy8gV2UncmUgZ29pbmcgdG8gY3JlYXRlIGEgbmV3IGNvbW1hbmQgc28gd2UgZG9uJ3QgY2hhbmdlIHRoZSBvcmlnaW5hbCBwYXRoLlxuICAgICAgICAgICAgLy8gU2luY2UgYWxsIGNvb3JkaW5hdGVzIGFyZSByZWxhdGl2ZSwgd2Ugcm91bmQoKSB0aGVtIEFTQVAgdG8gYXZvaWQgcHJvcGFnYXRpbmcgZXJyb3JzLlxuICAgICAgICAgICAgY21kID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdDJyxcbiAgICAgICAgICAgICAgICB4OiBjbWQueCxcbiAgICAgICAgICAgICAgICB5OiBjbWQueSxcbiAgICAgICAgICAgICAgICB4MTogTWF0aC5yb3VuZChfMTMgKiB4ICsgXzIzICogY21kLngxKSxcbiAgICAgICAgICAgICAgICB5MTogTWF0aC5yb3VuZChfMTMgKiB5ICsgXzIzICogY21kLnkxKSxcbiAgICAgICAgICAgICAgICB4MjogTWF0aC5yb3VuZChfMTMgKiBjbWQueCArIF8yMyAqIGNtZC54MSksXG4gICAgICAgICAgICAgICAgeTI6IE1hdGgucm91bmQoXzEzICogY21kLnkgKyBfMjMgKiBjbWQueTEpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNtZC50eXBlID09PSAnTScpIHtcbiAgICAgICAgICAgIGR4ID0gTWF0aC5yb3VuZChjbWQueCAtIHgpO1xuICAgICAgICAgICAgZHkgPSBNYXRoLnJvdW5kKGNtZC55IC0geSk7XG4gICAgICAgICAgICBvcHMucHVzaCh7bmFtZTogJ2R4JywgdHlwZTogJ05VTUJFUicsIHZhbHVlOiBkeH0pO1xuICAgICAgICAgICAgb3BzLnB1c2goe25hbWU6ICdkeScsIHR5cGU6ICdOVU1CRVInLCB2YWx1ZTogZHl9KTtcbiAgICAgICAgICAgIG9wcy5wdXNoKHtuYW1lOiAncm1vdmV0bycsIHR5cGU6ICdPUCcsIHZhbHVlOiAyMX0pO1xuICAgICAgICAgICAgeCA9IE1hdGgucm91bmQoY21kLngpO1xuICAgICAgICAgICAgeSA9IE1hdGgucm91bmQoY21kLnkpO1xuICAgICAgICB9IGVsc2UgaWYgKGNtZC50eXBlID09PSAnTCcpIHtcbiAgICAgICAgICAgIGR4ID0gTWF0aC5yb3VuZChjbWQueCAtIHgpO1xuICAgICAgICAgICAgZHkgPSBNYXRoLnJvdW5kKGNtZC55IC0geSk7XG4gICAgICAgICAgICBvcHMucHVzaCh7bmFtZTogJ2R4JywgdHlwZTogJ05VTUJFUicsIHZhbHVlOiBkeH0pO1xuICAgICAgICAgICAgb3BzLnB1c2goe25hbWU6ICdkeScsIHR5cGU6ICdOVU1CRVInLCB2YWx1ZTogZHl9KTtcbiAgICAgICAgICAgIG9wcy5wdXNoKHtuYW1lOiAncmxpbmV0bycsIHR5cGU6ICdPUCcsIHZhbHVlOiA1fSk7XG4gICAgICAgICAgICB4ID0gTWF0aC5yb3VuZChjbWQueCk7XG4gICAgICAgICAgICB5ID0gTWF0aC5yb3VuZChjbWQueSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21kLnR5cGUgPT09ICdDJykge1xuICAgICAgICAgICAgdmFyIGR4MSA9IE1hdGgucm91bmQoY21kLngxIC0geCk7XG4gICAgICAgICAgICB2YXIgZHkxID0gTWF0aC5yb3VuZChjbWQueTEgLSB5KTtcbiAgICAgICAgICAgIHZhciBkeDIgPSBNYXRoLnJvdW5kKGNtZC54MiAtIGNtZC54MSk7XG4gICAgICAgICAgICB2YXIgZHkyID0gTWF0aC5yb3VuZChjbWQueTIgLSBjbWQueTEpO1xuICAgICAgICAgICAgZHggPSBNYXRoLnJvdW5kKGNtZC54IC0gY21kLngyKTtcbiAgICAgICAgICAgIGR5ID0gTWF0aC5yb3VuZChjbWQueSAtIGNtZC55Mik7XG4gICAgICAgICAgICBvcHMucHVzaCh7bmFtZTogJ2R4MScsIHR5cGU6ICdOVU1CRVInLCB2YWx1ZTogZHgxfSk7XG4gICAgICAgICAgICBvcHMucHVzaCh7bmFtZTogJ2R5MScsIHR5cGU6ICdOVU1CRVInLCB2YWx1ZTogZHkxfSk7XG4gICAgICAgICAgICBvcHMucHVzaCh7bmFtZTogJ2R4MicsIHR5cGU6ICdOVU1CRVInLCB2YWx1ZTogZHgyfSk7XG4gICAgICAgICAgICBvcHMucHVzaCh7bmFtZTogJ2R5MicsIHR5cGU6ICdOVU1CRVInLCB2YWx1ZTogZHkyfSk7XG4gICAgICAgICAgICBvcHMucHVzaCh7bmFtZTogJ2R4JywgdHlwZTogJ05VTUJFUicsIHZhbHVlOiBkeH0pO1xuICAgICAgICAgICAgb3BzLnB1c2goe25hbWU6ICdkeScsIHR5cGU6ICdOVU1CRVInLCB2YWx1ZTogZHl9KTtcbiAgICAgICAgICAgIG9wcy5wdXNoKHtuYW1lOiAncnJjdXJ2ZXRvJywgdHlwZTogJ09QJywgdmFsdWU6IDh9KTtcbiAgICAgICAgICAgIHggPSBNYXRoLnJvdW5kKGNtZC54KTtcbiAgICAgICAgICAgIHkgPSBNYXRoLnJvdW5kKGNtZC55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnRvdXJzIGFyZSBjbG9zZWQgYXV0b21hdGljYWxseS5cbiAgICB9XG5cbiAgICBvcHMucHVzaCh7bmFtZTogJ2VuZGNoYXInLCB0eXBlOiAnT1AnLCB2YWx1ZTogMTR9KTtcbiAgICByZXR1cm4gb3BzO1xufVxuXG5mdW5jdGlvbiBtYWtlQ2hhclN0cmluZ3NJbmRleChnbHlwaHMpIHtcbiAgICB2YXIgdCA9IG5ldyB0YWJsZS5SZWNvcmQoJ0NoYXJTdHJpbmdzIElOREVYJywgW1xuICAgICAgICB7bmFtZTogJ2NoYXJTdHJpbmdzJywgdHlwZTogJ0lOREVYJywgdmFsdWU6IFtdfVxuICAgIF0pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGdseXBoID0gZ2x5cGhzLmdldChpKTtcbiAgICAgICAgdmFyIG9wcyA9IGdseXBoVG9PcHMoZ2x5cGgpO1xuICAgICAgICB0LmNoYXJTdHJpbmdzLnB1c2goe25hbWU6IGdseXBoLm5hbWUsIHR5cGU6ICdDSEFSU1RSSU5HJywgdmFsdWU6IG9wc30pO1xuICAgIH1cblxuICAgIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBtYWtlUHJpdmF0ZURpY3QoYXR0cnMsIHN0cmluZ3MpIHtcbiAgICB2YXIgdCA9IG5ldyB0YWJsZS5SZWNvcmQoJ1ByaXZhdGUgRElDVCcsIFtcbiAgICAgICAge25hbWU6ICdkaWN0JywgdHlwZTogJ0RJQ1QnLCB2YWx1ZToge319XG4gICAgXSk7XG4gICAgdC5kaWN0ID0gbWFrZURpY3QoUFJJVkFURV9ESUNUX01FVEEsIGF0dHJzLCBzdHJpbmdzKTtcbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gbWFrZUNGRlRhYmxlKGdseXBocywgb3B0aW9ucykge1xuICAgIHZhciB0ID0gbmV3IHRhYmxlLlRhYmxlKCdDRkYgJywgW1xuICAgICAgICB7bmFtZTogJ2hlYWRlcicsIHR5cGU6ICdSRUNPUkQnfSxcbiAgICAgICAge25hbWU6ICduYW1lSW5kZXgnLCB0eXBlOiAnUkVDT1JEJ30sXG4gICAgICAgIHtuYW1lOiAndG9wRGljdEluZGV4JywgdHlwZTogJ1JFQ09SRCd9LFxuICAgICAgICB7bmFtZTogJ3N0cmluZ0luZGV4JywgdHlwZTogJ1JFQ09SRCd9LFxuICAgICAgICB7bmFtZTogJ2dsb2JhbFN1YnJJbmRleCcsIHR5cGU6ICdSRUNPUkQnfSxcbiAgICAgICAge25hbWU6ICdjaGFyc2V0cycsIHR5cGU6ICdSRUNPUkQnfSxcbiAgICAgICAge25hbWU6ICdjaGFyU3RyaW5nc0luZGV4JywgdHlwZTogJ1JFQ09SRCd9LFxuICAgICAgICB7bmFtZTogJ3ByaXZhdGVEaWN0JywgdHlwZTogJ1JFQ09SRCd9XG4gICAgXSk7XG5cbiAgICB2YXIgZm9udFNjYWxlID0gMSAvIG9wdGlvbnMudW5pdHNQZXJFbTtcbiAgICAvLyBXZSB1c2Ugbm9uLXplcm8gdmFsdWVzIGZvciB0aGUgb2Zmc2V0cyBzbyB0aGF0IHRoZSBESUNUIGVuY29kZXMgdGhlbS5cbiAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBiZWNhdXNlIHRoZSBzaXplIG9mIHRoZSBUb3AgRElDVCBwbGF5cyBhIHJvbGUgaW4gb2Zmc2V0IGNhbGN1bGF0aW9uLFxuICAgIC8vIGFuZCB0aGUgc2l6ZSBzaG91bGRuJ3QgY2hhbmdlIGFmdGVyIHdlJ3ZlIHdyaXR0ZW4gY29ycmVjdCBvZmZzZXRzLlxuICAgIHZhciBhdHRycyA9IHtcbiAgICAgICAgdmVyc2lvbjogb3B0aW9ucy52ZXJzaW9uLFxuICAgICAgICBmdWxsTmFtZTogb3B0aW9ucy5mdWxsTmFtZSxcbiAgICAgICAgZmFtaWx5TmFtZTogb3B0aW9ucy5mYW1pbHlOYW1lLFxuICAgICAgICB3ZWlnaHQ6IG9wdGlvbnMud2VpZ2h0TmFtZSxcbiAgICAgICAgZm9udEJCb3g6IG9wdGlvbnMuZm9udEJCb3ggfHwgWzAsIDAsIDAsIDBdLFxuICAgICAgICBmb250TWF0cml4OiBbZm9udFNjYWxlLCAwLCAwLCBmb250U2NhbGUsIDAsIDBdLFxuICAgICAgICBjaGFyc2V0OiA5OTksXG4gICAgICAgIGVuY29kaW5nOiAwLFxuICAgICAgICBjaGFyU3RyaW5nczogOTk5LFxuICAgICAgICBwcml2YXRlOiBbMCwgOTk5XVxuICAgIH07XG5cbiAgICB2YXIgcHJpdmF0ZUF0dHJzID0ge307XG5cbiAgICB2YXIgZ2x5cGhOYW1lcyA9IFtdO1xuICAgIHZhciBnbHlwaDtcblxuICAgIC8vIFNraXAgZmlyc3QgZ2x5cGggKC5ub3RkZWYpXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBnbHlwaHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZ2x5cGggPSBnbHlwaHMuZ2V0KGkpO1xuICAgICAgICBnbHlwaE5hbWVzLnB1c2goZ2x5cGgubmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZ3MgPSBbXTtcblxuICAgIHQuaGVhZGVyID0gbWFrZUhlYWRlcigpO1xuICAgIHQubmFtZUluZGV4ID0gbWFrZU5hbWVJbmRleChbb3B0aW9ucy5wb3N0U2NyaXB0TmFtZV0pO1xuICAgIHZhciB0b3BEaWN0ID0gbWFrZVRvcERpY3QoYXR0cnMsIHN0cmluZ3MpO1xuICAgIHQudG9wRGljdEluZGV4ID0gbWFrZVRvcERpY3RJbmRleCh0b3BEaWN0KTtcbiAgICB0Lmdsb2JhbFN1YnJJbmRleCA9IG1ha2VHbG9iYWxTdWJySW5kZXgoKTtcbiAgICB0LmNoYXJzZXRzID0gbWFrZUNoYXJzZXRzKGdseXBoTmFtZXMsIHN0cmluZ3MpO1xuICAgIHQuY2hhclN0cmluZ3NJbmRleCA9IG1ha2VDaGFyU3RyaW5nc0luZGV4KGdseXBocyk7XG4gICAgdC5wcml2YXRlRGljdCA9IG1ha2VQcml2YXRlRGljdChwcml2YXRlQXR0cnMsIHN0cmluZ3MpO1xuXG4gICAgLy8gTmVlZHMgdG8gY29tZSBhdCB0aGUgZW5kLCB0byBlbmNvZGUgYWxsIGN1c3RvbSBzdHJpbmdzIHVzZWQgaW4gdGhlIGZvbnQuXG4gICAgdC5zdHJpbmdJbmRleCA9IG1ha2VTdHJpbmdJbmRleChzdHJpbmdzKTtcblxuICAgIHZhciBzdGFydE9mZnNldCA9IHQuaGVhZGVyLnNpemVPZigpICtcbiAgICAgICAgdC5uYW1lSW5kZXguc2l6ZU9mKCkgK1xuICAgICAgICB0LnRvcERpY3RJbmRleC5zaXplT2YoKSArXG4gICAgICAgIHQuc3RyaW5nSW5kZXguc2l6ZU9mKCkgK1xuICAgICAgICB0Lmdsb2JhbFN1YnJJbmRleC5zaXplT2YoKTtcbiAgICBhdHRycy5jaGFyc2V0ID0gc3RhcnRPZmZzZXQ7XG5cbiAgICAvLyBXZSB1c2UgdGhlIENGRiBzdGFuZGFyZCBlbmNvZGluZzsgcHJvcGVyIGVuY29kaW5nIHdpbGwgYmUgaGFuZGxlZCBpbiBjbWFwLlxuICAgIGF0dHJzLmVuY29kaW5nID0gMDtcbiAgICBhdHRycy5jaGFyU3RyaW5ncyA9IGF0dHJzLmNoYXJzZXQgKyB0LmNoYXJzZXRzLnNpemVPZigpO1xuICAgIGF0dHJzLnByaXZhdGVbMV0gPSBhdHRycy5jaGFyU3RyaW5ncyArIHQuY2hhclN0cmluZ3NJbmRleC5zaXplT2YoKTtcblxuICAgIC8vIFJlY3JlYXRlIHRoZSBUb3AgRElDVCBJTkRFWCB3aXRoIHRoZSBjb3JyZWN0IG9mZnNldHMuXG4gICAgdG9wRGljdCA9IG1ha2VUb3BEaWN0KGF0dHJzLCBzdHJpbmdzKTtcbiAgICB0LnRvcERpY3RJbmRleCA9IG1ha2VUb3BEaWN0SW5kZXgodG9wRGljdCk7XG5cbiAgICByZXR1cm4gdDtcbn1cblxudmFyIGNmZiA9IHsgcGFyc2U6IHBhcnNlQ0ZGVGFibGUsIG1ha2U6IG1ha2VDRkZUYWJsZSB9O1xuXG4vLyBUaGUgYGhlYWRgIHRhYmxlIGNvbnRhaW5zIGdsb2JhbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZm9udC5cblxuLy8gUGFyc2UgdGhlIGhlYWRlciBgaGVhZGAgdGFibGVcbmZ1bmN0aW9uIHBhcnNlSGVhZFRhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgdmFyIGhlYWQgPSB7fTtcbiAgICB2YXIgcCA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuICAgIGhlYWQudmVyc2lvbiA9IHAucGFyc2VWZXJzaW9uKCk7XG4gICAgaGVhZC5mb250UmV2aXNpb24gPSBNYXRoLnJvdW5kKHAucGFyc2VGaXhlZCgpICogMTAwMCkgLyAxMDAwO1xuICAgIGhlYWQuY2hlY2tTdW1BZGp1c3RtZW50ID0gcC5wYXJzZVVMb25nKCk7XG4gICAgaGVhZC5tYWdpY051bWJlciA9IHAucGFyc2VVTG9uZygpO1xuICAgIGNoZWNrLmFyZ3VtZW50KGhlYWQubWFnaWNOdW1iZXIgPT09IDB4NUYwRjNDRjUsICdGb250IGhlYWRlciBoYXMgd3JvbmcgbWFnaWMgbnVtYmVyLicpO1xuICAgIGhlYWQuZmxhZ3MgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgaGVhZC51bml0c1BlckVtID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIGhlYWQuY3JlYXRlZCA9IHAucGFyc2VMb25nRGF0ZVRpbWUoKTtcbiAgICBoZWFkLm1vZGlmaWVkID0gcC5wYXJzZUxvbmdEYXRlVGltZSgpO1xuICAgIGhlYWQueE1pbiA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhlYWQueU1pbiA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhlYWQueE1heCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhlYWQueU1heCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhlYWQubWFjU3R5bGUgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgaGVhZC5sb3dlc3RSZWNQUEVNID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIGhlYWQuZm9udERpcmVjdGlvbkhpbnQgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBoZWFkLmluZGV4VG9Mb2NGb3JtYXQgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBoZWFkLmdseXBoRGF0YUZvcm1hdCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIHJldHVybiBoZWFkO1xufVxuXG5mdW5jdGlvbiBtYWtlSGVhZFRhYmxlKG9wdGlvbnMpIHtcbiAgICAvLyBBcHBsZSBNYWMgdGltZXN0YW1wIGVwb2NoIGlzIDAxLzAxLzE5MDQgbm90IDAxLzAxLzE5NzBcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5yb3VuZChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApICsgMjA4Mjg0NDgwMDtcbiAgICB2YXIgY3JlYXRlZFRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcblxuICAgIGlmIChvcHRpb25zLmNyZWF0ZWRUaW1lc3RhbXApIHtcbiAgICAgICAgY3JlYXRlZFRpbWVzdGFtcCA9IG9wdGlvbnMuY3JlYXRlZFRpbWVzdGFtcCArIDIwODI4NDQ4MDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyB0YWJsZS5UYWJsZSgnaGVhZCcsIFtcbiAgICAgICAge25hbWU6ICd2ZXJzaW9uJywgdHlwZTogJ0ZJWEVEJywgdmFsdWU6IDB4MDAwMTAwMDB9LFxuICAgICAgICB7bmFtZTogJ2ZvbnRSZXZpc2lvbicsIHR5cGU6ICdGSVhFRCcsIHZhbHVlOiAweDAwMDEwMDAwfSxcbiAgICAgICAge25hbWU6ICdjaGVja1N1bUFkanVzdG1lbnQnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnbWFnaWNOdW1iZXInLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMHg1RjBGM0NGNX0sXG4gICAgICAgIHtuYW1lOiAnZmxhZ3MnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VuaXRzUGVyRW0nLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDEwMDB9LFxuICAgICAgICB7bmFtZTogJ2NyZWF0ZWQnLCB0eXBlOiAnTE9OR0RBVEVUSU1FJywgdmFsdWU6IGNyZWF0ZWRUaW1lc3RhbXB9LFxuICAgICAgICB7bmFtZTogJ21vZGlmaWVkJywgdHlwZTogJ0xPTkdEQVRFVElNRScsIHZhbHVlOiB0aW1lc3RhbXB9LFxuICAgICAgICB7bmFtZTogJ3hNaW4nLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAneU1pbicsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd4TWF4JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3lNYXgnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnbWFjU3R5bGUnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2xvd2VzdFJlY1BQRU0nLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2ZvbnREaXJlY3Rpb25IaW50JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDJ9LFxuICAgICAgICB7bmFtZTogJ2luZGV4VG9Mb2NGb3JtYXQnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnZ2x5cGhEYXRhRm9ybWF0JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9XG4gICAgXSwgb3B0aW9ucyk7XG59XG5cbnZhciBoZWFkID0geyBwYXJzZTogcGFyc2VIZWFkVGFibGUsIG1ha2U6IG1ha2VIZWFkVGFibGUgfTtcblxuLy8gVGhlIGBoaGVhYCB0YWJsZSBjb250YWlucyBpbmZvcm1hdGlvbiBmb3IgaG9yaXpvbnRhbCBsYXlvdXQuXG5cbi8vIFBhcnNlIHRoZSBob3Jpem9udGFsIGhlYWRlciBgaGhlYWAgdGFibGVcbmZ1bmN0aW9uIHBhcnNlSGhlYVRhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgdmFyIGhoZWEgPSB7fTtcbiAgICB2YXIgcCA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuICAgIGhoZWEudmVyc2lvbiA9IHAucGFyc2VWZXJzaW9uKCk7XG4gICAgaGhlYS5hc2NlbmRlciA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGhoZWEuZGVzY2VuZGVyID0gcC5wYXJzZVNob3J0KCk7XG4gICAgaGhlYS5saW5lR2FwID0gcC5wYXJzZVNob3J0KCk7XG4gICAgaGhlYS5hZHZhbmNlV2lkdGhNYXggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgaGhlYS5taW5MZWZ0U2lkZUJlYXJpbmcgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBoaGVhLm1pblJpZ2h0U2lkZUJlYXJpbmcgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBoaGVhLnhNYXhFeHRlbnQgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBoaGVhLmNhcmV0U2xvcGVSaXNlID0gcC5wYXJzZVNob3J0KCk7XG4gICAgaGhlYS5jYXJldFNsb3BlUnVuID0gcC5wYXJzZVNob3J0KCk7XG4gICAgaGhlYS5jYXJldE9mZnNldCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIHAucmVsYXRpdmVPZmZzZXQgKz0gODtcbiAgICBoaGVhLm1ldHJpY0RhdGFGb3JtYXQgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBoaGVhLm51bWJlck9mSE1ldHJpY3MgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgcmV0dXJuIGhoZWE7XG59XG5cbmZ1bmN0aW9uIG1ha2VIaGVhVGFibGUob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgdGFibGUuVGFibGUoJ2hoZWEnLCBbXG4gICAgICAgIHtuYW1lOiAndmVyc2lvbicsIHR5cGU6ICdGSVhFRCcsIHZhbHVlOiAweDAwMDEwMDAwfSxcbiAgICAgICAge25hbWU6ICdhc2NlbmRlcicsIHR5cGU6ICdGV09SRCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdkZXNjZW5kZXInLCB0eXBlOiAnRldPUkQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnbGluZUdhcCcsIHR5cGU6ICdGV09SRCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdhZHZhbmNlV2lkdGhNYXgnLCB0eXBlOiAnVUZXT1JEJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ21pbkxlZnRTaWRlQmVhcmluZycsIHR5cGU6ICdGV09SRCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdtaW5SaWdodFNpZGVCZWFyaW5nJywgdHlwZTogJ0ZXT1JEJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3hNYXhFeHRlbnQnLCB0eXBlOiAnRldPUkQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnY2FyZXRTbG9wZVJpc2UnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMX0sXG4gICAgICAgIHtuYW1lOiAnY2FyZXRTbG9wZVJ1bicsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdjYXJldE9mZnNldCcsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdyZXNlcnZlZDEnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAncmVzZXJ2ZWQyJywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3Jlc2VydmVkMycsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdyZXNlcnZlZDQnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnbWV0cmljRGF0YUZvcm1hdCcsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdudW1iZXJPZkhNZXRyaWNzJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfVxuICAgIF0sIG9wdGlvbnMpO1xufVxuXG52YXIgaGhlYSA9IHsgcGFyc2U6IHBhcnNlSGhlYVRhYmxlLCBtYWtlOiBtYWtlSGhlYVRhYmxlIH07XG5cbi8vIFRoZSBgaG10eGAgdGFibGUgY29udGFpbnMgdGhlIGhvcml6b250YWwgbWV0cmljcyBmb3IgYWxsIGdseXBocy5cblxuZnVuY3Rpb24gcGFyc2VIbXR4VGFibGVBbGwoZGF0YSwgc3RhcnQsIG51bU1ldHJpY3MsIG51bUdseXBocywgZ2x5cGhzKSB7XG4gICAgdmFyIGFkdmFuY2VXaWR0aDtcbiAgICB2YXIgbGVmdFNpZGVCZWFyaW5nO1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1HbHlwaHM7IGkgKz0gMSkge1xuICAgICAgICAvLyBJZiB0aGUgZm9udCBpcyBtb25vc3BhY2VkLCBvbmx5IG9uZSBlbnRyeSBpcyBuZWVkZWQuIFRoaXMgbGFzdCBlbnRyeSBhcHBsaWVzIHRvIGFsbCBzdWJzZXF1ZW50IGdseXBocy5cbiAgICAgICAgaWYgKGkgPCBudW1NZXRyaWNzKSB7XG4gICAgICAgICAgICBhZHZhbmNlV2lkdGggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgICAgICBsZWZ0U2lkZUJlYXJpbmcgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBnbHlwaCA9IGdseXBocy5nZXQoaSk7XG4gICAgICAgIGdseXBoLmFkdmFuY2VXaWR0aCA9IGFkdmFuY2VXaWR0aDtcbiAgICAgICAgZ2x5cGgubGVmdFNpZGVCZWFyaW5nID0gbGVmdFNpZGVCZWFyaW5nO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VIbXR4VGFibGVPbkxvd01lbW9yeShmb250LCBkYXRhLCBzdGFydCwgbnVtTWV0cmljcywgbnVtR2x5cGhzKSB7XG4gICAgZm9udC5faG10eFRhYmxlRGF0YSA9IHt9O1xuXG4gICAgdmFyIGFkdmFuY2VXaWR0aDtcbiAgICB2YXIgbGVmdFNpZGVCZWFyaW5nO1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1HbHlwaHM7IGkgKz0gMSkge1xuICAgICAgICAvLyBJZiB0aGUgZm9udCBpcyBtb25vc3BhY2VkLCBvbmx5IG9uZSBlbnRyeSBpcyBuZWVkZWQuIFRoaXMgbGFzdCBlbnRyeSBhcHBsaWVzIHRvIGFsbCBzdWJzZXF1ZW50IGdseXBocy5cbiAgICAgICAgaWYgKGkgPCBudW1NZXRyaWNzKSB7XG4gICAgICAgICAgICBhZHZhbmNlV2lkdGggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgICAgICBsZWZ0U2lkZUJlYXJpbmcgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvbnQuX2htdHhUYWJsZURhdGFbaV0gPSB7XG4gICAgICAgICAgICBhZHZhbmNlV2lkdGg6IGFkdmFuY2VXaWR0aCxcbiAgICAgICAgICAgIGxlZnRTaWRlQmVhcmluZzogbGVmdFNpZGVCZWFyaW5nXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vLyBQYXJzZSB0aGUgYGhtdHhgIHRhYmxlLCB3aGljaCBjb250YWlucyB0aGUgaG9yaXpvbnRhbCBtZXRyaWNzIGZvciBhbGwgZ2x5cGhzLlxuLy8gVGhpcyBmdW5jdGlvbiBhdWdtZW50cyB0aGUgZ2x5cGggYXJyYXksIGFkZGluZyB0aGUgYWR2YW5jZVdpZHRoIGFuZCBsZWZ0U2lkZUJlYXJpbmcgdG8gZWFjaCBnbHlwaC5cbmZ1bmN0aW9uIHBhcnNlSG10eFRhYmxlKGZvbnQsIGRhdGEsIHN0YXJ0LCBudW1NZXRyaWNzLCBudW1HbHlwaHMsIGdseXBocywgb3B0KSB7XG4gICAgaWYgKG9wdC5sb3dNZW1vcnkpXG4gICAgICAgIHsgcGFyc2VIbXR4VGFibGVPbkxvd01lbW9yeShmb250LCBkYXRhLCBzdGFydCwgbnVtTWV0cmljcywgbnVtR2x5cGhzKTsgfVxuICAgIGVsc2VcbiAgICAgICAgeyBwYXJzZUhtdHhUYWJsZUFsbChkYXRhLCBzdGFydCwgbnVtTWV0cmljcywgbnVtR2x5cGhzLCBnbHlwaHMpOyB9XG59XG5cbmZ1bmN0aW9uIG1ha2VIbXR4VGFibGUoZ2x5cGhzKSB7XG4gICAgdmFyIHQgPSBuZXcgdGFibGUuVGFibGUoJ2htdHgnLCBbXSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbHlwaHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGdseXBoID0gZ2x5cGhzLmdldChpKTtcbiAgICAgICAgdmFyIGFkdmFuY2VXaWR0aCA9IGdseXBoLmFkdmFuY2VXaWR0aCB8fCAwO1xuICAgICAgICB2YXIgbGVmdFNpZGVCZWFyaW5nID0gZ2x5cGgubGVmdFNpZGVCZWFyaW5nIHx8IDA7XG4gICAgICAgIHQuZmllbGRzLnB1c2goe25hbWU6ICdhZHZhbmNlV2lkdGhfJyArIGksIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogYWR2YW5jZVdpZHRofSk7XG4gICAgICAgIHQuZmllbGRzLnB1c2goe25hbWU6ICdsZWZ0U2lkZUJlYXJpbmdfJyArIGksIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiBsZWZ0U2lkZUJlYXJpbmd9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbn1cblxudmFyIGhtdHggPSB7IHBhcnNlOiBwYXJzZUhtdHhUYWJsZSwgbWFrZTogbWFrZUhtdHhUYWJsZSB9O1xuXG4vLyBUaGUgYGx0YWdgIHRhYmxlIHN0b3JlcyBJRVRGIEJDUC00NyBsYW5ndWFnZSB0YWdzLiBJdCBhbGxvd3Mgc3VwcG9ydGluZ1xuXG5mdW5jdGlvbiBtYWtlTHRhZ1RhYmxlKHRhZ3MpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IHRhYmxlLlRhYmxlKCdsdGFnJywgW1xuICAgICAgICB7bmFtZTogJ3ZlcnNpb24nLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMX0sXG4gICAgICAgIHtuYW1lOiAnZmxhZ3MnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnbnVtVGFncycsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiB0YWdzLmxlbmd0aH1cbiAgICBdKTtcblxuICAgIHZhciBzdHJpbmdQb29sID0gJyc7XG4gICAgdmFyIHN0cmluZ1Bvb2xPZmZzZXQgPSAxMiArIHRhZ3MubGVuZ3RoICogNDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHBvcyA9IHN0cmluZ1Bvb2wuaW5kZXhPZih0YWdzW2ldKTtcbiAgICAgICAgaWYgKHBvcyA8IDApIHtcbiAgICAgICAgICAgIHBvcyA9IHN0cmluZ1Bvb2wubGVuZ3RoO1xuICAgICAgICAgICAgc3RyaW5nUG9vbCArPSB0YWdzW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LmZpZWxkcy5wdXNoKHtuYW1lOiAnb2Zmc2V0ICcgKyBpLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IHN0cmluZ1Bvb2xPZmZzZXQgKyBwb3N9KTtcbiAgICAgICAgcmVzdWx0LmZpZWxkcy5wdXNoKHtuYW1lOiAnbGVuZ3RoICcgKyBpLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IHRhZ3NbaV0ubGVuZ3RofSk7XG4gICAgfVxuXG4gICAgcmVzdWx0LmZpZWxkcy5wdXNoKHtuYW1lOiAnc3RyaW5nUG9vbCcsIHR5cGU6ICdDSEFSQVJSQVknLCB2YWx1ZTogc3RyaW5nUG9vbH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTHRhZ1RhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgdmFyIHAgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0KTtcbiAgICB2YXIgdGFibGVWZXJzaW9uID0gcC5wYXJzZVVMb25nKCk7XG4gICAgY2hlY2suYXJndW1lbnQodGFibGVWZXJzaW9uID09PSAxLCAnVW5zdXBwb3J0ZWQgbHRhZyB0YWJsZSB2ZXJzaW9uLicpO1xuICAgIC8vIFRoZSAnbHRhZycgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCBkZWZpbmUgYW55IGZsYWdzOyBza2lwIHRoZSBmaWVsZC5cbiAgICBwLnNraXAoJ3VMb25nJywgMSk7XG4gICAgdmFyIG51bVRhZ3MgPSBwLnBhcnNlVUxvbmcoKTtcblxuICAgIHZhciB0YWdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1UYWdzOyBpKyspIHtcbiAgICAgICAgdmFyIHRhZyA9ICcnO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gc3RhcnQgKyBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciBsZW5ndGggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIGZvciAodmFyIGogPSBvZmZzZXQ7IGogPCBvZmZzZXQgKyBsZW5ndGg7ICsraikge1xuICAgICAgICAgICAgdGFnICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YS5nZXRJbnQ4KGopKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhZ3MucHVzaCh0YWcpO1xuICAgIH1cblxuICAgIHJldHVybiB0YWdzO1xufVxuXG52YXIgbHRhZyA9IHsgbWFrZTogbWFrZUx0YWdUYWJsZSwgcGFyc2U6IHBhcnNlTHRhZ1RhYmxlIH07XG5cbi8vIFRoZSBgbWF4cGAgdGFibGUgZXN0YWJsaXNoZXMgdGhlIG1lbW9yeSByZXF1aXJlbWVudHMgZm9yIHRoZSBmb250LlxuXG4vLyBQYXJzZSB0aGUgbWF4aW11bSBwcm9maWxlIGBtYXhwYCB0YWJsZS5cbmZ1bmN0aW9uIHBhcnNlTWF4cFRhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgdmFyIG1heHAgPSB7fTtcbiAgICB2YXIgcCA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuICAgIG1heHAudmVyc2lvbiA9IHAucGFyc2VWZXJzaW9uKCk7XG4gICAgbWF4cC5udW1HbHlwaHMgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgaWYgKG1heHAudmVyc2lvbiA9PT0gMS4wKSB7XG4gICAgICAgIG1heHAubWF4UG9pbnRzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBtYXhwLm1heENvbnRvdXJzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBtYXhwLm1heENvbXBvc2l0ZVBvaW50cyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgbWF4cC5tYXhDb21wb3NpdGVDb250b3VycyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgbWF4cC5tYXhab25lcyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgbWF4cC5tYXhUd2lsaWdodFBvaW50cyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgbWF4cC5tYXhTdG9yYWdlID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBtYXhwLm1heEZ1bmN0aW9uRGVmcyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgbWF4cC5tYXhJbnN0cnVjdGlvbkRlZnMgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIG1heHAubWF4U3RhY2tFbGVtZW50cyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgbWF4cC5tYXhTaXplT2ZJbnN0cnVjdGlvbnMgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIG1heHAubWF4Q29tcG9uZW50RWxlbWVudHMgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIG1heHAubWF4Q29tcG9uZW50RGVwdGggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heHA7XG59XG5cbmZ1bmN0aW9uIG1ha2VNYXhwVGFibGUobnVtR2x5cGhzKSB7XG4gICAgcmV0dXJuIG5ldyB0YWJsZS5UYWJsZSgnbWF4cCcsIFtcbiAgICAgICAge25hbWU6ICd2ZXJzaW9uJywgdHlwZTogJ0ZJWEVEJywgdmFsdWU6IDB4MDAwMDUwMDB9LFxuICAgICAgICB7bmFtZTogJ251bUdseXBocycsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogbnVtR2x5cGhzfVxuICAgIF0pO1xufVxuXG52YXIgbWF4cCA9IHsgcGFyc2U6IHBhcnNlTWF4cFRhYmxlLCBtYWtlOiBtYWtlTWF4cFRhYmxlIH07XG5cbi8vIFRoZSBgbmFtZWAgbmFtaW5nIHRhYmxlLlxuXG4vLyBOYW1lSURzIGZvciB0aGUgbmFtZSB0YWJsZS5cbnZhciBuYW1lVGFibGVOYW1lcyA9IFtcbiAgICAnY29weXJpZ2h0JywgICAgICAgICAgICAgIC8vIDBcbiAgICAnZm9udEZhbWlseScsICAgICAgICAgICAgIC8vIDFcbiAgICAnZm9udFN1YmZhbWlseScsICAgICAgICAgIC8vIDJcbiAgICAndW5pcXVlSUQnLCAgICAgICAgICAgICAgIC8vIDNcbiAgICAnZnVsbE5hbWUnLCAgICAgICAgICAgICAgIC8vIDRcbiAgICAndmVyc2lvbicsICAgICAgICAgICAgICAgIC8vIDVcbiAgICAncG9zdFNjcmlwdE5hbWUnLCAgICAgICAgIC8vIDZcbiAgICAndHJhZGVtYXJrJywgICAgICAgICAgICAgIC8vIDdcbiAgICAnbWFudWZhY3R1cmVyJywgICAgICAgICAgIC8vIDhcbiAgICAnZGVzaWduZXInLCAgICAgICAgICAgICAgIC8vIDlcbiAgICAnZGVzY3JpcHRpb24nLCAgICAgICAgICAgIC8vIDEwXG4gICAgJ21hbnVmYWN0dXJlclVSTCcsICAgICAgICAvLyAxMVxuICAgICdkZXNpZ25lclVSTCcsICAgICAgICAgICAgLy8gMTJcbiAgICAnbGljZW5zZScsICAgICAgICAgICAgICAgIC8vIDEzXG4gICAgJ2xpY2Vuc2VVUkwnLCAgICAgICAgICAgICAvLyAxNFxuICAgICdyZXNlcnZlZCcsICAgICAgICAgICAgICAgLy8gMTVcbiAgICAncHJlZmVycmVkRmFtaWx5JywgICAgICAgIC8vIDE2XG4gICAgJ3ByZWZlcnJlZFN1YmZhbWlseScsICAgICAvLyAxN1xuICAgICdjb21wYXRpYmxlRnVsbE5hbWUnLCAgICAgLy8gMThcbiAgICAnc2FtcGxlVGV4dCcsICAgICAgICAgICAgIC8vIDE5XG4gICAgJ3Bvc3RTY3JpcHRGaW5kRm9udE5hbWUnLCAvLyAyMFxuICAgICd3d3NGYW1pbHknLCAgICAgICAgICAgICAgLy8gMjFcbiAgICAnd3dzU3ViZmFtaWx5JyAgICAgICAgICAgIC8vIDIyXG5dO1xuXG52YXIgbWFjTGFuZ3VhZ2VzID0ge1xuICAgIDA6ICdlbicsXG4gICAgMTogJ2ZyJyxcbiAgICAyOiAnZGUnLFxuICAgIDM6ICdpdCcsXG4gICAgNDogJ25sJyxcbiAgICA1OiAnc3YnLFxuICAgIDY6ICdlcycsXG4gICAgNzogJ2RhJyxcbiAgICA4OiAncHQnLFxuICAgIDk6ICdubycsXG4gICAgMTA6ICdoZScsXG4gICAgMTE6ICdqYScsXG4gICAgMTI6ICdhcicsXG4gICAgMTM6ICdmaScsXG4gICAgMTQ6ICdlbCcsXG4gICAgMTU6ICdpcycsXG4gICAgMTY6ICdtdCcsXG4gICAgMTc6ICd0cicsXG4gICAgMTg6ICdocicsXG4gICAgMTk6ICd6aC1IYW50JyxcbiAgICAyMDogJ3VyJyxcbiAgICAyMTogJ2hpJyxcbiAgICAyMjogJ3RoJyxcbiAgICAyMzogJ2tvJyxcbiAgICAyNDogJ2x0JyxcbiAgICAyNTogJ3BsJyxcbiAgICAyNjogJ2h1JyxcbiAgICAyNzogJ2VzJyxcbiAgICAyODogJ2x2JyxcbiAgICAyOTogJ3NlJyxcbiAgICAzMDogJ2ZvJyxcbiAgICAzMTogJ2ZhJyxcbiAgICAzMjogJ3J1JyxcbiAgICAzMzogJ3poJyxcbiAgICAzNDogJ25sLUJFJyxcbiAgICAzNTogJ2dhJyxcbiAgICAzNjogJ3NxJyxcbiAgICAzNzogJ3JvJyxcbiAgICAzODogJ2N6JyxcbiAgICAzOTogJ3NrJyxcbiAgICA0MDogJ3NpJyxcbiAgICA0MTogJ3lpJyxcbiAgICA0MjogJ3NyJyxcbiAgICA0MzogJ21rJyxcbiAgICA0NDogJ2JnJyxcbiAgICA0NTogJ3VrJyxcbiAgICA0NjogJ2JlJyxcbiAgICA0NzogJ3V6JyxcbiAgICA0ODogJ2trJyxcbiAgICA0OTogJ2F6LUN5cmwnLFxuICAgIDUwOiAnYXotQXJhYicsXG4gICAgNTE6ICdoeScsXG4gICAgNTI6ICdrYScsXG4gICAgNTM6ICdtbycsXG4gICAgNTQ6ICdreScsXG4gICAgNTU6ICd0ZycsXG4gICAgNTY6ICd0aycsXG4gICAgNTc6ICdtbi1DTicsXG4gICAgNTg6ICdtbicsXG4gICAgNTk6ICdwcycsXG4gICAgNjA6ICdrcycsXG4gICAgNjE6ICdrdScsXG4gICAgNjI6ICdzZCcsXG4gICAgNjM6ICdibycsXG4gICAgNjQ6ICduZScsXG4gICAgNjU6ICdzYScsXG4gICAgNjY6ICdtcicsXG4gICAgNjc6ICdibicsXG4gICAgNjg6ICdhcycsXG4gICAgNjk6ICdndScsXG4gICAgNzA6ICdwYScsXG4gICAgNzE6ICdvcicsXG4gICAgNzI6ICdtbCcsXG4gICAgNzM6ICdrbicsXG4gICAgNzQ6ICd0YScsXG4gICAgNzU6ICd0ZScsXG4gICAgNzY6ICdzaScsXG4gICAgNzc6ICdteScsXG4gICAgNzg6ICdrbScsXG4gICAgNzk6ICdsbycsXG4gICAgODA6ICd2aScsXG4gICAgODE6ICdpZCcsXG4gICAgODI6ICd0bCcsXG4gICAgODM6ICdtcycsXG4gICAgODQ6ICdtcy1BcmFiJyxcbiAgICA4NTogJ2FtJyxcbiAgICA4NjogJ3RpJyxcbiAgICA4NzogJ29tJyxcbiAgICA4ODogJ3NvJyxcbiAgICA4OTogJ3N3JyxcbiAgICA5MDogJ3J3JyxcbiAgICA5MTogJ3JuJyxcbiAgICA5MjogJ255JyxcbiAgICA5MzogJ21nJyxcbiAgICA5NDogJ2VvJyxcbiAgICAxMjg6ICdjeScsXG4gICAgMTI5OiAnZXUnLFxuICAgIDEzMDogJ2NhJyxcbiAgICAxMzE6ICdsYScsXG4gICAgMTMyOiAncXUnLFxuICAgIDEzMzogJ2duJyxcbiAgICAxMzQ6ICdheScsXG4gICAgMTM1OiAndHQnLFxuICAgIDEzNjogJ3VnJyxcbiAgICAxMzc6ICdkeicsXG4gICAgMTM4OiAnanYnLFxuICAgIDEzOTogJ3N1JyxcbiAgICAxNDA6ICdnbCcsXG4gICAgMTQxOiAnYWYnLFxuICAgIDE0MjogJ2JyJyxcbiAgICAxNDM6ICdpdScsXG4gICAgMTQ0OiAnZ2QnLFxuICAgIDE0NTogJ2d2JyxcbiAgICAxNDY6ICdnYScsXG4gICAgMTQ3OiAndG8nLFxuICAgIDE0ODogJ2VsLXBvbHl0b24nLFxuICAgIDE0OTogJ2tsJyxcbiAgICAxNTA6ICdheicsXG4gICAgMTUxOiAnbm4nXG59O1xuXG4vLyBNYWNPUyBsYW5ndWFnZSBJRCDihpIgTWFjT1Mgc2NyaXB0IElEXG4vL1xuLy8gTm90ZSB0aGF0IHRoZSBzY3JpcHQgSUQgaXMgbm90IHN1ZmZpY2llbnQgdG8gZGV0ZXJtaW5lIHdoYXQgZW5jb2Rpbmdcbi8vIHRvIHVzZSBpbiBUcnVlVHlwZSBmaWxlcy4gRm9yIHNvbWUgbGFuZ3VhZ2VzLCBNYWNPUyB1c2VkIGEgbW9kaWZpY2F0aW9uXG4vLyBvZiBhIG1haW5zdHJlYW0gc2NyaXB0LiBGb3IgZXhhbXBsZSwgYW4gSWNlbGFuZGljIG5hbWUgd291bGQgYmUgc3RvcmVkXG4vLyB3aXRoIHNtUm9tYW4gaW4gdGhlIFRydWVUeXBlIG5hbWluZyB0YWJsZSwgYnV0IHRoZSBhY3R1YWwgZW5jb2Rpbmdcbi8vIGlzIGEgc3BlY2lhbCBJY2VsYW5kaWMgdmVyc2lvbiBvZiB0aGUgbm9ybWFsIE1hY2ludG9zaCBSb21hbiBlbmNvZGluZy5cbi8vIEFzIGFub3RoZXIgZXhhbXBsZSwgSW51a3RpdHV0IHVzZXMgYW4gOC1iaXQgZW5jb2RpbmcgZm9yIENhbmFkaWFuIEFib3JpZ2luYWxcbi8vIFN5bGxhYmxlcyBidXQgTWFjT1MgaGFkIHJ1biBvdXQgb2YgYXZhaWxhYmxlIHNjcmlwdCBjb2Rlcywgc28gdGhpcyB3YXNcbi8vIGRvbmUgYXMgYSAocHJldHR5IHJhZGljYWwpIFwibW9kaWZpY2F0aW9uXCIgb2YgRXRoaW9waWMuXG4vL1xuLy8gaHR0cDovL3VuaWNvZGUub3JnL1B1YmxpYy9NQVBQSU5HUy9WRU5ET1JTL0FQUExFL1JlYWRtZS50eHRcbnZhciBtYWNMYW5ndWFnZVRvU2NyaXB0ID0ge1xuICAgIDA6IDAsICAvLyBsYW5nRW5nbGlzaCDihpIgc21Sb21hblxuICAgIDE6IDAsICAvLyBsYW5nRnJlbmNoIOKGkiBzbVJvbWFuXG4gICAgMjogMCwgIC8vIGxhbmdHZXJtYW4g4oaSIHNtUm9tYW5cbiAgICAzOiAwLCAgLy8gbGFuZ0l0YWxpYW4g4oaSIHNtUm9tYW5cbiAgICA0OiAwLCAgLy8gbGFuZ0R1dGNoIOKGkiBzbVJvbWFuXG4gICAgNTogMCwgIC8vIGxhbmdTd2VkaXNoIOKGkiBzbVJvbWFuXG4gICAgNjogMCwgIC8vIGxhbmdTcGFuaXNoIOKGkiBzbVJvbWFuXG4gICAgNzogMCwgIC8vIGxhbmdEYW5pc2gg4oaSIHNtUm9tYW5cbiAgICA4OiAwLCAgLy8gbGFuZ1BvcnR1Z3Vlc2Ug4oaSIHNtUm9tYW5cbiAgICA5OiAwLCAgLy8gbGFuZ05vcndlZ2lhbiDihpIgc21Sb21hblxuICAgIDEwOiA1LCAgLy8gbGFuZ0hlYnJldyDihpIgc21IZWJyZXdcbiAgICAxMTogMSwgIC8vIGxhbmdKYXBhbmVzZSDihpIgc21KYXBhbmVzZVxuICAgIDEyOiA0LCAgLy8gbGFuZ0FyYWJpYyDihpIgc21BcmFiaWNcbiAgICAxMzogMCwgIC8vIGxhbmdGaW5uaXNoIOKGkiBzbVJvbWFuXG4gICAgMTQ6IDYsICAvLyBsYW5nR3JlZWsg4oaSIHNtR3JlZWtcbiAgICAxNTogMCwgIC8vIGxhbmdJY2VsYW5kaWMg4oaSIHNtUm9tYW4gKG1vZGlmaWVkKVxuICAgIDE2OiAwLCAgLy8gbGFuZ01hbHRlc2Ug4oaSIHNtUm9tYW5cbiAgICAxNzogMCwgIC8vIGxhbmdUdXJraXNoIOKGkiBzbVJvbWFuIChtb2RpZmllZClcbiAgICAxODogMCwgIC8vIGxhbmdDcm9hdGlhbiDihpIgc21Sb21hbiAobW9kaWZpZWQpXG4gICAgMTk6IDIsICAvLyBsYW5nVHJhZENoaW5lc2Ug4oaSIHNtVHJhZENoaW5lc2VcbiAgICAyMDogNCwgIC8vIGxhbmdVcmR1IOKGkiBzbUFyYWJpY1xuICAgIDIxOiA5LCAgLy8gbGFuZ0hpbmRpIOKGkiBzbURldmFuYWdhcmlcbiAgICAyMjogMjEsICAvLyBsYW5nVGhhaSDihpIgc21UaGFpXG4gICAgMjM6IDMsICAvLyBsYW5nS29yZWFuIOKGkiBzbUtvcmVhblxuICAgIDI0OiAyOSwgIC8vIGxhbmdMaXRodWFuaWFuIOKGkiBzbUNlbnRyYWxFdXJvUm9tYW5cbiAgICAyNTogMjksICAvLyBsYW5nUG9saXNoIOKGkiBzbUNlbnRyYWxFdXJvUm9tYW5cbiAgICAyNjogMjksICAvLyBsYW5nSHVuZ2FyaWFuIOKGkiBzbUNlbnRyYWxFdXJvUm9tYW5cbiAgICAyNzogMjksICAvLyBsYW5nRXN0b25pYW4g4oaSIHNtQ2VudHJhbEV1cm9Sb21hblxuICAgIDI4OiAyOSwgIC8vIGxhbmdMYXR2aWFuIOKGkiBzbUNlbnRyYWxFdXJvUm9tYW5cbiAgICAyOTogMCwgIC8vIGxhbmdTYW1pIOKGkiBzbVJvbWFuXG4gICAgMzA6IDAsICAvLyBsYW5nRmFyb2VzZSDihpIgc21Sb21hbiAobW9kaWZpZWQpXG4gICAgMzE6IDQsICAvLyBsYW5nRmFyc2kg4oaSIHNtQXJhYmljIChtb2RpZmllZClcbiAgICAzMjogNywgIC8vIGxhbmdSdXNzaWFuIOKGkiBzbUN5cmlsbGljXG4gICAgMzM6IDI1LCAgLy8gbGFuZ1NpbXBDaGluZXNlIOKGkiBzbVNpbXBDaGluZXNlXG4gICAgMzQ6IDAsICAvLyBsYW5nRmxlbWlzaCDihpIgc21Sb21hblxuICAgIDM1OiAwLCAgLy8gbGFuZ0lyaXNoR2FlbGljIOKGkiBzbVJvbWFuIChtb2RpZmllZClcbiAgICAzNjogMCwgIC8vIGxhbmdBbGJhbmlhbiDihpIgc21Sb21hblxuICAgIDM3OiAwLCAgLy8gbGFuZ1JvbWFuaWFuIOKGkiBzbVJvbWFuIChtb2RpZmllZClcbiAgICAzODogMjksICAvLyBsYW5nQ3plY2gg4oaSIHNtQ2VudHJhbEV1cm9Sb21hblxuICAgIDM5OiAyOSwgIC8vIGxhbmdTbG92YWsg4oaSIHNtQ2VudHJhbEV1cm9Sb21hblxuICAgIDQwOiAwLCAgLy8gbGFuZ1Nsb3ZlbmlhbiDihpIgc21Sb21hbiAobW9kaWZpZWQpXG4gICAgNDE6IDUsICAvLyBsYW5nWWlkZGlzaCDihpIgc21IZWJyZXdcbiAgICA0MjogNywgIC8vIGxhbmdTZXJiaWFuIOKGkiBzbUN5cmlsbGljXG4gICAgNDM6IDcsICAvLyBsYW5nTWFjZWRvbmlhbiDihpIgc21DeXJpbGxpY1xuICAgIDQ0OiA3LCAgLy8gbGFuZ0J1bGdhcmlhbiDihpIgc21DeXJpbGxpY1xuICAgIDQ1OiA3LCAgLy8gbGFuZ1VrcmFpbmlhbiDihpIgc21DeXJpbGxpYyAobW9kaWZpZWQpXG4gICAgNDY6IDcsICAvLyBsYW5nQnllbG9ydXNzaWFuIOKGkiBzbUN5cmlsbGljXG4gICAgNDc6IDcsICAvLyBsYW5nVXpiZWsg4oaSIHNtQ3lyaWxsaWNcbiAgICA0ODogNywgIC8vIGxhbmdLYXpha2gg4oaSIHNtQ3lyaWxsaWNcbiAgICA0OTogNywgIC8vIGxhbmdBemVyYmFpamFuaSDihpIgc21DeXJpbGxpY1xuICAgIDUwOiA0LCAgLy8gbGFuZ0F6ZXJiYWlqYW5BciDihpIgc21BcmFiaWNcbiAgICA1MTogMjQsICAvLyBsYW5nQXJtZW5pYW4g4oaSIHNtQXJtZW5pYW5cbiAgICA1MjogMjMsICAvLyBsYW5nR2VvcmdpYW4g4oaSIHNtR2VvcmdpYW5cbiAgICA1MzogNywgIC8vIGxhbmdNb2xkYXZpYW4g4oaSIHNtQ3lyaWxsaWNcbiAgICA1NDogNywgIC8vIGxhbmdLaXJnaGl6IOKGkiBzbUN5cmlsbGljXG4gICAgNTU6IDcsICAvLyBsYW5nVGFqaWtpIOKGkiBzbUN5cmlsbGljXG4gICAgNTY6IDcsICAvLyBsYW5nVHVya21lbiDihpIgc21DeXJpbGxpY1xuICAgIDU3OiAyNywgIC8vIGxhbmdNb25nb2xpYW4g4oaSIHNtTW9uZ29saWFuXG4gICAgNTg6IDcsICAvLyBsYW5nTW9uZ29saWFuQ3lyIOKGkiBzbUN5cmlsbGljXG4gICAgNTk6IDQsICAvLyBsYW5nUGFzaHRvIOKGkiBzbUFyYWJpY1xuICAgIDYwOiA0LCAgLy8gbGFuZ0t1cmRpc2gg4oaSIHNtQXJhYmljXG4gICAgNjE6IDQsICAvLyBsYW5nS2FzaG1pcmkg4oaSIHNtQXJhYmljXG4gICAgNjI6IDQsICAvLyBsYW5nU2luZGhpIOKGkiBzbUFyYWJpY1xuICAgIDYzOiAyNiwgIC8vIGxhbmdUaWJldGFuIOKGkiBzbVRpYmV0YW5cbiAgICA2NDogOSwgIC8vIGxhbmdOZXBhbGkg4oaSIHNtRGV2YW5hZ2FyaVxuICAgIDY1OiA5LCAgLy8gbGFuZ1NhbnNrcml0IOKGkiBzbURldmFuYWdhcmlcbiAgICA2NjogOSwgIC8vIGxhbmdNYXJhdGhpIOKGkiBzbURldmFuYWdhcmlcbiAgICA2NzogMTMsICAvLyBsYW5nQmVuZ2FsaSDihpIgc21CZW5nYWxpXG4gICAgNjg6IDEzLCAgLy8gbGFuZ0Fzc2FtZXNlIOKGkiBzbUJlbmdhbGlcbiAgICA2OTogMTEsICAvLyBsYW5nR3VqYXJhdGkg4oaSIHNtR3VqYXJhdGlcbiAgICA3MDogMTAsICAvLyBsYW5nUHVuamFiaSDihpIgc21HdXJtdWtoaVxuICAgIDcxOiAxMiwgIC8vIGxhbmdPcml5YSDihpIgc21Pcml5YVxuICAgIDcyOiAxNywgIC8vIGxhbmdNYWxheWFsYW0g4oaSIHNtTWFsYXlhbGFtXG4gICAgNzM6IDE2LCAgLy8gbGFuZ0thbm5hZGEg4oaSIHNtS2FubmFkYVxuICAgIDc0OiAxNCwgIC8vIGxhbmdUYW1pbCDihpIgc21UYW1pbFxuICAgIDc1OiAxNSwgIC8vIGxhbmdUZWx1Z3Ug4oaSIHNtVGVsdWd1XG4gICAgNzY6IDE4LCAgLy8gbGFuZ1NpbmhhbGVzZSDihpIgc21TaW5oYWxlc2VcbiAgICA3NzogMTksICAvLyBsYW5nQnVybWVzZSDihpIgc21CdXJtZXNlXG4gICAgNzg6IDIwLCAgLy8gbGFuZ0tobWVyIOKGkiBzbUtobWVyXG4gICAgNzk6IDIyLCAgLy8gbGFuZ0xhbyDihpIgc21MYW9cbiAgICA4MDogMzAsICAvLyBsYW5nVmlldG5hbWVzZSDihpIgc21WaWV0bmFtZXNlXG4gICAgODE6IDAsICAvLyBsYW5nSW5kb25lc2lhbiDihpIgc21Sb21hblxuICAgIDgyOiAwLCAgLy8gbGFuZ1RhZ2Fsb2cg4oaSIHNtUm9tYW5cbiAgICA4MzogMCwgIC8vIGxhbmdNYWxheVJvbWFuIOKGkiBzbVJvbWFuXG4gICAgODQ6IDQsICAvLyBsYW5nTWFsYXlBcmFiaWMg4oaSIHNtQXJhYmljXG4gICAgODU6IDI4LCAgLy8gbGFuZ0FtaGFyaWMg4oaSIHNtRXRoaW9waWNcbiAgICA4NjogMjgsICAvLyBsYW5nVGlncmlueWEg4oaSIHNtRXRoaW9waWNcbiAgICA4NzogMjgsICAvLyBsYW5nT3JvbW8g4oaSIHNtRXRoaW9waWNcbiAgICA4ODogMCwgIC8vIGxhbmdTb21hbGkg4oaSIHNtUm9tYW5cbiAgICA4OTogMCwgIC8vIGxhbmdTd2FoaWxpIOKGkiBzbVJvbWFuXG4gICAgOTA6IDAsICAvLyBsYW5nS2lueWFyd2FuZGEg4oaSIHNtUm9tYW5cbiAgICA5MTogMCwgIC8vIGxhbmdSdW5kaSDihpIgc21Sb21hblxuICAgIDkyOiAwLCAgLy8gbGFuZ055YW5qYSDihpIgc21Sb21hblxuICAgIDkzOiAwLCAgLy8gbGFuZ01hbGFnYXN5IOKGkiBzbVJvbWFuXG4gICAgOTQ6IDAsICAvLyBsYW5nRXNwZXJhbnRvIOKGkiBzbVJvbWFuXG4gICAgMTI4OiAwLCAgLy8gbGFuZ1dlbHNoIOKGkiBzbVJvbWFuIChtb2RpZmllZClcbiAgICAxMjk6IDAsICAvLyBsYW5nQmFzcXVlIOKGkiBzbVJvbWFuXG4gICAgMTMwOiAwLCAgLy8gbGFuZ0NhdGFsYW4g4oaSIHNtUm9tYW5cbiAgICAxMzE6IDAsICAvLyBsYW5nTGF0aW4g4oaSIHNtUm9tYW5cbiAgICAxMzI6IDAsICAvLyBsYW5nUXVlY2h1YSDihpIgc21Sb21hblxuICAgIDEzMzogMCwgIC8vIGxhbmdHdWFyYW5pIOKGkiBzbVJvbWFuXG4gICAgMTM0OiAwLCAgLy8gbGFuZ0F5bWFyYSDihpIgc21Sb21hblxuICAgIDEzNTogNywgIC8vIGxhbmdUYXRhciDihpIgc21DeXJpbGxpY1xuICAgIDEzNjogNCwgIC8vIGxhbmdVaWdodXIg4oaSIHNtQXJhYmljXG4gICAgMTM3OiAyNiwgIC8vIGxhbmdEem9uZ2toYSDihpIgc21UaWJldGFuXG4gICAgMTM4OiAwLCAgLy8gbGFuZ0phdmFuZXNlUm9tIOKGkiBzbVJvbWFuXG4gICAgMTM5OiAwLCAgLy8gbGFuZ1N1bmRhbmVzZVJvbSDihpIgc21Sb21hblxuICAgIDE0MDogMCwgIC8vIGxhbmdHYWxpY2lhbiDihpIgc21Sb21hblxuICAgIDE0MTogMCwgIC8vIGxhbmdBZnJpa2FhbnMg4oaSIHNtUm9tYW5cbiAgICAxNDI6IDAsICAvLyBsYW5nQnJldG9uIOKGkiBzbVJvbWFuIChtb2RpZmllZClcbiAgICAxNDM6IDI4LCAgLy8gbGFuZ0ludWt0aXR1dCDihpIgc21FdGhpb3BpYyAobW9kaWZpZWQpXG4gICAgMTQ0OiAwLCAgLy8gbGFuZ1Njb3R0aXNoR2FlbGljIOKGkiBzbVJvbWFuIChtb2RpZmllZClcbiAgICAxNDU6IDAsICAvLyBsYW5nTWFueEdhZWxpYyDihpIgc21Sb21hbiAobW9kaWZpZWQpXG4gICAgMTQ2OiAwLCAgLy8gbGFuZ0lyaXNoR2FlbGljU2NyaXB0IOKGkiBzbVJvbWFuIChtb2RpZmllZClcbiAgICAxNDc6IDAsICAvLyBsYW5nVG9uZ2FuIOKGkiBzbVJvbWFuXG4gICAgMTQ4OiA2LCAgLy8gbGFuZ0dyZWVrQW5jaWVudCDihpIgc21Sb21hblxuICAgIDE0OTogMCwgIC8vIGxhbmdHcmVlbmxhbmRpYyDihpIgc21Sb21hblxuICAgIDE1MDogMCwgIC8vIGxhbmdBemVyYmFpamFuUm9tYW4g4oaSIHNtUm9tYW5cbiAgICAxNTE6IDAgICAvLyBsYW5nTnlub3JzayDihpIgc21Sb21hblxufTtcblxuLy8gV2hpbGUgTWljcm9zb2Z0IGluZGljYXRlcyBhIHJlZ2lvbi9jb3VudHJ5IGZvciBhbGwgaXRzIGxhbmd1YWdlXG4vLyBJRHMsIHdlIG9taXQgdGhlIHJlZ2lvbiBjb2RlIGlmIGl0J3MgZXF1YWwgdG8gdGhlIFwibW9zdCBsaWtlbHlcbi8vIHJlZ2lvbiBzdWJ0YWdcIiBhY2NvcmRpbmcgdG8gVW5pY29kZSBDTERSLiBGb3Igc2NyaXB0cywgd2Ugb21pdFxuLy8gdGhlIHN1YnRhZyBpZiBpdCBpcyBlcXVhbCB0byB0aGUgU3VwcHJlc3MtU2NyaXB0IGVudHJ5IGluIHRoZVxuLy8gSUFOQSBsYW5ndWFnZSBzdWJ0YWcgcmVnaXN0cnkgZm9yIElFVEYgQkNQIDQ3LlxuLy9cbi8vIEZvciBleGFtcGxlLCBNaWNyb3NvZnQgc3RhdGVzIHRoYXQgaXRzIGxhbmd1YWdlIGNvZGUgMHgwNDFBIGlzXG4vLyBDcm9hdGlhbiBpbiBDcm9hdGlhLiBXZSB0cmFuc2Zvcm0gdGhpcyB0byB0aGUgQkNQIDQ3IGxhbmd1YWdlIGNvZGUgJ2hyJ1xuLy8gYW5kIG5vdCAnaHItSFInIGJlY2F1c2UgQ3JvYXRpYSBpcyB0aGUgZGVmYXVsdCBjb3VudHJ5IGZvciBDcm9hdGlhbixcbi8vIGFjY29yZGluZyB0byBVbmljb2RlIENMRFIuIEFzIGFub3RoZXIgZXhhbXBsZSwgTWljcm9zb2Z0IHN0YXRlc1xuLy8gdGhhdCAweDEwMUEgaXMgQ3JvYXRpYW4gKExhdGluKSBpbiBCb3NuaWEtSGVyemVnb3ZpbmEuIFdlIHRyYW5zZm9ybVxuLy8gdGhpcyB0byAnaHItQkEnIGFuZCBub3QgJ2hyLUxhdG4tQkEnIGJlY2F1c2UgTGF0aW4gaXMgdGhlIGRlZmF1bHQgc2NyaXB0XG4vLyBmb3IgdGhlIENyb2F0aWFuIGxhbmd1YWdlLCBhY2NvcmRpbmcgdG8gSUFOQS5cbi8vXG4vLyBodHRwOi8vd3d3LnVuaWNvZGUub3JnL2NsZHIvY2hhcnRzL2xhdGVzdC9zdXBwbGVtZW50YWwvbGlrZWx5X3N1YnRhZ3MuaHRtbFxuLy8gaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9sYW5ndWFnZS1zdWJ0YWctcmVnaXN0cnkvbGFuZ3VhZ2Utc3VidGFnLXJlZ2lzdHJ5XG52YXIgd2luZG93c0xhbmd1YWdlcyA9IHtcbiAgICAweDA0MzY6ICdhZicsXG4gICAgMHgwNDFDOiAnc3EnLFxuICAgIDB4MDQ4NDogJ2dzdycsXG4gICAgMHgwNDVFOiAnYW0nLFxuICAgIDB4MTQwMTogJ2FyLURaJyxcbiAgICAweDNDMDE6ICdhci1CSCcsXG4gICAgMHgwQzAxOiAnYXInLFxuICAgIDB4MDgwMTogJ2FyLUlRJyxcbiAgICAweDJDMDE6ICdhci1KTycsXG4gICAgMHgzNDAxOiAnYXItS1cnLFxuICAgIDB4MzAwMTogJ2FyLUxCJyxcbiAgICAweDEwMDE6ICdhci1MWScsXG4gICAgMHgxODAxOiAnYXJ5JyxcbiAgICAweDIwMDE6ICdhci1PTScsXG4gICAgMHg0MDAxOiAnYXItUUEnLFxuICAgIDB4MDQwMTogJ2FyLVNBJyxcbiAgICAweDI4MDE6ICdhci1TWScsXG4gICAgMHgxQzAxOiAnYWViJyxcbiAgICAweDM4MDE6ICdhci1BRScsXG4gICAgMHgyNDAxOiAnYXItWUUnLFxuICAgIDB4MDQyQjogJ2h5JyxcbiAgICAweDA0NEQ6ICdhcycsXG4gICAgMHgwODJDOiAnYXotQ3lybCcsXG4gICAgMHgwNDJDOiAnYXonLFxuICAgIDB4MDQ2RDogJ2JhJyxcbiAgICAweDA0MkQ6ICdldScsXG4gICAgMHgwNDIzOiAnYmUnLFxuICAgIDB4MDg0NTogJ2JuJyxcbiAgICAweDA0NDU6ICdibi1JTicsXG4gICAgMHgyMDFBOiAnYnMtQ3lybCcsXG4gICAgMHgxNDFBOiAnYnMnLFxuICAgIDB4MDQ3RTogJ2JyJyxcbiAgICAweDA0MDI6ICdiZycsXG4gICAgMHgwNDAzOiAnY2EnLFxuICAgIDB4MEMwNDogJ3poLUhLJyxcbiAgICAweDE0MDQ6ICd6aC1NTycsXG4gICAgMHgwODA0OiAnemgnLFxuICAgIDB4MTAwNDogJ3poLVNHJyxcbiAgICAweDA0MDQ6ICd6aC1UVycsXG4gICAgMHgwNDgzOiAnY28nLFxuICAgIDB4MDQxQTogJ2hyJyxcbiAgICAweDEwMUE6ICdoci1CQScsXG4gICAgMHgwNDA1OiAnY3MnLFxuICAgIDB4MDQwNjogJ2RhJyxcbiAgICAweDA0OEM6ICdwcnMnLFxuICAgIDB4MDQ2NTogJ2R2JyxcbiAgICAweDA4MTM6ICdubC1CRScsXG4gICAgMHgwNDEzOiAnbmwnLFxuICAgIDB4MEMwOTogJ2VuLUFVJyxcbiAgICAweDI4MDk6ICdlbi1CWicsXG4gICAgMHgxMDA5OiAnZW4tQ0EnLFxuICAgIDB4MjQwOTogJ2VuLTAyOScsXG4gICAgMHg0MDA5OiAnZW4tSU4nLFxuICAgIDB4MTgwOTogJ2VuLUlFJyxcbiAgICAweDIwMDk6ICdlbi1KTScsXG4gICAgMHg0NDA5OiAnZW4tTVknLFxuICAgIDB4MTQwOTogJ2VuLU5aJyxcbiAgICAweDM0MDk6ICdlbi1QSCcsXG4gICAgMHg0ODA5OiAnZW4tU0cnLFxuICAgIDB4MUMwOTogJ2VuLVpBJyxcbiAgICAweDJDMDk6ICdlbi1UVCcsXG4gICAgMHgwODA5OiAnZW4tR0InLFxuICAgIDB4MDQwOTogJ2VuJyxcbiAgICAweDMwMDk6ICdlbi1aVycsXG4gICAgMHgwNDI1OiAnZXQnLFxuICAgIDB4MDQzODogJ2ZvJyxcbiAgICAweDA0NjQ6ICdmaWwnLFxuICAgIDB4MDQwQjogJ2ZpJyxcbiAgICAweDA4MEM6ICdmci1CRScsXG4gICAgMHgwQzBDOiAnZnItQ0EnLFxuICAgIDB4MDQwQzogJ2ZyJyxcbiAgICAweDE0MEM6ICdmci1MVScsXG4gICAgMHgxODBDOiAnZnItTUMnLFxuICAgIDB4MTAwQzogJ2ZyLUNIJyxcbiAgICAweDA0NjI6ICdmeScsXG4gICAgMHgwNDU2OiAnZ2wnLFxuICAgIDB4MDQzNzogJ2thJyxcbiAgICAweDBDMDc6ICdkZS1BVCcsXG4gICAgMHgwNDA3OiAnZGUnLFxuICAgIDB4MTQwNzogJ2RlLUxJJyxcbiAgICAweDEwMDc6ICdkZS1MVScsXG4gICAgMHgwODA3OiAnZGUtQ0gnLFxuICAgIDB4MDQwODogJ2VsJyxcbiAgICAweDA0NkY6ICdrbCcsXG4gICAgMHgwNDQ3OiAnZ3UnLFxuICAgIDB4MDQ2ODogJ2hhJyxcbiAgICAweDA0MEQ6ICdoZScsXG4gICAgMHgwNDM5OiAnaGknLFxuICAgIDB4MDQwRTogJ2h1JyxcbiAgICAweDA0MEY6ICdpcycsXG4gICAgMHgwNDcwOiAnaWcnLFxuICAgIDB4MDQyMTogJ2lkJyxcbiAgICAweDA0NUQ6ICdpdScsXG4gICAgMHgwODVEOiAnaXUtTGF0bicsXG4gICAgMHgwODNDOiAnZ2EnLFxuICAgIDB4MDQzNDogJ3hoJyxcbiAgICAweDA0MzU6ICd6dScsXG4gICAgMHgwNDEwOiAnaXQnLFxuICAgIDB4MDgxMDogJ2l0LUNIJyxcbiAgICAweDA0MTE6ICdqYScsXG4gICAgMHgwNDRCOiAna24nLFxuICAgIDB4MDQzRjogJ2trJyxcbiAgICAweDA0NTM6ICdrbScsXG4gICAgMHgwNDg2OiAncXVjJyxcbiAgICAweDA0ODc6ICdydycsXG4gICAgMHgwNDQxOiAnc3cnLFxuICAgIDB4MDQ1NzogJ2tvaycsXG4gICAgMHgwNDEyOiAna28nLFxuICAgIDB4MDQ0MDogJ2t5JyxcbiAgICAweDA0NTQ6ICdsbycsXG4gICAgMHgwNDI2OiAnbHYnLFxuICAgIDB4MDQyNzogJ2x0JyxcbiAgICAweDA4MkU6ICdkc2InLFxuICAgIDB4MDQ2RTogJ2xiJyxcbiAgICAweDA0MkY6ICdtaycsXG4gICAgMHgwODNFOiAnbXMtQk4nLFxuICAgIDB4MDQzRTogJ21zJyxcbiAgICAweDA0NEM6ICdtbCcsXG4gICAgMHgwNDNBOiAnbXQnLFxuICAgIDB4MDQ4MTogJ21pJyxcbiAgICAweDA0N0E6ICdhcm4nLFxuICAgIDB4MDQ0RTogJ21yJyxcbiAgICAweDA0N0M6ICdtb2gnLFxuICAgIDB4MDQ1MDogJ21uJyxcbiAgICAweDA4NTA6ICdtbi1DTicsXG4gICAgMHgwNDYxOiAnbmUnLFxuICAgIDB4MDQxNDogJ25iJyxcbiAgICAweDA4MTQ6ICdubicsXG4gICAgMHgwNDgyOiAnb2MnLFxuICAgIDB4MDQ0ODogJ29yJyxcbiAgICAweDA0NjM6ICdwcycsXG4gICAgMHgwNDE1OiAncGwnLFxuICAgIDB4MDQxNjogJ3B0JyxcbiAgICAweDA4MTY6ICdwdC1QVCcsXG4gICAgMHgwNDQ2OiAncGEnLFxuICAgIDB4MDQ2QjogJ3F1LUJPJyxcbiAgICAweDA4NkI6ICdxdS1FQycsXG4gICAgMHgwQzZCOiAncXUnLFxuICAgIDB4MDQxODogJ3JvJyxcbiAgICAweDA0MTc6ICdybScsXG4gICAgMHgwNDE5OiAncnUnLFxuICAgIDB4MjQzQjogJ3NtbicsXG4gICAgMHgxMDNCOiAnc21qLU5PJyxcbiAgICAweDE0M0I6ICdzbWonLFxuICAgIDB4MEMzQjogJ3NlLUZJJyxcbiAgICAweDA0M0I6ICdzZScsXG4gICAgMHgwODNCOiAnc2UtU0UnLFxuICAgIDB4MjAzQjogJ3NtcycsXG4gICAgMHgxODNCOiAnc21hLU5PJyxcbiAgICAweDFDM0I6ICdzbXMnLFxuICAgIDB4MDQ0RjogJ3NhJyxcbiAgICAweDFDMUE6ICdzci1DeXJsLUJBJyxcbiAgICAweDBDMUE6ICdzcicsXG4gICAgMHgxODFBOiAnc3ItTGF0bi1CQScsXG4gICAgMHgwODFBOiAnc3ItTGF0bicsXG4gICAgMHgwNDZDOiAnbnNvJyxcbiAgICAweDA0MzI6ICd0bicsXG4gICAgMHgwNDVCOiAnc2knLFxuICAgIDB4MDQxQjogJ3NrJyxcbiAgICAweDA0MjQ6ICdzbCcsXG4gICAgMHgyQzBBOiAnZXMtQVInLFxuICAgIDB4NDAwQTogJ2VzLUJPJyxcbiAgICAweDM0MEE6ICdlcy1DTCcsXG4gICAgMHgyNDBBOiAnZXMtQ08nLFxuICAgIDB4MTQwQTogJ2VzLUNSJyxcbiAgICAweDFDMEE6ICdlcy1ETycsXG4gICAgMHgzMDBBOiAnZXMtRUMnLFxuICAgIDB4NDQwQTogJ2VzLVNWJyxcbiAgICAweDEwMEE6ICdlcy1HVCcsXG4gICAgMHg0ODBBOiAnZXMtSE4nLFxuICAgIDB4MDgwQTogJ2VzLU1YJyxcbiAgICAweDRDMEE6ICdlcy1OSScsXG4gICAgMHgxODBBOiAnZXMtUEEnLFxuICAgIDB4M0MwQTogJ2VzLVBZJyxcbiAgICAweDI4MEE6ICdlcy1QRScsXG4gICAgMHg1MDBBOiAnZXMtUFInLFxuXG4gICAgLy8gTWljcm9zb2Z0IGhhcyBkZWZpbmVkIHR3byBkaWZmZXJlbnQgbGFuZ3VhZ2UgY29kZXMgZm9yXG4gICAgLy8g4oCcU3BhbmlzaCB3aXRoIG1vZGVybiBzb3J0aW5n4oCdIGFuZCDigJxTcGFuaXNoIHdpdGggdHJhZGl0aW9uYWxcbiAgICAvLyBzb3J0aW5n4oCdLiBUaGlzIG1ha2VzIHNlbnNlIGZvciBjb2xsYXRpb24gQVBJcywgYW5kIGl0IHdvdWxkIGJlXG4gICAgLy8gcG9zc2libGUgdG8gZXhwcmVzcyB0aGlzIGluIEJDUCA0NyBsYW5ndWFnZSB0YWdzIHZpYSBVbmljb2RlXG4gICAgLy8gZXh0ZW5zaW9ucyAoZWcuLCBlcy11LWNvLXRyYWQgaXMgU3BhbmlzaCB3aXRoIHRyYWRpdGlvbmFsXG4gICAgLy8gc29ydGluZykuIEhvd2V2ZXIsIGZvciBzdG9yaW5nIG5hbWVzIGluIGZvbnRzLCB0aGUgZGlzdGluY3Rpb25cbiAgICAvLyBkb2VzIG5vdCBtYWtlIHNlbnNlLCBzbyB3ZSBnaXZlIOKAnGVz4oCdIGluIGJvdGggY2FzZXMuXG4gICAgMHgwQzBBOiAnZXMnLFxuICAgIDB4MDQwQTogJ2VzJyxcblxuICAgIDB4NTQwQTogJ2VzLVVTJyxcbiAgICAweDM4MEE6ICdlcy1VWScsXG4gICAgMHgyMDBBOiAnZXMtVkUnLFxuICAgIDB4MDgxRDogJ3N2LUZJJyxcbiAgICAweDA0MUQ6ICdzdicsXG4gICAgMHgwNDVBOiAnc3lyJyxcbiAgICAweDA0Mjg6ICd0ZycsXG4gICAgMHgwODVGOiAndHptJyxcbiAgICAweDA0NDk6ICd0YScsXG4gICAgMHgwNDQ0OiAndHQnLFxuICAgIDB4MDQ0QTogJ3RlJyxcbiAgICAweDA0MUU6ICd0aCcsXG4gICAgMHgwNDUxOiAnYm8nLFxuICAgIDB4MDQxRjogJ3RyJyxcbiAgICAweDA0NDI6ICd0aycsXG4gICAgMHgwNDgwOiAndWcnLFxuICAgIDB4MDQyMjogJ3VrJyxcbiAgICAweDA0MkU6ICdoc2InLFxuICAgIDB4MDQyMDogJ3VyJyxcbiAgICAweDA4NDM6ICd1ei1DeXJsJyxcbiAgICAweDA0NDM6ICd1eicsXG4gICAgMHgwNDJBOiAndmknLFxuICAgIDB4MDQ1MjogJ2N5JyxcbiAgICAweDA0ODg6ICd3bycsXG4gICAgMHgwNDg1OiAnc2FoJyxcbiAgICAweDA0Nzg6ICdpaScsXG4gICAgMHgwNDZBOiAneW8nXG59O1xuXG4vLyBSZXR1cm5zIGEgSUVURiBCQ1AgNDcgbGFuZ3VhZ2UgY29kZSwgZm9yIGV4YW1wbGUgJ3poLUhhbnQnXG4vLyBmb3IgJ0NoaW5lc2UgaW4gdGhlIHRyYWRpdGlvbmFsIHNjcmlwdCcuXG5mdW5jdGlvbiBnZXRMYW5ndWFnZUNvZGUocGxhdGZvcm1JRCwgbGFuZ3VhZ2VJRCwgbHRhZykge1xuICAgIHN3aXRjaCAocGxhdGZvcm1JRCkge1xuICAgICAgICBjYXNlIDA6ICAvLyBVbmljb2RlXG4gICAgICAgICAgICBpZiAobGFuZ3VhZ2VJRCA9PT0gMHhGRkZGKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1bmQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsdGFnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGx0YWdbbGFuZ3VhZ2VJRF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTogIC8vIE1hY2ludG9zaFxuICAgICAgICAgICAgcmV0dXJuIG1hY0xhbmd1YWdlc1tsYW5ndWFnZUlEXTtcblxuICAgICAgICBjYXNlIDM6ICAvLyBXaW5kb3dzXG4gICAgICAgICAgICByZXR1cm4gd2luZG93c0xhbmd1YWdlc1tsYW5ndWFnZUlEXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG52YXIgdXRmMTYgPSAndXRmLTE2JztcblxuLy8gTWFjT1Mgc2NyaXB0IElEIOKGkiBlbmNvZGluZy4gVGhpcyB0YWJsZSBzdG9yZXMgdGhlIGRlZmF1bHQgY2FzZSxcbi8vIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIGJ5IG1hY0xhbmd1YWdlRW5jb2RpbmdzLlxudmFyIG1hY1NjcmlwdEVuY29kaW5ncyA9IHtcbiAgICAwOiAnbWFjaW50b3NoJywgICAgICAgICAgIC8vIHNtUm9tYW5cbiAgICAxOiAneC1tYWMtamFwYW5lc2UnLCAgICAgIC8vIHNtSmFwYW5lc2VcbiAgICAyOiAneC1tYWMtY2hpbmVzZXRyYWQnLCAgIC8vIHNtVHJhZENoaW5lc2VcbiAgICAzOiAneC1tYWMta29yZWFuJywgICAgICAgIC8vIHNtS29yZWFuXG4gICAgNjogJ3gtbWFjLWdyZWVrJywgICAgICAgICAvLyBzbUdyZWVrXG4gICAgNzogJ3gtbWFjLWN5cmlsbGljJywgICAgICAvLyBzbUN5cmlsbGljXG4gICAgOTogJ3gtbWFjLWRldmFuYWdhaScsICAgICAvLyBzbURldmFuYWdhcmlcbiAgICAxMDogJ3gtbWFjLWd1cm11a2hpJywgICAgIC8vIHNtR3VybXVraGlcbiAgICAxMTogJ3gtbWFjLWd1amFyYXRpJywgICAgIC8vIHNtR3VqYXJhdGlcbiAgICAxMjogJ3gtbWFjLW9yaXlhJywgICAgICAgIC8vIHNtT3JpeWFcbiAgICAxMzogJ3gtbWFjLWJlbmdhbGknLCAgICAgIC8vIHNtQmVuZ2FsaVxuICAgIDE0OiAneC1tYWMtdGFtaWwnLCAgICAgICAgLy8gc21UYW1pbFxuICAgIDE1OiAneC1tYWMtdGVsdWd1JywgICAgICAgLy8gc21UZWx1Z3VcbiAgICAxNjogJ3gtbWFjLWthbm5hZGEnLCAgICAgIC8vIHNtS2FubmFkYVxuICAgIDE3OiAneC1tYWMtbWFsYXlhbGFtJywgICAgLy8gc21NYWxheWFsYW1cbiAgICAxODogJ3gtbWFjLXNpbmhhbGVzZScsICAgIC8vIHNtU2luaGFsZXNlXG4gICAgMTk6ICd4LW1hYy1idXJtZXNlJywgICAgICAvLyBzbUJ1cm1lc2VcbiAgICAyMDogJ3gtbWFjLWtobWVyJywgICAgICAgIC8vIHNtS2htZXJcbiAgICAyMTogJ3gtbWFjLXRoYWknLCAgICAgICAgIC8vIHNtVGhhaVxuICAgIDIyOiAneC1tYWMtbGFvJywgICAgICAgICAgLy8gc21MYW9cbiAgICAyMzogJ3gtbWFjLWdlb3JnaWFuJywgICAgIC8vIHNtR2VvcmdpYW5cbiAgICAyNDogJ3gtbWFjLWFybWVuaWFuJywgICAgIC8vIHNtQXJtZW5pYW5cbiAgICAyNTogJ3gtbWFjLWNoaW5lc2VzaW1wJywgIC8vIHNtU2ltcENoaW5lc2VcbiAgICAyNjogJ3gtbWFjLXRpYmV0YW4nLCAgICAgIC8vIHNtVGliZXRhblxuICAgIDI3OiAneC1tYWMtbW9uZ29saWFuJywgICAgLy8gc21Nb25nb2xpYW5cbiAgICAyODogJ3gtbWFjLWV0aGlvcGljJywgICAgIC8vIHNtRXRoaW9waWNcbiAgICAyOTogJ3gtbWFjLWNlJywgICAgICAgICAgIC8vIHNtQ2VudHJhbEV1cm9Sb21hblxuICAgIDMwOiAneC1tYWMtdmlldG5hbWVzZScsICAgLy8gc21WaWV0bmFtZXNlXG4gICAgMzE6ICd4LW1hYy1leHRhcmFiaWMnICAgICAvLyBzbUV4dEFyYWJpY1xufTtcblxuLy8gTWFjT1MgbGFuZ3VhZ2UgSUQg4oaSIGVuY29kaW5nLiBUaGlzIHRhYmxlIHN0b3JlcyB0aGUgZXhjZXB0aW9uYWxcbi8vIGNhc2VzLCB3aGljaCBvdmVycmlkZSBtYWNTY3JpcHRFbmNvZGluZ3MuIEZvciB3cml0aW5nIE1hY09TIG5hbWluZ1xuLy8gdGFibGVzLCB3ZSBuZWVkIHRvIGVtaXQgYSBNYWNPUyBzY3JpcHQgSUQuIFRoZXJlZm9yZSwgd2UgY2Fubm90XG4vLyBtZXJnZSBtYWNTY3JpcHRFbmNvZGluZ3MgaW50byBtYWNMYW5ndWFnZUVuY29kaW5ncy5cbi8vXG4vLyBodHRwOi8vdW5pY29kZS5vcmcvUHVibGljL01BUFBJTkdTL1ZFTkRPUlMvQVBQTEUvUmVhZG1lLnR4dFxudmFyIG1hY0xhbmd1YWdlRW5jb2RpbmdzID0ge1xuICAgIDE1OiAneC1tYWMtaWNlbGFuZGljJywgICAgLy8gbGFuZ0ljZWxhbmRpY1xuICAgIDE3OiAneC1tYWMtdHVya2lzaCcsICAgICAgLy8gbGFuZ1R1cmtpc2hcbiAgICAxODogJ3gtbWFjLWNyb2F0aWFuJywgICAgIC8vIGxhbmdDcm9hdGlhblxuICAgIDI0OiAneC1tYWMtY2UnLCAgICAgICAgICAgLy8gbGFuZ0xpdGh1YW5pYW5cbiAgICAyNTogJ3gtbWFjLWNlJywgICAgICAgICAgIC8vIGxhbmdQb2xpc2hcbiAgICAyNjogJ3gtbWFjLWNlJywgICAgICAgICAgIC8vIGxhbmdIdW5nYXJpYW5cbiAgICAyNzogJ3gtbWFjLWNlJywgICAgICAgICAgIC8vIGxhbmdFc3RvbmlhblxuICAgIDI4OiAneC1tYWMtY2UnLCAgICAgICAgICAgLy8gbGFuZ0xhdHZpYW5cbiAgICAzMDogJ3gtbWFjLWljZWxhbmRpYycsICAgIC8vIGxhbmdGYXJvZXNlXG4gICAgMzc6ICd4LW1hYy1yb21hbmlhbicsICAgICAvLyBsYW5nUm9tYW5pYW5cbiAgICAzODogJ3gtbWFjLWNlJywgICAgICAgICAgIC8vIGxhbmdDemVjaFxuICAgIDM5OiAneC1tYWMtY2UnLCAgICAgICAgICAgLy8gbGFuZ1Nsb3Zha1xuICAgIDQwOiAneC1tYWMtY2UnLCAgICAgICAgICAgLy8gbGFuZ1Nsb3ZlbmlhblxuICAgIDE0MzogJ3gtbWFjLWludWl0JywgICAgICAgLy8gbGFuZ0ludWt0aXR1dFxuICAgIDE0NjogJ3gtbWFjLWdhZWxpYycgICAgICAgLy8gbGFuZ0lyaXNoR2FlbGljU2NyaXB0XG59O1xuXG5mdW5jdGlvbiBnZXRFbmNvZGluZyhwbGF0Zm9ybUlELCBlbmNvZGluZ0lELCBsYW5ndWFnZUlEKSB7XG4gICAgc3dpdGNoIChwbGF0Zm9ybUlEKSB7XG4gICAgICAgIGNhc2UgMDogIC8vIFVuaWNvZGVcbiAgICAgICAgICAgIHJldHVybiB1dGYxNjtcblxuICAgICAgICBjYXNlIDE6ICAvLyBBcHBsZSBNYWNpbnRvc2hcbiAgICAgICAgICAgIHJldHVybiBtYWNMYW5ndWFnZUVuY29kaW5nc1tsYW5ndWFnZUlEXSB8fCBtYWNTY3JpcHRFbmNvZGluZ3NbZW5jb2RpbmdJRF07XG5cbiAgICAgICAgY2FzZSAzOiAgLy8gTWljcm9zb2Z0IFdpbmRvd3NcbiAgICAgICAgICAgIGlmIChlbmNvZGluZ0lEID09PSAxIHx8IGVuY29kaW5nSUQgPT09IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0ZjE2O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vLyBQYXJzZSB0aGUgbmFtaW5nIGBuYW1lYCB0YWJsZS5cbi8vIEZJWE1FOiBGb3JtYXQgMSBhZGRpdGlvbmFsIGZpZWxkcyBhcmUgbm90IHN1cHBvcnRlZCB5ZXQuXG4vLyBsdGFnIGlzIHRoZSBjb250ZW50IG9mIHRoZSBgbHRhZycgdGFibGUsIHN1Y2ggYXMgWydlbicsICd6aC1IYW5zJywgJ2RlLUNILTE5MDQnXS5cbmZ1bmN0aW9uIHBhcnNlTmFtZVRhYmxlKGRhdGEsIHN0YXJ0LCBsdGFnKSB7XG4gICAgdmFyIG5hbWUgPSB7fTtcbiAgICB2YXIgcCA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuICAgIHZhciBmb3JtYXQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgdmFyIGNvdW50ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIHZhciBzdHJpbmdPZmZzZXQgPSBwLm9mZnNldCArIHAucGFyc2VVU2hvcnQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgdmFyIHBsYXRmb3JtSUQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciBlbmNvZGluZ0lEID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICB2YXIgbGFuZ3VhZ2VJRCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgdmFyIG5hbWVJRCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgdmFyIHByb3BlcnR5ID0gbmFtZVRhYmxlTmFtZXNbbmFtZUlEXSB8fCBuYW1lSUQ7XG4gICAgICAgIHZhciBieXRlTGVuZ3RoID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICB2YXIgbGFuZ3VhZ2UgPSBnZXRMYW5ndWFnZUNvZGUocGxhdGZvcm1JRCwgbGFuZ3VhZ2VJRCwgbHRhZyk7XG4gICAgICAgIHZhciBlbmNvZGluZyA9IGdldEVuY29kaW5nKHBsYXRmb3JtSUQsIGVuY29kaW5nSUQsIGxhbmd1YWdlSUQpO1xuICAgICAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiBsYW5ndWFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9ICh2b2lkIDApO1xuICAgICAgICAgICAgaWYgKGVuY29kaW5nID09PSB1dGYxNikge1xuICAgICAgICAgICAgICAgIHRleHQgPSBkZWNvZGUuVVRGMTYoZGF0YSwgc3RyaW5nT2Zmc2V0ICsgb2Zmc2V0LCBieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGRlY29kZS5NQUNTVFJJTkcoZGF0YSwgc3RyaW5nT2Zmc2V0ICsgb2Zmc2V0LCBieXRlTGVuZ3RoLCBlbmNvZGluZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0aW9ucyA9IG5hbWVbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbnMgPSBuYW1lW3Byb3BlcnR5XSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uc1tsYW5ndWFnZV0gPSB0ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxhbmdUYWdDb3VudCA9IDA7XG4gICAgaWYgKGZvcm1hdCA9PT0gMSkge1xuICAgICAgICAvLyBGSVhNRTogQWxzbyBoYW5kbGUgTWljcm9zb2Z0J3MgJ25hbWUnIHRhYmxlIDEuXG4gICAgICAgIGxhbmdUYWdDb3VudCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZTtcbn1cblxuLy8gezIzOiAnZm9vJ30g4oaSIHsnZm9vJzogMjN9XG4vLyBbJ2JhcicsICdiYXonXSDihpIgeydiYXInOiAwLCAnYmF6JzogMX1cbmZ1bmN0aW9uIHJldmVyc2VEaWN0KGRpY3QpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGRpY3QpIHtcbiAgICAgICAgcmVzdWx0W2RpY3Rba2V5XV0gPSBwYXJzZUludChrZXkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1ha2VOYW1lUmVjb3JkKHBsYXRmb3JtSUQsIGVuY29kaW5nSUQsIGxhbmd1YWdlSUQsIG5hbWVJRCwgbGVuZ3RoLCBvZmZzZXQpIHtcbiAgICByZXR1cm4gbmV3IHRhYmxlLlJlY29yZCgnTmFtZVJlY29yZCcsIFtcbiAgICAgICAge25hbWU6ICdwbGF0Zm9ybUlEJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBwbGF0Zm9ybUlEfSxcbiAgICAgICAge25hbWU6ICdlbmNvZGluZ0lEJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBlbmNvZGluZ0lEfSxcbiAgICAgICAge25hbWU6ICdsYW5ndWFnZUlEJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBsYW5ndWFnZUlEfSxcbiAgICAgICAge25hbWU6ICduYW1lSUQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IG5hbWVJRH0sXG4gICAgICAgIHtuYW1lOiAnbGVuZ3RoJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBsZW5ndGh9LFxuICAgICAgICB7bmFtZTogJ29mZnNldCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogb2Zmc2V0fVxuICAgIF0pO1xufVxuXG4vLyBGaW5kcyB0aGUgcG9zaXRpb24gb2YgbmVlZGxlIGluIGhheXN0YWNrLCBvciAtMSBpZiBub3QgdGhlcmUuXG4vLyBMaWtlIFN0cmluZy5pbmRleE9mKCksIGJ1dCBmb3IgYXJyYXlzLlxuZnVuY3Rpb24gZmluZFN1YkFycmF5KG5lZWRsZSwgaGF5c3RhY2spIHtcbiAgICB2YXIgbmVlZGxlTGVuZ3RoID0gbmVlZGxlLmxlbmd0aDtcbiAgICB2YXIgbGltaXQgPSBoYXlzdGFjay5sZW5ndGggLSBuZWVkbGVMZW5ndGggKyAxO1xuXG4gICAgbG9vcDpcbiAgICBmb3IgKHZhciBwb3MgPSAwOyBwb3MgPCBsaW1pdDsgcG9zKyspIHtcbiAgICAgICAgZm9yICg7IHBvcyA8IGxpbWl0OyBwb3MrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBuZWVkbGVMZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIGlmIChoYXlzdGFja1twb3MgKyBrXSAhPT0gbmVlZGxlW2tdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIGxvb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBhZGRTdHJpbmdUb1Bvb2wocywgcG9vbCkge1xuICAgIHZhciBvZmZzZXQgPSBmaW5kU3ViQXJyYXkocywgcG9vbCk7XG4gICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgb2Zmc2V0ID0gcG9vbC5sZW5ndGg7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbiA9IHMubGVuZ3RoO1xuICAgICAgICBmb3IgKDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBwb29sLnB1c2goc1tpXSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXQ7XG59XG5cbmZ1bmN0aW9uIG1ha2VOYW1lVGFibGUobmFtZXMsIGx0YWcpIHtcbiAgICB2YXIgbmFtZUlEO1xuICAgIHZhciBuYW1lSURzID0gW107XG5cbiAgICB2YXIgbmFtZXNXaXRoTnVtZXJpY0tleXMgPSB7fTtcbiAgICB2YXIgbmFtZVRhYmxlSWRzID0gcmV2ZXJzZURpY3QobmFtZVRhYmxlTmFtZXMpO1xuICAgIGZvciAodmFyIGtleSBpbiBuYW1lcykge1xuICAgICAgICB2YXIgaWQgPSBuYW1lVGFibGVJZHNba2V5XTtcbiAgICAgICAgaWYgKGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlkID0ga2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgbmFtZUlEID0gcGFyc2VJbnQoaWQpO1xuXG4gICAgICAgIGlmIChpc05hTihuYW1lSUQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05hbWUgdGFibGUgZW50cnkgXCInICsga2V5ICsgJ1wiIGRvZXMgbm90IGV4aXN0LCBzZWUgbmFtZVRhYmxlTmFtZXMgZm9yIGNvbXBsZXRlIGxpc3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBuYW1lc1dpdGhOdW1lcmljS2V5c1tuYW1lSURdID0gbmFtZXNba2V5XTtcbiAgICAgICAgbmFtZUlEcy5wdXNoKG5hbWVJRCk7XG4gICAgfVxuXG4gICAgdmFyIG1hY0xhbmd1YWdlSWRzID0gcmV2ZXJzZURpY3QobWFjTGFuZ3VhZ2VzKTtcbiAgICB2YXIgd2luZG93c0xhbmd1YWdlSWRzID0gcmV2ZXJzZURpY3Qod2luZG93c0xhbmd1YWdlcyk7XG5cbiAgICB2YXIgbmFtZVJlY29yZHMgPSBbXTtcbiAgICB2YXIgc3RyaW5nUG9vbCA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lSURzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5hbWVJRCA9IG5hbWVJRHNbaV07XG4gICAgICAgIHZhciB0cmFuc2xhdGlvbnMgPSBuYW1lc1dpdGhOdW1lcmljS2V5c1tuYW1lSURdO1xuICAgICAgICBmb3IgKHZhciBsYW5nIGluIHRyYW5zbGF0aW9ucykge1xuICAgICAgICAgICAgdmFyIHRleHQgPSB0cmFuc2xhdGlvbnNbbGFuZ107XG5cbiAgICAgICAgICAgIC8vIEZvciBNYWNPUywgd2UgdHJ5IHRvIGVtaXQgdGhlIG5hbWUgaW4gdGhlIGZvcm0gdGhhdCB3YXMgaW50cm9kdWNlZFxuICAgICAgICAgICAgLy8gaW4gdGhlIGluaXRpYWwgdmVyc2lvbiBvZiB0aGUgVHJ1ZVR5cGUgc3BlYyAoaW4gdGhlIGxhdGUgMTk4MHMpLlxuICAgICAgICAgICAgLy8gSG93ZXZlciwgdGhpcyBjYW4gZmFpbCBmb3IgdmFyaW91cyByZWFzb25zOiB0aGUgcmVxdWVzdGVkIEJDUCA0N1xuICAgICAgICAgICAgLy8gbGFuZ3VhZ2UgY29kZSBtaWdodCBub3QgaGF2ZSBhbiBvbGQtc3R5bGUgTWFjIGVxdWl2YWxlbnQ7XG4gICAgICAgICAgICAvLyB3ZSBtaWdodCBub3QgaGF2ZSBhIGNvZGVjIGZvciB0aGUgbmVlZGVkIGNoYXJhY3RlciBlbmNvZGluZztcbiAgICAgICAgICAgIC8vIG9yIHRoZSBuYW1lIG1pZ2h0IGNvbnRhaW4gY2hhcmFjdGVycyB0aGF0IGNhbm5vdCBiZSBleHByZXNzZWRcbiAgICAgICAgICAgIC8vIGluIHRoZSBvbGQtc3R5bGUgTWFjaW50b3NoIGVuY29kaW5nLiBJbiBjYXNlIG9mIGZhaWx1cmUsIHdlIGVtaXRcbiAgICAgICAgICAgIC8vIHRoZSBuYW1lIGluIGEgbW9yZSBtb2Rlcm4gZmFzaGlvbiAoVW5pY29kZSBlbmNvZGluZyB3aXRoIEJDUCA0N1xuICAgICAgICAgICAgLy8gbGFuZ3VhZ2UgdGFncykgdGhhdCBpcyByZWNvZ25pemVkIGJ5IE1hY09TIDEwLjUsIHJlbGVhc2VkIGluIDIwMDkuXG4gICAgICAgICAgICAvLyBJZiBmb250cyB3ZXJlIG9ubHkgcmVhZCBieSBvcGVyYXRpbmcgc3lzdGVtcywgd2UgY291bGQgc2ltcGx5XG4gICAgICAgICAgICAvLyBlbWl0IGFsbCBuYW1lcyBpbiB0aGUgbW9kZXJuIGZvcm07IHRoaXMgd291bGQgYmUgbXVjaCBlYXNpZXIuXG4gICAgICAgICAgICAvLyBIb3dldmVyLCB0aGVyZSBhcmUgbWFueSBhcHBsaWNhdGlvbnMgYW5kIGxpYnJhcmllcyB0aGF0IHJlYWRcbiAgICAgICAgICAgIC8vICduYW1lJyB0YWJsZXMgZGlyZWN0bHksIGFuZCB0aGVzZSB3aWxsIHVzdWFsbHkgb25seSByZWNvZ25pemVcbiAgICAgICAgICAgIC8vIHRoZSBhbmNpZW50IGZvcm0gKHNpbGVudGx5IHNraXBwaW5nIHRoZSB1bnJlY29nbml6ZWQgbmFtZXMpLlxuICAgICAgICAgICAgdmFyIG1hY1BsYXRmb3JtID0gMTsgIC8vIE1hY2ludG9zaFxuICAgICAgICAgICAgdmFyIG1hY0xhbmd1YWdlID0gbWFjTGFuZ3VhZ2VJZHNbbGFuZ107XG4gICAgICAgICAgICB2YXIgbWFjU2NyaXB0ID0gbWFjTGFuZ3VhZ2VUb1NjcmlwdFttYWNMYW5ndWFnZV07XG4gICAgICAgICAgICB2YXIgbWFjRW5jb2RpbmcgPSBnZXRFbmNvZGluZyhtYWNQbGF0Zm9ybSwgbWFjU2NyaXB0LCBtYWNMYW5ndWFnZSk7XG4gICAgICAgICAgICB2YXIgbWFjTmFtZSA9IGVuY29kZS5NQUNTVFJJTkcodGV4dCwgbWFjRW5jb2RpbmcpO1xuICAgICAgICAgICAgaWYgKG1hY05hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1hY1BsYXRmb3JtID0gMDsgIC8vIFVuaWNvZGVcbiAgICAgICAgICAgICAgICBtYWNMYW5ndWFnZSA9IGx0YWcuaW5kZXhPZihsYW5nKTtcbiAgICAgICAgICAgICAgICBpZiAobWFjTGFuZ3VhZ2UgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hY0xhbmd1YWdlID0gbHRhZy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGx0YWcucHVzaChsYW5nKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBtYWNTY3JpcHQgPSA0OyAgLy8gVW5pY29kZSAyLjAgYW5kIGxhdGVyXG4gICAgICAgICAgICAgICAgbWFjTmFtZSA9IGVuY29kZS5VVEYxNih0ZXh0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG1hY05hbWVPZmZzZXQgPSBhZGRTdHJpbmdUb1Bvb2wobWFjTmFtZSwgc3RyaW5nUG9vbCk7XG4gICAgICAgICAgICBuYW1lUmVjb3Jkcy5wdXNoKG1ha2VOYW1lUmVjb3JkKG1hY1BsYXRmb3JtLCBtYWNTY3JpcHQsIG1hY0xhbmd1YWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lSUQsIG1hY05hbWUubGVuZ3RoLCBtYWNOYW1lT2Zmc2V0KSk7XG5cbiAgICAgICAgICAgIHZhciB3aW5MYW5ndWFnZSA9IHdpbmRvd3NMYW5ndWFnZUlkc1tsYW5nXTtcbiAgICAgICAgICAgIGlmICh3aW5MYW5ndWFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpbk5hbWUgPSBlbmNvZGUuVVRGMTYodGV4dCk7XG4gICAgICAgICAgICAgICAgdmFyIHdpbk5hbWVPZmZzZXQgPSBhZGRTdHJpbmdUb1Bvb2wod2luTmFtZSwgc3RyaW5nUG9vbCk7XG4gICAgICAgICAgICAgICAgbmFtZVJlY29yZHMucHVzaChtYWtlTmFtZVJlY29yZCgzLCAxLCB3aW5MYW5ndWFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVJRCwgd2luTmFtZS5sZW5ndGgsIHdpbk5hbWVPZmZzZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5hbWVSZWNvcmRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gKChhLnBsYXRmb3JtSUQgLSBiLnBsYXRmb3JtSUQpIHx8XG4gICAgICAgICAgICAgICAgKGEuZW5jb2RpbmdJRCAtIGIuZW5jb2RpbmdJRCkgfHxcbiAgICAgICAgICAgICAgICAoYS5sYW5ndWFnZUlEIC0gYi5sYW5ndWFnZUlEKSB8fFxuICAgICAgICAgICAgICAgIChhLm5hbWVJRCAtIGIubmFtZUlEKSk7XG4gICAgfSk7XG5cbiAgICB2YXIgdCA9IG5ldyB0YWJsZS5UYWJsZSgnbmFtZScsIFtcbiAgICAgICAge25hbWU6ICdmb3JtYXQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2NvdW50JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBuYW1lUmVjb3Jkcy5sZW5ndGh9LFxuICAgICAgICB7bmFtZTogJ3N0cmluZ09mZnNldCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogNiArIG5hbWVSZWNvcmRzLmxlbmd0aCAqIDEyfVxuICAgIF0pO1xuXG4gICAgZm9yICh2YXIgciA9IDA7IHIgPCBuYW1lUmVjb3Jkcy5sZW5ndGg7IHIrKykge1xuICAgICAgICB0LmZpZWxkcy5wdXNoKHtuYW1lOiAncmVjb3JkXycgKyByLCB0eXBlOiAnUkVDT1JEJywgdmFsdWU6IG5hbWVSZWNvcmRzW3JdfSk7XG4gICAgfVxuXG4gICAgdC5maWVsZHMucHVzaCh7bmFtZTogJ3N0cmluZ3MnLCB0eXBlOiAnTElURVJBTCcsIHZhbHVlOiBzdHJpbmdQb29sfSk7XG4gICAgcmV0dXJuIHQ7XG59XG5cbnZhciBfbmFtZSA9IHsgcGFyc2U6IHBhcnNlTmFtZVRhYmxlLCBtYWtlOiBtYWtlTmFtZVRhYmxlIH07XG5cbi8vIFRoZSBgT1MvMmAgdGFibGUgY29udGFpbnMgbWV0cmljcyByZXF1aXJlZCBpbiBPcGVuVHlwZSBmb250cy5cblxudmFyIHVuaWNvZGVSYW5nZXMgPSBbXG4gICAge2JlZ2luOiAweDAwMDAsIGVuZDogMHgwMDdGfSwgLy8gQmFzaWMgTGF0aW5cbiAgICB7YmVnaW46IDB4MDA4MCwgZW5kOiAweDAwRkZ9LCAvLyBMYXRpbi0xIFN1cHBsZW1lbnRcbiAgICB7YmVnaW46IDB4MDEwMCwgZW5kOiAweDAxN0Z9LCAvLyBMYXRpbiBFeHRlbmRlZC1BXG4gICAge2JlZ2luOiAweDAxODAsIGVuZDogMHgwMjRGfSwgLy8gTGF0aW4gRXh0ZW5kZWQtQlxuICAgIHtiZWdpbjogMHgwMjUwLCBlbmQ6IDB4MDJBRn0sIC8vIElQQSBFeHRlbnNpb25zXG4gICAge2JlZ2luOiAweDAyQjAsIGVuZDogMHgwMkZGfSwgLy8gU3BhY2luZyBNb2RpZmllciBMZXR0ZXJzXG4gICAge2JlZ2luOiAweDAzMDAsIGVuZDogMHgwMzZGfSwgLy8gQ29tYmluaW5nIERpYWNyaXRpY2FsIE1hcmtzXG4gICAge2JlZ2luOiAweDAzNzAsIGVuZDogMHgwM0ZGfSwgLy8gR3JlZWsgYW5kIENvcHRpY1xuICAgIHtiZWdpbjogMHgyQzgwLCBlbmQ6IDB4MkNGRn0sIC8vIENvcHRpY1xuICAgIHtiZWdpbjogMHgwNDAwLCBlbmQ6IDB4MDRGRn0sIC8vIEN5cmlsbGljXG4gICAge2JlZ2luOiAweDA1MzAsIGVuZDogMHgwNThGfSwgLy8gQXJtZW5pYW5cbiAgICB7YmVnaW46IDB4MDU5MCwgZW5kOiAweDA1RkZ9LCAvLyBIZWJyZXdcbiAgICB7YmVnaW46IDB4QTUwMCwgZW5kOiAweEE2M0Z9LCAvLyBWYWlcbiAgICB7YmVnaW46IDB4MDYwMCwgZW5kOiAweDA2RkZ9LCAvLyBBcmFiaWNcbiAgICB7YmVnaW46IDB4MDdDMCwgZW5kOiAweDA3RkZ9LCAvLyBOS29cbiAgICB7YmVnaW46IDB4MDkwMCwgZW5kOiAweDA5N0Z9LCAvLyBEZXZhbmFnYXJpXG4gICAge2JlZ2luOiAweDA5ODAsIGVuZDogMHgwOUZGfSwgLy8gQmVuZ2FsaVxuICAgIHtiZWdpbjogMHgwQTAwLCBlbmQ6IDB4MEE3Rn0sIC8vIEd1cm11a2hpXG4gICAge2JlZ2luOiAweDBBODAsIGVuZDogMHgwQUZGfSwgLy8gR3VqYXJhdGlcbiAgICB7YmVnaW46IDB4MEIwMCwgZW5kOiAweDBCN0Z9LCAvLyBPcml5YVxuICAgIHtiZWdpbjogMHgwQjgwLCBlbmQ6IDB4MEJGRn0sIC8vIFRhbWlsXG4gICAge2JlZ2luOiAweDBDMDAsIGVuZDogMHgwQzdGfSwgLy8gVGVsdWd1XG4gICAge2JlZ2luOiAweDBDODAsIGVuZDogMHgwQ0ZGfSwgLy8gS2FubmFkYVxuICAgIHtiZWdpbjogMHgwRDAwLCBlbmQ6IDB4MEQ3Rn0sIC8vIE1hbGF5YWxhbVxuICAgIHtiZWdpbjogMHgwRTAwLCBlbmQ6IDB4MEU3Rn0sIC8vIFRoYWlcbiAgICB7YmVnaW46IDB4MEU4MCwgZW5kOiAweDBFRkZ9LCAvLyBMYW9cbiAgICB7YmVnaW46IDB4MTBBMCwgZW5kOiAweDEwRkZ9LCAvLyBHZW9yZ2lhblxuICAgIHtiZWdpbjogMHgxQjAwLCBlbmQ6IDB4MUI3Rn0sIC8vIEJhbGluZXNlXG4gICAge2JlZ2luOiAweDExMDAsIGVuZDogMHgxMUZGfSwgLy8gSGFuZ3VsIEphbW9cbiAgICB7YmVnaW46IDB4MUUwMCwgZW5kOiAweDFFRkZ9LCAvLyBMYXRpbiBFeHRlbmRlZCBBZGRpdGlvbmFsXG4gICAge2JlZ2luOiAweDFGMDAsIGVuZDogMHgxRkZGfSwgLy8gR3JlZWsgRXh0ZW5kZWRcbiAgICB7YmVnaW46IDB4MjAwMCwgZW5kOiAweDIwNkZ9LCAvLyBHZW5lcmFsIFB1bmN0dWF0aW9uXG4gICAge2JlZ2luOiAweDIwNzAsIGVuZDogMHgyMDlGfSwgLy8gU3VwZXJzY3JpcHRzIEFuZCBTdWJzY3JpcHRzXG4gICAge2JlZ2luOiAweDIwQTAsIGVuZDogMHgyMENGfSwgLy8gQ3VycmVuY3kgU3ltYm9sXG4gICAge2JlZ2luOiAweDIwRDAsIGVuZDogMHgyMEZGfSwgLy8gQ29tYmluaW5nIERpYWNyaXRpY2FsIE1hcmtzIEZvciBTeW1ib2xzXG4gICAge2JlZ2luOiAweDIxMDAsIGVuZDogMHgyMTRGfSwgLy8gTGV0dGVybGlrZSBTeW1ib2xzXG4gICAge2JlZ2luOiAweDIxNTAsIGVuZDogMHgyMThGfSwgLy8gTnVtYmVyIEZvcm1zXG4gICAge2JlZ2luOiAweDIxOTAsIGVuZDogMHgyMUZGfSwgLy8gQXJyb3dzXG4gICAge2JlZ2luOiAweDIyMDAsIGVuZDogMHgyMkZGfSwgLy8gTWF0aGVtYXRpY2FsIE9wZXJhdG9yc1xuICAgIHtiZWdpbjogMHgyMzAwLCBlbmQ6IDB4MjNGRn0sIC8vIE1pc2NlbGxhbmVvdXMgVGVjaG5pY2FsXG4gICAge2JlZ2luOiAweDI0MDAsIGVuZDogMHgyNDNGfSwgLy8gQ29udHJvbCBQaWN0dXJlc1xuICAgIHtiZWdpbjogMHgyNDQwLCBlbmQ6IDB4MjQ1Rn0sIC8vIE9wdGljYWwgQ2hhcmFjdGVyIFJlY29nbml0aW9uXG4gICAge2JlZ2luOiAweDI0NjAsIGVuZDogMHgyNEZGfSwgLy8gRW5jbG9zZWQgQWxwaGFudW1lcmljc1xuICAgIHtiZWdpbjogMHgyNTAwLCBlbmQ6IDB4MjU3Rn0sIC8vIEJveCBEcmF3aW5nXG4gICAge2JlZ2luOiAweDI1ODAsIGVuZDogMHgyNTlGfSwgLy8gQmxvY2sgRWxlbWVudHNcbiAgICB7YmVnaW46IDB4MjVBMCwgZW5kOiAweDI1RkZ9LCAvLyBHZW9tZXRyaWMgU2hhcGVzXG4gICAge2JlZ2luOiAweDI2MDAsIGVuZDogMHgyNkZGfSwgLy8gTWlzY2VsbGFuZW91cyBTeW1ib2xzXG4gICAge2JlZ2luOiAweDI3MDAsIGVuZDogMHgyN0JGfSwgLy8gRGluZ2JhdHNcbiAgICB7YmVnaW46IDB4MzAwMCwgZW5kOiAweDMwM0Z9LCAvLyBDSksgU3ltYm9scyBBbmQgUHVuY3R1YXRpb25cbiAgICB7YmVnaW46IDB4MzA0MCwgZW5kOiAweDMwOUZ9LCAvLyBIaXJhZ2FuYVxuICAgIHtiZWdpbjogMHgzMEEwLCBlbmQ6IDB4MzBGRn0sIC8vIEthdGFrYW5hXG4gICAge2JlZ2luOiAweDMxMDAsIGVuZDogMHgzMTJGfSwgLy8gQm9wb21vZm9cbiAgICB7YmVnaW46IDB4MzEzMCwgZW5kOiAweDMxOEZ9LCAvLyBIYW5ndWwgQ29tcGF0aWJpbGl0eSBKYW1vXG4gICAge2JlZ2luOiAweEE4NDAsIGVuZDogMHhBODdGfSwgLy8gUGhhZ3MtcGFcbiAgICB7YmVnaW46IDB4MzIwMCwgZW5kOiAweDMyRkZ9LCAvLyBFbmNsb3NlZCBDSksgTGV0dGVycyBBbmQgTW9udGhzXG4gICAge2JlZ2luOiAweDMzMDAsIGVuZDogMHgzM0ZGfSwgLy8gQ0pLIENvbXBhdGliaWxpdHlcbiAgICB7YmVnaW46IDB4QUMwMCwgZW5kOiAweEQ3QUZ9LCAvLyBIYW5ndWwgU3lsbGFibGVzXG4gICAge2JlZ2luOiAweEQ4MDAsIGVuZDogMHhERkZGfSwgLy8gTm9uLVBsYW5lIDAgKlxuICAgIHtiZWdpbjogMHgxMDkwMCwgZW5kOiAweDEwOTFGfSwgLy8gUGhvZW5pY2lhXG4gICAge2JlZ2luOiAweDRFMDAsIGVuZDogMHg5RkZGfSwgLy8gQ0pLIFVuaWZpZWQgSWRlb2dyYXBoc1xuICAgIHtiZWdpbjogMHhFMDAwLCBlbmQ6IDB4RjhGRn0sIC8vIFByaXZhdGUgVXNlIEFyZWEgKHBsYW5lIDApXG4gICAge2JlZ2luOiAweDMxQzAsIGVuZDogMHgzMUVGfSwgLy8gQ0pLIFN0cm9rZXNcbiAgICB7YmVnaW46IDB4RkIwMCwgZW5kOiAweEZCNEZ9LCAvLyBBbHBoYWJldGljIFByZXNlbnRhdGlvbiBGb3Jtc1xuICAgIHtiZWdpbjogMHhGQjUwLCBlbmQ6IDB4RkRGRn0sIC8vIEFyYWJpYyBQcmVzZW50YXRpb24gRm9ybXMtQVxuICAgIHtiZWdpbjogMHhGRTIwLCBlbmQ6IDB4RkUyRn0sIC8vIENvbWJpbmluZyBIYWxmIE1hcmtzXG4gICAge2JlZ2luOiAweEZFMTAsIGVuZDogMHhGRTFGfSwgLy8gVmVydGljYWwgRm9ybXNcbiAgICB7YmVnaW46IDB4RkU1MCwgZW5kOiAweEZFNkZ9LCAvLyBTbWFsbCBGb3JtIFZhcmlhbnRzXG4gICAge2JlZ2luOiAweEZFNzAsIGVuZDogMHhGRUZGfSwgLy8gQXJhYmljIFByZXNlbnRhdGlvbiBGb3Jtcy1CXG4gICAge2JlZ2luOiAweEZGMDAsIGVuZDogMHhGRkVGfSwgLy8gSGFsZndpZHRoIEFuZCBGdWxsd2lkdGggRm9ybXNcbiAgICB7YmVnaW46IDB4RkZGMCwgZW5kOiAweEZGRkZ9LCAvLyBTcGVjaWFsc1xuICAgIHtiZWdpbjogMHgwRjAwLCBlbmQ6IDB4MEZGRn0sIC8vIFRpYmV0YW5cbiAgICB7YmVnaW46IDB4MDcwMCwgZW5kOiAweDA3NEZ9LCAvLyBTeXJpYWNcbiAgICB7YmVnaW46IDB4MDc4MCwgZW5kOiAweDA3QkZ9LCAvLyBUaGFhbmFcbiAgICB7YmVnaW46IDB4MEQ4MCwgZW5kOiAweDBERkZ9LCAvLyBTaW5oYWxhXG4gICAge2JlZ2luOiAweDEwMDAsIGVuZDogMHgxMDlGfSwgLy8gTXlhbm1hclxuICAgIHtiZWdpbjogMHgxMjAwLCBlbmQ6IDB4MTM3Rn0sIC8vIEV0aGlvcGljXG4gICAge2JlZ2luOiAweDEzQTAsIGVuZDogMHgxM0ZGfSwgLy8gQ2hlcm9rZWVcbiAgICB7YmVnaW46IDB4MTQwMCwgZW5kOiAweDE2N0Z9LCAvLyBVbmlmaWVkIENhbmFkaWFuIEFib3JpZ2luYWwgU3lsbGFiaWNzXG4gICAge2JlZ2luOiAweDE2ODAsIGVuZDogMHgxNjlGfSwgLy8gT2doYW1cbiAgICB7YmVnaW46IDB4MTZBMCwgZW5kOiAweDE2RkZ9LCAvLyBSdW5pY1xuICAgIHtiZWdpbjogMHgxNzgwLCBlbmQ6IDB4MTdGRn0sIC8vIEtobWVyXG4gICAge2JlZ2luOiAweDE4MDAsIGVuZDogMHgxOEFGfSwgLy8gTW9uZ29saWFuXG4gICAge2JlZ2luOiAweDI4MDAsIGVuZDogMHgyOEZGfSwgLy8gQnJhaWxsZSBQYXR0ZXJuc1xuICAgIHtiZWdpbjogMHhBMDAwLCBlbmQ6IDB4QTQ4Rn0sIC8vIFlpIFN5bGxhYmxlc1xuICAgIHtiZWdpbjogMHgxNzAwLCBlbmQ6IDB4MTcxRn0sIC8vIFRhZ2Fsb2dcbiAgICB7YmVnaW46IDB4MTAzMDAsIGVuZDogMHgxMDMyRn0sIC8vIE9sZCBJdGFsaWNcbiAgICB7YmVnaW46IDB4MTAzMzAsIGVuZDogMHgxMDM0Rn0sIC8vIEdvdGhpY1xuICAgIHtiZWdpbjogMHgxMDQwMCwgZW5kOiAweDEwNDRGfSwgLy8gRGVzZXJldFxuICAgIHtiZWdpbjogMHgxRDAwMCwgZW5kOiAweDFEMEZGfSwgLy8gQnl6YW50aW5lIE11c2ljYWwgU3ltYm9sc1xuICAgIHtiZWdpbjogMHgxRDQwMCwgZW5kOiAweDFEN0ZGfSwgLy8gTWF0aGVtYXRpY2FsIEFscGhhbnVtZXJpYyBTeW1ib2xzXG4gICAge2JlZ2luOiAweEZGMDAwLCBlbmQ6IDB4RkZGRkR9LCAvLyBQcml2YXRlIFVzZSAocGxhbmUgMTUpXG4gICAge2JlZ2luOiAweEZFMDAsIGVuZDogMHhGRTBGfSwgLy8gVmFyaWF0aW9uIFNlbGVjdG9yc1xuICAgIHtiZWdpbjogMHhFMDAwMCwgZW5kOiAweEUwMDdGfSwgLy8gVGFnc1xuICAgIHtiZWdpbjogMHgxOTAwLCBlbmQ6IDB4MTk0Rn0sIC8vIExpbWJ1XG4gICAge2JlZ2luOiAweDE5NTAsIGVuZDogMHgxOTdGfSwgLy8gVGFpIExlXG4gICAge2JlZ2luOiAweDE5ODAsIGVuZDogMHgxOURGfSwgLy8gTmV3IFRhaSBMdWVcbiAgICB7YmVnaW46IDB4MUEwMCwgZW5kOiAweDFBMUZ9LCAvLyBCdWdpbmVzZVxuICAgIHtiZWdpbjogMHgyQzAwLCBlbmQ6IDB4MkM1Rn0sIC8vIEdsYWdvbGl0aWNcbiAgICB7YmVnaW46IDB4MkQzMCwgZW5kOiAweDJEN0Z9LCAvLyBUaWZpbmFnaFxuICAgIHtiZWdpbjogMHg0REMwLCBlbmQ6IDB4NERGRn0sIC8vIFlpamluZyBIZXhhZ3JhbSBTeW1ib2xzXG4gICAge2JlZ2luOiAweEE4MDAsIGVuZDogMHhBODJGfSwgLy8gU3lsb3RpIE5hZ3JpXG4gICAge2JlZ2luOiAweDEwMDAwLCBlbmQ6IDB4MTAwN0Z9LCAvLyBMaW5lYXIgQiBTeWxsYWJhcnlcbiAgICB7YmVnaW46IDB4MTAxNDAsIGVuZDogMHgxMDE4Rn0sIC8vIEFuY2llbnQgR3JlZWsgTnVtYmVyc1xuICAgIHtiZWdpbjogMHgxMDM4MCwgZW5kOiAweDEwMzlGfSwgLy8gVWdhcml0aWNcbiAgICB7YmVnaW46IDB4MTAzQTAsIGVuZDogMHgxMDNERn0sIC8vIE9sZCBQZXJzaWFuXG4gICAge2JlZ2luOiAweDEwNDUwLCBlbmQ6IDB4MTA0N0Z9LCAvLyBTaGF2aWFuXG4gICAge2JlZ2luOiAweDEwNDgwLCBlbmQ6IDB4MTA0QUZ9LCAvLyBPc21hbnlhXG4gICAge2JlZ2luOiAweDEwODAwLCBlbmQ6IDB4MTA4M0Z9LCAvLyBDeXByaW90IFN5bGxhYmFyeVxuICAgIHtiZWdpbjogMHgxMEEwMCwgZW5kOiAweDEwQTVGfSwgLy8gS2hhcm9zaHRoaVxuICAgIHtiZWdpbjogMHgxRDMwMCwgZW5kOiAweDFEMzVGfSwgLy8gVGFpIFh1YW4gSmluZyBTeW1ib2xzXG4gICAge2JlZ2luOiAweDEyMDAwLCBlbmQ6IDB4MTIzRkZ9LCAvLyBDdW5laWZvcm1cbiAgICB7YmVnaW46IDB4MUQzNjAsIGVuZDogMHgxRDM3Rn0sIC8vIENvdW50aW5nIFJvZCBOdW1lcmFsc1xuICAgIHtiZWdpbjogMHgxQjgwLCBlbmQ6IDB4MUJCRn0sIC8vIFN1bmRhbmVzZVxuICAgIHtiZWdpbjogMHgxQzAwLCBlbmQ6IDB4MUM0Rn0sIC8vIExlcGNoYVxuICAgIHtiZWdpbjogMHgxQzUwLCBlbmQ6IDB4MUM3Rn0sIC8vIE9sIENoaWtpXG4gICAge2JlZ2luOiAweEE4ODAsIGVuZDogMHhBOERGfSwgLy8gU2F1cmFzaHRyYVxuICAgIHtiZWdpbjogMHhBOTAwLCBlbmQ6IDB4QTkyRn0sIC8vIEtheWFoIExpXG4gICAge2JlZ2luOiAweEE5MzAsIGVuZDogMHhBOTVGfSwgLy8gUmVqYW5nXG4gICAge2JlZ2luOiAweEFBMDAsIGVuZDogMHhBQTVGfSwgLy8gQ2hhbVxuICAgIHtiZWdpbjogMHgxMDE5MCwgZW5kOiAweDEwMUNGfSwgLy8gQW5jaWVudCBTeW1ib2xzXG4gICAge2JlZ2luOiAweDEwMUQwLCBlbmQ6IDB4MTAxRkZ9LCAvLyBQaGFpc3RvcyBEaXNjXG4gICAge2JlZ2luOiAweDEwMkEwLCBlbmQ6IDB4MTAyREZ9LCAvLyBDYXJpYW5cbiAgICB7YmVnaW46IDB4MUYwMzAsIGVuZDogMHgxRjA5Rn0gIC8vIERvbWlubyBUaWxlc1xuXTtcblxuZnVuY3Rpb24gZ2V0VW5pY29kZVJhbmdlKHVuaWNvZGUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaWNvZGVSYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHJhbmdlID0gdW5pY29kZVJhbmdlc1tpXTtcbiAgICAgICAgaWYgKHVuaWNvZGUgPj0gcmFuZ2UuYmVnaW4gJiYgdW5pY29kZSA8IHJhbmdlLmVuZCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG59XG5cbi8vIFBhcnNlIHRoZSBPUy8yIGFuZCBXaW5kb3dzIG1ldHJpY3MgYE9TLzJgIHRhYmxlXG5mdW5jdGlvbiBwYXJzZU9TMlRhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgdmFyIG9zMiA9IHt9O1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgb3MyLnZlcnNpb24gPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgb3MyLnhBdmdDaGFyV2lkdGggPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBvczIudXNXZWlnaHRDbGFzcyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBvczIudXNXaWR0aENsYXNzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIG9zMi5mc1R5cGUgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgb3MyLnlTdWJzY3JpcHRYU2l6ZSA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi55U3Vic2NyaXB0WVNpemUgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBvczIueVN1YnNjcmlwdFhPZmZzZXQgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBvczIueVN1YnNjcmlwdFlPZmZzZXQgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBvczIueVN1cGVyc2NyaXB0WFNpemUgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBvczIueVN1cGVyc2NyaXB0WVNpemUgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBvczIueVN1cGVyc2NyaXB0WE9mZnNldCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi55U3VwZXJzY3JpcHRZT2Zmc2V0ID0gcC5wYXJzZVNob3J0KCk7XG4gICAgb3MyLnlTdHJpa2VvdXRTaXplID0gcC5wYXJzZVNob3J0KCk7XG4gICAgb3MyLnlTdHJpa2VvdXRQb3NpdGlvbiA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi5zRmFtaWx5Q2xhc3MgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBvczIucGFub3NlID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIG9zMi5wYW5vc2VbaV0gPSBwLnBhcnNlQnl0ZSgpO1xuICAgIH1cblxuICAgIG9zMi51bFVuaWNvZGVSYW5nZTEgPSBwLnBhcnNlVUxvbmcoKTtcbiAgICBvczIudWxVbmljb2RlUmFuZ2UyID0gcC5wYXJzZVVMb25nKCk7XG4gICAgb3MyLnVsVW5pY29kZVJhbmdlMyA9IHAucGFyc2VVTG9uZygpO1xuICAgIG9zMi51bFVuaWNvZGVSYW5nZTQgPSBwLnBhcnNlVUxvbmcoKTtcbiAgICBvczIuYWNoVmVuZElEID0gU3RyaW5nLmZyb21DaGFyQ29kZShwLnBhcnNlQnl0ZSgpLCBwLnBhcnNlQnl0ZSgpLCBwLnBhcnNlQnl0ZSgpLCBwLnBhcnNlQnl0ZSgpKTtcbiAgICBvczIuZnNTZWxlY3Rpb24gPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgb3MyLnVzRmlyc3RDaGFySW5kZXggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgb3MyLnVzTGFzdENoYXJJbmRleCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBvczIuc1R5cG9Bc2NlbmRlciA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi5zVHlwb0Rlc2NlbmRlciA9IHAucGFyc2VTaG9ydCgpO1xuICAgIG9zMi5zVHlwb0xpbmVHYXAgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBvczIudXNXaW5Bc2NlbnQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgb3MyLnVzV2luRGVzY2VudCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBpZiAob3MyLnZlcnNpb24gPj0gMSkge1xuICAgICAgICBvczIudWxDb2RlUGFnZVJhbmdlMSA9IHAucGFyc2VVTG9uZygpO1xuICAgICAgICBvczIudWxDb2RlUGFnZVJhbmdlMiA9IHAucGFyc2VVTG9uZygpO1xuICAgIH1cblxuICAgIGlmIChvczIudmVyc2lvbiA+PSAyKSB7XG4gICAgICAgIG9zMi5zeEhlaWdodCA9IHAucGFyc2VTaG9ydCgpO1xuICAgICAgICBvczIuc0NhcEhlaWdodCA9IHAucGFyc2VTaG9ydCgpO1xuICAgICAgICBvczIudXNEZWZhdWx0Q2hhciA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgb3MyLnVzQnJlYWtDaGFyID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBvczIudXNNYXhDb250ZW50ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgIH1cblxuICAgIHJldHVybiBvczI7XG59XG5cbmZ1bmN0aW9uIG1ha2VPUzJUYWJsZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyB0YWJsZS5UYWJsZSgnT1MvMicsIFtcbiAgICAgICAge25hbWU6ICd2ZXJzaW9uJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAweDAwMDN9LFxuICAgICAgICB7bmFtZTogJ3hBdmdDaGFyV2lkdGgnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndXNXZWlnaHRDbGFzcycsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndXNXaWR0aENsYXNzJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdmc1R5cGUnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3lTdWJzY3JpcHRYU2l6ZScsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiA2NTB9LFxuICAgICAgICB7bmFtZTogJ3lTdWJzY3JpcHRZU2l6ZScsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiA2OTl9LFxuICAgICAgICB7bmFtZTogJ3lTdWJzY3JpcHRYT2Zmc2V0JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3lTdWJzY3JpcHRZT2Zmc2V0JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDE0MH0sXG4gICAgICAgIHtuYW1lOiAneVN1cGVyc2NyaXB0WFNpemUnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogNjUwfSxcbiAgICAgICAge25hbWU6ICd5U3VwZXJzY3JpcHRZU2l6ZScsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiA2OTl9LFxuICAgICAgICB7bmFtZTogJ3lTdXBlcnNjcmlwdFhPZmZzZXQnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAneVN1cGVyc2NyaXB0WU9mZnNldCcsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiA0Nzl9LFxuICAgICAgICB7bmFtZTogJ3lTdHJpa2VvdXRTaXplJywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDQ5fSxcbiAgICAgICAge25hbWU6ICd5U3RyaWtlb3V0UG9zaXRpb24nLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMjU4fSxcbiAgICAgICAge25hbWU6ICdzRmFtaWx5Q2xhc3MnLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnYkZhbWlseVR5cGUnLCB0eXBlOiAnQllURScsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdiU2VyaWZTdHlsZScsIHR5cGU6ICdCWVRFJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2JXZWlnaHQnLCB0eXBlOiAnQllURScsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdiUHJvcG9ydGlvbicsIHR5cGU6ICdCWVRFJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2JDb250cmFzdCcsIHR5cGU6ICdCWVRFJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2JTdHJva2VWYXJpYXRpb24nLCB0eXBlOiAnQllURScsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdiQXJtU3R5bGUnLCB0eXBlOiAnQllURScsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdiTGV0dGVyZm9ybScsIHR5cGU6ICdCWVRFJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2JNaWRsaW5lJywgdHlwZTogJ0JZVEUnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnYlhIZWlnaHQnLCB0eXBlOiAnQllURScsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd1bFVuaWNvZGVSYW5nZTEnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndWxVbmljb2RlUmFuZ2UyJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VsVW5pY29kZVJhbmdlMycsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd1bFVuaWNvZGVSYW5nZTQnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnYWNoVmVuZElEJywgdHlwZTogJ0NIQVJBUlJBWScsIHZhbHVlOiAnWFhYWCd9LFxuICAgICAgICB7bmFtZTogJ2ZzU2VsZWN0aW9uJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd1c0ZpcnN0Q2hhckluZGV4JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd1c0xhc3RDaGFySW5kZXgnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3NUeXBvQXNjZW5kZXInLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnc1R5cG9EZXNjZW5kZXInLCB0eXBlOiAnU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnc1R5cG9MaW5lR2FwJywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VzV2luQXNjZW50JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd1c1dpbkRlc2NlbnQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VsQ29kZVBhZ2VSYW5nZTEnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndWxDb2RlUGFnZVJhbmdlMicsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdzeEhlaWdodCcsIHR5cGU6ICdTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdzQ2FwSGVpZ2h0JywgdHlwZTogJ1NIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VzRGVmYXVsdENoYXInLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ3VzQnJlYWtDaGFyJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICd1c01heENvbnRleHQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9XG4gICAgXSwgb3B0aW9ucyk7XG59XG5cbnZhciBvczIgPSB7IHBhcnNlOiBwYXJzZU9TMlRhYmxlLCBtYWtlOiBtYWtlT1MyVGFibGUsIHVuaWNvZGVSYW5nZXM6IHVuaWNvZGVSYW5nZXMsIGdldFVuaWNvZGVSYW5nZTogZ2V0VW5pY29kZVJhbmdlIH07XG5cbi8vIFRoZSBgcG9zdGAgdGFibGUgc3RvcmVzIGFkZGl0aW9uYWwgUG9zdFNjcmlwdCBpbmZvcm1hdGlvbiwgc3VjaCBhcyBnbHlwaCBuYW1lcy5cblxuLy8gUGFyc2UgdGhlIFBvc3RTY3JpcHQgYHBvc3RgIHRhYmxlXG5mdW5jdGlvbiBwYXJzZVBvc3RUYWJsZShkYXRhLCBzdGFydCkge1xuICAgIHZhciBwb3N0ID0ge307XG4gICAgdmFyIHAgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0KTtcbiAgICBwb3N0LnZlcnNpb24gPSBwLnBhcnNlVmVyc2lvbigpO1xuICAgIHBvc3QuaXRhbGljQW5nbGUgPSBwLnBhcnNlRml4ZWQoKTtcbiAgICBwb3N0LnVuZGVybGluZVBvc2l0aW9uID0gcC5wYXJzZVNob3J0KCk7XG4gICAgcG9zdC51bmRlcmxpbmVUaGlja25lc3MgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBwb3N0LmlzRml4ZWRQaXRjaCA9IHAucGFyc2VVTG9uZygpO1xuICAgIHBvc3QubWluTWVtVHlwZTQyID0gcC5wYXJzZVVMb25nKCk7XG4gICAgcG9zdC5tYXhNZW1UeXBlNDIgPSBwLnBhcnNlVUxvbmcoKTtcbiAgICBwb3N0Lm1pbk1lbVR5cGUxID0gcC5wYXJzZVVMb25nKCk7XG4gICAgcG9zdC5tYXhNZW1UeXBlMSA9IHAucGFyc2VVTG9uZygpO1xuICAgIHN3aXRjaCAocG9zdC52ZXJzaW9uKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHBvc3QubmFtZXMgPSBzdGFuZGFyZE5hbWVzLnNsaWNlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcG9zdC5udW1iZXJPZkdseXBocyA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgICAgIHBvc3QuZ2x5cGhOYW1lSW5kZXggPSBuZXcgQXJyYXkocG9zdC5udW1iZXJPZkdseXBocyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc3QubnVtYmVyT2ZHbHlwaHM7IGkrKykge1xuICAgICAgICAgICAgICAgIHBvc3QuZ2x5cGhOYW1lSW5kZXhbaV0gPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBvc3QubmFtZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHBvc3QubnVtYmVyT2ZHbHlwaHM7IGkkMSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvc3QuZ2x5cGhOYW1lSW5kZXhbaSQxXSA+PSBzdGFuZGFyZE5hbWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZUxlbmd0aCA9IHAucGFyc2VDaGFyKCk7XG4gICAgICAgICAgICAgICAgICAgIHBvc3QubmFtZXMucHVzaChwLnBhcnNlU3RyaW5nKG5hbWVMZW5ndGgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDIuNTpcbiAgICAgICAgICAgIHBvc3QubnVtYmVyT2ZHbHlwaHMgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgICAgICBwb3N0Lm9mZnNldCA9IG5ldyBBcnJheShwb3N0Lm51bWJlck9mR2x5cGhzKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDA7IGkkMiA8IHBvc3QubnVtYmVyT2ZHbHlwaHM7IGkkMisrKSB7XG4gICAgICAgICAgICAgICAgcG9zdC5vZmZzZXRbaSQyXSA9IHAucGFyc2VDaGFyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcG9zdDtcbn1cblxuZnVuY3Rpb24gbWFrZVBvc3RUYWJsZSgpIHtcbiAgICByZXR1cm4gbmV3IHRhYmxlLlRhYmxlKCdwb3N0JywgW1xuICAgICAgICB7bmFtZTogJ3ZlcnNpb24nLCB0eXBlOiAnRklYRUQnLCB2YWx1ZTogMHgwMDAzMDAwMH0sXG4gICAgICAgIHtuYW1lOiAnaXRhbGljQW5nbGUnLCB0eXBlOiAnRklYRUQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndW5kZXJsaW5lUG9zaXRpb24nLCB0eXBlOiAnRldPUkQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAndW5kZXJsaW5lVGhpY2tuZXNzJywgdHlwZTogJ0ZXT1JEJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ2lzRml4ZWRQaXRjaCcsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdtaW5NZW1UeXBlNDInLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnbWF4TWVtVHlwZTQyJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ21pbk1lbVR5cGUxJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ21heE1lbVR5cGUxJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IDB9XG4gICAgXSk7XG59XG5cbnZhciBwb3N0ID0geyBwYXJzZTogcGFyc2VQb3N0VGFibGUsIG1ha2U6IG1ha2VQb3N0VGFibGUgfTtcblxuLy8gVGhlIGBHU1VCYCB0YWJsZSBjb250YWlucyBsaWdhdHVyZXMsIGFtb25nIG90aGVyIHRoaW5ncy5cblxudmFyIHN1YnRhYmxlUGFyc2VycyA9IG5ldyBBcnJheSg5KTsgICAgICAgICAvLyBzdWJ0YWJsZVBhcnNlcnNbMF0gaXMgdW51c2VkXG5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvR1NVQi5odG0jU1NcbnN1YnRhYmxlUGFyc2Vyc1sxXSA9IGZ1bmN0aW9uIHBhcnNlTG9va3VwMSgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLm9mZnNldCArIHRoaXMucmVsYXRpdmVPZmZzZXQ7XG4gICAgdmFyIHN1YnN0Rm9ybWF0ID0gdGhpcy5wYXJzZVVTaG9ydCgpO1xuICAgIGlmIChzdWJzdEZvcm1hdCA9PT0gMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3Vic3RGb3JtYXQ6IDEsXG4gICAgICAgICAgICBjb3ZlcmFnZTogdGhpcy5wYXJzZVBvaW50ZXIoUGFyc2VyLmNvdmVyYWdlKSxcbiAgICAgICAgICAgIGRlbHRhR2x5cGhJZDogdGhpcy5wYXJzZVVTaG9ydCgpXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChzdWJzdEZvcm1hdCA9PT0gMikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3Vic3RGb3JtYXQ6IDIsXG4gICAgICAgICAgICBjb3ZlcmFnZTogdGhpcy5wYXJzZVBvaW50ZXIoUGFyc2VyLmNvdmVyYWdlKSxcbiAgICAgICAgICAgIHN1YnN0aXR1dGU6IHRoaXMucGFyc2VPZmZzZXQxNkxpc3QoKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjaGVjay5hc3NlcnQoZmFsc2UsICcweCcgKyBzdGFydC50b1N0cmluZygxNikgKyAnOiBsb29rdXAgdHlwZSAxIGZvcm1hdCBtdXN0IGJlIDEgb3IgMi4nKTtcbn07XG5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvR1NVQi5odG0jTVNcbnN1YnRhYmxlUGFyc2Vyc1syXSA9IGZ1bmN0aW9uIHBhcnNlTG9va3VwMigpIHtcbiAgICB2YXIgc3Vic3RGb3JtYXQgPSB0aGlzLnBhcnNlVVNob3J0KCk7XG4gICAgY2hlY2suYXJndW1lbnQoc3Vic3RGb3JtYXQgPT09IDEsICdHU1VCIE11bHRpcGxlIFN1YnN0aXR1dGlvbiBTdWJ0YWJsZSBpZGVudGlmaWVyLWZvcm1hdCBtdXN0IGJlIDEnKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdWJzdEZvcm1hdDogc3Vic3RGb3JtYXQsXG4gICAgICAgIGNvdmVyYWdlOiB0aGlzLnBhcnNlUG9pbnRlcihQYXJzZXIuY292ZXJhZ2UpLFxuICAgICAgICBzZXF1ZW5jZXM6IHRoaXMucGFyc2VMaXN0T2ZMaXN0cygpXG4gICAgfTtcbn07XG5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvR1NVQi5odG0jQVNcbnN1YnRhYmxlUGFyc2Vyc1szXSA9IGZ1bmN0aW9uIHBhcnNlTG9va3VwMygpIHtcbiAgICB2YXIgc3Vic3RGb3JtYXQgPSB0aGlzLnBhcnNlVVNob3J0KCk7XG4gICAgY2hlY2suYXJndW1lbnQoc3Vic3RGb3JtYXQgPT09IDEsICdHU1VCIEFsdGVybmF0ZSBTdWJzdGl0dXRpb24gU3VidGFibGUgaWRlbnRpZmllci1mb3JtYXQgbXVzdCBiZSAxJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3Vic3RGb3JtYXQ6IHN1YnN0Rm9ybWF0LFxuICAgICAgICBjb3ZlcmFnZTogdGhpcy5wYXJzZVBvaW50ZXIoUGFyc2VyLmNvdmVyYWdlKSxcbiAgICAgICAgYWx0ZXJuYXRlU2V0czogdGhpcy5wYXJzZUxpc3RPZkxpc3RzKClcbiAgICB9O1xufTtcblxuLy8gaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L09UU1BFQy9HU1VCLmh0bSNMU1xuc3VidGFibGVQYXJzZXJzWzRdID0gZnVuY3Rpb24gcGFyc2VMb29rdXA0KCkge1xuICAgIHZhciBzdWJzdEZvcm1hdCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICBjaGVjay5hcmd1bWVudChzdWJzdEZvcm1hdCA9PT0gMSwgJ0dTVUIgbGlnYXR1cmUgdGFibGUgaWRlbnRpZmllci1mb3JtYXQgbXVzdCBiZSAxJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3Vic3RGb3JtYXQ6IHN1YnN0Rm9ybWF0LFxuICAgICAgICBjb3ZlcmFnZTogdGhpcy5wYXJzZVBvaW50ZXIoUGFyc2VyLmNvdmVyYWdlKSxcbiAgICAgICAgbGlnYXR1cmVTZXRzOiB0aGlzLnBhcnNlTGlzdE9mTGlzdHMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxpZ0dseXBoOiB0aGlzLnBhcnNlVVNob3J0KCksXG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogdGhpcy5wYXJzZVVTaG9ydExpc3QodGhpcy5wYXJzZVVTaG9ydCgpIC0gMSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgfTtcbn07XG5cbnZhciBsb29rdXBSZWNvcmREZXNjID0ge1xuICAgIHNlcXVlbmNlSW5kZXg6IFBhcnNlci51U2hvcnQsXG4gICAgbG9va3VwTGlzdEluZGV4OiBQYXJzZXIudVNob3J0XG59O1xuXG4vLyBodHRwczovL3d3dy5taWNyb3NvZnQuY29tL3R5cG9ncmFwaHkvT1RTUEVDL0dTVUIuaHRtI0NTRlxuc3VidGFibGVQYXJzZXJzWzVdID0gZnVuY3Rpb24gcGFyc2VMb29rdXA1KCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldDtcbiAgICB2YXIgc3Vic3RGb3JtYXQgPSB0aGlzLnBhcnNlVVNob3J0KCk7XG5cbiAgICBpZiAoc3Vic3RGb3JtYXQgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1YnN0Rm9ybWF0OiBzdWJzdEZvcm1hdCxcbiAgICAgICAgICAgIGNvdmVyYWdlOiB0aGlzLnBhcnNlUG9pbnRlcihQYXJzZXIuY292ZXJhZ2UpLFxuICAgICAgICAgICAgcnVsZVNldHM6IHRoaXMucGFyc2VMaXN0T2ZMaXN0cyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2x5cGhDb3VudCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3Vic3RDb3VudCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dDogdGhpcy5wYXJzZVVTaG9ydExpc3QoZ2x5cGhDb3VudCAtIDEpLFxuICAgICAgICAgICAgICAgICAgICBsb29rdXBSZWNvcmRzOiB0aGlzLnBhcnNlUmVjb3JkTGlzdChzdWJzdENvdW50LCBsb29rdXBSZWNvcmREZXNjKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoc3Vic3RGb3JtYXQgPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1YnN0Rm9ybWF0OiBzdWJzdEZvcm1hdCxcbiAgICAgICAgICAgIGNvdmVyYWdlOiB0aGlzLnBhcnNlUG9pbnRlcihQYXJzZXIuY292ZXJhZ2UpLFxuICAgICAgICAgICAgY2xhc3NEZWY6IHRoaXMucGFyc2VQb2ludGVyKFBhcnNlci5jbGFzc0RlZiksXG4gICAgICAgICAgICBjbGFzc1NldHM6IHRoaXMucGFyc2VMaXN0T2ZMaXN0cyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2x5cGhDb3VudCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3Vic3RDb3VudCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzOiB0aGlzLnBhcnNlVVNob3J0TGlzdChnbHlwaENvdW50IC0gMSksXG4gICAgICAgICAgICAgICAgICAgIGxvb2t1cFJlY29yZHM6IHRoaXMucGFyc2VSZWNvcmRMaXN0KHN1YnN0Q291bnQsIGxvb2t1cFJlY29yZERlc2MpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChzdWJzdEZvcm1hdCA9PT0gMykge1xuICAgICAgICB2YXIgZ2x5cGhDb3VudCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgdmFyIHN1YnN0Q291bnQgPSB0aGlzLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWJzdEZvcm1hdDogc3Vic3RGb3JtYXQsXG4gICAgICAgICAgICBjb3ZlcmFnZXM6IHRoaXMucGFyc2VMaXN0KGdseXBoQ291bnQsIFBhcnNlci5wb2ludGVyKFBhcnNlci5jb3ZlcmFnZSkpLFxuICAgICAgICAgICAgbG9va3VwUmVjb3JkczogdGhpcy5wYXJzZVJlY29yZExpc3Qoc3Vic3RDb3VudCwgbG9va3VwUmVjb3JkRGVzYylcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2hlY2suYXNzZXJ0KGZhbHNlLCAnMHgnICsgc3RhcnQudG9TdHJpbmcoMTYpICsgJzogbG9va3VwIHR5cGUgNSBmb3JtYXQgbXVzdCBiZSAxLCAyIG9yIDMuJyk7XG59O1xuXG4vLyBodHRwczovL3d3dy5taWNyb3NvZnQuY29tL3R5cG9ncmFwaHkvT1RTUEVDL0dTVUIuaHRtI0NDXG5zdWJ0YWJsZVBhcnNlcnNbNl0gPSBmdW5jdGlvbiBwYXJzZUxvb2t1cDYoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5vZmZzZXQgKyB0aGlzLnJlbGF0aXZlT2Zmc2V0O1xuICAgIHZhciBzdWJzdEZvcm1hdCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICBpZiAoc3Vic3RGb3JtYXQgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1YnN0Rm9ybWF0OiAxLFxuICAgICAgICAgICAgY292ZXJhZ2U6IHRoaXMucGFyc2VQb2ludGVyKFBhcnNlci5jb3ZlcmFnZSksXG4gICAgICAgICAgICBjaGFpblJ1bGVTZXRzOiB0aGlzLnBhcnNlTGlzdE9mTGlzdHMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja3RyYWNrOiB0aGlzLnBhcnNlVVNob3J0TGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICBpbnB1dDogdGhpcy5wYXJzZVVTaG9ydExpc3QodGhpcy5wYXJzZVNob3J0KCkgLSAxKSxcbiAgICAgICAgICAgICAgICAgICAgbG9va2FoZWFkOiB0aGlzLnBhcnNlVVNob3J0TGlzdCgpLFxuICAgICAgICAgICAgICAgICAgICBsb29rdXBSZWNvcmRzOiB0aGlzLnBhcnNlUmVjb3JkTGlzdChsb29rdXBSZWNvcmREZXNjKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoc3Vic3RGb3JtYXQgPT09IDIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1YnN0Rm9ybWF0OiAyLFxuICAgICAgICAgICAgY292ZXJhZ2U6IHRoaXMucGFyc2VQb2ludGVyKFBhcnNlci5jb3ZlcmFnZSksXG4gICAgICAgICAgICBiYWNrdHJhY2tDbGFzc0RlZjogdGhpcy5wYXJzZVBvaW50ZXIoUGFyc2VyLmNsYXNzRGVmKSxcbiAgICAgICAgICAgIGlucHV0Q2xhc3NEZWY6IHRoaXMucGFyc2VQb2ludGVyKFBhcnNlci5jbGFzc0RlZiksXG4gICAgICAgICAgICBsb29rYWhlYWRDbGFzc0RlZjogdGhpcy5wYXJzZVBvaW50ZXIoUGFyc2VyLmNsYXNzRGVmKSxcbiAgICAgICAgICAgIGNoYWluQ2xhc3NTZXQ6IHRoaXMucGFyc2VMaXN0T2ZMaXN0cyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBiYWNrdHJhY2s6IHRoaXMucGFyc2VVU2hvcnRMaXN0KCksXG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiB0aGlzLnBhcnNlVVNob3J0TGlzdCh0aGlzLnBhcnNlU2hvcnQoKSAtIDEpLFxuICAgICAgICAgICAgICAgICAgICBsb29rYWhlYWQ6IHRoaXMucGFyc2VVU2hvcnRMaXN0KCksXG4gICAgICAgICAgICAgICAgICAgIGxvb2t1cFJlY29yZHM6IHRoaXMucGFyc2VSZWNvcmRMaXN0KGxvb2t1cFJlY29yZERlc2MpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChzdWJzdEZvcm1hdCA9PT0gMykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3Vic3RGb3JtYXQ6IDMsXG4gICAgICAgICAgICBiYWNrdHJhY2tDb3ZlcmFnZTogdGhpcy5wYXJzZUxpc3QoUGFyc2VyLnBvaW50ZXIoUGFyc2VyLmNvdmVyYWdlKSksXG4gICAgICAgICAgICBpbnB1dENvdmVyYWdlOiB0aGlzLnBhcnNlTGlzdChQYXJzZXIucG9pbnRlcihQYXJzZXIuY292ZXJhZ2UpKSxcbiAgICAgICAgICAgIGxvb2thaGVhZENvdmVyYWdlOiB0aGlzLnBhcnNlTGlzdChQYXJzZXIucG9pbnRlcihQYXJzZXIuY292ZXJhZ2UpKSxcbiAgICAgICAgICAgIGxvb2t1cFJlY29yZHM6IHRoaXMucGFyc2VSZWNvcmRMaXN0KGxvb2t1cFJlY29yZERlc2MpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNoZWNrLmFzc2VydChmYWxzZSwgJzB4JyArIHN0YXJ0LnRvU3RyaW5nKDE2KSArICc6IGxvb2t1cCB0eXBlIDYgZm9ybWF0IG11c3QgYmUgMSwgMiBvciAzLicpO1xufTtcblxuLy8gaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L09UU1BFQy9HU1VCLmh0bSNFU1xuc3VidGFibGVQYXJzZXJzWzddID0gZnVuY3Rpb24gcGFyc2VMb29rdXA3KCkge1xuICAgIC8vIEV4dGVuc2lvbiBTdWJzdGl0dXRpb24gc3VidGFibGVcbiAgICB2YXIgc3Vic3RGb3JtYXQgPSB0aGlzLnBhcnNlVVNob3J0KCk7XG4gICAgY2hlY2suYXJndW1lbnQoc3Vic3RGb3JtYXQgPT09IDEsICdHU1VCIEV4dGVuc2lvbiBTdWJzdGl0dXRpb24gc3VidGFibGUgaWRlbnRpZmllci1mb3JtYXQgbXVzdCBiZSAxJyk7XG4gICAgdmFyIGV4dGVuc2lvbkxvb2t1cFR5cGUgPSB0aGlzLnBhcnNlVVNob3J0KCk7XG4gICAgdmFyIGV4dGVuc2lvblBhcnNlciA9IG5ldyBQYXJzZXIodGhpcy5kYXRhLCB0aGlzLm9mZnNldCArIHRoaXMucGFyc2VVTG9uZygpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdWJzdEZvcm1hdDogMSxcbiAgICAgICAgbG9va3VwVHlwZTogZXh0ZW5zaW9uTG9va3VwVHlwZSxcbiAgICAgICAgZXh0ZW5zaW9uOiBzdWJ0YWJsZVBhcnNlcnNbZXh0ZW5zaW9uTG9va3VwVHlwZV0uY2FsbChleHRlbnNpb25QYXJzZXIpXG4gICAgfTtcbn07XG5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvR1NVQi5odG0jUkNDU1xuc3VidGFibGVQYXJzZXJzWzhdID0gZnVuY3Rpb24gcGFyc2VMb29rdXA4KCkge1xuICAgIHZhciBzdWJzdEZvcm1hdCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICBjaGVjay5hcmd1bWVudChzdWJzdEZvcm1hdCA9PT0gMSwgJ0dTVUIgUmV2ZXJzZSBDaGFpbmluZyBDb250ZXh0dWFsIFNpbmdsZSBTdWJzdGl0dXRpb24gU3VidGFibGUgaWRlbnRpZmllci1mb3JtYXQgbXVzdCBiZSAxJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3Vic3RGb3JtYXQ6IHN1YnN0Rm9ybWF0LFxuICAgICAgICBjb3ZlcmFnZTogdGhpcy5wYXJzZVBvaW50ZXIoUGFyc2VyLmNvdmVyYWdlKSxcbiAgICAgICAgYmFja3RyYWNrQ292ZXJhZ2U6IHRoaXMucGFyc2VMaXN0KFBhcnNlci5wb2ludGVyKFBhcnNlci5jb3ZlcmFnZSkpLFxuICAgICAgICBsb29rYWhlYWRDb3ZlcmFnZTogdGhpcy5wYXJzZUxpc3QoUGFyc2VyLnBvaW50ZXIoUGFyc2VyLmNvdmVyYWdlKSksXG4gICAgICAgIHN1YnN0aXR1dGVzOiB0aGlzLnBhcnNlVVNob3J0TGlzdCgpXG4gICAgfTtcbn07XG5cbi8vIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9PVFNQRUMvZ3N1Yi5odG1cbmZ1bmN0aW9uIHBhcnNlR3N1YlRhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgIHZhciBwID0gbmV3IFBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIHRhYmxlVmVyc2lvbiA9IHAucGFyc2VWZXJzaW9uKDEpO1xuICAgIGNoZWNrLmFyZ3VtZW50KHRhYmxlVmVyc2lvbiA9PT0gMSB8fCB0YWJsZVZlcnNpb24gPT09IDEuMSwgJ1Vuc3VwcG9ydGVkIEdTVUIgdGFibGUgdmVyc2lvbi4nKTtcbiAgICBpZiAodGFibGVWZXJzaW9uID09PSAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJzaW9uOiB0YWJsZVZlcnNpb24sXG4gICAgICAgICAgICBzY3JpcHRzOiBwLnBhcnNlU2NyaXB0TGlzdCgpLFxuICAgICAgICAgICAgZmVhdHVyZXM6IHAucGFyc2VGZWF0dXJlTGlzdCgpLFxuICAgICAgICAgICAgbG9va3VwczogcC5wYXJzZUxvb2t1cExpc3Qoc3VidGFibGVQYXJzZXJzKVxuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJzaW9uOiB0YWJsZVZlcnNpb24sXG4gICAgICAgICAgICBzY3JpcHRzOiBwLnBhcnNlU2NyaXB0TGlzdCgpLFxuICAgICAgICAgICAgZmVhdHVyZXM6IHAucGFyc2VGZWF0dXJlTGlzdCgpLFxuICAgICAgICAgICAgbG9va3VwczogcC5wYXJzZUxvb2t1cExpc3Qoc3VidGFibGVQYXJzZXJzKSxcbiAgICAgICAgICAgIHZhcmlhdGlvbnM6IHAucGFyc2VGZWF0dXJlVmFyaWF0aW9uc0xpc3QoKVxuICAgICAgICB9O1xuICAgIH1cblxufVxuXG4vLyBHU1VCIFdyaXRpbmcgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xudmFyIHN1YnRhYmxlTWFrZXJzID0gbmV3IEFycmF5KDkpO1xuXG5zdWJ0YWJsZU1ha2Vyc1sxXSA9IGZ1bmN0aW9uIG1ha2VMb29rdXAxKHN1YnRhYmxlKSB7XG4gICAgaWYgKHN1YnRhYmxlLnN1YnN0Rm9ybWF0ID09PSAxKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGFibGUuVGFibGUoJ3N1YnN0aXR1dGlvblRhYmxlJywgW1xuICAgICAgICAgICAge25hbWU6ICdzdWJzdEZvcm1hdCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMX0sXG4gICAgICAgICAgICB7bmFtZTogJ2NvdmVyYWdlJywgdHlwZTogJ1RBQkxFJywgdmFsdWU6IG5ldyB0YWJsZS5Db3ZlcmFnZShzdWJ0YWJsZS5jb3ZlcmFnZSl9LFxuICAgICAgICAgICAge25hbWU6ICdkZWx0YUdseXBoSUQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IHN1YnRhYmxlLmRlbHRhR2x5cGhJZH1cbiAgICAgICAgXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0YWJsZS5UYWJsZSgnc3Vic3RpdHV0aW9uVGFibGUnLCBbXG4gICAgICAgICAgICB7bmFtZTogJ3N1YnN0Rm9ybWF0JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAyfSxcbiAgICAgICAgICAgIHtuYW1lOiAnY292ZXJhZ2UnLCB0eXBlOiAnVEFCTEUnLCB2YWx1ZTogbmV3IHRhYmxlLkNvdmVyYWdlKHN1YnRhYmxlLmNvdmVyYWdlKX1cbiAgICAgICAgXS5jb25jYXQodGFibGUudXNob3J0TGlzdCgnc3Vic3RpdHV0ZScsIHN1YnRhYmxlLnN1YnN0aXR1dGUpKSk7XG4gICAgfVxufTtcblxuc3VidGFibGVNYWtlcnNbMl0gPSBmdW5jdGlvbiBtYWtlTG9va3VwMihzdWJ0YWJsZSkge1xuICAgIGNoZWNrLmFzc2VydChzdWJ0YWJsZS5zdWJzdEZvcm1hdCA9PT0gMSwgJ0xvb2t1cCB0eXBlIDIgc3Vic3RGb3JtYXQgbXVzdCBiZSAxLicpO1xuICAgIHJldHVybiBuZXcgdGFibGUuVGFibGUoJ3N1YnN0aXR1dGlvblRhYmxlJywgW1xuICAgICAgICB7bmFtZTogJ3N1YnN0Rm9ybWF0JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAxfSxcbiAgICAgICAge25hbWU6ICdjb3ZlcmFnZScsIHR5cGU6ICdUQUJMRScsIHZhbHVlOiBuZXcgdGFibGUuQ292ZXJhZ2Uoc3VidGFibGUuY292ZXJhZ2UpfVxuICAgIF0uY29uY2F0KHRhYmxlLnRhYmxlTGlzdCgnc2VxU2V0Jywgc3VidGFibGUuc2VxdWVuY2VzLCBmdW5jdGlvbihzZXF1ZW5jZVNldCkge1xuICAgICAgICByZXR1cm4gbmV3IHRhYmxlLlRhYmxlKCdzZXF1ZW5jZVNldFRhYmxlJywgdGFibGUudXNob3J0TGlzdCgnc2VxdWVuY2UnLCBzZXF1ZW5jZVNldCkpO1xuICAgIH0pKSk7XG59O1xuXG5zdWJ0YWJsZU1ha2Vyc1szXSA9IGZ1bmN0aW9uIG1ha2VMb29rdXAzKHN1YnRhYmxlKSB7XG4gICAgY2hlY2suYXNzZXJ0KHN1YnRhYmxlLnN1YnN0Rm9ybWF0ID09PSAxLCAnTG9va3VwIHR5cGUgMyBzdWJzdEZvcm1hdCBtdXN0IGJlIDEuJyk7XG4gICAgcmV0dXJuIG5ldyB0YWJsZS5UYWJsZSgnc3Vic3RpdHV0aW9uVGFibGUnLCBbXG4gICAgICAgIHtuYW1lOiAnc3Vic3RGb3JtYXQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDF9LFxuICAgICAgICB7bmFtZTogJ2NvdmVyYWdlJywgdHlwZTogJ1RBQkxFJywgdmFsdWU6IG5ldyB0YWJsZS5Db3ZlcmFnZShzdWJ0YWJsZS5jb3ZlcmFnZSl9XG4gICAgXS5jb25jYXQodGFibGUudGFibGVMaXN0KCdhbHRTZXQnLCBzdWJ0YWJsZS5hbHRlcm5hdGVTZXRzLCBmdW5jdGlvbihhbHRlcm5hdGVTZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0YWJsZS5UYWJsZSgnYWx0ZXJuYXRlU2V0VGFibGUnLCB0YWJsZS51c2hvcnRMaXN0KCdhbHRlcm5hdGUnLCBhbHRlcm5hdGVTZXQpKTtcbiAgICB9KSkpO1xufTtcblxuc3VidGFibGVNYWtlcnNbNF0gPSBmdW5jdGlvbiBtYWtlTG9va3VwNChzdWJ0YWJsZSkge1xuICAgIGNoZWNrLmFzc2VydChzdWJ0YWJsZS5zdWJzdEZvcm1hdCA9PT0gMSwgJ0xvb2t1cCB0eXBlIDQgc3Vic3RGb3JtYXQgbXVzdCBiZSAxLicpO1xuICAgIHJldHVybiBuZXcgdGFibGUuVGFibGUoJ3N1YnN0aXR1dGlvblRhYmxlJywgW1xuICAgICAgICB7bmFtZTogJ3N1YnN0Rm9ybWF0JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAxfSxcbiAgICAgICAge25hbWU6ICdjb3ZlcmFnZScsIHR5cGU6ICdUQUJMRScsIHZhbHVlOiBuZXcgdGFibGUuQ292ZXJhZ2Uoc3VidGFibGUuY292ZXJhZ2UpfVxuICAgIF0uY29uY2F0KHRhYmxlLnRhYmxlTGlzdCgnbGlnU2V0Jywgc3VidGFibGUubGlnYXR1cmVTZXRzLCBmdW5jdGlvbihsaWdhdHVyZVNldCkge1xuICAgICAgICByZXR1cm4gbmV3IHRhYmxlLlRhYmxlKCdsaWdhdHVyZVNldFRhYmxlJywgdGFibGUudGFibGVMaXN0KCdsaWdhdHVyZScsIGxpZ2F0dXJlU2V0LCBmdW5jdGlvbihsaWdhdHVyZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB0YWJsZS5UYWJsZSgnbGlnYXR1cmVUYWJsZScsXG4gICAgICAgICAgICAgICAgW3tuYW1lOiAnbGlnR2x5cGgnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IGxpZ2F0dXJlLmxpZ0dseXBofV1cbiAgICAgICAgICAgICAgICAuY29uY2F0KHRhYmxlLnVzaG9ydExpc3QoJ2NvbXBvbmVudCcsIGxpZ2F0dXJlLmNvbXBvbmVudHMsIGxpZ2F0dXJlLmNvbXBvbmVudHMubGVuZ3RoICsgMSkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9KSk7XG4gICAgfSkpKTtcbn07XG5cbnN1YnRhYmxlTWFrZXJzWzZdID0gZnVuY3Rpb24gbWFrZUxvb2t1cDYoc3VidGFibGUpIHtcbiAgICBpZiAoc3VidGFibGUuc3Vic3RGb3JtYXQgPT09IDEpIHtcbiAgICAgICAgdmFyIHJldHVyblRhYmxlID0gbmV3IHRhYmxlLlRhYmxlKCdjaGFpbkNvbnRleHRUYWJsZScsIFtcbiAgICAgICAgICAgIHtuYW1lOiAnc3Vic3RGb3JtYXQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IHN1YnRhYmxlLnN1YnN0Rm9ybWF0fSxcbiAgICAgICAgICAgIHtuYW1lOiAnY292ZXJhZ2UnLCB0eXBlOiAnVEFCTEUnLCB2YWx1ZTogbmV3IHRhYmxlLkNvdmVyYWdlKHN1YnRhYmxlLmNvdmVyYWdlKX1cbiAgICAgICAgXS5jb25jYXQodGFibGUudGFibGVMaXN0KCdjaGFpblJ1bGVTZXQnLCBzdWJ0YWJsZS5jaGFpblJ1bGVTZXRzLCBmdW5jdGlvbihjaGFpblJ1bGVTZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdGFibGUuVGFibGUoJ2NoYWluUnVsZVNldFRhYmxlJywgdGFibGUudGFibGVMaXN0KCdjaGFpblJ1bGUnLCBjaGFpblJ1bGVTZXQsIGZ1bmN0aW9uKGNoYWluUnVsZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YWJsZURhdGEgPSB0YWJsZS51c2hvcnRMaXN0KCdiYWNrdHJhY2tHbHlwaCcsIGNoYWluUnVsZS5iYWNrdHJhY2ssIGNoYWluUnVsZS5iYWNrdHJhY2subGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHRhYmxlLnVzaG9ydExpc3QoJ2lucHV0R2x5cGgnLCBjaGFpblJ1bGUuaW5wdXQsIGNoYWluUnVsZS5pbnB1dC5sZW5ndGggKyAxKSlcbiAgICAgICAgICAgICAgICAgICAgLmNvbmNhdCh0YWJsZS51c2hvcnRMaXN0KCdsb29rYWhlYWRHbHlwaCcsIGNoYWluUnVsZS5sb29rYWhlYWQsIGNoYWluUnVsZS5sb29rYWhlYWQubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgLmNvbmNhdCh0YWJsZS51c2hvcnRMaXN0KCdzdWJzdGl0dXRpb24nLCBbXSwgY2hhaW5SdWxlLmxvb2t1cFJlY29yZHMubGVuZ3RoKSk7XG5cbiAgICAgICAgICAgICAgICBjaGFpblJ1bGUubG9va3VwUmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChyZWNvcmQsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGVEYXRhID0gdGFibGVEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KHtuYW1lOiAnc2VxdWVuY2VJbmRleCcgKyBpLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IHJlY29yZC5zZXF1ZW5jZUluZGV4fSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoe25hbWU6ICdsb29rdXBMaXN0SW5kZXgnICsgaSwgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiByZWNvcmQubG9va3VwTGlzdEluZGV4fSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0YWJsZS5UYWJsZSgnY2hhaW5SdWxlVGFibGUnLCB0YWJsZURhdGEpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KSkpO1xuICAgICAgICByZXR1cm4gcmV0dXJuVGFibGU7XG4gICAgfSBlbHNlIGlmIChzdWJ0YWJsZS5zdWJzdEZvcm1hdCA9PT0gMikge1xuICAgICAgICBjaGVjay5hc3NlcnQoZmFsc2UsICdsb29rdXAgdHlwZSA2IGZvcm1hdCAyIGlzIG5vdCB5ZXQgc3VwcG9ydGVkLicpO1xuICAgIH0gZWxzZSBpZiAoc3VidGFibGUuc3Vic3RGb3JtYXQgPT09IDMpIHtcbiAgICAgICAgdmFyIHRhYmxlRGF0YSA9IFtcbiAgICAgICAgICAgIHtuYW1lOiAnc3Vic3RGb3JtYXQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IHN1YnRhYmxlLnN1YnN0Rm9ybWF0fSBdO1xuXG4gICAgICAgIHRhYmxlRGF0YS5wdXNoKHtuYW1lOiAnYmFja3RyYWNrR2x5cGhDb3VudCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogc3VidGFibGUuYmFja3RyYWNrQ292ZXJhZ2UubGVuZ3RofSk7XG4gICAgICAgIHN1YnRhYmxlLmJhY2t0cmFja0NvdmVyYWdlLmZvckVhY2goZnVuY3Rpb24gKGNvdmVyYWdlLCBpKSB7XG4gICAgICAgICAgICB0YWJsZURhdGEucHVzaCh7bmFtZTogJ2JhY2t0cmFja0NvdmVyYWdlJyArIGksIHR5cGU6ICdUQUJMRScsIHZhbHVlOiBuZXcgdGFibGUuQ292ZXJhZ2UoY292ZXJhZ2UpfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0YWJsZURhdGEucHVzaCh7bmFtZTogJ2lucHV0R2x5cGhDb3VudCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogc3VidGFibGUuaW5wdXRDb3ZlcmFnZS5sZW5ndGh9KTtcbiAgICAgICAgc3VidGFibGUuaW5wdXRDb3ZlcmFnZS5mb3JFYWNoKGZ1bmN0aW9uIChjb3ZlcmFnZSwgaSkge1xuICAgICAgICAgICAgdGFibGVEYXRhLnB1c2goe25hbWU6ICdpbnB1dENvdmVyYWdlJyArIGksIHR5cGU6ICdUQUJMRScsIHZhbHVlOiBuZXcgdGFibGUuQ292ZXJhZ2UoY292ZXJhZ2UpfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0YWJsZURhdGEucHVzaCh7bmFtZTogJ2xvb2thaGVhZEdseXBoQ291bnQnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IHN1YnRhYmxlLmxvb2thaGVhZENvdmVyYWdlLmxlbmd0aH0pO1xuICAgICAgICBzdWJ0YWJsZS5sb29rYWhlYWRDb3ZlcmFnZS5mb3JFYWNoKGZ1bmN0aW9uIChjb3ZlcmFnZSwgaSkge1xuICAgICAgICAgICAgdGFibGVEYXRhLnB1c2goe25hbWU6ICdsb29rYWhlYWRDb3ZlcmFnZScgKyBpLCB0eXBlOiAnVEFCTEUnLCB2YWx1ZTogbmV3IHRhYmxlLkNvdmVyYWdlKGNvdmVyYWdlKX0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0YWJsZURhdGEucHVzaCh7bmFtZTogJ3N1YnN0aXR1dGlvbkNvdW50JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBzdWJ0YWJsZS5sb29rdXBSZWNvcmRzLmxlbmd0aH0pO1xuICAgICAgICBzdWJ0YWJsZS5sb29rdXBSZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCwgaSkge1xuICAgICAgICAgICAgdGFibGVEYXRhID0gdGFibGVEYXRhXG4gICAgICAgICAgICAgICAgLmNvbmNhdCh7bmFtZTogJ3NlcXVlbmNlSW5kZXgnICsgaSwgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiByZWNvcmQuc2VxdWVuY2VJbmRleH0pXG4gICAgICAgICAgICAgICAgLmNvbmNhdCh7bmFtZTogJ2xvb2t1cExpc3RJbmRleCcgKyBpLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IHJlY29yZC5sb29rdXBMaXN0SW5kZXh9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHJldHVyblRhYmxlJDEgPSBuZXcgdGFibGUuVGFibGUoJ2NoYWluQ29udGV4dFRhYmxlJywgdGFibGVEYXRhKTtcblxuICAgICAgICByZXR1cm4gcmV0dXJuVGFibGUkMTtcbiAgICB9XG5cbiAgICBjaGVjay5hc3NlcnQoZmFsc2UsICdsb29rdXAgdHlwZSA2IGZvcm1hdCBtdXN0IGJlIDEsIDIgb3IgMy4nKTtcbn07XG5cbmZ1bmN0aW9uIG1ha2VHc3ViVGFibGUoZ3N1Yikge1xuICAgIHJldHVybiBuZXcgdGFibGUuVGFibGUoJ0dTVUInLCBbXG4gICAgICAgIHtuYW1lOiAndmVyc2lvbicsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiAweDEwMDAwfSxcbiAgICAgICAge25hbWU6ICdzY3JpcHRzJywgdHlwZTogJ1RBQkxFJywgdmFsdWU6IG5ldyB0YWJsZS5TY3JpcHRMaXN0KGdzdWIuc2NyaXB0cyl9LFxuICAgICAgICB7bmFtZTogJ2ZlYXR1cmVzJywgdHlwZTogJ1RBQkxFJywgdmFsdWU6IG5ldyB0YWJsZS5GZWF0dXJlTGlzdChnc3ViLmZlYXR1cmVzKX0sXG4gICAgICAgIHtuYW1lOiAnbG9va3VwcycsIHR5cGU6ICdUQUJMRScsIHZhbHVlOiBuZXcgdGFibGUuTG9va3VwTGlzdChnc3ViLmxvb2t1cHMsIHN1YnRhYmxlTWFrZXJzKX1cbiAgICBdKTtcbn1cblxudmFyIGdzdWIgPSB7IHBhcnNlOiBwYXJzZUdzdWJUYWJsZSwgbWFrZTogbWFrZUdzdWJUYWJsZSB9O1xuXG4vLyBUaGUgYEdQT1NgIHRhYmxlIGNvbnRhaW5zIGtlcm5pbmcgcGFpcnMsIGFtb25nIG90aGVyIHRoaW5ncy5cblxuLy8gUGFyc2UgdGhlIG1ldGFkYXRhIGBtZXRhYCB0YWJsZS5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9mb250cy9UcnVlVHlwZS1SZWZlcmVuY2UtTWFudWFsL1JNMDYvQ2hhcDZtZXRhLmh0bWxcbmZ1bmN0aW9uIHBhcnNlTWV0YVRhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgdmFyIHAgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0KTtcbiAgICB2YXIgdGFibGVWZXJzaW9uID0gcC5wYXJzZVVMb25nKCk7XG4gICAgY2hlY2suYXJndW1lbnQodGFibGVWZXJzaW9uID09PSAxLCAnVW5zdXBwb3J0ZWQgTUVUQSB0YWJsZSB2ZXJzaW9uLicpO1xuICAgIHAucGFyc2VVTG9uZygpOyAvLyBmbGFncyAtIGN1cnJlbnRseSB1bnVzZWQgYW5kIHNldCB0byAwXG4gICAgcC5wYXJzZVVMb25nKCk7IC8vIHRhYmxlT2Zmc2V0XG4gICAgdmFyIG51bURhdGFNYXBzID0gcC5wYXJzZVVMb25nKCk7XG5cbiAgICB2YXIgdGFncyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRGF0YU1hcHM7IGkrKykge1xuICAgICAgICB2YXIgdGFnID0gcC5wYXJzZVRhZygpO1xuICAgICAgICB2YXIgZGF0YU9mZnNldCA9IHAucGFyc2VVTG9uZygpO1xuICAgICAgICB2YXIgZGF0YUxlbmd0aCA9IHAucGFyc2VVTG9uZygpO1xuICAgICAgICB2YXIgdGV4dCA9IGRlY29kZS5VVEY4KGRhdGEsIHN0YXJ0ICsgZGF0YU9mZnNldCwgZGF0YUxlbmd0aCk7XG5cbiAgICAgICAgdGFnc1t0YWddID0gdGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRhZ3M7XG59XG5cbmZ1bmN0aW9uIG1ha2VNZXRhVGFibGUodGFncykge1xuICAgIHZhciBudW1UYWdzID0gT2JqZWN0LmtleXModGFncykubGVuZ3RoO1xuICAgIHZhciBzdHJpbmdQb29sID0gJyc7XG4gICAgdmFyIHN0cmluZ1Bvb2xPZmZzZXQgPSAxNiArIG51bVRhZ3MgKiAxMjtcblxuICAgIHZhciByZXN1bHQgPSBuZXcgdGFibGUuVGFibGUoJ21ldGEnLCBbXG4gICAgICAgIHtuYW1lOiAndmVyc2lvbicsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiAxfSxcbiAgICAgICAge25hbWU6ICdmbGFncycsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdvZmZzZXQnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogc3RyaW5nUG9vbE9mZnNldH0sXG4gICAgICAgIHtuYW1lOiAnbnVtVGFncycsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiBudW1UYWdzfVxuICAgIF0pO1xuXG4gICAgZm9yICh2YXIgdGFnIGluIHRhZ3MpIHtcbiAgICAgICAgdmFyIHBvcyA9IHN0cmluZ1Bvb2wubGVuZ3RoO1xuICAgICAgICBzdHJpbmdQb29sICs9IHRhZ3NbdGFnXTtcblxuICAgICAgICByZXN1bHQuZmllbGRzLnB1c2goe25hbWU6ICd0YWcgJyArIHRhZywgdHlwZTogJ1RBRycsIHZhbHVlOiB0YWd9KTtcbiAgICAgICAgcmVzdWx0LmZpZWxkcy5wdXNoKHtuYW1lOiAnb2Zmc2V0ICcgKyB0YWcsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiBzdHJpbmdQb29sT2Zmc2V0ICsgcG9zfSk7XG4gICAgICAgIHJlc3VsdC5maWVsZHMucHVzaCh7bmFtZTogJ2xlbmd0aCAnICsgdGFnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogdGFnc1t0YWddLmxlbmd0aH0pO1xuICAgIH1cblxuICAgIHJlc3VsdC5maWVsZHMucHVzaCh7bmFtZTogJ3N0cmluZ1Bvb2wnLCB0eXBlOiAnQ0hBUkFSUkFZJywgdmFsdWU6IHN0cmluZ1Bvb2x9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBtZXRhID0geyBwYXJzZTogcGFyc2VNZXRhVGFibGUsIG1ha2U6IG1ha2VNZXRhVGFibGUgfTtcblxuLy8gVGhlIGBzZm50YCB3cmFwcGVyIHByb3ZpZGVzIG9yZ2FuaXphdGlvbiBmb3IgdGhlIHRhYmxlcyBpbiB0aGUgZm9udC5cblxuZnVuY3Rpb24gbG9nMih2KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHYpIC8gTWF0aC5sb2coMikgfCAwO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlQ2hlY2tTdW0oYnl0ZXMpIHtcbiAgICB3aGlsZSAoYnl0ZXMubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgICAgICBieXRlcy5wdXNoKDApO1xuICAgIH1cblxuICAgIHZhciBzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgc3VtICs9IChieXRlc1tpXSA8PCAyNCkgK1xuICAgICAgICAgICAgKGJ5dGVzW2kgKyAxXSA8PCAxNikgK1xuICAgICAgICAgICAgKGJ5dGVzW2kgKyAyXSA8PCA4KSArXG4gICAgICAgICAgICAoYnl0ZXNbaSArIDNdKTtcbiAgICB9XG5cbiAgICBzdW0gJT0gTWF0aC5wb3coMiwgMzIpO1xuICAgIHJldHVybiBzdW07XG59XG5cbmZ1bmN0aW9uIG1ha2VUYWJsZVJlY29yZCh0YWcsIGNoZWNrU3VtLCBvZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgdGFibGUuUmVjb3JkKCdUYWJsZSBSZWNvcmQnLCBbXG4gICAgICAgIHtuYW1lOiAndGFnJywgdHlwZTogJ1RBRycsIHZhbHVlOiB0YWcgIT09IHVuZGVmaW5lZCA/IHRhZyA6ICcnfSxcbiAgICAgICAge25hbWU6ICdjaGVja1N1bScsIHR5cGU6ICdVTE9ORycsIHZhbHVlOiBjaGVja1N1bSAhPT0gdW5kZWZpbmVkID8gY2hlY2tTdW0gOiAwfSxcbiAgICAgICAge25hbWU6ICdvZmZzZXQnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogb2Zmc2V0ICE9PSB1bmRlZmluZWQgPyBvZmZzZXQgOiAwfSxcbiAgICAgICAge25hbWU6ICdsZW5ndGgnLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogbGVuZ3RoICE9PSB1bmRlZmluZWQgPyBsZW5ndGggOiAwfVxuICAgIF0pO1xufVxuXG5mdW5jdGlvbiBtYWtlU2ZudFRhYmxlKHRhYmxlcykge1xuICAgIHZhciBzZm50ID0gbmV3IHRhYmxlLlRhYmxlKCdzZm50JywgW1xuICAgICAgICB7bmFtZTogJ3ZlcnNpb24nLCB0eXBlOiAnVEFHJywgdmFsdWU6ICdPVFRPJ30sXG4gICAgICAgIHtuYW1lOiAnbnVtVGFibGVzJywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiAwfSxcbiAgICAgICAge25hbWU6ICdzZWFyY2hSYW5nZScsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnZW50cnlTZWxlY3RvcicsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAncmFuZ2VTaGlmdCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH1cbiAgICBdKTtcbiAgICBzZm50LnRhYmxlcyA9IHRhYmxlcztcbiAgICBzZm50Lm51bVRhYmxlcyA9IHRhYmxlcy5sZW5ndGg7XG4gICAgdmFyIGhpZ2hlc3RQb3dlck9mMiA9IE1hdGgucG93KDIsIGxvZzIoc2ZudC5udW1UYWJsZXMpKTtcbiAgICBzZm50LnNlYXJjaFJhbmdlID0gMTYgKiBoaWdoZXN0UG93ZXJPZjI7XG4gICAgc2ZudC5lbnRyeVNlbGVjdG9yID0gbG9nMihoaWdoZXN0UG93ZXJPZjIpO1xuICAgIHNmbnQucmFuZ2VTaGlmdCA9IHNmbnQubnVtVGFibGVzICogMTYgLSBzZm50LnNlYXJjaFJhbmdlO1xuXG4gICAgdmFyIHJlY29yZEZpZWxkcyA9IFtdO1xuICAgIHZhciB0YWJsZUZpZWxkcyA9IFtdO1xuXG4gICAgdmFyIG9mZnNldCA9IHNmbnQuc2l6ZU9mKCkgKyAobWFrZVRhYmxlUmVjb3JkKCkuc2l6ZU9mKCkgKiBzZm50Lm51bVRhYmxlcyk7XG4gICAgd2hpbGUgKG9mZnNldCAlIDQgIT09IDApIHtcbiAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgIHRhYmxlRmllbGRzLnB1c2goe25hbWU6ICdwYWRkaW5nJywgdHlwZTogJ0JZVEUnLCB2YWx1ZTogMH0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFibGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciB0ID0gdGFibGVzW2ldO1xuICAgICAgICBjaGVjay5hcmd1bWVudCh0LnRhYmxlTmFtZS5sZW5ndGggPT09IDQsICdUYWJsZSBuYW1lJyArIHQudGFibGVOYW1lICsgJyBpcyBpbnZhbGlkLicpO1xuICAgICAgICB2YXIgdGFibGVMZW5ndGggPSB0LnNpemVPZigpO1xuICAgICAgICB2YXIgdGFibGVSZWNvcmQgPSBtYWtlVGFibGVSZWNvcmQodC50YWJsZU5hbWUsIGNvbXB1dGVDaGVja1N1bSh0LmVuY29kZSgpKSwgb2Zmc2V0LCB0YWJsZUxlbmd0aCk7XG4gICAgICAgIHJlY29yZEZpZWxkcy5wdXNoKHtuYW1lOiB0YWJsZVJlY29yZC50YWcgKyAnIFRhYmxlIFJlY29yZCcsIHR5cGU6ICdSRUNPUkQnLCB2YWx1ZTogdGFibGVSZWNvcmR9KTtcbiAgICAgICAgdGFibGVGaWVsZHMucHVzaCh7bmFtZTogdC50YWJsZU5hbWUgKyAnIHRhYmxlJywgdHlwZTogJ1JFQ09SRCcsIHZhbHVlOiB0fSk7XG4gICAgICAgIG9mZnNldCArPSB0YWJsZUxlbmd0aDtcbiAgICAgICAgY2hlY2suYXJndW1lbnQoIWlzTmFOKG9mZnNldCksICdTb21ldGhpbmcgd2VudCB3cm9uZyBjYWxjdWxhdGluZyB0aGUgb2Zmc2V0LicpO1xuICAgICAgICB3aGlsZSAob2Zmc2V0ICUgNCAhPT0gMCkge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICB0YWJsZUZpZWxkcy5wdXNoKHtuYW1lOiAncGFkZGluZycsIHR5cGU6ICdCWVRFJywgdmFsdWU6IDB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRhYmxlIHJlY29yZHMgbmVlZCB0byBiZSBzb3J0ZWQgYWxwaGFiZXRpY2FsbHkuXG4gICAgcmVjb3JkRmllbGRzLnNvcnQoZnVuY3Rpb24ocjEsIHIyKSB7XG4gICAgICAgIGlmIChyMS52YWx1ZS50YWcgPiByMi52YWx1ZS50YWcpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBzZm50LmZpZWxkcyA9IHNmbnQuZmllbGRzLmNvbmNhdChyZWNvcmRGaWVsZHMpO1xuICAgIHNmbnQuZmllbGRzID0gc2ZudC5maWVsZHMuY29uY2F0KHRhYmxlRmllbGRzKTtcbiAgICByZXR1cm4gc2ZudDtcbn1cblxuLy8gR2V0IHRoZSBtZXRyaWNzIGZvciBhIGNoYXJhY3Rlci4gSWYgdGhlIHN0cmluZyBoYXMgbW9yZSB0aGFuIG9uZSBjaGFyYWN0ZXJcbi8vIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBtZXRyaWNzIGZvciB0aGUgZmlyc3QgYXZhaWxhYmxlIGNoYXJhY3Rlci5cbi8vIFlvdSBjYW4gcHJvdmlkZSBvcHRpb25hbCBmYWxsYmFjayBtZXRyaWNzIGlmIG5vIGNoYXJhY3RlcnMgYXJlIGF2YWlsYWJsZS5cbmZ1bmN0aW9uIG1ldHJpY3NGb3JDaGFyKGZvbnQsIGNoYXJzLCBub3RGb3VuZE1ldHJpY3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBnbHlwaEluZGV4ID0gZm9udC5jaGFyVG9HbHlwaEluZGV4KGNoYXJzW2ldKTtcbiAgICAgICAgaWYgKGdseXBoSW5kZXggPiAwKSB7XG4gICAgICAgICAgICB2YXIgZ2x5cGggPSBmb250LmdseXBocy5nZXQoZ2x5cGhJbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gZ2x5cGguZ2V0TWV0cmljcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vdEZvdW5kTWV0cmljcztcbn1cblxuZnVuY3Rpb24gYXZlcmFnZSh2cykge1xuICAgIHZhciBzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3VtICs9IHZzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBzdW0gLyB2cy5sZW5ndGg7XG59XG5cbi8vIENvbnZlcnQgdGhlIGZvbnQgb2JqZWN0IHRvIGEgU0ZOVCBkYXRhIHN0cnVjdHVyZS5cbi8vIFRoaXMgc3RydWN0dXJlIGNvbnRhaW5zIGFsbCB0aGUgbmVjZXNzYXJ5IHRhYmxlcyBhbmQgbWV0YWRhdGEgdG8gY3JlYXRlIGEgYmluYXJ5IE9URiBmaWxlLlxuZnVuY3Rpb24gZm9udFRvU2ZudFRhYmxlKGZvbnQpIHtcbiAgICB2YXIgeE1pbnMgPSBbXTtcbiAgICB2YXIgeU1pbnMgPSBbXTtcbiAgICB2YXIgeE1heHMgPSBbXTtcbiAgICB2YXIgeU1heHMgPSBbXTtcbiAgICB2YXIgYWR2YW5jZVdpZHRocyA9IFtdO1xuICAgIHZhciBsZWZ0U2lkZUJlYXJpbmdzID0gW107XG4gICAgdmFyIHJpZ2h0U2lkZUJlYXJpbmdzID0gW107XG4gICAgdmFyIGZpcnN0Q2hhckluZGV4O1xuICAgIHZhciBsYXN0Q2hhckluZGV4ID0gMDtcbiAgICB2YXIgdWxVbmljb2RlUmFuZ2UxID0gMDtcbiAgICB2YXIgdWxVbmljb2RlUmFuZ2UyID0gMDtcbiAgICB2YXIgdWxVbmljb2RlUmFuZ2UzID0gMDtcbiAgICB2YXIgdWxVbmljb2RlUmFuZ2U0ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9udC5nbHlwaHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGdseXBoID0gZm9udC5nbHlwaHMuZ2V0KGkpO1xuICAgICAgICB2YXIgdW5pY29kZSA9IGdseXBoLnVuaWNvZGUgfCAwO1xuXG4gICAgICAgIGlmIChpc05hTihnbHlwaC5hZHZhbmNlV2lkdGgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dseXBoICcgKyBnbHlwaC5uYW1lICsgJyAoJyArIGkgKyAnKTogYWR2YW5jZVdpZHRoIGlzIG5vdCBhIG51bWJlci4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaXJzdENoYXJJbmRleCA+IHVuaWNvZGUgfHwgZmlyc3RDaGFySW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gaWdub3JlIC5ub3RkZWYgY2hhclxuICAgICAgICAgICAgaWYgKHVuaWNvZGUgPiAwKSB7XG4gICAgICAgICAgICAgICAgZmlyc3RDaGFySW5kZXggPSB1bmljb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxhc3RDaGFySW5kZXggPCB1bmljb2RlKSB7XG4gICAgICAgICAgICBsYXN0Q2hhckluZGV4ID0gdW5pY29kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG9zMi5nZXRVbmljb2RlUmFuZ2UodW5pY29kZSk7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDMyKSB7XG4gICAgICAgICAgICB1bFVuaWNvZGVSYW5nZTEgfD0gMSA8PCBwb3NpdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA8IDY0KSB7XG4gICAgICAgICAgICB1bFVuaWNvZGVSYW5nZTIgfD0gMSA8PCBwb3NpdGlvbiAtIDMyO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uIDwgOTYpIHtcbiAgICAgICAgICAgIHVsVW5pY29kZVJhbmdlMyB8PSAxIDw8IHBvc2l0aW9uIC0gNjQ7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPCAxMjMpIHtcbiAgICAgICAgICAgIHVsVW5pY29kZVJhbmdlNCB8PSAxIDw8IHBvc2l0aW9uIC0gOTY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuaWNvZGUgcmFuZ2VzIGJpdHMgPiAxMjMgYXJlIHJlc2VydmVkIGZvciBpbnRlcm5hbCB1c2FnZScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNraXAgbm9uLWltcG9ydGFudCBjaGFyYWN0ZXJzLlxuICAgICAgICBpZiAoZ2x5cGgubmFtZSA9PT0gJy5ub3RkZWYnKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgIHZhciBtZXRyaWNzID0gZ2x5cGguZ2V0TWV0cmljcygpO1xuICAgICAgICB4TWlucy5wdXNoKG1ldHJpY3MueE1pbik7XG4gICAgICAgIHlNaW5zLnB1c2gobWV0cmljcy55TWluKTtcbiAgICAgICAgeE1heHMucHVzaChtZXRyaWNzLnhNYXgpO1xuICAgICAgICB5TWF4cy5wdXNoKG1ldHJpY3MueU1heCk7XG4gICAgICAgIGxlZnRTaWRlQmVhcmluZ3MucHVzaChtZXRyaWNzLmxlZnRTaWRlQmVhcmluZyk7XG4gICAgICAgIHJpZ2h0U2lkZUJlYXJpbmdzLnB1c2gobWV0cmljcy5yaWdodFNpZGVCZWFyaW5nKTtcbiAgICAgICAgYWR2YW5jZVdpZHRocy5wdXNoKGdseXBoLmFkdmFuY2VXaWR0aCk7XG4gICAgfVxuXG4gICAgdmFyIGdsb2JhbHMgPSB7XG4gICAgICAgIHhNaW46IE1hdGgubWluLmFwcGx5KG51bGwsIHhNaW5zKSxcbiAgICAgICAgeU1pbjogTWF0aC5taW4uYXBwbHkobnVsbCwgeU1pbnMpLFxuICAgICAgICB4TWF4OiBNYXRoLm1heC5hcHBseShudWxsLCB4TWF4cyksXG4gICAgICAgIHlNYXg6IE1hdGgubWF4LmFwcGx5KG51bGwsIHlNYXhzKSxcbiAgICAgICAgYWR2YW5jZVdpZHRoTWF4OiBNYXRoLm1heC5hcHBseShudWxsLCBhZHZhbmNlV2lkdGhzKSxcbiAgICAgICAgYWR2YW5jZVdpZHRoQXZnOiBhdmVyYWdlKGFkdmFuY2VXaWR0aHMpLFxuICAgICAgICBtaW5MZWZ0U2lkZUJlYXJpbmc6IE1hdGgubWluLmFwcGx5KG51bGwsIGxlZnRTaWRlQmVhcmluZ3MpLFxuICAgICAgICBtYXhMZWZ0U2lkZUJlYXJpbmc6IE1hdGgubWF4LmFwcGx5KG51bGwsIGxlZnRTaWRlQmVhcmluZ3MpLFxuICAgICAgICBtaW5SaWdodFNpZGVCZWFyaW5nOiBNYXRoLm1pbi5hcHBseShudWxsLCByaWdodFNpZGVCZWFyaW5ncylcbiAgICB9O1xuICAgIGdsb2JhbHMuYXNjZW5kZXIgPSBmb250LmFzY2VuZGVyO1xuICAgIGdsb2JhbHMuZGVzY2VuZGVyID0gZm9udC5kZXNjZW5kZXI7XG5cbiAgICB2YXIgaGVhZFRhYmxlID0gaGVhZC5tYWtlKHtcbiAgICAgICAgZmxhZ3M6IDMsIC8vIDAwMDAwMDExIChiYXNlbGluZSBmb3IgZm9udCBhdCB5PTA7IGxlZnQgc2lkZWJlYXJpbmcgcG9pbnQgYXQgeD0wKVxuICAgICAgICB1bml0c1BlckVtOiBmb250LnVuaXRzUGVyRW0sXG4gICAgICAgIHhNaW46IGdsb2JhbHMueE1pbixcbiAgICAgICAgeU1pbjogZ2xvYmFscy55TWluLFxuICAgICAgICB4TWF4OiBnbG9iYWxzLnhNYXgsXG4gICAgICAgIHlNYXg6IGdsb2JhbHMueU1heCxcbiAgICAgICAgbG93ZXN0UmVjUFBFTTogMyxcbiAgICAgICAgY3JlYXRlZFRpbWVzdGFtcDogZm9udC5jcmVhdGVkVGltZXN0YW1wXG4gICAgfSk7XG5cbiAgICB2YXIgaGhlYVRhYmxlID0gaGhlYS5tYWtlKHtcbiAgICAgICAgYXNjZW5kZXI6IGdsb2JhbHMuYXNjZW5kZXIsXG4gICAgICAgIGRlc2NlbmRlcjogZ2xvYmFscy5kZXNjZW5kZXIsXG4gICAgICAgIGFkdmFuY2VXaWR0aE1heDogZ2xvYmFscy5hZHZhbmNlV2lkdGhNYXgsXG4gICAgICAgIG1pbkxlZnRTaWRlQmVhcmluZzogZ2xvYmFscy5taW5MZWZ0U2lkZUJlYXJpbmcsXG4gICAgICAgIG1pblJpZ2h0U2lkZUJlYXJpbmc6IGdsb2JhbHMubWluUmlnaHRTaWRlQmVhcmluZyxcbiAgICAgICAgeE1heEV4dGVudDogZ2xvYmFscy5tYXhMZWZ0U2lkZUJlYXJpbmcgKyAoZ2xvYmFscy54TWF4IC0gZ2xvYmFscy54TWluKSxcbiAgICAgICAgbnVtYmVyT2ZITWV0cmljczogZm9udC5nbHlwaHMubGVuZ3RoXG4gICAgfSk7XG5cbiAgICB2YXIgbWF4cFRhYmxlID0gbWF4cC5tYWtlKGZvbnQuZ2x5cGhzLmxlbmd0aCk7XG5cbiAgICB2YXIgb3MyVGFibGUgPSBvczIubWFrZShPYmplY3QuYXNzaWduKHtcbiAgICAgICAgeEF2Z0NoYXJXaWR0aDogTWF0aC5yb3VuZChnbG9iYWxzLmFkdmFuY2VXaWR0aEF2ZyksXG4gICAgICAgIHVzRmlyc3RDaGFySW5kZXg6IGZpcnN0Q2hhckluZGV4LFxuICAgICAgICB1c0xhc3RDaGFySW5kZXg6IGxhc3RDaGFySW5kZXgsXG4gICAgICAgIHVsVW5pY29kZVJhbmdlMTogdWxVbmljb2RlUmFuZ2UxLFxuICAgICAgICB1bFVuaWNvZGVSYW5nZTI6IHVsVW5pY29kZVJhbmdlMixcbiAgICAgICAgdWxVbmljb2RlUmFuZ2UzOiB1bFVuaWNvZGVSYW5nZTMsXG4gICAgICAgIHVsVW5pY29kZVJhbmdlNDogdWxVbmljb2RlUmFuZ2U0LFxuICAgICAgICAvLyBTZWUgaHR0cDovL3R5cG9waGlsZS5jb20vbm9kZS8xMzA4MSBmb3IgbW9yZSBpbmZvIG9uIHZlcnRpY2FsIG1ldHJpY3MuXG4gICAgICAgIC8vIFdlIGdldCBtZXRyaWNzIGZvciB0eXBpY2FsIGNoYXJhY3RlcnMgKHN1Y2ggYXMgXCJ4XCIgZm9yIHhIZWlnaHQpLlxuICAgICAgICAvLyBXZSBwcm92aWRlIHNvbWUgZmFsbGJhY2sgY2hhcmFjdGVycyBpZiBjaGFyYWN0ZXJzIGFyZSB1bmF2YWlsYWJsZTogdGhlaXJcbiAgICAgICAgLy8gb3JkZXJpbmcgd2FzIGNob3NlbiBleHBlcmltZW50YWxseS5cbiAgICAgICAgc1R5cG9Bc2NlbmRlcjogZ2xvYmFscy5hc2NlbmRlcixcbiAgICAgICAgc1R5cG9EZXNjZW5kZXI6IGdsb2JhbHMuZGVzY2VuZGVyLFxuICAgICAgICBzVHlwb0xpbmVHYXA6IDAsXG4gICAgICAgIHVzV2luQXNjZW50OiBnbG9iYWxzLnlNYXgsXG4gICAgICAgIHVzV2luRGVzY2VudDogTWF0aC5hYnMoZ2xvYmFscy55TWluKSxcbiAgICAgICAgdWxDb2RlUGFnZVJhbmdlMTogMSwgLy8gRklYTUU6IGhhcmQtY29kZSBMYXRpbiAxIHN1cHBvcnQgZm9yIG5vd1xuICAgICAgICBzeEhlaWdodDogbWV0cmljc0ZvckNoYXIoZm9udCwgJ3h5dncnLCB7eU1heDogTWF0aC5yb3VuZChnbG9iYWxzLmFzY2VuZGVyIC8gMil9KS55TWF4LFxuICAgICAgICBzQ2FwSGVpZ2h0OiBtZXRyaWNzRm9yQ2hhcihmb250LCAnSElLTEVGSk1OVFpCRFBSQUdPUVNVVldYWScsIGdsb2JhbHMpLnlNYXgsXG4gICAgICAgIHVzRGVmYXVsdENoYXI6IGZvbnQuaGFzQ2hhcignICcpID8gMzIgOiAwLCAvLyBVc2Ugc3BhY2UgYXMgdGhlIGRlZmF1bHQgY2hhcmFjdGVyLCBpZiBhdmFpbGFibGUuXG4gICAgICAgIHVzQnJlYWtDaGFyOiBmb250Lmhhc0NoYXIoJyAnKSA/IDMyIDogMCwgLy8gVXNlIHNwYWNlIGFzIHRoZSBicmVhayBjaGFyYWN0ZXIsIGlmIGF2YWlsYWJsZS5cbiAgICB9LCBmb250LnRhYmxlcy5vczIpKTtcblxuICAgIHZhciBobXR4VGFibGUgPSBobXR4Lm1ha2UoZm9udC5nbHlwaHMpO1xuICAgIHZhciBjbWFwVGFibGUgPSBjbWFwLm1ha2UoZm9udC5nbHlwaHMpO1xuXG4gICAgdmFyIGVuZ2xpc2hGYW1pbHlOYW1lID0gZm9udC5nZXRFbmdsaXNoTmFtZSgnZm9udEZhbWlseScpO1xuICAgIHZhciBlbmdsaXNoU3R5bGVOYW1lID0gZm9udC5nZXRFbmdsaXNoTmFtZSgnZm9udFN1YmZhbWlseScpO1xuICAgIHZhciBlbmdsaXNoRnVsbE5hbWUgPSBlbmdsaXNoRmFtaWx5TmFtZSArICcgJyArIGVuZ2xpc2hTdHlsZU5hbWU7XG4gICAgdmFyIHBvc3RTY3JpcHROYW1lID0gZm9udC5nZXRFbmdsaXNoTmFtZSgncG9zdFNjcmlwdE5hbWUnKTtcbiAgICBpZiAoIXBvc3RTY3JpcHROYW1lKSB7XG4gICAgICAgIHBvc3RTY3JpcHROYW1lID0gZW5nbGlzaEZhbWlseU5hbWUucmVwbGFjZSgvXFxzL2csICcnKSArICctJyArIGVuZ2xpc2hTdHlsZU5hbWU7XG4gICAgfVxuXG4gICAgdmFyIG5hbWVzID0ge307XG4gICAgZm9yICh2YXIgbiBpbiBmb250Lm5hbWVzKSB7XG4gICAgICAgIG5hbWVzW25dID0gZm9udC5uYW1lc1tuXTtcbiAgICB9XG5cbiAgICBpZiAoIW5hbWVzLnVuaXF1ZUlEKSB7XG4gICAgICAgIG5hbWVzLnVuaXF1ZUlEID0ge2VuOiBmb250LmdldEVuZ2xpc2hOYW1lKCdtYW51ZmFjdHVyZXInKSArICc6JyArIGVuZ2xpc2hGdWxsTmFtZX07XG4gICAgfVxuXG4gICAgaWYgKCFuYW1lcy5wb3N0U2NyaXB0TmFtZSkge1xuICAgICAgICBuYW1lcy5wb3N0U2NyaXB0TmFtZSA9IHtlbjogcG9zdFNjcmlwdE5hbWV9O1xuICAgIH1cblxuICAgIGlmICghbmFtZXMucHJlZmVycmVkRmFtaWx5KSB7XG4gICAgICAgIG5hbWVzLnByZWZlcnJlZEZhbWlseSA9IGZvbnQubmFtZXMuZm9udEZhbWlseTtcbiAgICB9XG5cbiAgICBpZiAoIW5hbWVzLnByZWZlcnJlZFN1YmZhbWlseSkge1xuICAgICAgICBuYW1lcy5wcmVmZXJyZWRTdWJmYW1pbHkgPSBmb250Lm5hbWVzLmZvbnRTdWJmYW1pbHk7XG4gICAgfVxuXG4gICAgdmFyIGxhbmd1YWdlVGFncyA9IFtdO1xuICAgIHZhciBuYW1lVGFibGUgPSBfbmFtZS5tYWtlKG5hbWVzLCBsYW5ndWFnZVRhZ3MpO1xuICAgIHZhciBsdGFnVGFibGUgPSAobGFuZ3VhZ2VUYWdzLmxlbmd0aCA+IDAgPyBsdGFnLm1ha2UobGFuZ3VhZ2VUYWdzKSA6IHVuZGVmaW5lZCk7XG5cbiAgICB2YXIgcG9zdFRhYmxlID0gcG9zdC5tYWtlKCk7XG4gICAgdmFyIGNmZlRhYmxlID0gY2ZmLm1ha2UoZm9udC5nbHlwaHMsIHtcbiAgICAgICAgdmVyc2lvbjogZm9udC5nZXRFbmdsaXNoTmFtZSgndmVyc2lvbicpLFxuICAgICAgICBmdWxsTmFtZTogZW5nbGlzaEZ1bGxOYW1lLFxuICAgICAgICBmYW1pbHlOYW1lOiBlbmdsaXNoRmFtaWx5TmFtZSxcbiAgICAgICAgd2VpZ2h0TmFtZTogZW5nbGlzaFN0eWxlTmFtZSxcbiAgICAgICAgcG9zdFNjcmlwdE5hbWU6IHBvc3RTY3JpcHROYW1lLFxuICAgICAgICB1bml0c1BlckVtOiBmb250LnVuaXRzUGVyRW0sXG4gICAgICAgIGZvbnRCQm94OiBbMCwgZ2xvYmFscy55TWluLCBnbG9iYWxzLmFzY2VuZGVyLCBnbG9iYWxzLmFkdmFuY2VXaWR0aE1heF1cbiAgICB9KTtcblxuICAgIHZhciBtZXRhVGFibGUgPSAoZm9udC5tZXRhcyAmJiBPYmplY3Qua2V5cyhmb250Lm1ldGFzKS5sZW5ndGggPiAwKSA/IG1ldGEubWFrZShmb250Lm1ldGFzKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIFRoZSBvcmRlciBkb2VzIG5vdCBtYXR0ZXIgYmVjYXVzZSBtYWtlU2ZudFRhYmxlKCkgd2lsbCBzb3J0IHRoZW0uXG4gICAgdmFyIHRhYmxlcyA9IFtoZWFkVGFibGUsIGhoZWFUYWJsZSwgbWF4cFRhYmxlLCBvczJUYWJsZSwgbmFtZVRhYmxlLCBjbWFwVGFibGUsIHBvc3RUYWJsZSwgY2ZmVGFibGUsIGhtdHhUYWJsZV07XG4gICAgaWYgKGx0YWdUYWJsZSkge1xuICAgICAgICB0YWJsZXMucHVzaChsdGFnVGFibGUpO1xuICAgIH1cbiAgICAvLyBPcHRpb25hbCB0YWJsZXNcbiAgICBpZiAoZm9udC50YWJsZXMuZ3N1Yikge1xuICAgICAgICB0YWJsZXMucHVzaChnc3ViLm1ha2UoZm9udC50YWJsZXMuZ3N1YikpO1xuICAgIH1cbiAgICBpZiAobWV0YVRhYmxlKSB7XG4gICAgICAgIHRhYmxlcy5wdXNoKG1ldGFUYWJsZSk7XG4gICAgfVxuXG4gICAgdmFyIHNmbnRUYWJsZSA9IG1ha2VTZm50VGFibGUodGFibGVzKTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGZvbnQncyBjaGVja1N1bSBhbmQgc3RvcmUgaXQgaW4gaGVhZC5jaGVja1N1bUFkanVzdG1lbnQuXG4gICAgdmFyIGJ5dGVzID0gc2ZudFRhYmxlLmVuY29kZSgpO1xuICAgIHZhciBjaGVja1N1bSA9IGNvbXB1dGVDaGVja1N1bShieXRlcyk7XG4gICAgdmFyIHRhYmxlRmllbGRzID0gc2ZudFRhYmxlLmZpZWxkcztcbiAgICB2YXIgY2hlY2tTdW1BZGp1c3RlZCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHRhYmxlRmllbGRzLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgICAgaWYgKHRhYmxlRmllbGRzW2kkMV0ubmFtZSA9PT0gJ2hlYWQgdGFibGUnKSB7XG4gICAgICAgICAgICB0YWJsZUZpZWxkc1tpJDFdLnZhbHVlLmNoZWNrU3VtQWRqdXN0bWVudCA9IDB4QjFCMEFGQkEgLSBjaGVja1N1bTtcbiAgICAgICAgICAgIGNoZWNrU3VtQWRqdXN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNoZWNrU3VtQWRqdXN0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBoZWFkIHRhYmxlIHdpdGggY2hlY2tTdW0gdG8gYWRqdXN0LicpO1xuICAgIH1cblxuICAgIHJldHVybiBzZm50VGFibGU7XG59XG5cbnZhciBzZm50ID0geyBtYWtlOiBtYWtlU2ZudFRhYmxlLCBmb250VG9UYWJsZTogZm9udFRvU2ZudFRhYmxlLCBjb21wdXRlQ2hlY2tTdW06IGNvbXB1dGVDaGVja1N1bSB9O1xuXG4vLyBUaGUgTGF5b3V0IG9iamVjdCBpcyB0aGUgcHJvdG90eXBlIG9mIFN1YnN0aXR1dGlvbiBvYmplY3RzLCBhbmQgcHJvdmlkZXNcblxuZnVuY3Rpb24gc2VhcmNoVGFnKGFyciwgdGFnKSB7XG4gICAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovXG4gICAgdmFyIGltaW4gPSAwO1xuICAgIHZhciBpbWF4ID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKGltaW4gPD0gaW1heCkge1xuICAgICAgICB2YXIgaW1pZCA9IChpbWluICsgaW1heCkgPj4+IDE7XG4gICAgICAgIHZhciB2YWwgPSBhcnJbaW1pZF0udGFnO1xuICAgICAgICBpZiAodmFsID09PSB0YWcpIHtcbiAgICAgICAgICAgIHJldHVybiBpbWlkO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbCA8IHRhZykge1xuICAgICAgICAgICAgaW1pbiA9IGltaWQgKyAxO1xuICAgICAgICB9IGVsc2UgeyBpbWF4ID0gaW1pZCAtIDE7IH1cbiAgICB9XG4gICAgLy8gTm90IGZvdW5kOiByZXR1cm4gLTEtaW5zZXJ0aW9uIHBvaW50XG4gICAgcmV0dXJuIC1pbWluIC0gMTtcbn1cblxuZnVuY3Rpb24gYmluU2VhcmNoKGFyciwgdmFsdWUpIHtcbiAgICAvKiBqc2hpbnQgYml0d2lzZTogZmFsc2UgKi9cbiAgICB2YXIgaW1pbiA9IDA7XG4gICAgdmFyIGltYXggPSBhcnIubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoaW1pbiA8PSBpbWF4KSB7XG4gICAgICAgIHZhciBpbWlkID0gKGltaW4gKyBpbWF4KSA+Pj4gMTtcbiAgICAgICAgdmFyIHZhbCA9IGFycltpbWlkXTtcbiAgICAgICAgaWYgKHZhbCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbWlkO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbCA8IHZhbHVlKSB7XG4gICAgICAgICAgICBpbWluID0gaW1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7IGltYXggPSBpbWlkIC0gMTsgfVxuICAgIH1cbiAgICAvLyBOb3QgZm91bmQ6IHJldHVybiAtMS1pbnNlcnRpb24gcG9pbnRcbiAgICByZXR1cm4gLWltaW4gLSAxO1xufVxuXG4vLyBiaW5hcnkgc2VhcmNoIGluIGEgbGlzdCBvZiByYW5nZXMgKGNvdmVyYWdlLCBjbGFzcyBkZWZpbml0aW9uKVxuZnVuY3Rpb24gc2VhcmNoUmFuZ2UocmFuZ2VzLCB2YWx1ZSkge1xuICAgIC8vIGpzaGludCBiaXR3aXNlOiBmYWxzZVxuICAgIHZhciByYW5nZTtcbiAgICB2YXIgaW1pbiA9IDA7XG4gICAgdmFyIGltYXggPSByYW5nZXMubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoaW1pbiA8PSBpbWF4KSB7XG4gICAgICAgIHZhciBpbWlkID0gKGltaW4gKyBpbWF4KSA+Pj4gMTtcbiAgICAgICAgcmFuZ2UgPSByYW5nZXNbaW1pZF07XG4gICAgICAgIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0O1xuICAgICAgICBpZiAoc3RhcnQgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnQgPCB2YWx1ZSkge1xuICAgICAgICAgICAgaW1pbiA9IGltaWQgKyAxO1xuICAgICAgICB9IGVsc2UgeyBpbWF4ID0gaW1pZCAtIDE7IH1cbiAgICB9XG4gICAgaWYgKGltaW4gPiAwKSB7XG4gICAgICAgIHJhbmdlID0gcmFuZ2VzW2ltaW4gLSAxXTtcbiAgICAgICAgaWYgKHZhbHVlID4gcmFuZ2UuZW5kKSB7IHJldHVybiAwOyB9XG4gICAgICAgIHJldHVybiByYW5nZTtcbiAgICB9XG59XG5cbi8qKlxuICogQGV4cG9ydHMgb3BlbnR5cGUuTGF5b3V0XG4gKiBAY2xhc3NcbiAqL1xuZnVuY3Rpb24gTGF5b3V0KGZvbnQsIHRhYmxlTmFtZSkge1xuICAgIHRoaXMuZm9udCA9IGZvbnQ7XG4gICAgdGhpcy50YWJsZU5hbWUgPSB0YWJsZU5hbWU7XG59XG5cbkxheW91dC5wcm90b3R5cGUgPSB7XG5cbiAgICAvKipcbiAgICAgKiBCaW5hcnkgc2VhcmNoIGFuIG9iamVjdCBieSBcInRhZ1wiIHByb3BlcnR5XG4gICAgICogQGluc3RhbmNlXG4gICAgICogQGZ1bmN0aW9uIHNlYXJjaFRhZ1xuICAgICAqIEBtZW1iZXJvZiBvcGVudHlwZS5MYXlvdXRcbiAgICAgKiBAcGFyYW0gIHtBcnJheX0gYXJyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSB0YWdcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgc2VhcmNoVGFnOiBzZWFyY2hUYWcsXG5cbiAgICAvKipcbiAgICAgKiBCaW5hcnkgc2VhcmNoIGluIGEgbGlzdCBvZiBudW1iZXJzXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQGZ1bmN0aW9uIGJpblNlYXJjaFxuICAgICAqIEBtZW1iZXJvZiBvcGVudHlwZS5MYXlvdXRcbiAgICAgKiBAcGFyYW0gIHtBcnJheX0gYXJyXG4gICAgICogQHBhcmFtICB7bnVtYmVyfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICBiaW5TZWFyY2g6IGJpblNlYXJjaCxcblxuICAgIC8qKlxuICAgICAqIEdldCBvciBjcmVhdGUgdGhlIExheW91dCB0YWJsZSAoR1NVQiwgR1BPUyBldGMpLlxuICAgICAqIEBwYXJhbSAge2Jvb2xlYW59IGNyZWF0ZSAtIFdoZXRoZXIgdG8gY3JlYXRlIGEgbmV3IG9uZS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBHU1VCIG9yIEdQT1MgdGFibGUuXG4gICAgICovXG4gICAgZ2V0VGFibGU6IGZ1bmN0aW9uKGNyZWF0ZSkge1xuICAgICAgICB2YXIgbGF5b3V0ID0gdGhpcy5mb250LnRhYmxlc1t0aGlzLnRhYmxlTmFtZV07XG4gICAgICAgIGlmICghbGF5b3V0ICYmIGNyZWF0ZSkge1xuICAgICAgICAgICAgbGF5b3V0ID0gdGhpcy5mb250LnRhYmxlc1t0aGlzLnRhYmxlTmFtZV0gPSB0aGlzLmNyZWF0ZURlZmF1bHRUYWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYXlvdXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIHNjcmlwdHMgaW4gdGhlIHN1YnN0aXR1dGlvbiB0YWJsZS5cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRTY3JpcHROYW1lczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsYXlvdXQgPSB0aGlzLmdldFRhYmxlKCk7XG4gICAgICAgIGlmICghbGF5b3V0KSB7IHJldHVybiBbXTsgfVxuICAgICAgICByZXR1cm4gbGF5b3V0LnNjcmlwdHMubWFwKGZ1bmN0aW9uKHNjcmlwdCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjcmlwdC50YWc7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBiZXN0IGJldCBmb3IgYSBzY3JpcHQgbmFtZS5cbiAgICAgKiBSZXR1cm5zICdERkxUJyBpZiBpdCBleGlzdHMuXG4gICAgICogSWYgbm90LCByZXR1cm5zICdsYXRuJyBpZiBpdCBleGlzdHMuXG4gICAgICogSWYgbmVpdGhlciBleGlzdCwgcmV0dXJucyB1bmRlZmluZWQuXG4gICAgICovXG4gICAgZ2V0RGVmYXVsdFNjcmlwdE5hbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbGF5b3V0ID0gdGhpcy5nZXRUYWJsZSgpO1xuICAgICAgICBpZiAoIWxheW91dCkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIGhhc0xhdG4gPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXlvdXQuc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBsYXlvdXQuc2NyaXB0c1tpXS50YWc7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ0RGTFQnKSB7IHJldHVybiBuYW1lOyB9XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2xhdG4nKSB7IGhhc0xhdG4gPSB0cnVlOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc0xhdG4pIHsgcmV0dXJuICdsYXRuJzsgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBMYW5nU3lzUmVjb3JkcyBpbiB0aGUgZ2l2ZW4gc2NyaXB0LlxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2NyaXB0PSdERkxUJ11cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNyZWF0ZSAtIGZvcmNlcyB0aGUgY3JlYXRpb24gb2YgdGhpcyBzY3JpcHQgdGFibGUgaWYgaXQgZG9lc24ndCBleGlzdC5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFuIG9iamVjdCB3aXRoIHRhZyBhbmQgc2NyaXB0IHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ2V0U2NyaXB0VGFibGU6IGZ1bmN0aW9uKHNjcmlwdCwgY3JlYXRlKSB7XG4gICAgICAgIHZhciBsYXlvdXQgPSB0aGlzLmdldFRhYmxlKGNyZWF0ZSk7XG4gICAgICAgIGlmIChsYXlvdXQpIHtcbiAgICAgICAgICAgIHNjcmlwdCA9IHNjcmlwdCB8fCAnREZMVCc7XG4gICAgICAgICAgICB2YXIgc2NyaXB0cyA9IGxheW91dC5zY3JpcHRzO1xuICAgICAgICAgICAgdmFyIHBvcyA9IHNlYXJjaFRhZyhsYXlvdXQuc2NyaXB0cywgc2NyaXB0KTtcbiAgICAgICAgICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY3JpcHRzW3Bvc10uc2NyaXB0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjcmVhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NyID0ge1xuICAgICAgICAgICAgICAgICAgICB0YWc6IHNjcmlwdCxcbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TGFuZ1N5czoge3Jlc2VydmVkOiAwLCByZXFGZWF0dXJlSW5kZXg6IDB4ZmZmZiwgZmVhdHVyZUluZGV4ZXM6IFtdfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmdTeXNSZWNvcmRzOiBbXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzY3JpcHRzLnNwbGljZSgtMSAtIHBvcywgMCwgc2NyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NyLnNjcmlwdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGFuZ3VhZ2Ugc3lzdGVtIHRhYmxlXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzY3JpcHQ9J0RGTFQnXVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2U9J2RsZnQnXVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY3JlYXRlIC0gZm9yY2VzIHRoZSBjcmVhdGlvbiBvZiB0aGlzIGxhbmdTeXNUYWJsZSBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICBnZXRMYW5nU3lzVGFibGU6IGZ1bmN0aW9uKHNjcmlwdCwgbGFuZ3VhZ2UsIGNyZWF0ZSkge1xuICAgICAgICB2YXIgc2NyaXB0VGFibGUgPSB0aGlzLmdldFNjcmlwdFRhYmxlKHNjcmlwdCwgY3JlYXRlKTtcbiAgICAgICAgaWYgKHNjcmlwdFRhYmxlKSB7XG4gICAgICAgICAgICBpZiAoIWxhbmd1YWdlIHx8IGxhbmd1YWdlID09PSAnZGZsdCcgfHwgbGFuZ3VhZ2UgPT09ICdERkxUJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY3JpcHRUYWJsZS5kZWZhdWx0TGFuZ1N5cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwb3MgPSBzZWFyY2hUYWcoc2NyaXB0VGFibGUubGFuZ1N5c1JlY29yZHMsIGxhbmd1YWdlKTtcbiAgICAgICAgICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY3JpcHRUYWJsZS5sYW5nU3lzUmVjb3Jkc1twb3NdLmxhbmdTeXM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNyZWF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciBsYW5nU3lzUmVjb3JkID0ge1xuICAgICAgICAgICAgICAgICAgICB0YWc6IGxhbmd1YWdlLFxuICAgICAgICAgICAgICAgICAgICBsYW5nU3lzOiB7cmVzZXJ2ZWQ6IDAsIHJlcUZlYXR1cmVJbmRleDogMHhmZmZmLCBmZWF0dXJlSW5kZXhlczogW119XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzY3JpcHRUYWJsZS5sYW5nU3lzUmVjb3Jkcy5zcGxpY2UoLTEgLSBwb3MsIDAsIGxhbmdTeXNSZWNvcmQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYW5nU3lzUmVjb3JkLmxhbmdTeXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgZmVhdHVyZSB0YWJsZS5cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NjcmlwdD0nREZMVCddXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtsYW5ndWFnZT0nZGxmdCddXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgLSBPbmUgb2YgdGhlIGNvZGVzIGxpc3RlZCBhdCBodHRwczovL3d3dy5taWNyb3NvZnQuY29tL3R5cG9ncmFwaHkvT1RTUEVDL2ZlYXR1cmVsaXN0Lmh0bVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY3JlYXRlIC0gZm9yY2VzIHRoZSBjcmVhdGlvbiBvZiB0aGUgZmVhdHVyZSB0YWJsZSBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICBnZXRGZWF0dXJlVGFibGU6IGZ1bmN0aW9uKHNjcmlwdCwgbGFuZ3VhZ2UsIGZlYXR1cmUsIGNyZWF0ZSkge1xuICAgICAgICB2YXIgbGFuZ1N5c1RhYmxlID0gdGhpcy5nZXRMYW5nU3lzVGFibGUoc2NyaXB0LCBsYW5ndWFnZSwgY3JlYXRlKTtcbiAgICAgICAgaWYgKGxhbmdTeXNUYWJsZSkge1xuICAgICAgICAgICAgdmFyIGZlYXR1cmVSZWNvcmQ7XG4gICAgICAgICAgICB2YXIgZmVhdEluZGV4ZXMgPSBsYW5nU3lzVGFibGUuZmVhdHVyZUluZGV4ZXM7XG4gICAgICAgICAgICB2YXIgYWxsRmVhdHVyZXMgPSB0aGlzLmZvbnQudGFibGVzW3RoaXMudGFibGVOYW1lXS5mZWF0dXJlcztcbiAgICAgICAgICAgIC8vIFRoZSBGZWF0dXJlSW5kZXggYXJyYXkgb2YgaW5kaWNlcyBpcyBpbiBhcmJpdHJhcnkgb3JkZXIsXG4gICAgICAgICAgICAvLyBldmVuIGlmIGFsbEZlYXR1cmVzIGlzIHNvcnRlZCBhbHBoYWJldGljYWxseSBieSBmZWF0dXJlIHRhZy5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdEluZGV4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlUmVjb3JkID0gYWxsRmVhdHVyZXNbZmVhdEluZGV4ZXNbaV1dO1xuICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlUmVjb3JkLnRhZyA9PT0gZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmVhdHVyZVJlY29yZC5mZWF0dXJlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjcmVhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBhbGxGZWF0dXJlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgLy8gQXV0b21hdGljIG9yZGVyaW5nIG9mIGZlYXR1cmVzIHdvdWxkIHJlcXVpcmUgdG8gc2hpZnQgZmVhdHVyZSBpbmRleGVzIGluIHRoZSBzY3JpcHQgbGlzdC5cbiAgICAgICAgICAgICAgICBjaGVjay5hc3NlcnQoaW5kZXggPT09IDAgfHwgZmVhdHVyZSA+PSBhbGxGZWF0dXJlc1tpbmRleCAtIDFdLnRhZywgJ0ZlYXR1cmVzIG11c3QgYmUgYWRkZWQgaW4gYWxwaGFiZXRpY2FsIG9yZGVyLicpO1xuICAgICAgICAgICAgICAgIGZlYXR1cmVSZWNvcmQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRhZzogZmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZTogeyBwYXJhbXM6IDAsIGxvb2t1cExpc3RJbmRleGVzOiBbXSB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBhbGxGZWF0dXJlcy5wdXNoKGZlYXR1cmVSZWNvcmQpO1xuICAgICAgICAgICAgICAgIGZlYXRJbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmZWF0dXJlUmVjb3JkLmZlYXR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBsb29rdXAgdGFibGVzIG9mIGEgZ2l2ZW4gdHlwZSBmb3IgYSBzY3JpcHQvbGFuZ3VhZ2UvZmVhdHVyZS5cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NjcmlwdD0nREZMVCddXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtsYW5ndWFnZT0nZGxmdCddXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgLSA0LWxldHRlciBmZWF0dXJlIGNvZGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG9va3VwVHlwZSAtIDEgdG8gOVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY3JlYXRlIC0gZm9yY2VzIHRoZSBjcmVhdGlvbiBvZiB0aGUgbG9va3VwIHRhYmxlIGlmIGl0IGRvZXNuJ3QgZXhpc3QsIHdpdGggbm8gc3VidGFibGVzLlxuICAgICAqIEByZXR1cm4ge09iamVjdFtdfVxuICAgICAqL1xuICAgIGdldExvb2t1cFRhYmxlczogZnVuY3Rpb24oc2NyaXB0LCBsYW5ndWFnZSwgZmVhdHVyZSwgbG9va3VwVHlwZSwgY3JlYXRlKSB7XG4gICAgICAgIHZhciBmZWF0dXJlVGFibGUgPSB0aGlzLmdldEZlYXR1cmVUYWJsZShzY3JpcHQsIGxhbmd1YWdlLCBmZWF0dXJlLCBjcmVhdGUpO1xuICAgICAgICB2YXIgdGFibGVzID0gW107XG4gICAgICAgIGlmIChmZWF0dXJlVGFibGUpIHtcbiAgICAgICAgICAgIHZhciBsb29rdXBUYWJsZTtcbiAgICAgICAgICAgIHZhciBsb29rdXBMaXN0SW5kZXhlcyA9IGZlYXR1cmVUYWJsZS5sb29rdXBMaXN0SW5kZXhlcztcbiAgICAgICAgICAgIHZhciBhbGxMb29rdXBzID0gdGhpcy5mb250LnRhYmxlc1t0aGlzLnRhYmxlTmFtZV0ubG9va3VwcztcbiAgICAgICAgICAgIC8vIGxvb2t1cExpc3RJbmRleGVzIGFyZSBpbiBubyBwYXJ0aWN1bGFyIG9yZGVyLCBzbyB1c2UgbmFpdmUgc2VhcmNoLlxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb29rdXBMaXN0SW5kZXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxvb2t1cFRhYmxlID0gYWxsTG9va3Vwc1tsb29rdXBMaXN0SW5kZXhlc1tpXV07XG4gICAgICAgICAgICAgICAgaWYgKGxvb2t1cFRhYmxlLmxvb2t1cFR5cGUgPT09IGxvb2t1cFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGVzLnB1c2gobG9va3VwVGFibGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0YWJsZXMubGVuZ3RoID09PSAwICYmIGNyZWF0ZSkge1xuICAgICAgICAgICAgICAgIGxvb2t1cFRhYmxlID0ge1xuICAgICAgICAgICAgICAgICAgICBsb29rdXBUeXBlOiBsb29rdXBUeXBlLFxuICAgICAgICAgICAgICAgICAgICBsb29rdXBGbGFnOiAwLFxuICAgICAgICAgICAgICAgICAgICBzdWJ0YWJsZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBtYXJrRmlsdGVyaW5nU2V0OiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGFsbExvb2t1cHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGFsbExvb2t1cHMucHVzaChsb29rdXBUYWJsZSk7XG4gICAgICAgICAgICAgICAgbG9va3VwTGlzdEluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtsb29rdXBUYWJsZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhYmxlcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmluZCBhIGdseXBoIGluIGEgY2xhc3MgZGVmaW5pdGlvbiB0YWJsZVxuICAgICAqIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3R5cG9ncmFwaHkvb3BlbnR5cGUvc3BlYy9jaGFwdGVyMiNjbGFzcy1kZWZpbml0aW9uLXRhYmxlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNsYXNzRGVmVGFibGUgLSBhbiBPcGVuVHlwZSBMYXlvdXQgY2xhc3MgZGVmaW5pdGlvbiB0YWJsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBnbHlwaEluZGV4IC0gdGhlIGluZGV4IG9mIHRoZSBnbHlwaCB0byBmaW5kXG4gICAgICogQHJldHVybnMge251bWJlcn0gLTEgaWYgbm90IGZvdW5kXG4gICAgICovXG4gICAgZ2V0R2x5cGhDbGFzczogZnVuY3Rpb24oY2xhc3NEZWZUYWJsZSwgZ2x5cGhJbmRleCkge1xuICAgICAgICBzd2l0Y2ggKGNsYXNzRGVmVGFibGUuZm9ybWF0KSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzRGVmVGFibGUuc3RhcnRHbHlwaCA8PSBnbHlwaEluZGV4ICYmIGdseXBoSW5kZXggPCBjbGFzc0RlZlRhYmxlLnN0YXJ0R2x5cGggKyBjbGFzc0RlZlRhYmxlLmNsYXNzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbGFzc0RlZlRhYmxlLmNsYXNzZXNbZ2x5cGhJbmRleCAtIGNsYXNzRGVmVGFibGUuc3RhcnRHbHlwaF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHNlYXJjaFJhbmdlKGNsYXNzRGVmVGFibGUucmFuZ2VzLCBnbHlwaEluZGV4KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2UgPyByYW5nZS5jbGFzc0lkIDogMDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGEgZ2x5cGggaW4gYSBjb3ZlcmFnZSB0YWJsZVxuICAgICAqIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3R5cG9ncmFwaHkvb3BlbnR5cGUvc3BlYy9jaGFwdGVyMiNjb3ZlcmFnZS10YWJsZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb3ZlcmFnZVRhYmxlIC0gYW4gT3BlblR5cGUgTGF5b3V0IGNvdmVyYWdlIHRhYmxlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGdseXBoSW5kZXggLSB0aGUgaW5kZXggb2YgdGhlIGdseXBoIHRvIGZpbmRcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAtMSBpZiBub3QgZm91bmRcbiAgICAgKi9cbiAgICBnZXRDb3ZlcmFnZUluZGV4OiBmdW5jdGlvbihjb3ZlcmFnZVRhYmxlLCBnbHlwaEluZGV4KSB7XG4gICAgICAgIHN3aXRjaCAoY292ZXJhZ2VUYWJsZS5mb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBiaW5TZWFyY2goY292ZXJhZ2VUYWJsZS5nbHlwaHMsIGdseXBoSW5kZXgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCA+PSAwID8gaW5kZXggOiAtMTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBzZWFyY2hSYW5nZShjb3ZlcmFnZVRhYmxlLnJhbmdlcywgZ2x5cGhJbmRleCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlID8gcmFuZ2UuaW5kZXggKyBnbHlwaEluZGV4IC0gcmFuZ2Uuc3RhcnQgOiAtMTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGdseXBoIGluZGV4ZXMgb2YgYSBjb3ZlcmFnZSB0YWJsZS5cbiAgICAgKiBGb3JtYXQgMTogdGhlIGxpc3QgaXMgc3RvcmVkIHJhd1xuICAgICAqIEZvcm1hdCAyOiBjb21wYWN0IGxpc3QgYXMgcmFuZ2UgcmVjb3Jkcy5cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGNvdmVyYWdlVGFibGVcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBleHBhbmRDb3ZlcmFnZTogZnVuY3Rpb24oY292ZXJhZ2VUYWJsZSkge1xuICAgICAgICBpZiAoY292ZXJhZ2VUYWJsZS5mb3JtYXQgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBjb3ZlcmFnZVRhYmxlLmdseXBocztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBnbHlwaHMgPSBbXTtcbiAgICAgICAgICAgIHZhciByYW5nZXMgPSBjb3ZlcmFnZVRhYmxlLnJhbmdlcztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gcmFuZ2VzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0O1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSByYW5nZS5lbmQ7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0OyBqIDw9IGVuZDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGdseXBocy5wdXNoKGopO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnbHlwaHM7XG4gICAgICAgIH1cbiAgICB9XG5cbn07XG5cbi8vIFRoZSBQb3NpdGlvbiBvYmplY3QgcHJvdmlkZXMgdXRpbGl0eSBtZXRob2RzIHRvIG1hbmlwdWxhdGVcblxuLyoqXG4gKiBAZXhwb3J0cyBvcGVudHlwZS5Qb3NpdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBvcGVudHlwZS5MYXlvdXRcbiAqIEBwYXJhbSB7b3BlbnR5cGUuRm9udH1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQb3NpdGlvbihmb250KSB7XG4gICAgTGF5b3V0LmNhbGwodGhpcywgZm9udCwgJ2dwb3MnKTtcbn1cblxuUG9zaXRpb24ucHJvdG90eXBlID0gTGF5b3V0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBJbml0IHNvbWUgZGF0YSBmb3IgZmFzdGVyIGFuZCBlYXNpZXIgYWNjZXNzIGxhdGVyLlxuICovXG5Qb3NpdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY3JpcHQgPSB0aGlzLmdldERlZmF1bHRTY3JpcHROYW1lKCk7XG4gICAgdGhpcy5kZWZhdWx0S2VybmluZ1RhYmxlcyA9IHRoaXMuZ2V0S2VybmluZ1RhYmxlcyhzY3JpcHQpO1xufTtcblxuLyoqXG4gKiBGaW5kIGEgZ2x5cGggcGFpciBpbiBhIGxpc3Qgb2YgbG9va3VwIHRhYmxlcyBvZiB0eXBlIDIgYW5kIHJldHJpZXZlIHRoZSB4QWR2YW5jZSBrZXJuaW5nIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7aW50ZWdlcn0gbGVmdEluZGV4IC0gbGVmdCBnbHlwaCBpbmRleFxuICogQHBhcmFtIHtpbnRlZ2VyfSByaWdodEluZGV4IC0gcmlnaHQgZ2x5cGggaW5kZXhcbiAqIEByZXR1cm5zIHtpbnRlZ2VyfVxuICovXG5Qb3NpdGlvbi5wcm90b3R5cGUuZ2V0S2VybmluZ1ZhbHVlID0gZnVuY3Rpb24oa2VybmluZ0xvb2t1cHMsIGxlZnRJbmRleCwgcmlnaHRJbmRleCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2VybmluZ0xvb2t1cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN1YnRhYmxlcyA9IGtlcm5pbmdMb29rdXBzW2ldLnN1YnRhYmxlcztcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdWJ0YWJsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBzdWJ0YWJsZSA9IHN1YnRhYmxlc1tqXTtcbiAgICAgICAgICAgIHZhciBjb3ZJbmRleCA9IHRoaXMuZ2V0Q292ZXJhZ2VJbmRleChzdWJ0YWJsZS5jb3ZlcmFnZSwgbGVmdEluZGV4KTtcbiAgICAgICAgICAgIGlmIChjb3ZJbmRleCA8IDApIHsgY29udGludWU7IH1cbiAgICAgICAgICAgIHN3aXRjaCAoc3VidGFibGUucG9zRm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAvLyBTZWFyY2ggUGFpciBBZGp1c3RtZW50IFBvc2l0aW9uaW5nIEZvcm1hdCAxXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWlyU2V0ID0gc3VidGFibGUucGFpclNldHNbY292SW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHBhaXJTZXQubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWlyID0gcGFpclNldFtrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWlyLnNlY29uZEdseXBoID09PSByaWdodEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhaXIudmFsdWUxICYmIHBhaXIudmFsdWUxLnhBZHZhbmNlIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7ICAgICAgLy8gbGVmdCBnbHlwaCBmb3VuZCwgbm90IHJpZ2h0IGdseXBoIC0gdHJ5IG5leHQgc3VidGFibGVcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlYXJjaCBQYWlyIEFkanVzdG1lbnQgUG9zaXRpb25pbmcgRm9ybWF0IDJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsYXNzMSA9IHRoaXMuZ2V0R2x5cGhDbGFzcyhzdWJ0YWJsZS5jbGFzc0RlZjEsIGxlZnRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGFzczIgPSB0aGlzLmdldEdseXBoQ2xhc3Moc3VidGFibGUuY2xhc3NEZWYyLCByaWdodEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhaXIkMSA9IHN1YnRhYmxlLmNsYXNzUmVjb3Jkc1tjbGFzczFdW2NsYXNzMl07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWlyJDEudmFsdWUxICYmIHBhaXIkMS52YWx1ZTEueEFkdmFuY2UgfHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbn07XG5cbi8qKlxuICogTGlzdCBhbGwga2VybmluZyBsb29rdXAgdGFibGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2NyaXB0PSdERkxUJ10gLSB1c2UgZm9udC5wb3NpdGlvbi5nZXREZWZhdWx0U2NyaXB0TmFtZSgpIGZvciBhIGJldHRlciBkZWZhdWx0IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlPSdkZmx0J11cbiAqIEByZXR1cm4ge29iamVjdFtdfSBUaGUgbGlzdCBvZiBrZXJuaW5nIGxvb2t1cCB0YWJsZXMgKG1heSBiZSBlbXB0eSksIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBpcyBubyBHUE9TIHRhYmxlIChhbmQgd2Ugc2hvdWxkIHVzZSB0aGUga2VybiB0YWJsZSlcbiAqL1xuUG9zaXRpb24ucHJvdG90eXBlLmdldEtlcm5pbmdUYWJsZXMgPSBmdW5jdGlvbihzY3JpcHQsIGxhbmd1YWdlKSB7XG4gICAgaWYgKHRoaXMuZm9udC50YWJsZXMuZ3Bvcykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMb29rdXBUYWJsZXMoc2NyaXB0LCBsYW5ndWFnZSwgJ2tlcm4nLCAyKTtcbiAgICB9XG59O1xuXG4vLyBUaGUgU3Vic3RpdHV0aW9uIG9iamVjdCBwcm92aWRlcyB1dGlsaXR5IG1ldGhvZHMgdG8gbWFuaXB1bGF0ZVxuXG4vKipcbiAqIEBleHBvcnRzIG9wZW50eXBlLlN1YnN0aXR1dGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBvcGVudHlwZS5MYXlvdXRcbiAqIEBwYXJhbSB7b3BlbnR5cGUuRm9udH1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTdWJzdGl0dXRpb24oZm9udCkge1xuICAgIExheW91dC5jYWxsKHRoaXMsIGZvbnQsICdnc3ViJyk7XG59XG5cbi8vIENoZWNrIGlmIDIgYXJyYXlzIG9mIHByaW1pdGl2ZXMgYXJlIGVxdWFsLlxuZnVuY3Rpb24gYXJyYXlzRXF1YWwoYXIxLCBhcjIpIHtcbiAgICB2YXIgbiA9IGFyMS5sZW5ndGg7XG4gICAgaWYgKG4gIT09IGFyMi5sZW5ndGgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKGFyMVtpXSAhPT0gYXIyW2ldKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gRmluZCB0aGUgZmlyc3Qgc3VidGFibGUgb2YgYSBsb29rdXAgdGFibGUgaW4gYSBwYXJ0aWN1bGFyIGZvcm1hdC5cbmZ1bmN0aW9uIGdldFN1YnN0Rm9ybWF0KGxvb2t1cFRhYmxlLCBmb3JtYXQsIGRlZmF1bHRTdWJ0YWJsZSkge1xuICAgIHZhciBzdWJ0YWJsZXMgPSBsb29rdXBUYWJsZS5zdWJ0YWJsZXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJ0YWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN1YnRhYmxlID0gc3VidGFibGVzW2ldO1xuICAgICAgICBpZiAoc3VidGFibGUuc3Vic3RGb3JtYXQgPT09IGZvcm1hdCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1YnRhYmxlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkZWZhdWx0U3VidGFibGUpIHtcbiAgICAgICAgc3VidGFibGVzLnB1c2goZGVmYXVsdFN1YnRhYmxlKTtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRTdWJ0YWJsZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuU3Vic3RpdHV0aW9uLnByb3RvdHlwZSA9IExheW91dC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVmYXVsdCBHU1VCIHRhYmxlLlxuICogQHJldHVybiB7T2JqZWN0fSBnc3ViIC0gVGhlIEdTVUIgdGFibGUuXG4gKi9cblN1YnN0aXR1dGlvbi5wcm90b3R5cGUuY3JlYXRlRGVmYXVsdFRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gR2VuZXJhdGUgYSBkZWZhdWx0IGVtcHR5IEdTVUIgdGFibGUgd2l0aCBqdXN0IGEgREZMVCBzY3JpcHQgYW5kIGRmbHQgbGFuZyBzeXMuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmVyc2lvbjogMSxcbiAgICAgICAgc2NyaXB0czogW3tcbiAgICAgICAgICAgIHRhZzogJ0RGTFQnLFxuICAgICAgICAgICAgc2NyaXB0OiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdExhbmdTeXM6IHsgcmVzZXJ2ZWQ6IDAsIHJlcUZlYXR1cmVJbmRleDogMHhmZmZmLCBmZWF0dXJlSW5kZXhlczogW10gfSxcbiAgICAgICAgICAgICAgICBsYW5nU3lzUmVjb3JkczogW11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0sXG4gICAgICAgIGZlYXR1cmVzOiBbXSxcbiAgICAgICAgbG9va3VwczogW11cbiAgICB9O1xufTtcblxuLyoqXG4gKiBMaXN0IGFsbCBzaW5nbGUgc3Vic3RpdHV0aW9ucyAobG9va3VwIHR5cGUgMSkgZm9yIGEgZ2l2ZW4gc2NyaXB0LCBsYW5ndWFnZSwgYW5kIGZlYXR1cmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NjcmlwdD0nREZMVCddXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlPSdkZmx0J11cbiAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlIC0gNC1jaGFyYWN0ZXIgZmVhdHVyZSBuYW1lICgnYWFsdCcsICdzYWx0JywgJ3NzMDEnLi4uKVxuICogQHJldHVybiB7QXJyYXl9IHN1YnN0aXR1dGlvbnMgLSBUaGUgbGlzdCBvZiBzdWJzdGl0dXRpb25zLlxuICovXG5TdWJzdGl0dXRpb24ucHJvdG90eXBlLmdldFNpbmdsZSA9IGZ1bmN0aW9uKGZlYXR1cmUsIHNjcmlwdCwgbGFuZ3VhZ2UpIHtcbiAgICB2YXIgc3Vic3RpdHV0aW9ucyA9IFtdO1xuICAgIHZhciBsb29rdXBUYWJsZXMgPSB0aGlzLmdldExvb2t1cFRhYmxlcyhzY3JpcHQsIGxhbmd1YWdlLCBmZWF0dXJlLCAxKTtcbiAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBsb29rdXBUYWJsZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICB2YXIgc3VidGFibGVzID0gbG9va3VwVGFibGVzW2lkeF0uc3VidGFibGVzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnRhYmxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHN1YnRhYmxlID0gc3VidGFibGVzW2ldO1xuICAgICAgICAgICAgdmFyIGdseXBocyA9IHRoaXMuZXhwYW5kQ292ZXJhZ2Uoc3VidGFibGUuY292ZXJhZ2UpO1xuICAgICAgICAgICAgdmFyIGogPSAodm9pZCAwKTtcbiAgICAgICAgICAgIGlmIChzdWJ0YWJsZS5zdWJzdEZvcm1hdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IHN1YnRhYmxlLmRlbHRhR2x5cGhJZDtcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZ2x5cGhzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnbHlwaCA9IGdseXBoc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9ucy5wdXNoKHsgc3ViOiBnbHlwaCwgYnk6IGdseXBoICsgZGVsdGEgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgc3Vic3RpdHV0ZSA9IHN1YnRhYmxlLnN1YnN0aXR1dGU7XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGdseXBocy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25zLnB1c2goeyBzdWI6IGdseXBoc1tqXSwgYnk6IHN1YnN0aXR1dGVbal0gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdWJzdGl0dXRpb25zO1xufTtcblxuLyoqXG4gKiBMaXN0IGFsbCBtdWx0aXBsZSBzdWJzdGl0dXRpb25zIChsb29rdXAgdHlwZSAyKSBmb3IgYSBnaXZlbiBzY3JpcHQsIGxhbmd1YWdlLCBhbmQgZmVhdHVyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2NyaXB0PSdERkxUJ11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2U9J2RmbHQnXVxuICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgLSA0LWNoYXJhY3RlciBmZWF0dXJlIG5hbWUgKCdjY21wJywgJ3N0Y2gnKVxuICogQHJldHVybiB7QXJyYXl9IHN1YnN0aXR1dGlvbnMgLSBUaGUgbGlzdCBvZiBzdWJzdGl0dXRpb25zLlxuICovXG5TdWJzdGl0dXRpb24ucHJvdG90eXBlLmdldE11bHRpcGxlID0gZnVuY3Rpb24oZmVhdHVyZSwgc2NyaXB0LCBsYW5ndWFnZSkge1xuICAgIHZhciBzdWJzdGl0dXRpb25zID0gW107XG4gICAgdmFyIGxvb2t1cFRhYmxlcyA9IHRoaXMuZ2V0TG9va3VwVGFibGVzKHNjcmlwdCwgbGFuZ3VhZ2UsIGZlYXR1cmUsIDIpO1xuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGxvb2t1cFRhYmxlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIHZhciBzdWJ0YWJsZXMgPSBsb29rdXBUYWJsZXNbaWR4XS5zdWJ0YWJsZXM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3VidGFibGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc3VidGFibGUgPSBzdWJ0YWJsZXNbaV07XG4gICAgICAgICAgICB2YXIgZ2x5cGhzID0gdGhpcy5leHBhbmRDb3ZlcmFnZShzdWJ0YWJsZS5jb3ZlcmFnZSk7XG4gICAgICAgICAgICB2YXIgaiA9ICh2b2lkIDApO1xuXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZ2x5cGhzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdseXBoID0gZ2x5cGhzW2pdO1xuICAgICAgICAgICAgICAgIHZhciByZXBsYWNlbWVudHMgPSBzdWJ0YWJsZS5zZXF1ZW5jZXNbal07XG4gICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9ucy5wdXNoKHsgc3ViOiBnbHlwaCwgYnk6IHJlcGxhY2VtZW50cyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9ucztcbn07XG5cbi8qKlxuICogTGlzdCBhbGwgYWx0ZXJuYXRlcyAobG9va3VwIHR5cGUgMykgZm9yIGEgZ2l2ZW4gc2NyaXB0LCBsYW5ndWFnZSwgYW5kIGZlYXR1cmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NjcmlwdD0nREZMVCddXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlPSdkZmx0J11cbiAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlIC0gNC1jaGFyYWN0ZXIgZmVhdHVyZSBuYW1lICgnYWFsdCcsICdzYWx0Jy4uLilcbiAqIEByZXR1cm4ge0FycmF5fSBhbHRlcm5hdGVzIC0gVGhlIGxpc3Qgb2YgYWx0ZXJuYXRlc1xuICovXG5TdWJzdGl0dXRpb24ucHJvdG90eXBlLmdldEFsdGVybmF0ZXMgPSBmdW5jdGlvbihmZWF0dXJlLCBzY3JpcHQsIGxhbmd1YWdlKSB7XG4gICAgdmFyIGFsdGVybmF0ZXMgPSBbXTtcbiAgICB2YXIgbG9va3VwVGFibGVzID0gdGhpcy5nZXRMb29rdXBUYWJsZXMoc2NyaXB0LCBsYW5ndWFnZSwgZmVhdHVyZSwgMyk7XG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbG9va3VwVGFibGVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgdmFyIHN1YnRhYmxlcyA9IGxvb2t1cFRhYmxlc1tpZHhdLnN1YnRhYmxlcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJ0YWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzdWJ0YWJsZSA9IHN1YnRhYmxlc1tpXTtcbiAgICAgICAgICAgIHZhciBnbHlwaHMgPSB0aGlzLmV4cGFuZENvdmVyYWdlKHN1YnRhYmxlLmNvdmVyYWdlKTtcbiAgICAgICAgICAgIHZhciBhbHRlcm5hdGVTZXRzID0gc3VidGFibGUuYWx0ZXJuYXRlU2V0cztcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZ2x5cGhzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgYWx0ZXJuYXRlcy5wdXNoKHsgc3ViOiBnbHlwaHNbal0sIGJ5OiBhbHRlcm5hdGVTZXRzW2pdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbHRlcm5hdGVzO1xufTtcblxuLyoqXG4gKiBMaXN0IGFsbCBsaWdhdHVyZXMgKGxvb2t1cCB0eXBlIDQpIGZvciBhIGdpdmVuIHNjcmlwdCwgbGFuZ3VhZ2UsIGFuZCBmZWF0dXJlLlxuICogVGhlIHJlc3VsdCBpcyBhbiBhcnJheSBvZiBsaWdhdHVyZSBvYmplY3RzIGxpa2UgeyBzdWI6IFtpZHNdLCBieTogaWQgfVxuICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgLSA0LWxldHRlciBmZWF0dXJlIG5hbWUgKCdsaWdhJywgJ3JsaWcnLCAnZGxpZycuLi4pXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NjcmlwdD0nREZMVCddXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlPSdkZmx0J11cbiAqIEByZXR1cm4ge0FycmF5fSBsaWdhdHVyZXMgLSBUaGUgbGlzdCBvZiBsaWdhdHVyZXMuXG4gKi9cblN1YnN0aXR1dGlvbi5wcm90b3R5cGUuZ2V0TGlnYXR1cmVzID0gZnVuY3Rpb24oZmVhdHVyZSwgc2NyaXB0LCBsYW5ndWFnZSkge1xuICAgIHZhciBsaWdhdHVyZXMgPSBbXTtcbiAgICB2YXIgbG9va3VwVGFibGVzID0gdGhpcy5nZXRMb29rdXBUYWJsZXMoc2NyaXB0LCBsYW5ndWFnZSwgZmVhdHVyZSwgNCk7XG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbG9va3VwVGFibGVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgdmFyIHN1YnRhYmxlcyA9IGxvb2t1cFRhYmxlc1tpZHhdLnN1YnRhYmxlcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJ0YWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzdWJ0YWJsZSA9IHN1YnRhYmxlc1tpXTtcbiAgICAgICAgICAgIHZhciBnbHlwaHMgPSB0aGlzLmV4cGFuZENvdmVyYWdlKHN1YnRhYmxlLmNvdmVyYWdlKTtcbiAgICAgICAgICAgIHZhciBsaWdhdHVyZVNldHMgPSBzdWJ0YWJsZS5saWdhdHVyZVNldHM7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGdseXBocy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydEdseXBoID0gZ2x5cGhzW2pdO1xuICAgICAgICAgICAgICAgIHZhciBsaWdTZXQgPSBsaWdhdHVyZVNldHNbal07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBsaWdTZXQubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpZyA9IGxpZ1NldFtrXTtcbiAgICAgICAgICAgICAgICAgICAgbGlnYXR1cmVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViOiBbc3RhcnRHbHlwaF0uY29uY2F0KGxpZy5jb21wb25lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ5OiBsaWcubGlnR2x5cGhcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaWdhdHVyZXM7XG59O1xuXG4vKipcbiAqIEFkZCBvciBtb2RpZnkgYSBzaW5nbGUgc3Vic3RpdHV0aW9uIChsb29rdXAgdHlwZSAxKVxuICogRm9ybWF0IDIsIG1vcmUgZmxleGlibGUsIGlzIGFsd2F5cyB1c2VkLlxuICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgLSA0LWxldHRlciBmZWF0dXJlIG5hbWUgKCdsaWdhJywgJ3JsaWcnLCAnZGxpZycuLi4pXG4gKiBAcGFyYW0ge09iamVjdH0gc3Vic3RpdHV0aW9uIC0geyBzdWI6IGlkLCBieTogaWQgfSAoZm9ybWF0IDEgaXMgbm90IHN1cHBvcnRlZClcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2NyaXB0PSdERkxUJ11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2U9J2RmbHQnXVxuICovXG5TdWJzdGl0dXRpb24ucHJvdG90eXBlLmFkZFNpbmdsZSA9IGZ1bmN0aW9uKGZlYXR1cmUsIHN1YnN0aXR1dGlvbiwgc2NyaXB0LCBsYW5ndWFnZSkge1xuICAgIHZhciBsb29rdXBUYWJsZSA9IHRoaXMuZ2V0TG9va3VwVGFibGVzKHNjcmlwdCwgbGFuZ3VhZ2UsIGZlYXR1cmUsIDEsIHRydWUpWzBdO1xuICAgIHZhciBzdWJ0YWJsZSA9IGdldFN1YnN0Rm9ybWF0KGxvb2t1cFRhYmxlLCAyLCB7ICAgICAgICAgICAgICAgIC8vIGxvb2t1cCB0eXBlIDEgc3VidGFibGUsIGZvcm1hdCAyLCBjb3ZlcmFnZSBmb3JtYXQgMVxuICAgICAgICBzdWJzdEZvcm1hdDogMixcbiAgICAgICAgY292ZXJhZ2U6IHtmb3JtYXQ6IDEsIGdseXBoczogW119LFxuICAgICAgICBzdWJzdGl0dXRlOiBbXVxuICAgIH0pO1xuICAgIGNoZWNrLmFzc2VydChzdWJ0YWJsZS5jb3ZlcmFnZS5mb3JtYXQgPT09IDEsICdTaW5nbGU6IHVuYWJsZSB0byBtb2RpZnkgY292ZXJhZ2UgdGFibGUgZm9ybWF0ICcgKyBzdWJ0YWJsZS5jb3ZlcmFnZS5mb3JtYXQpO1xuICAgIHZhciBjb3ZlcmFnZUdseXBoID0gc3Vic3RpdHV0aW9uLnN1YjtcbiAgICB2YXIgcG9zID0gdGhpcy5iaW5TZWFyY2goc3VidGFibGUuY292ZXJhZ2UuZ2x5cGhzLCBjb3ZlcmFnZUdseXBoKTtcbiAgICBpZiAocG9zIDwgMCkge1xuICAgICAgICBwb3MgPSAtMSAtIHBvcztcbiAgICAgICAgc3VidGFibGUuY292ZXJhZ2UuZ2x5cGhzLnNwbGljZShwb3MsIDAsIGNvdmVyYWdlR2x5cGgpO1xuICAgICAgICBzdWJ0YWJsZS5zdWJzdGl0dXRlLnNwbGljZShwb3MsIDAsIDApO1xuICAgIH1cbiAgICBzdWJ0YWJsZS5zdWJzdGl0dXRlW3Bvc10gPSBzdWJzdGl0dXRpb24uYnk7XG59O1xuXG4vKipcbiAqIEFkZCBvciBtb2RpZnkgYSBtdWx0aXBsZSBzdWJzdGl0dXRpb24gKGxvb2t1cCB0eXBlIDIpXG4gKiBAcGFyYW0ge3N0cmluZ30gZmVhdHVyZSAtIDQtbGV0dGVyIGZlYXR1cmUgbmFtZSAoJ2NjbXAnLCAnc3RjaCcpXG4gKiBAcGFyYW0ge09iamVjdH0gc3Vic3RpdHV0aW9uIC0geyBzdWI6IGlkLCBieTogW2lkXSB9IGZvciBmb3JtYXQgMi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2NyaXB0PSdERkxUJ11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2U9J2RmbHQnXVxuICovXG5TdWJzdGl0dXRpb24ucHJvdG90eXBlLmFkZE11bHRpcGxlID0gZnVuY3Rpb24oZmVhdHVyZSwgc3Vic3RpdHV0aW9uLCBzY3JpcHQsIGxhbmd1YWdlKSB7XG4gICAgY2hlY2suYXNzZXJ0KHN1YnN0aXR1dGlvbi5ieSBpbnN0YW5jZW9mIEFycmF5ICYmIHN1YnN0aXR1dGlvbi5ieS5sZW5ndGggPiAxLCAnTXVsdGlwbGU6IFwiYnlcIiBtdXN0IGJlIGFuIGFycmF5IG9mIHR3byBvciBtb3JlIGlkcycpO1xuICAgIHZhciBsb29rdXBUYWJsZSA9IHRoaXMuZ2V0TG9va3VwVGFibGVzKHNjcmlwdCwgbGFuZ3VhZ2UsIGZlYXR1cmUsIDIsIHRydWUpWzBdO1xuICAgIHZhciBzdWJ0YWJsZSA9IGdldFN1YnN0Rm9ybWF0KGxvb2t1cFRhYmxlLCAxLCB7ICAgICAgICAgICAgICAgIC8vIGxvb2t1cCB0eXBlIDIgc3VidGFibGUsIGZvcm1hdCAxLCBjb3ZlcmFnZSBmb3JtYXQgMVxuICAgICAgICBzdWJzdEZvcm1hdDogMSxcbiAgICAgICAgY292ZXJhZ2U6IHtmb3JtYXQ6IDEsIGdseXBoczogW119LFxuICAgICAgICBzZXF1ZW5jZXM6IFtdXG4gICAgfSk7XG4gICAgY2hlY2suYXNzZXJ0KHN1YnRhYmxlLmNvdmVyYWdlLmZvcm1hdCA9PT0gMSwgJ011bHRpcGxlOiB1bmFibGUgdG8gbW9kaWZ5IGNvdmVyYWdlIHRhYmxlIGZvcm1hdCAnICsgc3VidGFibGUuY292ZXJhZ2UuZm9ybWF0KTtcbiAgICB2YXIgY292ZXJhZ2VHbHlwaCA9IHN1YnN0aXR1dGlvbi5zdWI7XG4gICAgdmFyIHBvcyA9IHRoaXMuYmluU2VhcmNoKHN1YnRhYmxlLmNvdmVyYWdlLmdseXBocywgY292ZXJhZ2VHbHlwaCk7XG4gICAgaWYgKHBvcyA8IDApIHtcbiAgICAgICAgcG9zID0gLTEgLSBwb3M7XG4gICAgICAgIHN1YnRhYmxlLmNvdmVyYWdlLmdseXBocy5zcGxpY2UocG9zLCAwLCBjb3ZlcmFnZUdseXBoKTtcbiAgICAgICAgc3VidGFibGUuc2VxdWVuY2VzLnNwbGljZShwb3MsIDAsIDApO1xuICAgIH1cbiAgICBzdWJ0YWJsZS5zZXF1ZW5jZXNbcG9zXSA9IHN1YnN0aXR1dGlvbi5ieTtcbn07XG5cbi8qKlxuICogQWRkIG9yIG1vZGlmeSBhbiBhbHRlcm5hdGUgc3Vic3RpdHV0aW9uIChsb29rdXAgdHlwZSAzKVxuICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgLSA0LWxldHRlciBmZWF0dXJlIG5hbWUgKCdsaWdhJywgJ3JsaWcnLCAnZGxpZycuLi4pXG4gKiBAcGFyYW0ge09iamVjdH0gc3Vic3RpdHV0aW9uIC0geyBzdWI6IGlkLCBieTogW2lkc10gfVxuICogQHBhcmFtIHtzdHJpbmd9IFtzY3JpcHQ9J0RGTFQnXVxuICogQHBhcmFtIHtzdHJpbmd9IFtsYW5ndWFnZT0nZGZsdCddXG4gKi9cblN1YnN0aXR1dGlvbi5wcm90b3R5cGUuYWRkQWx0ZXJuYXRlID0gZnVuY3Rpb24oZmVhdHVyZSwgc3Vic3RpdHV0aW9uLCBzY3JpcHQsIGxhbmd1YWdlKSB7XG4gICAgdmFyIGxvb2t1cFRhYmxlID0gdGhpcy5nZXRMb29rdXBUYWJsZXMoc2NyaXB0LCBsYW5ndWFnZSwgZmVhdHVyZSwgMywgdHJ1ZSlbMF07XG4gICAgdmFyIHN1YnRhYmxlID0gZ2V0U3Vic3RGb3JtYXQobG9va3VwVGFibGUsIDEsIHsgICAgICAgICAgICAgICAgLy8gbG9va3VwIHR5cGUgMyBzdWJ0YWJsZSwgZm9ybWF0IDEsIGNvdmVyYWdlIGZvcm1hdCAxXG4gICAgICAgIHN1YnN0Rm9ybWF0OiAxLFxuICAgICAgICBjb3ZlcmFnZToge2Zvcm1hdDogMSwgZ2x5cGhzOiBbXX0sXG4gICAgICAgIGFsdGVybmF0ZVNldHM6IFtdXG4gICAgfSk7XG4gICAgY2hlY2suYXNzZXJ0KHN1YnRhYmxlLmNvdmVyYWdlLmZvcm1hdCA9PT0gMSwgJ0FsdGVybmF0ZTogdW5hYmxlIHRvIG1vZGlmeSBjb3ZlcmFnZSB0YWJsZSBmb3JtYXQgJyArIHN1YnRhYmxlLmNvdmVyYWdlLmZvcm1hdCk7XG4gICAgdmFyIGNvdmVyYWdlR2x5cGggPSBzdWJzdGl0dXRpb24uc3ViO1xuICAgIHZhciBwb3MgPSB0aGlzLmJpblNlYXJjaChzdWJ0YWJsZS5jb3ZlcmFnZS5nbHlwaHMsIGNvdmVyYWdlR2x5cGgpO1xuICAgIGlmIChwb3MgPCAwKSB7XG4gICAgICAgIHBvcyA9IC0xIC0gcG9zO1xuICAgICAgICBzdWJ0YWJsZS5jb3ZlcmFnZS5nbHlwaHMuc3BsaWNlKHBvcywgMCwgY292ZXJhZ2VHbHlwaCk7XG4gICAgICAgIHN1YnRhYmxlLmFsdGVybmF0ZVNldHMuc3BsaWNlKHBvcywgMCwgMCk7XG4gICAgfVxuICAgIHN1YnRhYmxlLmFsdGVybmF0ZVNldHNbcG9zXSA9IHN1YnN0aXR1dGlvbi5ieTtcbn07XG5cbi8qKlxuICogQWRkIGEgbGlnYXR1cmUgKGxvb2t1cCB0eXBlIDQpXG4gKiBMaWdhdHVyZXMgd2l0aCBtb3JlIGNvbXBvbmVudHMgbXVzdCBiZSBzdG9yZWQgYWhlYWQgb2YgdGhvc2Ugd2l0aCBmZXdlciBjb21wb25lbnRzIGluIG9yZGVyIHRvIGJlIGZvdW5kXG4gKiBAcGFyYW0ge3N0cmluZ30gZmVhdHVyZSAtIDQtbGV0dGVyIGZlYXR1cmUgbmFtZSAoJ2xpZ2EnLCAncmxpZycsICdkbGlnJy4uLilcbiAqIEBwYXJhbSB7T2JqZWN0fSBsaWdhdHVyZSAtIHsgc3ViOiBbaWRzXSwgYnk6IGlkIH1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2NyaXB0PSdERkxUJ11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2U9J2RmbHQnXVxuICovXG5TdWJzdGl0dXRpb24ucHJvdG90eXBlLmFkZExpZ2F0dXJlID0gZnVuY3Rpb24oZmVhdHVyZSwgbGlnYXR1cmUsIHNjcmlwdCwgbGFuZ3VhZ2UpIHtcbiAgICB2YXIgbG9va3VwVGFibGUgPSB0aGlzLmdldExvb2t1cFRhYmxlcyhzY3JpcHQsIGxhbmd1YWdlLCBmZWF0dXJlLCA0LCB0cnVlKVswXTtcbiAgICB2YXIgc3VidGFibGUgPSBsb29rdXBUYWJsZS5zdWJ0YWJsZXNbMF07XG4gICAgaWYgKCFzdWJ0YWJsZSkge1xuICAgICAgICBzdWJ0YWJsZSA9IHsgICAgICAgICAgICAgICAgLy8gbG9va3VwIHR5cGUgNCBzdWJ0YWJsZSwgZm9ybWF0IDEsIGNvdmVyYWdlIGZvcm1hdCAxXG4gICAgICAgICAgICBzdWJzdEZvcm1hdDogMSxcbiAgICAgICAgICAgIGNvdmVyYWdlOiB7IGZvcm1hdDogMSwgZ2x5cGhzOiBbXSB9LFxuICAgICAgICAgICAgbGlnYXR1cmVTZXRzOiBbXVxuICAgICAgICB9O1xuICAgICAgICBsb29rdXBUYWJsZS5zdWJ0YWJsZXNbMF0gPSBzdWJ0YWJsZTtcbiAgICB9XG4gICAgY2hlY2suYXNzZXJ0KHN1YnRhYmxlLmNvdmVyYWdlLmZvcm1hdCA9PT0gMSwgJ0xpZ2F0dXJlOiB1bmFibGUgdG8gbW9kaWZ5IGNvdmVyYWdlIHRhYmxlIGZvcm1hdCAnICsgc3VidGFibGUuY292ZXJhZ2UuZm9ybWF0KTtcbiAgICB2YXIgY292ZXJhZ2VHbHlwaCA9IGxpZ2F0dXJlLnN1YlswXTtcbiAgICB2YXIgbGlnQ29tcG9uZW50cyA9IGxpZ2F0dXJlLnN1Yi5zbGljZSgxKTtcbiAgICB2YXIgbGlnYXR1cmVUYWJsZSA9IHtcbiAgICAgICAgbGlnR2x5cGg6IGxpZ2F0dXJlLmJ5LFxuICAgICAgICBjb21wb25lbnRzOiBsaWdDb21wb25lbnRzXG4gICAgfTtcbiAgICB2YXIgcG9zID0gdGhpcy5iaW5TZWFyY2goc3VidGFibGUuY292ZXJhZ2UuZ2x5cGhzLCBjb3ZlcmFnZUdseXBoKTtcbiAgICBpZiAocG9zID49IDApIHtcbiAgICAgICAgLy8gbGlnYXR1cmVTZXQgYWxyZWFkeSBleGlzdHNcbiAgICAgICAgdmFyIGxpZ2F0dXJlU2V0ID0gc3VidGFibGUubGlnYXR1cmVTZXRzW3Bvc107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlnYXR1cmVTZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIElmIGxpZ2F0dXJlIGFscmVhZHkgZXhpc3RzLCByZXR1cm4uXG4gICAgICAgICAgICBpZiAoYXJyYXlzRXF1YWwobGlnYXR1cmVTZXRbaV0uY29tcG9uZW50cywgbGlnQ29tcG9uZW50cykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbGlnYXR1cmUgZG9lcyBub3QgZXhpc3Q6IGFkZCBpdC5cbiAgICAgICAgbGlnYXR1cmVTZXQucHVzaChsaWdhdHVyZVRhYmxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgbGlnYXR1cmVTZXQgYW5kIGFkZCBjb3ZlcmFnZSBmb3IgdGhlIGZpcnN0IGdseXBoLlxuICAgICAgICBwb3MgPSAtMSAtIHBvcztcbiAgICAgICAgc3VidGFibGUuY292ZXJhZ2UuZ2x5cGhzLnNwbGljZShwb3MsIDAsIGNvdmVyYWdlR2x5cGgpO1xuICAgICAgICBzdWJ0YWJsZS5saWdhdHVyZVNldHMuc3BsaWNlKHBvcywgMCwgW2xpZ2F0dXJlVGFibGVdKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIExpc3QgYWxsIGZlYXR1cmUgZGF0YSBmb3IgYSBnaXZlbiBzY3JpcHQgYW5kIGxhbmd1YWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUgLSA0LWxldHRlciBmZWF0dXJlIG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2NyaXB0PSdERkxUJ11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2U9J2RmbHQnXVxuICogQHJldHVybiB7QXJyYXl9IHN1YnN0aXR1dGlvbnMgLSBUaGUgbGlzdCBvZiBzdWJzdGl0dXRpb25zLlxuICovXG5TdWJzdGl0dXRpb24ucHJvdG90eXBlLmdldEZlYXR1cmUgPSBmdW5jdGlvbihmZWF0dXJlLCBzY3JpcHQsIGxhbmd1YWdlKSB7XG4gICAgaWYgKC9zc1xcZFxcZC8udGVzdChmZWF0dXJlKSkge1xuICAgICAgICAvLyBzczAxIC0gc3MyMFxuICAgICAgICByZXR1cm4gdGhpcy5nZXRTaW5nbGUoZmVhdHVyZSwgc2NyaXB0LCBsYW5ndWFnZSk7XG4gICAgfVxuICAgIHN3aXRjaCAoZmVhdHVyZSkge1xuICAgICAgICBjYXNlICdhYWx0JzpcbiAgICAgICAgY2FzZSAnc2FsdCc6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTaW5nbGUoZmVhdHVyZSwgc2NyaXB0LCBsYW5ndWFnZSlcbiAgICAgICAgICAgICAgICAgICAgLmNvbmNhdCh0aGlzLmdldEFsdGVybmF0ZXMoZmVhdHVyZSwgc2NyaXB0LCBsYW5ndWFnZSkpO1xuICAgICAgICBjYXNlICdkbGlnJzpcbiAgICAgICAgY2FzZSAnbGlnYSc6XG4gICAgICAgIGNhc2UgJ3JsaWcnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGlnYXR1cmVzKGZlYXR1cmUsIHNjcmlwdCwgbGFuZ3VhZ2UpO1xuICAgICAgICBjYXNlICdjY21wJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE11bHRpcGxlKGZlYXR1cmUsIHNjcmlwdCwgbGFuZ3VhZ2UpXG4gICAgICAgICAgICAgICAgLmNvbmNhdCh0aGlzLmdldExpZ2F0dXJlcyhmZWF0dXJlLCBzY3JpcHQsIGxhbmd1YWdlKSk7XG4gICAgICAgIGNhc2UgJ3N0Y2gnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TXVsdGlwbGUoZmVhdHVyZSwgc2NyaXB0LCBsYW5ndWFnZSk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIEFkZCBhIHN1YnN0aXR1dGlvbiB0byBhIGZlYXR1cmUgZm9yIGEgZ2l2ZW4gc2NyaXB0IGFuZCBsYW5ndWFnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlIC0gNC1sZXR0ZXIgZmVhdHVyZSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdH0gc3ViIC0gdGhlIHN1YnN0aXR1dGlvbiB0byBhZGQgKGFuIG9iamVjdCBsaWtlIHsgc3ViOiBpZCBvciBbaWRzXSwgYnk6IGlkIG9yIFtpZHNdIH0pXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NjcmlwdD0nREZMVCddXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlPSdkZmx0J11cbiAqL1xuU3Vic3RpdHV0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihmZWF0dXJlLCBzdWIsIHNjcmlwdCwgbGFuZ3VhZ2UpIHtcbiAgICBpZiAoL3NzXFxkXFxkLy50ZXN0KGZlYXR1cmUpKSB7XG4gICAgICAgIC8vIHNzMDEgLSBzczIwXG4gICAgICAgIHJldHVybiB0aGlzLmFkZFNpbmdsZShmZWF0dXJlLCBzdWIsIHNjcmlwdCwgbGFuZ3VhZ2UpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGZlYXR1cmUpIHtcbiAgICAgICAgY2FzZSAnYWFsdCc6XG4gICAgICAgIGNhc2UgJ3NhbHQnOlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdWIuYnkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkU2luZ2xlKGZlYXR1cmUsIHN1Yiwgc2NyaXB0LCBsYW5ndWFnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGRBbHRlcm5hdGUoZmVhdHVyZSwgc3ViLCBzY3JpcHQsIGxhbmd1YWdlKTtcbiAgICAgICAgY2FzZSAnZGxpZyc6XG4gICAgICAgIGNhc2UgJ2xpZ2EnOlxuICAgICAgICBjYXNlICdybGlnJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZExpZ2F0dXJlKGZlYXR1cmUsIHN1Yiwgc2NyaXB0LCBsYW5ndWFnZSk7XG4gICAgICAgIGNhc2UgJ2NjbXAnOlxuICAgICAgICAgICAgaWYgKHN1Yi5ieSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkTXVsdGlwbGUoZmVhdHVyZSwgc3ViLCBzY3JpcHQsIGxhbmd1YWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZExpZ2F0dXJlKGZlYXR1cmUsIHN1Yiwgc2NyaXB0LCBsYW5ndWFnZSk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5mdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xufVxuXG5mdW5jdGlvbiBub2RlQnVmZmVyVG9BcnJheUJ1ZmZlcihidWZmZXIpIHtcbiAgICB2YXIgYWIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyLmxlbmd0aCk7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmlld1tpXSA9IGJ1ZmZlcltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWI7XG59XG5cbmZ1bmN0aW9uIGFycmF5QnVmZmVyVG9Ob2RlQnVmZmVyKGFiKSB7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIoYWIuYnl0ZUxlbmd0aCk7XG4gICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgYnVmZmVyW2ldID0gdmlld1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyO1xufVxuXG5mdW5jdGlvbiBjaGVja0FyZ3VtZW50KGV4cHJlc3Npb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoIWV4cHJlc3Npb24pIHtcbiAgICAgICAgdGhyb3cgbWVzc2FnZTtcbiAgICB9XG59XG5cbi8vIFRoZSBgZ2x5ZmAgdGFibGUgZGVzY3JpYmVzIHRoZSBnbHlwaHMgaW4gVHJ1ZVR5cGUgb3V0bGluZSBmb3JtYXQuXG5cbi8vIFBhcnNlIHRoZSBjb29yZGluYXRlIGRhdGEgZm9yIGEgZ2x5cGguXG5mdW5jdGlvbiBwYXJzZUdseXBoQ29vcmRpbmF0ZShwLCBmbGFnLCBwcmV2aW91c1ZhbHVlLCBzaG9ydFZlY3RvckJpdE1hc2ssIHNhbWVCaXRNYXNrKSB7XG4gICAgdmFyIHY7XG4gICAgaWYgKChmbGFnICYgc2hvcnRWZWN0b3JCaXRNYXNrKSA+IDApIHtcbiAgICAgICAgLy8gVGhlIGNvb3JkaW5hdGUgaXMgMSBieXRlIGxvbmcuXG4gICAgICAgIHYgPSBwLnBhcnNlQnl0ZSgpO1xuICAgICAgICAvLyBUaGUgYHNhbWVgIGJpdCBpcyByZS11c2VkIGZvciBzaG9ydCB2YWx1ZXMgdG8gc2lnbmlmeSB0aGUgc2lnbiBvZiB0aGUgdmFsdWUuXG4gICAgICAgIGlmICgoZmxhZyAmIHNhbWVCaXRNYXNrKSA9PT0gMCkge1xuICAgICAgICAgICAgdiA9IC12O1xuICAgICAgICB9XG5cbiAgICAgICAgdiA9IHByZXZpb3VzVmFsdWUgKyB2O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICBUaGUgY29vcmRpbmF0ZSBpcyAyIGJ5dGVzIGxvbmcuXG4gICAgICAgIC8vIElmIHRoZSBgc2FtZWAgYml0IGlzIHNldCwgdGhlIGNvb3JkaW5hdGUgaXMgdGhlIHNhbWUgYXMgdGhlIHByZXZpb3VzIGNvb3JkaW5hdGUuXG4gICAgICAgIGlmICgoZmxhZyAmIHNhbWVCaXRNYXNrKSA+IDApIHtcbiAgICAgICAgICAgIHYgPSBwcmV2aW91c1ZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGNvb3JkaW5hdGUgYXMgYSBzaWduZWQgMTYtYml0IGRlbHRhIHZhbHVlLlxuICAgICAgICAgICAgdiA9IHByZXZpb3VzVmFsdWUgKyBwLnBhcnNlU2hvcnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2O1xufVxuXG4vLyBQYXJzZSBhIFRydWVUeXBlIGdseXBoLlxuZnVuY3Rpb24gcGFyc2VHbHlwaChnbHlwaCwgZGF0YSwgc3RhcnQpIHtcbiAgICB2YXIgcCA9IG5ldyBwYXJzZS5QYXJzZXIoZGF0YSwgc3RhcnQpO1xuICAgIGdseXBoLm51bWJlck9mQ29udG91cnMgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBnbHlwaC5feE1pbiA9IHAucGFyc2VTaG9ydCgpO1xuICAgIGdseXBoLl95TWluID0gcC5wYXJzZVNob3J0KCk7XG4gICAgZ2x5cGguX3hNYXggPSBwLnBhcnNlU2hvcnQoKTtcbiAgICBnbHlwaC5feU1heCA9IHAucGFyc2VTaG9ydCgpO1xuICAgIHZhciBmbGFncztcbiAgICB2YXIgZmxhZztcblxuICAgIGlmIChnbHlwaC5udW1iZXJPZkNvbnRvdXJzID4gMCkge1xuICAgICAgICAvLyBUaGlzIGdseXBoIGlzIG5vdCBhIGNvbXBvc2l0ZS5cbiAgICAgICAgdmFyIGVuZFBvaW50SW5kaWNlcyA9IGdseXBoLmVuZFBvaW50SW5kaWNlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdseXBoLm51bWJlck9mQ29udG91cnM7IGkgKz0gMSkge1xuICAgICAgICAgICAgZW5kUG9pbnRJbmRpY2VzLnB1c2gocC5wYXJzZVVTaG9ydCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdseXBoLmluc3RydWN0aW9uTGVuZ3RoID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICBnbHlwaC5pbnN0cnVjdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgZ2x5cGguaW5zdHJ1Y3Rpb25MZW5ndGg7IGkkMSArPSAxKSB7XG4gICAgICAgICAgICBnbHlwaC5pbnN0cnVjdGlvbnMucHVzaChwLnBhcnNlQnl0ZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBudW1iZXJPZkNvb3JkaW5hdGVzID0gZW5kUG9pbnRJbmRpY2VzW2VuZFBvaW50SW5kaWNlcy5sZW5ndGggLSAxXSArIDE7XG4gICAgICAgIGZsYWdzID0gW107XG4gICAgICAgIGZvciAodmFyIGkkMiA9IDA7IGkkMiA8IG51bWJlck9mQ29vcmRpbmF0ZXM7IGkkMiArPSAxKSB7XG4gICAgICAgICAgICBmbGFnID0gcC5wYXJzZUJ5dGUoKTtcbiAgICAgICAgICAgIGZsYWdzLnB1c2goZmxhZyk7XG4gICAgICAgICAgICAvLyBJZiBiaXQgMyBpcyBzZXQsIHdlIHJlcGVhdCB0aGlzIGZsYWcgbiB0aW1lcywgd2hlcmUgbiBpcyB0aGUgbmV4dCBieXRlLlxuICAgICAgICAgICAgaWYgKChmbGFnICYgOCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcGVhdENvdW50ID0gcC5wYXJzZUJ5dGUoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlcGVhdENvdW50OyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MucHVzaChmbGFnKTtcbiAgICAgICAgICAgICAgICAgICAgaSQyICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2hlY2suYXJndW1lbnQoZmxhZ3MubGVuZ3RoID09PSBudW1iZXJPZkNvb3JkaW5hdGVzLCAnQmFkIGZsYWdzLicpO1xuXG4gICAgICAgIGlmIChlbmRQb2ludEluZGljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHBvaW50cyA9IFtdO1xuICAgICAgICAgICAgdmFyIHBvaW50O1xuICAgICAgICAgICAgLy8gWC9ZIGNvb3JkaW5hdGVzIGFyZSByZWxhdGl2ZSB0byB0aGUgcHJldmlvdXMgcG9pbnQsIGV4Y2VwdCBmb3IgdGhlIGZpcnN0IHBvaW50IHdoaWNoIGlzIHJlbGF0aXZlIHRvIDAsMC5cbiAgICAgICAgICAgIGlmIChudW1iZXJPZkNvb3JkaW5hdGVzID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMyA9IDA7IGkkMyA8IG51bWJlck9mQ29vcmRpbmF0ZXM7IGkkMyArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGZsYWcgPSBmbGFnc1tpJDNdO1xuICAgICAgICAgICAgICAgICAgICBwb2ludCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBwb2ludC5vbkN1cnZlID0gISEoZmxhZyAmIDEpO1xuICAgICAgICAgICAgICAgICAgICBwb2ludC5sYXN0UG9pbnRPZkNvbnRvdXIgPSBlbmRQb2ludEluZGljZXMuaW5kZXhPZihpJDMpID49IDA7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcHggPSAwO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkNCA9IDA7IGkkNCA8IG51bWJlck9mQ29vcmRpbmF0ZXM7IGkkNCArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGZsYWcgPSBmbGFnc1tpJDRdO1xuICAgICAgICAgICAgICAgICAgICBwb2ludCA9IHBvaW50c1tpJDRdO1xuICAgICAgICAgICAgICAgICAgICBwb2ludC54ID0gcGFyc2VHbHlwaENvb3JkaW5hdGUocCwgZmxhZywgcHgsIDIsIDE2KTtcbiAgICAgICAgICAgICAgICAgICAgcHggPSBwb2ludC54O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBweSA9IDA7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSQ1ID0gMDsgaSQ1IDwgbnVtYmVyT2ZDb29yZGluYXRlczsgaSQ1ICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZmxhZyA9IGZsYWdzW2kkNV07XG4gICAgICAgICAgICAgICAgICAgIHBvaW50ID0gcG9pbnRzW2kkNV07XG4gICAgICAgICAgICAgICAgICAgIHBvaW50LnkgPSBwYXJzZUdseXBoQ29vcmRpbmF0ZShwLCBmbGFnLCBweSwgNCwgMzIpO1xuICAgICAgICAgICAgICAgICAgICBweSA9IHBvaW50Lnk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnbHlwaC5wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbHlwaC5wb2ludHMgPSBbXTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZ2x5cGgubnVtYmVyT2ZDb250b3VycyA9PT0gMCkge1xuICAgICAgICBnbHlwaC5wb2ludHMgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnbHlwaC5pc0NvbXBvc2l0ZSA9IHRydWU7XG4gICAgICAgIGdseXBoLnBvaW50cyA9IFtdO1xuICAgICAgICBnbHlwaC5jb21wb25lbnRzID0gW107XG4gICAgICAgIHZhciBtb3JlQ29tcG9uZW50cyA9IHRydWU7XG4gICAgICAgIHdoaWxlIChtb3JlQ29tcG9uZW50cykge1xuICAgICAgICAgICAgZmxhZ3MgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0ge1xuICAgICAgICAgICAgICAgIGdseXBoSW5kZXg6IHAucGFyc2VVU2hvcnQoKSxcbiAgICAgICAgICAgICAgICB4U2NhbGU6IDEsXG4gICAgICAgICAgICAgICAgc2NhbGUwMTogMCxcbiAgICAgICAgICAgICAgICBzY2FsZTEwOiAwLFxuICAgICAgICAgICAgICAgIHlTY2FsZTogMSxcbiAgICAgICAgICAgICAgICBkeDogMCxcbiAgICAgICAgICAgICAgICBkeTogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICgoZmxhZ3MgJiAxKSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgYXJndW1lbnRzIGFyZSB3b3Jkc1xuICAgICAgICAgICAgICAgIGlmICgoZmxhZ3MgJiAyKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWVzIGFyZSBvZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmR4ID0gcC5wYXJzZVNob3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5keSA9IHAucGFyc2VTaG9ydCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZhbHVlcyBhcmUgbWF0Y2hlZCBwb2ludHNcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50Lm1hdGNoZWRQb2ludHMgPSBbcC5wYXJzZVVTaG9ydCgpLCBwLnBhcnNlVVNob3J0KCldO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgYXJndW1lbnRzIGFyZSBieXRlc1xuICAgICAgICAgICAgICAgIGlmICgoZmxhZ3MgJiAyKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWVzIGFyZSBvZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmR4ID0gcC5wYXJzZUNoYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmR5ID0gcC5wYXJzZUNoYXIoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB2YWx1ZXMgYXJlIG1hdGNoZWQgcG9pbnRzXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5tYXRjaGVkUG9pbnRzID0gW3AucGFyc2VCeXRlKCksIHAucGFyc2VCeXRlKCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKChmbGFncyAmIDgpID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBzY2FsZVxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC54U2NhbGUgPSBjb21wb25lbnQueVNjYWxlID0gcC5wYXJzZUYyRG90MTQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKGZsYWdzICYgNjQpID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYW4gWCAvIFkgc2NhbGVcbiAgICAgICAgICAgICAgICBjb21wb25lbnQueFNjYWxlID0gcC5wYXJzZUYyRG90MTQoKTtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQueVNjYWxlID0gcC5wYXJzZUYyRG90MTQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKGZsYWdzICYgMTI4KSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGEgMngyIHRyYW5zZm9ybWF0aW9uXG4gICAgICAgICAgICAgICAgY29tcG9uZW50LnhTY2FsZSA9IHAucGFyc2VGMkRvdDE0KCk7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LnNjYWxlMDEgPSBwLnBhcnNlRjJEb3QxNCgpO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC5zY2FsZTEwID0gcC5wYXJzZUYyRG90MTQoKTtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQueVNjYWxlID0gcC5wYXJzZUYyRG90MTQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2x5cGguY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgICAgICBtb3JlQ29tcG9uZW50cyA9ICEhKGZsYWdzICYgMzIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmbGFncyAmIDB4MTAwKSB7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIGluc3RydWN0aW9uc1xuICAgICAgICAgICAgZ2x5cGguaW5zdHJ1Y3Rpb25MZW5ndGggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgICAgICBnbHlwaC5pbnN0cnVjdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkkNiA9IDA7IGkkNiA8IGdseXBoLmluc3RydWN0aW9uTGVuZ3RoOyBpJDYgKz0gMSkge1xuICAgICAgICAgICAgICAgIGdseXBoLmluc3RydWN0aW9ucy5wdXNoKHAucGFyc2VCeXRlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBUcmFuc2Zvcm0gYW4gYXJyYXkgb2YgcG9pbnRzIGFuZCByZXR1cm4gYSBuZXcgYXJyYXkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Qb2ludHMocG9pbnRzLCB0cmFuc2Zvcm0pIHtcbiAgICB2YXIgbmV3UG9pbnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHB0ID0gcG9pbnRzW2ldO1xuICAgICAgICB2YXIgbmV3UHQgPSB7XG4gICAgICAgICAgICB4OiB0cmFuc2Zvcm0ueFNjYWxlICogcHQueCArIHRyYW5zZm9ybS5zY2FsZTAxICogcHQueSArIHRyYW5zZm9ybS5keCxcbiAgICAgICAgICAgIHk6IHRyYW5zZm9ybS5zY2FsZTEwICogcHQueCArIHRyYW5zZm9ybS55U2NhbGUgKiBwdC55ICsgdHJhbnNmb3JtLmR5LFxuICAgICAgICAgICAgb25DdXJ2ZTogcHQub25DdXJ2ZSxcbiAgICAgICAgICAgIGxhc3RQb2ludE9mQ29udG91cjogcHQubGFzdFBvaW50T2ZDb250b3VyXG4gICAgICAgIH07XG4gICAgICAgIG5ld1BvaW50cy5wdXNoKG5ld1B0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3UG9pbnRzO1xufVxuXG5mdW5jdGlvbiBnZXRDb250b3Vycyhwb2ludHMpIHtcbiAgICB2YXIgY29udG91cnMgPSBbXTtcbiAgICB2YXIgY3VycmVudENvbnRvdXIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcHQgPSBwb2ludHNbaV07XG4gICAgICAgIGN1cnJlbnRDb250b3VyLnB1c2gocHQpO1xuICAgICAgICBpZiAocHQubGFzdFBvaW50T2ZDb250b3VyKSB7XG4gICAgICAgICAgICBjb250b3Vycy5wdXNoKGN1cnJlbnRDb250b3VyKTtcbiAgICAgICAgICAgIGN1cnJlbnRDb250b3VyID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVjay5hcmd1bWVudChjdXJyZW50Q29udG91ci5sZW5ndGggPT09IDAsICdUaGVyZSBhcmUgc3RpbGwgcG9pbnRzIGxlZnQgaW4gdGhlIGN1cnJlbnQgY29udG91ci4nKTtcbiAgICByZXR1cm4gY29udG91cnM7XG59XG5cbi8vIENvbnZlcnQgdGhlIFRydWVUeXBlIGdseXBoIG91dGxpbmUgdG8gYSBQYXRoLlxuZnVuY3Rpb24gZ2V0UGF0aChwb2ludHMpIHtcbiAgICB2YXIgcCA9IG5ldyBQYXRoKCk7XG4gICAgaWYgKCFwb2ludHMpIHtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRvdXJzID0gZ2V0Q29udG91cnMocG9pbnRzKTtcblxuICAgIGZvciAodmFyIGNvbnRvdXJJbmRleCA9IDA7IGNvbnRvdXJJbmRleCA8IGNvbnRvdXJzLmxlbmd0aDsgKytjb250b3VySW5kZXgpIHtcbiAgICAgICAgdmFyIGNvbnRvdXIgPSBjb250b3Vyc1tjb250b3VySW5kZXhdO1xuXG4gICAgICAgIHZhciBwcmV2ID0gbnVsbDtcbiAgICAgICAgdmFyIGN1cnIgPSBjb250b3VyW2NvbnRvdXIubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciBuZXh0ID0gY29udG91clswXTtcblxuICAgICAgICBpZiAoY3Vyci5vbkN1cnZlKSB7XG4gICAgICAgICAgICBwLm1vdmVUbyhjdXJyLngsIGN1cnIueSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobmV4dC5vbkN1cnZlKSB7XG4gICAgICAgICAgICAgICAgcC5tb3ZlVG8obmV4dC54LCBuZXh0LnkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBib3RoIGZpcnN0IGFuZCBsYXN0IHBvaW50cyBhcmUgb2ZmLWN1cnZlLCBzdGFydCBhdCB0aGVpciBtaWRkbGUuXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0ge3g6IChjdXJyLnggKyBuZXh0LngpICogMC41LCB5OiAoY3Vyci55ICsgbmV4dC55KSAqIDAuNX07XG4gICAgICAgICAgICAgICAgcC5tb3ZlVG8oc3RhcnQueCwgc3RhcnQueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRvdXIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHByZXYgPSBjdXJyO1xuICAgICAgICAgICAgY3VyciA9IG5leHQ7XG4gICAgICAgICAgICBuZXh0ID0gY29udG91clsoaSArIDEpICUgY29udG91ci5sZW5ndGhdO1xuXG4gICAgICAgICAgICBpZiAoY3Vyci5vbkN1cnZlKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHN0cmFpZ2h0IGxpbmUuXG4gICAgICAgICAgICAgICAgcC5saW5lVG8oY3Vyci54LCBjdXJyLnkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldjIgPSBwcmV2O1xuICAgICAgICAgICAgICAgIHZhciBuZXh0MiA9IG5leHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXByZXYub25DdXJ2ZSkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2MiA9IHsgeDogKGN1cnIueCArIHByZXYueCkgKiAwLjUsIHk6IChjdXJyLnkgKyBwcmV2LnkpICogMC41IH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0Lm9uQ3VydmUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDIgPSB7IHg6IChjdXJyLnggKyBuZXh0LngpICogMC41LCB5OiAoY3Vyci55ICsgbmV4dC55KSAqIDAuNSB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHAucXVhZHJhdGljQ3VydmVUbyhjdXJyLngsIGN1cnIueSwgbmV4dDIueCwgbmV4dDIueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwLmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gYnVpbGRQYXRoKGdseXBocywgZ2x5cGgpIHtcbiAgICBpZiAoZ2x5cGguaXNDb21wb3NpdGUpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBnbHlwaC5jb21wb25lbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gZ2x5cGguY29tcG9uZW50c1tqXTtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnRHbHlwaCA9IGdseXBocy5nZXQoY29tcG9uZW50LmdseXBoSW5kZXgpO1xuICAgICAgICAgICAgLy8gRm9yY2UgdGhlIHR0ZkdseXBoTG9hZGVyIHRvIHBhcnNlIHRoZSBnbHlwaC5cbiAgICAgICAgICAgIGNvbXBvbmVudEdseXBoLmdldFBhdGgoKTtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnRHbHlwaC5wb2ludHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtZWRQb2ludHMgPSAodm9pZCAwKTtcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50Lm1hdGNoZWRQb2ludHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgcG9zaXRpb25lZCBieSBvZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtZWRQb2ludHMgPSB0cmFuc2Zvcm1Qb2ludHMoY29tcG9uZW50R2x5cGgucG9pbnRzLCBjb21wb25lbnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBwb3NpdGlvbmVkIGJ5IG1hdGNoZWQgcG9pbnRzXG4gICAgICAgICAgICAgICAgICAgIGlmICgoY29tcG9uZW50Lm1hdGNoZWRQb2ludHNbMF0gPiBnbHlwaC5wb2ludHMubGVuZ3RoIC0gMSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChjb21wb25lbnQubWF0Y2hlZFBvaW50c1sxXSA+IGNvbXBvbmVudEdseXBoLnBvaW50cy5sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ01hdGNoZWQgcG9pbnRzIG91dCBvZiByYW5nZSBpbiAnICsgZ2x5cGgubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0UHQgPSBnbHlwaC5wb2ludHNbY29tcG9uZW50Lm1hdGNoZWRQb2ludHNbMF1dO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Vjb25kUHQgPSBjb21wb25lbnRHbHlwaC5wb2ludHNbY29tcG9uZW50Lm1hdGNoZWRQb2ludHNbMV1dO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeFNjYWxlOiBjb21wb25lbnQueFNjYWxlLCBzY2FsZTAxOiBjb21wb25lbnQuc2NhbGUwMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlMTA6IGNvbXBvbmVudC5zY2FsZTEwLCB5U2NhbGU6IGNvbXBvbmVudC55U2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkeDogMCwgZHk6IDBcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kUHQgPSB0cmFuc2Zvcm1Qb2ludHMoW3NlY29uZFB0XSwgdHJhbnNmb3JtKVswXTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtLmR4ID0gZmlyc3RQdC54IC0gc2Vjb25kUHQueDtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtLmR5ID0gZmlyc3RQdC55IC0gc2Vjb25kUHQueTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtZWRQb2ludHMgPSB0cmFuc2Zvcm1Qb2ludHMoY29tcG9uZW50R2x5cGgucG9pbnRzLCB0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnbHlwaC5wb2ludHMgPSBnbHlwaC5wb2ludHMuY29uY2F0KHRyYW5zZm9ybWVkUG9pbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBnZXRQYXRoKGdseXBoLnBvaW50cyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlR2x5ZlRhYmxlQWxsKGRhdGEsIHN0YXJ0LCBsb2NhLCBmb250KSB7XG4gICAgdmFyIGdseXBocyA9IG5ldyBnbHlwaHNldC5HbHlwaFNldChmb250KTtcblxuICAgIC8vIFRoZSBsYXN0IGVsZW1lbnQgb2YgdGhlIGxvY2EgdGFibGUgaXMgaW52YWxpZC5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxvY2EubGVuZ3RoIC0gMTsgaSArPSAxKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBsb2NhW2ldO1xuICAgICAgICB2YXIgbmV4dE9mZnNldCA9IGxvY2FbaSArIDFdO1xuICAgICAgICBpZiAob2Zmc2V0ICE9PSBuZXh0T2Zmc2V0KSB7XG4gICAgICAgICAgICBnbHlwaHMucHVzaChpLCBnbHlwaHNldC50dGZHbHlwaExvYWRlcihmb250LCBpLCBwYXJzZUdseXBoLCBkYXRhLCBzdGFydCArIG9mZnNldCwgYnVpbGRQYXRoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbHlwaHMucHVzaChpLCBnbHlwaHNldC5nbHlwaExvYWRlcihmb250LCBpKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ2x5cGhzO1xufVxuXG5mdW5jdGlvbiBwYXJzZUdseWZUYWJsZU9uTG93TWVtb3J5KGRhdGEsIHN0YXJ0LCBsb2NhLCBmb250KSB7XG4gICAgdmFyIGdseXBocyA9IG5ldyBnbHlwaHNldC5HbHlwaFNldChmb250KTtcblxuICAgIGZvbnQuX3B1c2ggPSBmdW5jdGlvbihpKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBsb2NhW2ldO1xuICAgICAgICB2YXIgbmV4dE9mZnNldCA9IGxvY2FbaSArIDFdO1xuICAgICAgICBpZiAob2Zmc2V0ICE9PSBuZXh0T2Zmc2V0KSB7XG4gICAgICAgICAgICBnbHlwaHMucHVzaChpLCBnbHlwaHNldC50dGZHbHlwaExvYWRlcihmb250LCBpLCBwYXJzZUdseXBoLCBkYXRhLCBzdGFydCArIG9mZnNldCwgYnVpbGRQYXRoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbHlwaHMucHVzaChpLCBnbHlwaHNldC5nbHlwaExvYWRlcihmb250LCBpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGdseXBocztcbn1cblxuLy8gUGFyc2UgYWxsIHRoZSBnbHlwaHMgYWNjb3JkaW5nIHRvIHRoZSBvZmZzZXRzIGZyb20gdGhlIGBsb2NhYCB0YWJsZS5cbmZ1bmN0aW9uIHBhcnNlR2x5ZlRhYmxlKGRhdGEsIHN0YXJ0LCBsb2NhLCBmb250LCBvcHQpIHtcbiAgICBpZiAob3B0Lmxvd01lbW9yeSlcbiAgICAgICAgeyByZXR1cm4gcGFyc2VHbHlmVGFibGVPbkxvd01lbW9yeShkYXRhLCBzdGFydCwgbG9jYSwgZm9udCk7IH1cbiAgICBlbHNlXG4gICAgICAgIHsgcmV0dXJuIHBhcnNlR2x5ZlRhYmxlQWxsKGRhdGEsIHN0YXJ0LCBsb2NhLCBmb250KTsgfVxufVxuXG52YXIgZ2x5ZiA9IHsgZ2V0UGF0aDogZ2V0UGF0aCwgcGFyc2U6IHBhcnNlR2x5ZlRhYmxlfTtcblxuLyogQSBUcnVlVHlwZSBmb250IGhpbnRpbmcgaW50ZXJwcmV0ZXIuXG4qXG4qIChjKSAyMDE3IEF4ZWwgS2l0dGVuYmVyZ2VyXG4qXG4qIFRoaXMgaW50ZXJwcmV0ZXIgaGFzIGJlZW4gaW1wbGVtZW50ZWQgYWNjb3JkaW5nIHRvIHRoaXMgZG9jdW1lbnRhdGlvbjpcbiogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2ZvbnRzL1RydWVUeXBlLVJlZmVyZW5jZS1NYW51YWwvUk0wNS9DaGFwNS5odG1sXG4qXG4qIEFjY29yZGluZyB0byB0aGUgZG9jdW1lbnRhdGlvbiBGMjRET1Q2IHZhbHVlcyBhcmUgdXNlZCBmb3IgcGl4ZWxzLlxuKiBUaGF0IG1lYW5zIGNhbGN1bGF0aW9uIGlzIDEvNjQgcGl4ZWwgYWNjdXJhdGUgYW5kIHVzZXMgaW50ZWdlciBvcGVyYXRpb25zLlxuKiBIb3dldmVyLCBKYXZhc2NyaXB0IGhhcyBmbG9hdGluZyBwb2ludCBvcGVyYXRpb25zIGJ5IGRlZmF1bHQgYW5kIG9ubHlcbiogdGhvc2UgYXJlIGF2YWlsYWJsZS4gT25lIGNvdWxkIG1ha2UgYSBjYXNlIHRvIHNpbXVsYXRlIHRoZSAxLzY0IGFjY3VyYWN5XG4qIGV4YWN0bHkgYnkgdHJ1bmNhdGluZyBhZnRlciBldmVyeSBkaXZpc2lvbiBvcGVyYXRpb25cbiogKGZvciBleGFtcGxlIHdpdGggPDwgMCkgdG8gZ2V0IHBpeGVsIGV4YWN0bHkgcmVzdWx0cyBhcyBvdGhlciBUcnVlVHlwZVxuKiBpbXBsZW1lbnRhdGlvbnMuIEl0IG1heSBtYWtlIHNlbnNlIHNpbmNlIHNvbWUgZm9udHMgYXJlIHBpeGVsIG9wdGltaXplZFxuKiBieSBoYW5kIHVzaW5nIERFTFRBUCBpbnN0cnVjdGlvbnMuIFRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIGRvZXNuJ3RcbiogYW5kIHJhdGhlciB1c2VzIGZ1bGwgZmxvYXRpbmcgcG9pbnQgcHJlY2lzaW9uLlxuKlxuKiB4U2NhbGUsIHlTY2FsZSBhbmQgcm90YXRpb24gaXMgY3VycmVudGx5IGlnbm9yZWQuXG4qXG4qIEEgZmV3IG5vbi10cml2aWFsIGluc3RydWN0aW9ucyBhcmUgbWlzc2luZyBhcyBJIGRpZG4ndCBlbmNvdW50ZXIgeWV0XG4qIGEgZm9udCB0aGF0IHVzZWQgdGhlbSB0byB0ZXN0IGEgcG9zc2libGUgaW1wbGVtZW50YXRpb24uXG4qXG4qIFNvbWUgZm9udHMgc2VlbSB0byB1c2UgdW5kb2N1bWVudGVkIGZlYXR1cmVzIHJlZ2FyZGluZyB0aGUgdHdpbGlnaHQgem9uZS5cbiogT25seSBzb21lIG9mIHRoZW0gYXJlIGltcGxlbWVudGVkIGFzIHRoZXkgd2VyZSBlbmNvdW50ZXJlZC5cbipcbiogVGhlIGV4cG9ydHMuREVCVUcgc3RhdGVtZW50cyBhcmUgcmVtb3ZlZCBvbiB0aGUgbWluaWZpZWQgZGlzdHJpYnV0aW9uIGZpbGUuXG4qL1xuXG52YXIgaW5zdHJ1Y3Rpb25UYWJsZTtcbnZhciBleGVjO1xudmFyIGV4ZWNHbHlwaDtcbnZhciBleGVjQ29tcG9uZW50O1xuXG4vKlxuKiBDcmVhdGVzIGEgaGludGluZyBvYmplY3QuXG4qXG4qIFRoZXJlIG91Z2h0IHRvIGJlIGV4YWN0bHkgb25lXG4qIGZvciBlYWNoIHRydWV0eXBlIGZvbnQgdGhhdCBpcyB1c2VkIGZvciBoaW50aW5nLlxuKi9cbmZ1bmN0aW9uIEhpbnRpbmcoZm9udCkge1xuICAgIC8vIHRoZSBmb250IHRoaXMgaGludGluZyBvYmplY3QgaXMgZm9yXG4gICAgdGhpcy5mb250ID0gZm9udDtcblxuICAgIHRoaXMuZ2V0Q29tbWFuZHMgPSBmdW5jdGlvbiAoaFBvaW50cykge1xuICAgICAgICByZXR1cm4gZ2x5Zi5nZXRQYXRoKGhQb2ludHMpLmNvbW1hbmRzO1xuICAgIH07XG5cbiAgICAvLyBjYWNoZWQgc3RhdGVzXG4gICAgdGhpcy5fZnBnbVN0YXRlICA9XG4gICAgdGhpcy5fcHJlcFN0YXRlICA9XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgIC8vIGVycm9yU3RhdGVcbiAgICAvLyAwIC4uLiBhbGwgb2theVxuICAgIC8vIDEgLi4uIGhhZCBhbiBlcnJvciBpbiBhIGdseWYsXG4gICAgLy8gICAgICAgY29udGludWUgd29ya2luZyBidXQgc3RvcCBzcGFtbWluZ1xuICAgIC8vICAgICAgIHRoZSBjb25zb2xlXG4gICAgLy8gMiAuLi4gZXJyb3IgYXQgcHJlcCwgc3RvcCBoaW50aW5nIGF0IHRoaXMgcHBlbVxuICAgIC8vIDMgLi4uIGVycm9yIGF0IGZwZWcsIHN0b3AgaGludGluZyBmb3IgdGhpcyBmb250IGF0IGFsbFxuICAgIHRoaXMuX2Vycm9yU3RhdGUgPSAwO1xufVxuXG4vKlxuKiBOb3Qgcm91bmRpbmcuXG4qL1xuZnVuY3Rpb24gcm91bmRPZmYodikge1xuICAgIHJldHVybiB2O1xufVxuXG4vKlxuKiBSb3VuZGluZyB0byBncmlkLlxuKi9cbmZ1bmN0aW9uIHJvdW5kVG9HcmlkKHYpIHtcbiAgICAvL1JvdW5kaW5nIGluIFRUIGlzIHN1cHBvc2VkIHRvIFwic3ltbWV0cmljYWwgYXJvdW5kIHplcm9cIlxuICAgIHJldHVybiBNYXRoLnNpZ24odikgKiBNYXRoLnJvdW5kKE1hdGguYWJzKHYpKTtcbn1cblxuLypcbiogUm91bmRpbmcgdG8gZG91YmxlIGdyaWQuXG4qL1xuZnVuY3Rpb24gcm91bmRUb0RvdWJsZUdyaWQodikge1xuICAgIHJldHVybiBNYXRoLnNpZ24odikgKiBNYXRoLnJvdW5kKE1hdGguYWJzKHYgKiAyKSkgLyAyO1xufVxuXG4vKlxuKiBSb3VuZGluZyB0byBoYWxmIGdyaWQuXG4qL1xuZnVuY3Rpb24gcm91bmRUb0hhbGZHcmlkKHYpIHtcbiAgICByZXR1cm4gTWF0aC5zaWduKHYpICogKE1hdGgucm91bmQoTWF0aC5hYnModikgKyAwLjUpIC0gMC41KTtcbn1cblxuLypcbiogUm91bmRpbmcgdG8gdXAgdG8gZ3JpZC5cbiovXG5mdW5jdGlvbiByb3VuZFVwVG9HcmlkKHYpIHtcbiAgICByZXR1cm4gTWF0aC5zaWduKHYpICogTWF0aC5jZWlsKE1hdGguYWJzKHYpKTtcbn1cblxuLypcbiogUm91bmRpbmcgdG8gZG93biB0byBncmlkLlxuKi9cbmZ1bmN0aW9uIHJvdW5kRG93blRvR3JpZCh2KSB7XG4gICAgcmV0dXJuIE1hdGguc2lnbih2KSAqIE1hdGguZmxvb3IoTWF0aC5hYnModikpO1xufVxuXG4vKlxuKiBTdXBlciByb3VuZGluZy5cbiovXG52YXIgcm91bmRTdXBlciA9IGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIHBlcmlvZCA9IHRoaXMuc3JQZXJpb2Q7XG4gICAgdmFyIHBoYXNlID0gdGhpcy5zclBoYXNlO1xuICAgIHZhciB0aHJlc2hvbGQgPSB0aGlzLnNyVGhyZXNob2xkO1xuICAgIHZhciBzaWduID0gMTtcblxuICAgIGlmICh2IDwgMCkge1xuICAgICAgICB2ID0gLXY7XG4gICAgICAgIHNpZ24gPSAtMTtcbiAgICB9XG5cbiAgICB2ICs9IHRocmVzaG9sZCAtIHBoYXNlO1xuXG4gICAgdiA9IE1hdGgudHJ1bmModiAvIHBlcmlvZCkgKiBwZXJpb2Q7XG5cbiAgICB2ICs9IHBoYXNlO1xuXG4gICAgLy8gYWNjb3JkaW5nIHRvIGh0dHA6Ly94Z3JpZGZpdC5zb3VyY2Vmb3JnZS5uZXQvcm91bmQuaHRtbFxuICAgIGlmICh2IDwgMCkgeyByZXR1cm4gcGhhc2UgKiBzaWduOyB9XG5cbiAgICByZXR1cm4gdiAqIHNpZ247XG59O1xuXG4vKlxuKiBVbml0IHZlY3RvciBvZiB4LWF4aXMuXG4qL1xudmFyIHhVbml0VmVjdG9yID0ge1xuICAgIHg6IDEsXG5cbiAgICB5OiAwLFxuXG4gICAgYXhpczogJ3gnLFxuXG4gICAgLy8gR2V0cyB0aGUgcHJvamVjdGVkIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50cy5cbiAgICAvLyBvMS9vMiAuLi4gaWYgdHJ1ZSwgcmVzcGVjdGl2ZSBvcmlnaW5hbCBwb3NpdGlvbiBpcyB1c2VkLlxuICAgIGRpc3RhbmNlOiBmdW5jdGlvbiAocDEsIHAyLCBvMSwgbzIpIHtcbiAgICAgICAgcmV0dXJuIChvMSA/IHAxLnhvIDogcDEueCkgLSAobzIgPyBwMi54byA6IHAyLngpO1xuICAgIH0sXG5cbiAgICAvLyBNb3ZlcyBwb2ludCBwIHNvIHRoZSBtb3ZlZCBwb3NpdGlvbiBoYXMgdGhlIHNhbWUgcmVsYXRpdmVcbiAgICAvLyBwb3NpdGlvbiB0byB0aGUgbW92ZWQgcG9zaXRpb25zIG9mIHJwMSBhbmQgcnAyIHRoYW4gdGhlXG4gICAgLy8gb3JpZ2luYWwgcG9zaXRpb25zIGhhZC5cbiAgICAvL1xuICAgIC8vIFNlZSBBUFBFTkRJWCBvbiBJTlRFUlBPTEFURSBhdCB0aGUgYm90dG9tIG9mIHRoaXMgZmlsZS5cbiAgICBpbnRlcnBvbGF0ZTogZnVuY3Rpb24gKHAsIHJwMSwgcnAyLCBwdikge1xuICAgICAgICB2YXIgZG8xO1xuICAgICAgICB2YXIgZG8yO1xuICAgICAgICB2YXIgZG9hMTtcbiAgICAgICAgdmFyIGRvYTI7XG4gICAgICAgIHZhciBkbTE7XG4gICAgICAgIHZhciBkbTI7XG4gICAgICAgIHZhciBkdDtcblxuICAgICAgICBpZiAoIXB2IHx8IHB2ID09PSB0aGlzKSB7XG4gICAgICAgICAgICBkbzEgPSBwLnhvIC0gcnAxLnhvO1xuICAgICAgICAgICAgZG8yID0gcC54byAtIHJwMi54bztcbiAgICAgICAgICAgIGRtMSA9IHJwMS54IC0gcnAxLnhvO1xuICAgICAgICAgICAgZG0yID0gcnAyLnggLSBycDIueG87XG4gICAgICAgICAgICBkb2ExID0gTWF0aC5hYnMoZG8xKTtcbiAgICAgICAgICAgIGRvYTIgPSBNYXRoLmFicyhkbzIpO1xuICAgICAgICAgICAgZHQgPSBkb2ExICsgZG9hMjtcblxuICAgICAgICAgICAgaWYgKGR0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcC54ID0gcC54byArIChkbTEgKyBkbTIpIC8gMjtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHAueCA9IHAueG8gKyAoZG0xICogZG9hMiArIGRtMiAqIGRvYTEpIC8gZHQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkbzEgPSBwdi5kaXN0YW5jZShwLCBycDEsIHRydWUsIHRydWUpO1xuICAgICAgICBkbzIgPSBwdi5kaXN0YW5jZShwLCBycDIsIHRydWUsIHRydWUpO1xuICAgICAgICBkbTEgPSBwdi5kaXN0YW5jZShycDEsIHJwMSwgZmFsc2UsIHRydWUpO1xuICAgICAgICBkbTIgPSBwdi5kaXN0YW5jZShycDIsIHJwMiwgZmFsc2UsIHRydWUpO1xuICAgICAgICBkb2ExID0gTWF0aC5hYnMoZG8xKTtcbiAgICAgICAgZG9hMiA9IE1hdGguYWJzKGRvMik7XG4gICAgICAgIGR0ID0gZG9hMSArIGRvYTI7XG5cbiAgICAgICAgaWYgKGR0ID09PSAwKSB7XG4gICAgICAgICAgICB4VW5pdFZlY3Rvci5zZXRSZWxhdGl2ZShwLCBwLCAoZG0xICsgZG0yKSAvIDIsIHB2LCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHhVbml0VmVjdG9yLnNldFJlbGF0aXZlKHAsIHAsIChkbTEgKiBkb2EyICsgZG0yICogZG9hMSkgLyBkdCwgcHYsIHRydWUpO1xuICAgIH0sXG5cbiAgICAvLyBTbG9wZSBvZiBsaW5lIG5vcm1hbCB0byB0aGlzXG4gICAgbm9ybWFsU2xvcGU6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxcblxuICAgIC8vIFNldHMgdGhlIHBvaW50ICdwJyByZWxhdGl2ZSB0byBwb2ludCAncnAnXG4gICAgLy8gYnkgdGhlIGRpc3RhbmNlICdkJy5cbiAgICAvL1xuICAgIC8vIFNlZSBBUFBFTkRJWCBvbiBTRVRSRUxBVElWRSBhdCB0aGUgYm90dG9tIG9mIHRoaXMgZmlsZS5cbiAgICAvL1xuICAgIC8vIHAgICAuLi4gcG9pbnQgdG8gc2V0XG4gICAgLy8gcnAgIC4uLiByZWZlcmVuY2UgcG9pbnRcbiAgICAvLyBkICAgLi4uIGRpc3RhbmNlIG9uIHByb2plY3Rpb24gdmVjdG9yXG4gICAgLy8gcHYgIC4uLiBwcm9qZWN0aW9uIHZlY3RvciAodW5kZWZpbmVkID0gdGhpcylcbiAgICAvLyBvcmcgLi4uIGlmIHRydWUsIHVzZXMgdGhlIG9yaWdpbmFsIHBvc2l0aW9uIG9mIHJwIGFzIHJlZmVyZW5jZS5cbiAgICBzZXRSZWxhdGl2ZTogZnVuY3Rpb24gKHAsIHJwLCBkLCBwdiwgb3JnKSB7XG4gICAgICAgIGlmICghcHYgfHwgcHYgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHAueCA9IChvcmcgPyBycC54byA6IHJwLngpICsgZDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBycHggPSBvcmcgPyBycC54byA6IHJwLng7XG4gICAgICAgIHZhciBycHkgPSBvcmcgPyBycC55byA6IHJwLnk7XG4gICAgICAgIHZhciBycGR4ID0gcnB4ICsgZCAqIHB2Lng7XG4gICAgICAgIHZhciBycGR5ID0gcnB5ICsgZCAqIHB2Lnk7XG5cbiAgICAgICAgcC54ID0gcnBkeCArIChwLnkgLSBycGR5KSAvIHB2Lm5vcm1hbFNsb3BlO1xuICAgIH0sXG5cbiAgICAvLyBTbG9wZSBvZiB2ZWN0b3IgbGluZS5cbiAgICBzbG9wZTogMCxcblxuICAgIC8vIFRvdWNoZXMgdGhlIHBvaW50IHAuXG4gICAgdG91Y2g6IGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHAueFRvdWNoZWQgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvLyBUZXN0cyBpZiBhIHBvaW50IHAgaXMgdG91Y2hlZC5cbiAgICB0b3VjaGVkOiBmdW5jdGlvbiAocCkge1xuICAgICAgICByZXR1cm4gcC54VG91Y2hlZDtcbiAgICB9LFxuXG4gICAgLy8gVW50b3VjaGVzIHRoZSBwb2ludCBwLlxuICAgIHVudG91Y2g6IGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHAueFRvdWNoZWQgPSBmYWxzZTtcbiAgICB9XG59O1xuXG4vKlxuKiBVbml0IHZlY3RvciBvZiB5LWF4aXMuXG4qL1xudmFyIHlVbml0VmVjdG9yID0ge1xuICAgIHg6IDAsXG5cbiAgICB5OiAxLFxuXG4gICAgYXhpczogJ3knLFxuXG4gICAgLy8gR2V0cyB0aGUgcHJvamVjdGVkIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50cy5cbiAgICAvLyBvMS9vMiAuLi4gaWYgdHJ1ZSwgcmVzcGVjdGl2ZSBvcmlnaW5hbCBwb3NpdGlvbiBpcyB1c2VkLlxuICAgIGRpc3RhbmNlOiBmdW5jdGlvbiAocDEsIHAyLCBvMSwgbzIpIHtcbiAgICAgICAgcmV0dXJuIChvMSA/IHAxLnlvIDogcDEueSkgLSAobzIgPyBwMi55byA6IHAyLnkpO1xuICAgIH0sXG5cbiAgICAvLyBNb3ZlcyBwb2ludCBwIHNvIHRoZSBtb3ZlZCBwb3NpdGlvbiBoYXMgdGhlIHNhbWUgcmVsYXRpdmVcbiAgICAvLyBwb3NpdGlvbiB0byB0aGUgbW92ZWQgcG9zaXRpb25zIG9mIHJwMSBhbmQgcnAyIHRoYW4gdGhlXG4gICAgLy8gb3JpZ2luYWwgcG9zaXRpb25zIGhhZC5cbiAgICAvL1xuICAgIC8vIFNlZSBBUFBFTkRJWCBvbiBJTlRFUlBPTEFURSBhdCB0aGUgYm90dG9tIG9mIHRoaXMgZmlsZS5cbiAgICBpbnRlcnBvbGF0ZTogZnVuY3Rpb24gKHAsIHJwMSwgcnAyLCBwdikge1xuICAgICAgICB2YXIgZG8xO1xuICAgICAgICB2YXIgZG8yO1xuICAgICAgICB2YXIgZG9hMTtcbiAgICAgICAgdmFyIGRvYTI7XG4gICAgICAgIHZhciBkbTE7XG4gICAgICAgIHZhciBkbTI7XG4gICAgICAgIHZhciBkdDtcblxuICAgICAgICBpZiAoIXB2IHx8IHB2ID09PSB0aGlzKSB7XG4gICAgICAgICAgICBkbzEgPSBwLnlvIC0gcnAxLnlvO1xuICAgICAgICAgICAgZG8yID0gcC55byAtIHJwMi55bztcbiAgICAgICAgICAgIGRtMSA9IHJwMS55IC0gcnAxLnlvO1xuICAgICAgICAgICAgZG0yID0gcnAyLnkgLSBycDIueW87XG4gICAgICAgICAgICBkb2ExID0gTWF0aC5hYnMoZG8xKTtcbiAgICAgICAgICAgIGRvYTIgPSBNYXRoLmFicyhkbzIpO1xuICAgICAgICAgICAgZHQgPSBkb2ExICsgZG9hMjtcblxuICAgICAgICAgICAgaWYgKGR0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcC55ID0gcC55byArIChkbTEgKyBkbTIpIC8gMjtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHAueSA9IHAueW8gKyAoZG0xICogZG9hMiArIGRtMiAqIGRvYTEpIC8gZHQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkbzEgPSBwdi5kaXN0YW5jZShwLCBycDEsIHRydWUsIHRydWUpO1xuICAgICAgICBkbzIgPSBwdi5kaXN0YW5jZShwLCBycDIsIHRydWUsIHRydWUpO1xuICAgICAgICBkbTEgPSBwdi5kaXN0YW5jZShycDEsIHJwMSwgZmFsc2UsIHRydWUpO1xuICAgICAgICBkbTIgPSBwdi5kaXN0YW5jZShycDIsIHJwMiwgZmFsc2UsIHRydWUpO1xuICAgICAgICBkb2ExID0gTWF0aC5hYnMoZG8xKTtcbiAgICAgICAgZG9hMiA9IE1hdGguYWJzKGRvMik7XG4gICAgICAgIGR0ID0gZG9hMSArIGRvYTI7XG5cbiAgICAgICAgaWYgKGR0ID09PSAwKSB7XG4gICAgICAgICAgICB5VW5pdFZlY3Rvci5zZXRSZWxhdGl2ZShwLCBwLCAoZG0xICsgZG0yKSAvIDIsIHB2LCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHlVbml0VmVjdG9yLnNldFJlbGF0aXZlKHAsIHAsIChkbTEgKiBkb2EyICsgZG0yICogZG9hMSkgLyBkdCwgcHYsIHRydWUpO1xuICAgIH0sXG5cbiAgICAvLyBTbG9wZSBvZiBsaW5lIG5vcm1hbCB0byB0aGlzLlxuICAgIG5vcm1hbFNsb3BlOiAwLFxuXG4gICAgLy8gU2V0cyB0aGUgcG9pbnQgJ3AnIHJlbGF0aXZlIHRvIHBvaW50ICdycCdcbiAgICAvLyBieSB0aGUgZGlzdGFuY2UgJ2QnXG4gICAgLy9cbiAgICAvLyBTZWUgQVBQRU5ESVggb24gU0VUUkVMQVRJVkUgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIGZpbGUuXG4gICAgLy9cbiAgICAvLyBwICAgLi4uIHBvaW50IHRvIHNldFxuICAgIC8vIHJwICAuLi4gcmVmZXJlbmNlIHBvaW50XG4gICAgLy8gZCAgIC4uLiBkaXN0YW5jZSBvbiBwcm9qZWN0aW9uIHZlY3RvclxuICAgIC8vIHB2ICAuLi4gcHJvamVjdGlvbiB2ZWN0b3IgKHVuZGVmaW5lZCA9IHRoaXMpXG4gICAgLy8gb3JnIC4uLiBpZiB0cnVlLCB1c2VzIHRoZSBvcmlnaW5hbCBwb3NpdGlvbiBvZiBycCBhcyByZWZlcmVuY2UuXG4gICAgc2V0UmVsYXRpdmU6IGZ1bmN0aW9uIChwLCBycCwgZCwgcHYsIG9yZykge1xuICAgICAgICBpZiAoIXB2IHx8IHB2ID09PSB0aGlzKSB7XG4gICAgICAgICAgICBwLnkgPSAob3JnID8gcnAueW8gOiBycC55KSArIGQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcnB4ID0gb3JnID8gcnAueG8gOiBycC54O1xuICAgICAgICB2YXIgcnB5ID0gb3JnID8gcnAueW8gOiBycC55O1xuICAgICAgICB2YXIgcnBkeCA9IHJweCArIGQgKiBwdi54O1xuICAgICAgICB2YXIgcnBkeSA9IHJweSArIGQgKiBwdi55O1xuXG4gICAgICAgIHAueSA9IHJwZHkgKyBwdi5ub3JtYWxTbG9wZSAqIChwLnggLSBycGR4KTtcbiAgICB9LFxuXG4gICAgLy8gU2xvcGUgb2YgdmVjdG9yIGxpbmUuXG4gICAgc2xvcGU6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcblxuICAgIC8vIFRvdWNoZXMgdGhlIHBvaW50IHAuXG4gICAgdG91Y2g6IGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHAueVRvdWNoZWQgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvLyBUZXN0cyBpZiBhIHBvaW50IHAgaXMgdG91Y2hlZC5cbiAgICB0b3VjaGVkOiBmdW5jdGlvbiAocCkge1xuICAgICAgICByZXR1cm4gcC55VG91Y2hlZDtcbiAgICB9LFxuXG4gICAgLy8gVW50b3VjaGVzIHRoZSBwb2ludCBwLlxuICAgIHVudG91Y2g6IGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHAueVRvdWNoZWQgPSBmYWxzZTtcbiAgICB9XG59O1xuXG5PYmplY3QuZnJlZXplKHhVbml0VmVjdG9yKTtcbk9iamVjdC5mcmVlemUoeVVuaXRWZWN0b3IpO1xuXG4vKlxuKiBDcmVhdGVzIGEgdW5pdCB2ZWN0b3IgdGhhdCBpcyBub3QgeC0gb3IgeS1heGlzLlxuKi9cbmZ1bmN0aW9uIFVuaXRWZWN0b3IoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLmF4aXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zbG9wZSA9IHkgLyB4O1xuICAgIHRoaXMubm9ybWFsU2xvcGUgPSAteCAvIHk7XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbn1cblxuLypcbiogR2V0cyB0aGUgcHJvamVjdGVkIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50cy5cbiogbzEvbzIgLi4uIGlmIHRydWUsIHJlc3BlY3RpdmUgb3JpZ2luYWwgcG9zaXRpb24gaXMgdXNlZC5cbiovXG5Vbml0VmVjdG9yLnByb3RvdHlwZS5kaXN0YW5jZSA9IGZ1bmN0aW9uKHAxLCBwMiwgbzEsIG8yKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy54ICogeFVuaXRWZWN0b3IuZGlzdGFuY2UocDEsIHAyLCBvMSwgbzIpICtcbiAgICAgICAgdGhpcy55ICogeVVuaXRWZWN0b3IuZGlzdGFuY2UocDEsIHAyLCBvMSwgbzIpXG4gICAgKTtcbn07XG5cbi8qXG4qIE1vdmVzIHBvaW50IHAgc28gdGhlIG1vdmVkIHBvc2l0aW9uIGhhcyB0aGUgc2FtZSByZWxhdGl2ZVxuKiBwb3NpdGlvbiB0byB0aGUgbW92ZWQgcG9zaXRpb25zIG9mIHJwMSBhbmQgcnAyIHRoYW4gdGhlXG4qIG9yaWdpbmFsIHBvc2l0aW9ucyBoYWQuXG4qXG4qIFNlZSBBUFBFTkRJWCBvbiBJTlRFUlBPTEFURSBhdCB0aGUgYm90dG9tIG9mIHRoaXMgZmlsZS5cbiovXG5Vbml0VmVjdG9yLnByb3RvdHlwZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKHAsIHJwMSwgcnAyLCBwdikge1xuICAgIHZhciBkbTE7XG4gICAgdmFyIGRtMjtcbiAgICB2YXIgZG8xO1xuICAgIHZhciBkbzI7XG4gICAgdmFyIGRvYTE7XG4gICAgdmFyIGRvYTI7XG4gICAgdmFyIGR0O1xuXG4gICAgZG8xID0gcHYuZGlzdGFuY2UocCwgcnAxLCB0cnVlLCB0cnVlKTtcbiAgICBkbzIgPSBwdi5kaXN0YW5jZShwLCBycDIsIHRydWUsIHRydWUpO1xuICAgIGRtMSA9IHB2LmRpc3RhbmNlKHJwMSwgcnAxLCBmYWxzZSwgdHJ1ZSk7XG4gICAgZG0yID0gcHYuZGlzdGFuY2UocnAyLCBycDIsIGZhbHNlLCB0cnVlKTtcbiAgICBkb2ExID0gTWF0aC5hYnMoZG8xKTtcbiAgICBkb2EyID0gTWF0aC5hYnMoZG8yKTtcbiAgICBkdCA9IGRvYTEgKyBkb2EyO1xuXG4gICAgaWYgKGR0ID09PSAwKSB7XG4gICAgICAgIHRoaXMuc2V0UmVsYXRpdmUocCwgcCwgKGRtMSArIGRtMikgLyAyLCBwdiwgdHJ1ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNldFJlbGF0aXZlKHAsIHAsIChkbTEgKiBkb2EyICsgZG0yICogZG9hMSkgLyBkdCwgcHYsIHRydWUpO1xufTtcblxuLypcbiogU2V0cyB0aGUgcG9pbnQgJ3AnIHJlbGF0aXZlIHRvIHBvaW50ICdycCdcbiogYnkgdGhlIGRpc3RhbmNlICdkJ1xuKlxuKiBTZWUgQVBQRU5ESVggb24gU0VUUkVMQVRJVkUgYXQgdGhlIGJvdHRvbSBvZiB0aGlzIGZpbGUuXG4qXG4qIHAgICAuLi4gIHBvaW50IHRvIHNldFxuKiBycCAgLi4uIHJlZmVyZW5jZSBwb2ludFxuKiBkICAgLi4uIGRpc3RhbmNlIG9uIHByb2plY3Rpb24gdmVjdG9yXG4qIHB2ICAuLi4gcHJvamVjdGlvbiB2ZWN0b3IgKHVuZGVmaW5lZCA9IHRoaXMpXG4qIG9yZyAuLi4gaWYgdHJ1ZSwgdXNlcyB0aGUgb3JpZ2luYWwgcG9zaXRpb24gb2YgcnAgYXMgcmVmZXJlbmNlLlxuKi9cblVuaXRWZWN0b3IucHJvdG90eXBlLnNldFJlbGF0aXZlID0gZnVuY3Rpb24ocCwgcnAsIGQsIHB2LCBvcmcpIHtcbiAgICBwdiA9IHB2IHx8IHRoaXM7XG5cbiAgICB2YXIgcnB4ID0gb3JnID8gcnAueG8gOiBycC54O1xuICAgIHZhciBycHkgPSBvcmcgPyBycC55byA6IHJwLnk7XG4gICAgdmFyIHJwZHggPSBycHggKyBkICogcHYueDtcbiAgICB2YXIgcnBkeSA9IHJweSArIGQgKiBwdi55O1xuXG4gICAgdmFyIHB2bnMgPSBwdi5ub3JtYWxTbG9wZTtcbiAgICB2YXIgZnZzID0gdGhpcy5zbG9wZTtcblxuICAgIHZhciBweCA9IHAueDtcbiAgICB2YXIgcHkgPSBwLnk7XG5cbiAgICBwLnggPSAoZnZzICogcHggLSBwdm5zICogcnBkeCArIHJwZHkgLSBweSkgLyAoZnZzIC0gcHZucyk7XG4gICAgcC55ID0gZnZzICogKHAueCAtIHB4KSArIHB5O1xufTtcblxuLypcbiogVG91Y2hlcyB0aGUgcG9pbnQgcC5cbiovXG5Vbml0VmVjdG9yLnByb3RvdHlwZS50b3VjaCA9IGZ1bmN0aW9uKHApIHtcbiAgICBwLnhUb3VjaGVkID0gdHJ1ZTtcbiAgICBwLnlUb3VjaGVkID0gdHJ1ZTtcbn07XG5cbi8qXG4qIFJldHVybnMgYSB1bml0IHZlY3RvciB3aXRoIHgveSBjb29yZGluYXRlcy5cbiovXG5mdW5jdGlvbiBnZXRVbml0VmVjdG9yKHgsIHkpIHtcbiAgICB2YXIgZCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcblxuICAgIHggLz0gZDtcbiAgICB5IC89IGQ7XG5cbiAgICBpZiAoeCA9PT0gMSAmJiB5ID09PSAwKSB7IHJldHVybiB4VW5pdFZlY3RvcjsgfVxuICAgIGVsc2UgaWYgKHggPT09IDAgJiYgeSA9PT0gMSkgeyByZXR1cm4geVVuaXRWZWN0b3I7IH1cbiAgICBlbHNlIHsgcmV0dXJuIG5ldyBVbml0VmVjdG9yKHgsIHkpOyB9XG59XG5cbi8qXG4qIENyZWF0ZXMgYSBwb2ludCBpbiB0aGUgaGludGluZyBlbmdpbmUuXG4qL1xuZnVuY3Rpb24gSFBvaW50KFxuICAgIHgsXG4gICAgeSxcbiAgICBsYXN0UG9pbnRPZkNvbnRvdXIsXG4gICAgb25DdXJ2ZVxuKSB7XG4gICAgdGhpcy54ID0gdGhpcy54byA9IE1hdGgucm91bmQoeCAqIDY0KSAvIDY0OyAvLyBoaW50ZWQgeCB2YWx1ZSBhbmQgb3JpZ2luYWwgeC12YWx1ZVxuICAgIHRoaXMueSA9IHRoaXMueW8gPSBNYXRoLnJvdW5kKHkgKiA2NCkgLyA2NDsgLy8gaGludGVkIHkgdmFsdWUgYW5kIG9yaWdpbmFsIHktdmFsdWVcblxuICAgIHRoaXMubGFzdFBvaW50T2ZDb250b3VyID0gbGFzdFBvaW50T2ZDb250b3VyO1xuICAgIHRoaXMub25DdXJ2ZSA9IG9uQ3VydmU7XG4gICAgdGhpcy5wcmV2UG9pbnRPbkNvbnRvdXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5uZXh0UG9pbnRPbkNvbnRvdXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy54VG91Y2hlZCA9IGZhbHNlO1xuICAgIHRoaXMueVRvdWNoZWQgPSBmYWxzZTtcblxuICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0aGlzKTtcbn1cblxuLypcbiogUmV0dXJucyB0aGUgbmV4dCB0b3VjaGVkIHBvaW50IG9uIHRoZSBjb250b3VyLlxuKlxuKiB2ICAuLi4gdW5pdCB2ZWN0b3IgdG8gdGVzdCB0b3VjaCBheGlzLlxuKi9cbkhQb2ludC5wcm90b3R5cGUubmV4dFRvdWNoZWQgPSBmdW5jdGlvbih2KSB7XG4gICAgdmFyIHAgPSB0aGlzLm5leHRQb2ludE9uQ29udG91cjtcblxuICAgIHdoaWxlICghdi50b3VjaGVkKHApICYmIHAgIT09IHRoaXMpIHsgcCA9IHAubmV4dFBvaW50T25Db250b3VyOyB9XG5cbiAgICByZXR1cm4gcDtcbn07XG5cbi8qXG4qIFJldHVybnMgdGhlIHByZXZpb3VzIHRvdWNoZWQgcG9pbnQgb24gdGhlIGNvbnRvdXJcbipcbiogdiAgLi4uIHVuaXQgdmVjdG9yIHRvIHRlc3QgdG91Y2ggYXhpcy5cbiovXG5IUG9pbnQucHJvdG90eXBlLnByZXZUb3VjaGVkID0gZnVuY3Rpb24odikge1xuICAgIHZhciBwID0gdGhpcy5wcmV2UG9pbnRPbkNvbnRvdXI7XG5cbiAgICB3aGlsZSAoIXYudG91Y2hlZChwKSAmJiBwICE9PSB0aGlzKSB7IHAgPSBwLnByZXZQb2ludE9uQ29udG91cjsgfVxuXG4gICAgcmV0dXJuIHA7XG59O1xuXG4vKlxuKiBUaGUgemVybyBwb2ludC5cbiovXG52YXIgSFBaZXJvID0gT2JqZWN0LmZyZWV6ZShuZXcgSFBvaW50KDAsIDApKTtcblxuLypcbiogVGhlIGRlZmF1bHQgc3RhdGUgb2YgdGhlIGludGVycHJldGVyLlxuKlxuKiBOb3RlOiBGcmVlemluZyB0aGUgZGVmYXVsdFN0YXRlIGFuZCB0aGVuIGRlcml2aW5nIGZyb20gaXRcbiogbWFrZXMgdGhlIFY4IEphdmFzY3JpcHQgZW5naW5lIGdvaW5nIGF3a3dhcmQsXG4qIHNvIHRoaXMgaXMgYXZvaWRlZCwgYWxiZWl0IHRoZSBkZWZhdWx0U3RhdGUgc2hvdWxkbid0XG4qIGV2ZXIgY2hhbmdlLlxuKi9cbnZhciBkZWZhdWx0U3RhdGUgPSB7XG4gICAgY3ZDdXRJbjogMTcgLyAxNiwgICAgLy8gY29udHJvbCB2YWx1ZSBjdXQgaW5cbiAgICBkZWx0YUJhc2U6IDksXG4gICAgZGVsdGFTaGlmdDogMC4xMjUsXG4gICAgbG9vcDogMSwgICAgICAgICAgICAgLy8gbG9vcHMgc29tZSBpbnN0cnVjdGlvbnNcbiAgICBtaW5EaXM6IDEsICAgICAgICAgICAvLyBtaW5pbXVtIGRpc3RhbmNlXG4gICAgYXV0b0ZsaXA6IHRydWVcbn07XG5cbi8qXG4qIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBpbnRlcnByZXRlci5cbipcbiogZW52ICAuLi4gJ2ZwZ20nIG9yICdwcmVwJyBvciAnZ2x5ZidcbiogcHJvZyAuLi4gdGhlIHByb2dyYW1cbiovXG5mdW5jdGlvbiBTdGF0ZShlbnYsIHByb2cpIHtcbiAgICB0aGlzLmVudiA9IGVudjtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5wcm9nID0gcHJvZztcblxuICAgIHN3aXRjaCAoZW52KSB7XG4gICAgICAgIGNhc2UgJ2dseWYnIDpcbiAgICAgICAgICAgIHRoaXMuenAwID0gdGhpcy56cDEgPSB0aGlzLnpwMiA9IDE7XG4gICAgICAgICAgICB0aGlzLnJwMCA9IHRoaXMucnAxID0gdGhpcy5ycDIgPSAwO1xuICAgICAgICAgICAgLyogZmFsbCB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ3ByZXAnIDpcbiAgICAgICAgICAgIHRoaXMuZnYgPSB0aGlzLnB2ID0gdGhpcy5kcHYgPSB4VW5pdFZlY3RvcjtcbiAgICAgICAgICAgIHRoaXMucm91bmQgPSByb3VuZFRvR3JpZDtcbiAgICB9XG59XG5cbi8qXG4qIEV4ZWN1dGVzIGEgZ2x5cGggcHJvZ3JhbS5cbipcbiogVGhpcyBkb2VzIHRoZSBoaW50aW5nIGZvciBlYWNoIGdseXBoLlxuKlxuKiBSZXR1cm5zIGFuIGFycmF5IG9mIG1vdmVkIHBvaW50cy5cbipcbiogZ2x5cGg6IHRoZSBnbHlwaCB0byBoaW50XG4qIHBwZW06IHRoZSBzaXplIHRoZSBnbHlwaCBpcyByZW5kZXJlZCBmb3JcbiovXG5IaW50aW5nLnByb3RvdHlwZS5leGVjID0gZnVuY3Rpb24oZ2x5cGgsIHBwZW0pIHtcbiAgICBpZiAodHlwZW9mIHBwZW0gIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUG9pbnQgc2l6ZSBpcyBub3QgYSBudW1iZXIhJyk7XG4gICAgfVxuXG4gICAgLy8gUmVjZWl2ZWQgYSBmYXRhbCBlcnJvciwgZG9uJ3QgZG8gYW55IGhpbnRpbmcgYW55bW9yZS5cbiAgICBpZiAodGhpcy5fZXJyb3JTdGF0ZSA+IDIpIHsgcmV0dXJuOyB9XG5cbiAgICB2YXIgZm9udCA9IHRoaXMuZm9udDtcbiAgICB2YXIgcHJlcFN0YXRlID0gdGhpcy5fcHJlcFN0YXRlO1xuXG4gICAgaWYgKCFwcmVwU3RhdGUgfHwgcHJlcFN0YXRlLnBwZW0gIT09IHBwZW0pIHtcbiAgICAgICAgdmFyIGZwZ21TdGF0ZSA9IHRoaXMuX2ZwZ21TdGF0ZTtcblxuICAgICAgICBpZiAoIWZwZ21TdGF0ZSkge1xuICAgICAgICAgICAgLy8gRXhlY3V0ZXMgdGhlIGZwZ20gc3RhdGUuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHVzZWQgYnkgZm9udHMgdG8gZGVmaW5lIGZ1bmN0aW9ucy5cbiAgICAgICAgICAgIFN0YXRlLnByb3RvdHlwZSA9IGRlZmF1bHRTdGF0ZTtcblxuICAgICAgICAgICAgZnBnbVN0YXRlID1cbiAgICAgICAgICAgIHRoaXMuX2ZwZ21TdGF0ZSA9XG4gICAgICAgICAgICAgICAgbmV3IFN0YXRlKCdmcGdtJywgZm9udC50YWJsZXMuZnBnbSk7XG5cbiAgICAgICAgICAgIGZwZ21TdGF0ZS5mdW5jcyA9IFsgXTtcbiAgICAgICAgICAgIGZwZ21TdGF0ZS5mb250ID0gZm9udDtcblxuICAgICAgICAgICAgaWYgKGV4cG9ydHMuREVCVUcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnLS0tRVhFQyBGUEdNLS0tJyk7XG4gICAgICAgICAgICAgICAgZnBnbVN0YXRlLnN0ZXAgPSAtMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBleGVjKGZwZ21TdGF0ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0hpbnRpbmcgZXJyb3IgaW4gRlBHTTonICsgZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3JTdGF0ZSA9IDM7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXhlY3V0ZXMgdGhlIHByZXAgcHJvZ3JhbSBmb3IgdGhpcyBwcGVtIHNldHRpbmcuXG4gICAgICAgIC8vIFRoaXMgaXMgdXNlZCBieSBmb250cyB0byBzZXQgY3Z0IHZhbHVlc1xuICAgICAgICAvLyBkZXBlbmRpbmcgb24gdG8gYmUgcmVuZGVyZWQgZm9udCBzaXplLlxuXG4gICAgICAgIFN0YXRlLnByb3RvdHlwZSA9IGZwZ21TdGF0ZTtcbiAgICAgICAgcHJlcFN0YXRlID1cbiAgICAgICAgdGhpcy5fcHJlcFN0YXRlID1cbiAgICAgICAgICAgIG5ldyBTdGF0ZSgncHJlcCcsIGZvbnQudGFibGVzLnByZXApO1xuXG4gICAgICAgIHByZXBTdGF0ZS5wcGVtID0gcHBlbTtcblxuICAgICAgICAvLyBDcmVhdGVzIGEgY29weSBvZiB0aGUgY3Z0IHRhYmxlXG4gICAgICAgIC8vIGFuZCBzY2FsZXMgaXQgdG8gdGhlIGN1cnJlbnQgcHBlbSBzZXR0aW5nLlxuICAgICAgICB2YXIgb0N2dCA9IGZvbnQudGFibGVzLmN2dDtcbiAgICAgICAgaWYgKG9DdnQpIHtcbiAgICAgICAgICAgIHZhciBjdnQgPSBwcmVwU3RhdGUuY3Z0ID0gbmV3IEFycmF5KG9DdnQubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBzY2FsZSA9IHBwZW0gLyBmb250LnVuaXRzUGVyRW07XG4gICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IG9DdnQubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgICAgICBjdnRbY10gPSBvQ3Z0W2NdICogc2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcmVwU3RhdGUuY3Z0ID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXhwb3J0cy5ERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJy0tLUVYRUMgUFJFUC0tLScpO1xuICAgICAgICAgICAgcHJlcFN0YXRlLnN0ZXAgPSAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBleGVjKHByZXBTdGF0ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvclN0YXRlIDwgMikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdIaW50aW5nIGVycm9yIGluIFBSRVA6JyArIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZXJyb3JTdGF0ZSA9IDI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXJyb3JTdGF0ZSA+IDEpIHsgcmV0dXJuOyB9XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZXhlY0dseXBoKGdseXBoLCBwcmVwU3RhdGUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Vycm9yU3RhdGUgPCAxKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSGludGluZyBlcnJvcjonICsgZSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTm90ZTogZnVydGhlciBoaW50aW5nIGVycm9ycyBhcmUgc2lsZW5jZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lcnJvclN0YXRlID0gMTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59O1xuXG4vKlxuKiBFeGVjdXRlcyB0aGUgaGludGluZyBwcm9ncmFtIGZvciBhIGdseXBoLlxuKi9cbmV4ZWNHbHlwaCA9IGZ1bmN0aW9uKGdseXBoLCBwcmVwU3RhdGUpIHtcbiAgICAvLyBvcmlnaW5hbCBwb2ludCBwb3NpdGlvbnNcbiAgICB2YXIgeFNjYWxlID0gcHJlcFN0YXRlLnBwZW0gLyBwcmVwU3RhdGUuZm9udC51bml0c1BlckVtO1xuICAgIHZhciB5U2NhbGUgPSB4U2NhbGU7XG4gICAgdmFyIGNvbXBvbmVudHMgPSBnbHlwaC5jb21wb25lbnRzO1xuICAgIHZhciBjb250b3VycztcbiAgICB2YXIgZ1pvbmU7XG4gICAgdmFyIHN0YXRlO1xuXG4gICAgU3RhdGUucHJvdG90eXBlID0gcHJlcFN0YXRlO1xuICAgIGlmICghY29tcG9uZW50cykge1xuICAgICAgICBzdGF0ZSA9IG5ldyBTdGF0ZSgnZ2x5ZicsIGdseXBoLmluc3RydWN0aW9ucyk7XG4gICAgICAgIGlmIChleHBvcnRzLkRFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnLS0tRVhFQyBHTFlQSC0tLScpO1xuICAgICAgICAgICAgc3RhdGUuc3RlcCA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGV4ZWNDb21wb25lbnQoZ2x5cGgsIHN0YXRlLCB4U2NhbGUsIHlTY2FsZSk7XG4gICAgICAgIGdab25lID0gc3RhdGUuZ1pvbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGZvbnQgPSBwcmVwU3RhdGUuZm9udDtcbiAgICAgICAgZ1pvbmUgPSBbXTtcbiAgICAgICAgY29udG91cnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb25lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYyA9IGNvbXBvbmVudHNbaV07XG4gICAgICAgICAgICB2YXIgY2cgPSBmb250LmdseXBocy5nZXQoYy5nbHlwaEluZGV4KTtcblxuICAgICAgICAgICAgc3RhdGUgPSBuZXcgU3RhdGUoJ2dseWYnLCBjZy5pbnN0cnVjdGlvbnMpO1xuXG4gICAgICAgICAgICBpZiAoZXhwb3J0cy5ERUJVRykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCctLS1FWEVDIENPTVAgJyArIGkgKyAnLS0tJyk7XG4gICAgICAgICAgICAgICAgc3RhdGUuc3RlcCA9IC0xO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBleGVjQ29tcG9uZW50KGNnLCBzdGF0ZSwgeFNjYWxlLCB5U2NhbGUpO1xuICAgICAgICAgICAgLy8gYXBwZW5kcyB0aGUgY29tcHV0ZWQgcG9pbnRzIHRvIHRoZSByZXN1bHQgYXJyYXlcbiAgICAgICAgICAgIC8vIHBvc3QgcHJvY2Vzc2VzIHRoZSBjb21wb25lbnQgcG9pbnRzXG4gICAgICAgICAgICB2YXIgZHggPSBNYXRoLnJvdW5kKGMuZHggKiB4U2NhbGUpO1xuICAgICAgICAgICAgdmFyIGR5ID0gTWF0aC5yb3VuZChjLmR5ICogeVNjYWxlKTtcbiAgICAgICAgICAgIHZhciBneiA9IHN0YXRlLmdab25lO1xuICAgICAgICAgICAgdmFyIGNjID0gc3RhdGUuY29udG91cnM7XG4gICAgICAgICAgICBmb3IgKHZhciBwaSA9IDA7IHBpIDwgZ3oubGVuZ3RoOyBwaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHAgPSBneltwaV07XG4gICAgICAgICAgICAgICAgcC54VG91Y2hlZCA9IHAueVRvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBwLnhvID0gcC54ID0gcC54ICsgZHg7XG4gICAgICAgICAgICAgICAgcC55byA9IHAueSA9IHAueSArIGR5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZ0xlbiA9IGdab25lLmxlbmd0aDtcbiAgICAgICAgICAgIGdab25lLnB1c2guYXBwbHkoZ1pvbmUsIGd6KTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb250b3Vycy5wdXNoKGNjW2pdICsgZ0xlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2x5cGguaW5zdHJ1Y3Rpb25zICYmICFzdGF0ZS5pbmhpYml0R3JpZEZpdCkge1xuICAgICAgICAgICAgLy8gdGhlIGNvbXBvc2l0ZSBoYXMgaW5zdHJ1Y3Rpb25zIG9uIGl0cyBvd25cbiAgICAgICAgICAgIHN0YXRlID0gbmV3IFN0YXRlKCdnbHlmJywgZ2x5cGguaW5zdHJ1Y3Rpb25zKTtcblxuICAgICAgICAgICAgc3RhdGUuZ1pvbmUgPSBzdGF0ZS56MCA9IHN0YXRlLnoxID0gc3RhdGUuejIgPSBnWm9uZTtcblxuICAgICAgICAgICAgc3RhdGUuY29udG91cnMgPSBjb250b3VycztcblxuICAgICAgICAgICAgLy8gbm90ZTogSFBaZXJvIGNhbm5vdCBiZSB1c2VkIGhlcmUsIHNpbmNlXG4gICAgICAgICAgICAvLyAgICAgICB0aGUgcG9pbnQgbWlnaHQgYmUgbW9kaWZpZWRcbiAgICAgICAgICAgIGdab25lLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IEhQb2ludCgwLCAwKSxcbiAgICAgICAgICAgICAgICBuZXcgSFBvaW50KE1hdGgucm91bmQoZ2x5cGguYWR2YW5jZVdpZHRoICogeFNjYWxlKSwgMClcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChleHBvcnRzLkRFQlVHKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJy0tLUVYRUMgQ09NUE9TSVRFLS0tJyk7XG4gICAgICAgICAgICAgICAgc3RhdGUuc3RlcCA9IC0xO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBleGVjKHN0YXRlKTtcblxuICAgICAgICAgICAgZ1pvbmUubGVuZ3RoIC09IDI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ1pvbmU7XG59O1xuXG4vKlxuKiBFeGVjdXRlcyB0aGUgaGludGluZyBwcm9ncmFtIGZvciBhIGNvbXBvbmVudCBvZiBhIG11bHRpLWNvbXBvbmVudCBnbHlwaFxuKiBvciBvZiB0aGUgZ2x5cGggaXRzZWxmIGZvciBhIG5vbi1jb21wb25lbnQgZ2x5cGguXG4qL1xuZXhlY0NvbXBvbmVudCA9IGZ1bmN0aW9uKGdseXBoLCBzdGF0ZSwgeFNjYWxlLCB5U2NhbGUpXG57XG4gICAgdmFyIHBvaW50cyA9IGdseXBoLnBvaW50cyB8fCBbXTtcbiAgICB2YXIgcExlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgdmFyIGdab25lID0gc3RhdGUuZ1pvbmUgPSBzdGF0ZS56MCA9IHN0YXRlLnoxID0gc3RhdGUuejIgPSBbXTtcbiAgICB2YXIgY29udG91cnMgPSBzdGF0ZS5jb250b3VycyA9IFtdO1xuXG4gICAgLy8gU2NhbGVzIHRoZSBvcmlnaW5hbCBwb2ludHMgYW5kXG4gICAgLy8gbWFrZXMgY29waWVzIGZvciB0aGUgaGludGVkIHBvaW50cy5cbiAgICB2YXIgY3A7IC8vIGN1cnJlbnQgcG9pbnRcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBMZW47IGkrKykge1xuICAgICAgICBjcCA9IHBvaW50c1tpXTtcblxuICAgICAgICBnWm9uZVtpXSA9IG5ldyBIUG9pbnQoXG4gICAgICAgICAgICBjcC54ICogeFNjYWxlLFxuICAgICAgICAgICAgY3AueSAqIHlTY2FsZSxcbiAgICAgICAgICAgIGNwLmxhc3RQb2ludE9mQ29udG91cixcbiAgICAgICAgICAgIGNwLm9uQ3VydmVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBDaGFpbiBsaW5rcyB0aGUgY29udG91cnMuXG4gICAgdmFyIHNwOyAvLyBzdGFydCBwb2ludFxuICAgIHZhciBucDsgLy8gbmV4dCBwb2ludFxuXG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcExlbjsgaSQxKyspIHtcbiAgICAgICAgY3AgPSBnWm9uZVtpJDFdO1xuXG4gICAgICAgIGlmICghc3ApIHtcbiAgICAgICAgICAgIHNwID0gY3A7XG4gICAgICAgICAgICBjb250b3Vycy5wdXNoKGkkMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3AubGFzdFBvaW50T2ZDb250b3VyKSB7XG4gICAgICAgICAgICBjcC5uZXh0UG9pbnRPbkNvbnRvdXIgPSBzcDtcbiAgICAgICAgICAgIHNwLnByZXZQb2ludE9uQ29udG91ciA9IGNwO1xuICAgICAgICAgICAgc3AgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBucCA9IGdab25lW2kkMSArIDFdO1xuICAgICAgICAgICAgY3AubmV4dFBvaW50T25Db250b3VyID0gbnA7XG4gICAgICAgICAgICBucC5wcmV2UG9pbnRPbkNvbnRvdXIgPSBjcDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdGF0ZS5pbmhpYml0R3JpZEZpdCkgeyByZXR1cm47IH1cblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdQUk9DRVNTSU5HIEdMWVBIJywgc3RhdGUuc3RhY2spO1xuICAgICAgICBmb3IgKHZhciBpJDIgPSAwOyBpJDIgPCBwTGVuOyBpJDIrKykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coaSQyLCBnWm9uZVtpJDJdLngsIGdab25lW2kkMl0ueSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnWm9uZS5wdXNoKFxuICAgICAgICBuZXcgSFBvaW50KDAsIDApLFxuICAgICAgICBuZXcgSFBvaW50KE1hdGgucm91bmQoZ2x5cGguYWR2YW5jZVdpZHRoICogeFNjYWxlKSwgMClcbiAgICApO1xuXG4gICAgZXhlYyhzdGF0ZSk7XG5cbiAgICAvLyBSZW1vdmVzIHRoZSBleHRyYSBwb2ludHMuXG4gICAgZ1pvbmUubGVuZ3RoIC09IDI7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZygnRklOSVNIRUQgR0xZUEgnLCBzdGF0ZS5zdGFjayk7XG4gICAgICAgIGZvciAodmFyIGkkMyA9IDA7IGkkMyA8IHBMZW47IGkkMysrKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhpJDMsIGdab25lW2kkM10ueCwgZ1pvbmVbaSQzXS55KTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qXG4qIEV4ZWN1dGVzIHRoZSBwcm9ncmFtIGxvYWRlZCBpbiBzdGF0ZS5cbiovXG5leGVjID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICB2YXIgcHJvZyA9IHN0YXRlLnByb2c7XG5cbiAgICBpZiAoIXByb2cpIHsgcmV0dXJuOyB9XG5cbiAgICB2YXIgcExlbiA9IHByb2cubGVuZ3RoO1xuICAgIHZhciBpbnM7XG5cbiAgICBmb3IgKHN0YXRlLmlwID0gMDsgc3RhdGUuaXAgPCBwTGVuOyBzdGF0ZS5pcCsrKSB7XG4gICAgICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IHN0YXRlLnN0ZXArKzsgfVxuICAgICAgICBpbnMgPSBpbnN0cnVjdGlvblRhYmxlW3Byb2dbc3RhdGUuaXBdXTtcblxuICAgICAgICBpZiAoIWlucykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICd1bmtub3duIGluc3RydWN0aW9uOiAweCcgK1xuICAgICAgICAgICAgICAgIE51bWJlcihwcm9nW3N0YXRlLmlwXSkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5zKHN0YXRlKTtcblxuICAgICAgICAvLyB2ZXJ5IGV4dGVuc2l2ZSBkZWJ1Z2dpbmcgZm9yIGVhY2ggc3RlcFxuICAgICAgICAvKlxuICAgICAgICBpZiAoZXhwb3J0cy5ERUJVRykge1xuICAgICAgICAgICAgdmFyIGRhO1xuICAgICAgICAgICAgaWYgKHN0YXRlLmdab25lKSB7XG4gICAgICAgICAgICAgICAgZGEgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlLmdab25lLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZGEucHVzaChpICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmdab25lW2ldLnggKiA2NCArICcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5nWm9uZVtpXS55ICogNjQgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHN0YXRlLmdab25lW2ldLnhUb3VjaGVkID8gJ3gnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChzdGF0ZS5nWm9uZVtpXS55VG91Y2hlZCA/ICd5JyA6ICcnKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnR1onLCBkYSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzdGF0ZS50Wm9uZSkge1xuICAgICAgICAgICAgICAgIGRhID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZS50Wm9uZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBkYS5wdXNoKGkgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUudFpvbmVbaV0ueCAqIDY0ICsgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnRab25lW2ldLnkgKiA2NCArICcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc3RhdGUudFpvbmVbaV0ueFRvdWNoZWQgPyAneCcgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHN0YXRlLnRab25lW2ldLnlUb3VjaGVkID8gJ3knIDogJycpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUWicsIGRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHN0YXRlLnN0YWNrLmxlbmd0aCA+IDEwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnN0YWNrLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgJy4uLicsIHN0YXRlLnN0YWNrLnNsaWNlKHN0YXRlLnN0YWNrLmxlbmd0aCAtIDEwKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0YXRlLnN0YWNrLmxlbmd0aCwgc3RhdGUuc3RhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICovXG4gICAgfVxufTtcblxuLypcbiogSW5pdGlhbGl6ZXMgdGhlIHR3aWxpZ2h0IHpvbmUuXG4qXG4qIFRoaXMgaXMgb25seSBkb25lIGlmIGEgU1pQeCBpbnN0cnVjdGlvblxuKiByZWZlcnMgdG8gdGhlIHR3aWxpZ2h0IHpvbmUuXG4qL1xuZnVuY3Rpb24gaW5pdFRab25lKHN0YXRlKVxue1xuICAgIHZhciB0Wm9uZSA9IHN0YXRlLnRab25lID0gbmV3IEFycmF5KHN0YXRlLmdab25lLmxlbmd0aCk7XG5cbiAgICAvLyBubyBpZGVhIGlmIHRoaXMgaXMgYWN0dWFsbHkgY29ycmVjdC4uLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdFpvbmUubGVuZ3RoOyBpKyspXG4gICAge1xuICAgICAgICB0Wm9uZVtpXSA9IG5ldyBIUG9pbnQoMCwgMCk7XG4gICAgfVxufVxuXG4vKlxuKiBTa2lwcyB0aGUgaW5zdHJ1Y3Rpb24gcG9pbnRlciBhaGVhZCBvdmVyIGFuIElGL0VMU0UgYmxvY2suXG4qIGhhbmRsZUVsc2UgLi4gaWYgdHJ1ZSBicmVha3Mgb24gbWF0Y2hpbmcgRUxTRVxuKi9cbmZ1bmN0aW9uIHNraXAoc3RhdGUsIGhhbmRsZUVsc2UpXG57XG4gICAgdmFyIHByb2cgPSBzdGF0ZS5wcm9nO1xuICAgIHZhciBpcCA9IHN0YXRlLmlwO1xuICAgIHZhciBuZXN0aW5nID0gMTtcbiAgICB2YXIgaW5zO1xuXG4gICAgZG8ge1xuICAgICAgICBpbnMgPSBwcm9nWysraXBdO1xuICAgICAgICBpZiAoaW5zID09PSAweDU4KSAvLyBJRlxuICAgICAgICAgICAgeyBuZXN0aW5nKys7IH1cbiAgICAgICAgZWxzZSBpZiAoaW5zID09PSAweDU5KSAvLyBFSUZcbiAgICAgICAgICAgIHsgbmVzdGluZy0tOyB9XG4gICAgICAgIGVsc2UgaWYgKGlucyA9PT0gMHg0MCkgLy8gTlBVU0hCXG4gICAgICAgICAgICB7IGlwICs9IHByb2dbaXAgKyAxXSArIDE7IH1cbiAgICAgICAgZWxzZSBpZiAoaW5zID09PSAweDQxKSAvLyBOUFVTSFdcbiAgICAgICAgICAgIHsgaXAgKz0gMiAqIHByb2dbaXAgKyAxXSArIDE7IH1cbiAgICAgICAgZWxzZSBpZiAoaW5zID49IDB4QjAgJiYgaW5zIDw9IDB4QjcpIC8vIFBVU0hCXG4gICAgICAgICAgICB7IGlwICs9IGlucyAtIDB4QjAgKyAxOyB9XG4gICAgICAgIGVsc2UgaWYgKGlucyA+PSAweEI4ICYmIGlucyA8PSAweEJGKSAvLyBQVVNIV1xuICAgICAgICAgICAgeyBpcCArPSAoaW5zIC0gMHhCOCArIDEpICogMjsgfVxuICAgICAgICBlbHNlIGlmIChoYW5kbGVFbHNlICYmIG5lc3RpbmcgPT09IDEgJiYgaW5zID09PSAweDFCKSAvLyBFTFNFXG4gICAgICAgICAgICB7IGJyZWFrOyB9XG4gICAgfSB3aGlsZSAobmVzdGluZyA+IDApO1xuXG4gICAgc3RhdGUuaXAgPSBpcDtcbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKlxuKiAgICAgICAgICBBbmQgdGhlbiBhIGxvdCBvZiBpbnN0cnVjdGlvbnMuLi4gICAgICAgICAgICAgICAgKlxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4vLyBTVlRDQVthXSBTZXQgZnJlZWRvbSBhbmQgcHJvamVjdGlvbiBWZWN0b3JzIFRvIENvb3JkaW5hdGUgQXhpc1xuLy8gMHgwMC0weDAxXG5mdW5jdGlvbiBTVlRDQSh2LCBzdGF0ZSkge1xuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTVlRDQVsnICsgdi5heGlzICsgJ10nKTsgfVxuXG4gICAgc3RhdGUuZnYgPSBzdGF0ZS5wdiA9IHN0YXRlLmRwdiA9IHY7XG59XG5cbi8vIFNQVlRDQVthXSBTZXQgUHJvamVjdGlvbiBWZWN0b3IgdG8gQ29vcmRpbmF0ZSBBeGlzXG4vLyAweDAyLTB4MDNcbmZ1bmN0aW9uIFNQVlRDQSh2LCBzdGF0ZSkge1xuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTUFZUQ0FbJyArIHYuYXhpcyArICddJyk7IH1cblxuICAgIHN0YXRlLnB2ID0gc3RhdGUuZHB2ID0gdjtcbn1cblxuLy8gU0ZWVENBW2FdIFNldCBGcmVlZG9tIFZlY3RvciB0byBDb29yZGluYXRlIEF4aXNcbi8vIDB4MDQtMHgwNVxuZnVuY3Rpb24gU0ZWVENBKHYsIHN0YXRlKSB7XG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1NGVlRDQVsnICsgdi5heGlzICsgJ10nKTsgfVxuXG4gICAgc3RhdGUuZnYgPSB2O1xufVxuXG4vLyBTUFZUTFthXSBTZXQgUHJvamVjdGlvbiBWZWN0b3IgVG8gTGluZVxuLy8gMHgwNi0weDA3XG5mdW5jdGlvbiBTUFZUTChhLCBzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBwMmkgPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgcDFpID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIHAyID0gc3RhdGUuejJbcDJpXTtcbiAgICB2YXIgcDEgPSBzdGF0ZS56MVtwMWldO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coJ1NQVlRMWycgKyBhICsgJ10nLCBwMmksIHAxaSk7IH1cblxuICAgIHZhciBkeDtcbiAgICB2YXIgZHk7XG5cbiAgICBpZiAoIWEpIHtcbiAgICAgICAgZHggPSBwMS54IC0gcDIueDtcbiAgICAgICAgZHkgPSBwMS55IC0gcDIueTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkeCA9IHAyLnkgLSBwMS55O1xuICAgICAgICBkeSA9IHAxLnggLSBwMi54O1xuICAgIH1cblxuICAgIHN0YXRlLnB2ID0gc3RhdGUuZHB2ID0gZ2V0VW5pdFZlY3RvcihkeCwgZHkpO1xufVxuXG4vLyBTRlZUTFthXSBTZXQgRnJlZWRvbSBWZWN0b3IgVG8gTGluZVxuLy8gMHgwOC0weDA5XG5mdW5jdGlvbiBTRlZUTChhLCBzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBwMmkgPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgcDFpID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIHAyID0gc3RhdGUuejJbcDJpXTtcbiAgICB2YXIgcDEgPSBzdGF0ZS56MVtwMWldO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coJ1NGVlRMWycgKyBhICsgJ10nLCBwMmksIHAxaSk7IH1cblxuICAgIHZhciBkeDtcbiAgICB2YXIgZHk7XG5cbiAgICBpZiAoIWEpIHtcbiAgICAgICAgZHggPSBwMS54IC0gcDIueDtcbiAgICAgICAgZHkgPSBwMS55IC0gcDIueTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkeCA9IHAyLnkgLSBwMS55O1xuICAgICAgICBkeSA9IHAxLnggLSBwMi54O1xuICAgIH1cblxuICAgIHN0YXRlLmZ2ID0gZ2V0VW5pdFZlY3RvcihkeCwgZHkpO1xufVxuXG4vLyBTUFZGU1tdIFNldCBQcm9qZWN0aW9uIFZlY3RvciBGcm9tIFN0YWNrXG4vLyAweDBBXG5mdW5jdGlvbiBTUFZGUyhzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciB5ID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIHggPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTUFZGU1tdJywgeSwgeCk7IH1cblxuICAgIHN0YXRlLnB2ID0gc3RhdGUuZHB2ID0gZ2V0VW5pdFZlY3Rvcih4LCB5KTtcbn1cblxuLy8gU0ZWRlNbXSBTZXQgRnJlZWRvbSBWZWN0b3IgRnJvbSBTdGFja1xuLy8gMHgwQlxuZnVuY3Rpb24gU0ZWRlMoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgeSA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciB4ID0gc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnU1BWRlNbXScsIHksIHgpOyB9XG5cbiAgICBzdGF0ZS5mdiA9IGdldFVuaXRWZWN0b3IoeCwgeSk7XG59XG5cbi8vIEdQVltdIEdldCBQcm9qZWN0aW9uIFZlY3RvclxuLy8gMHgwQ1xuZnVuY3Rpb24gR1BWKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIHB2ID0gc3RhdGUucHY7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnR1BWW10nKTsgfVxuXG4gICAgc3RhY2sucHVzaChwdi54ICogMHg0MDAwKTtcbiAgICBzdGFjay5wdXNoKHB2LnkgKiAweDQwMDApO1xufVxuXG4vLyBHRlZbXSBHZXQgRnJlZWRvbSBWZWN0b3Jcbi8vIDB4MENcbmZ1bmN0aW9uIEdGVihzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBmdiA9IHN0YXRlLmZ2O1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ0dGVltdJyk7IH1cblxuICAgIHN0YWNrLnB1c2goZnYueCAqIDB4NDAwMCk7XG4gICAgc3RhY2sucHVzaChmdi55ICogMHg0MDAwKTtcbn1cblxuLy8gU0ZWVFBWW10gU2V0IEZyZWVkb20gVmVjdG9yIFRvIFByb2plY3Rpb24gVmVjdG9yXG4vLyAweDBFXG5mdW5jdGlvbiBTRlZUUFYoc3RhdGUpIHtcbiAgICBzdGF0ZS5mdiA9IHN0YXRlLnB2O1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1NGVlRQVltdJyk7IH1cbn1cblxuLy8gSVNFQ1RbXSBtb3ZlcyBwb2ludCBwIHRvIHRoZSBJbnRlclNFQ1Rpb24gb2YgdHdvIGxpbmVzXG4vLyAweDBGXG5mdW5jdGlvbiBJU0VDVChzdGF0ZSlcbntcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgcGEwaSA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBwYTFpID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIHBiMGkgPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgcGIxaSA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBwaSA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciB6MCA9IHN0YXRlLnowO1xuICAgIHZhciB6MSA9IHN0YXRlLnoxO1xuICAgIHZhciBwYTAgPSB6MFtwYTBpXTtcbiAgICB2YXIgcGExID0gejBbcGExaV07XG4gICAgdmFyIHBiMCA9IHoxW3BiMGldO1xuICAgIHZhciBwYjEgPSB6MVtwYjFpXTtcbiAgICB2YXIgcCA9IHN0YXRlLnoyW3BpXTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKCdJU0VDVFtdLCAnLCBwYTBpLCBwYTFpLCBwYjBpLCBwYjFpLCBwaSk7IH1cblxuICAgIC8vIG1hdGggZnJvbVxuICAgIC8vIGVuLndpa2lwZWRpYS5vcmcvd2lraS9MaW5lJUUyJTgwJTkzbGluZV9pbnRlcnNlY3Rpb24jR2l2ZW5fdHdvX3BvaW50c19vbl9lYWNoX2xpbmVcblxuICAgIHZhciB4MSA9IHBhMC54O1xuICAgIHZhciB5MSA9IHBhMC55O1xuICAgIHZhciB4MiA9IHBhMS54O1xuICAgIHZhciB5MiA9IHBhMS55O1xuICAgIHZhciB4MyA9IHBiMC54O1xuICAgIHZhciB5MyA9IHBiMC55O1xuICAgIHZhciB4NCA9IHBiMS54O1xuICAgIHZhciB5NCA9IHBiMS55O1xuXG4gICAgdmFyIGRpdiA9ICh4MSAtIHgyKSAqICh5MyAtIHk0KSAtICh5MSAtIHkyKSAqICh4MyAtIHg0KTtcbiAgICB2YXIgZjEgPSB4MSAqIHkyIC0geTEgKiB4MjtcbiAgICB2YXIgZjIgPSB4MyAqIHk0IC0geTMgKiB4NDtcblxuICAgIHAueCA9IChmMSAqICh4MyAtIHg0KSAtIGYyICogKHgxIC0geDIpKSAvIGRpdjtcbiAgICBwLnkgPSAoZjEgKiAoeTMgLSB5NCkgLSBmMiAqICh5MSAtIHkyKSkgLyBkaXY7XG59XG5cbi8vIFNSUDBbXSBTZXQgUmVmZXJlbmNlIFBvaW50IDBcbi8vIDB4MTBcbmZ1bmN0aW9uIFNSUDAoc3RhdGUpIHtcbiAgICBzdGF0ZS5ycDAgPSBzdGF0ZS5zdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTUlAwW10nLCBzdGF0ZS5ycDApOyB9XG59XG5cbi8vIFNSUDFbXSBTZXQgUmVmZXJlbmNlIFBvaW50IDFcbi8vIDB4MTFcbmZ1bmN0aW9uIFNSUDEoc3RhdGUpIHtcbiAgICBzdGF0ZS5ycDEgPSBzdGF0ZS5zdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTUlAxW10nLCBzdGF0ZS5ycDEpOyB9XG59XG5cbi8vIFNSUDFbXSBTZXQgUmVmZXJlbmNlIFBvaW50IDJcbi8vIDB4MTJcbmZ1bmN0aW9uIFNSUDIoc3RhdGUpIHtcbiAgICBzdGF0ZS5ycDIgPSBzdGF0ZS5zdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTUlAyW10nLCBzdGF0ZS5ycDIpOyB9XG59XG5cbi8vIFNaUDBbXSBTZXQgWm9uZSBQb2ludGVyIDBcbi8vIDB4MTNcbmZ1bmN0aW9uIFNaUDAoc3RhdGUpIHtcbiAgICB2YXIgbiA9IHN0YXRlLnN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1NaUDBbXScsIG4pOyB9XG5cbiAgICBzdGF0ZS56cDAgPSBuO1xuXG4gICAgc3dpdGNoIChuKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGlmICghc3RhdGUudFpvbmUpIHsgaW5pdFRab25lKHN0YXRlKTsgfVxuICAgICAgICAgICAgc3RhdGUuejAgPSBzdGF0ZS50Wm9uZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEgOlxuICAgICAgICAgICAgc3RhdGUuejAgPSBzdGF0ZS5nWm9uZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB6b25lIHBvaW50ZXInKTtcbiAgICB9XG59XG5cbi8vIFNaUDFbXSBTZXQgWm9uZSBQb2ludGVyIDFcbi8vIDB4MTRcbmZ1bmN0aW9uIFNaUDEoc3RhdGUpIHtcbiAgICB2YXIgbiA9IHN0YXRlLnN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1NaUDFbXScsIG4pOyB9XG5cbiAgICBzdGF0ZS56cDEgPSBuO1xuXG4gICAgc3dpdGNoIChuKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGlmICghc3RhdGUudFpvbmUpIHsgaW5pdFRab25lKHN0YXRlKTsgfVxuICAgICAgICAgICAgc3RhdGUuejEgPSBzdGF0ZS50Wm9uZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEgOlxuICAgICAgICAgICAgc3RhdGUuejEgPSBzdGF0ZS5nWm9uZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB6b25lIHBvaW50ZXInKTtcbiAgICB9XG59XG5cbi8vIFNaUDJbXSBTZXQgWm9uZSBQb2ludGVyIDJcbi8vIDB4MTVcbmZ1bmN0aW9uIFNaUDIoc3RhdGUpIHtcbiAgICB2YXIgbiA9IHN0YXRlLnN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1NaUDJbXScsIG4pOyB9XG5cbiAgICBzdGF0ZS56cDIgPSBuO1xuXG4gICAgc3dpdGNoIChuKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGlmICghc3RhdGUudFpvbmUpIHsgaW5pdFRab25lKHN0YXRlKTsgfVxuICAgICAgICAgICAgc3RhdGUuejIgPSBzdGF0ZS50Wm9uZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEgOlxuICAgICAgICAgICAgc3RhdGUuejIgPSBzdGF0ZS5nWm9uZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB6b25lIHBvaW50ZXInKTtcbiAgICB9XG59XG5cbi8vIFNaUFNbXSBTZXQgWm9uZSBQb2ludGVyU1xuLy8gMHgxNlxuZnVuY3Rpb24gU1pQUyhzdGF0ZSkge1xuICAgIHZhciBuID0gc3RhdGUuc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnU1pQU1tdJywgbik7IH1cblxuICAgIHN0YXRlLnpwMCA9IHN0YXRlLnpwMSA9IHN0YXRlLnpwMiA9IG47XG5cbiAgICBzd2l0Y2ggKG4pIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgaWYgKCFzdGF0ZS50Wm9uZSkgeyBpbml0VFpvbmUoc3RhdGUpOyB9XG4gICAgICAgICAgICBzdGF0ZS56MCA9IHN0YXRlLnoxID0gc3RhdGUuejIgPSBzdGF0ZS50Wm9uZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEgOlxuICAgICAgICAgICAgc3RhdGUuejAgPSBzdGF0ZS56MSA9IHN0YXRlLnoyID0gc3RhdGUuZ1pvbmU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdCA6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgem9uZSBwb2ludGVyJyk7XG4gICAgfVxufVxuXG4vLyBTTE9PUFtdIFNldCBMT09QIHZhcmlhYmxlXG4vLyAweDE3XG5mdW5jdGlvbiBTTE9PUChzdGF0ZSkge1xuICAgIHN0YXRlLmxvb3AgPSBzdGF0ZS5zdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTTE9PUFtdJywgc3RhdGUubG9vcCk7IH1cbn1cblxuLy8gUlRHW10gUm91bmQgVG8gR3JpZFxuLy8gMHgxOFxuZnVuY3Rpb24gUlRHKHN0YXRlKSB7XG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1JUR1tdJyk7IH1cblxuICAgIHN0YXRlLnJvdW5kID0gcm91bmRUb0dyaWQ7XG59XG5cbi8vIFJUSEdbXSBSb3VuZCBUbyBIYWxmIEdyaWRcbi8vIDB4MTlcbmZ1bmN0aW9uIFJUSEcoc3RhdGUpIHtcbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnUlRIR1tdJyk7IH1cblxuICAgIHN0YXRlLnJvdW5kID0gcm91bmRUb0hhbGZHcmlkO1xufVxuXG4vLyBTTURbXSBTZXQgTWluaW11bSBEaXN0YW5jZVxuLy8gMHgxQVxuZnVuY3Rpb24gU01EKHN0YXRlKSB7XG4gICAgdmFyIGQgPSBzdGF0ZS5zdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTTURbXScsIGQpOyB9XG5cbiAgICBzdGF0ZS5taW5EaXMgPSBkIC8gMHg0MDtcbn1cblxuLy8gRUxTRVtdIEVMU0UgY2xhdXNlXG4vLyAweDFCXG5mdW5jdGlvbiBFTFNFKHN0YXRlKSB7XG4gICAgLy8gVGhpcyBpbnN0cnVjdGlvbiBoYXMgYmVlbiByZWFjaGVkIGJ5IGV4ZWN1dGluZyBhIHRoZW4gYnJhbmNoXG4gICAgLy8gc28gaXQganVzdCBza2lwcyBhaGVhZCB1bnRpbCBtYXRjaGluZyBFSUYuXG4gICAgLy9cbiAgICAvLyBJbiBjYXNlIHRoZSBJRiB3YXMgbmVnYXRpdmUgdGhlIElGW10gaW5zdHJ1Y3Rpb24gYWxyZWFkeVxuICAgIC8vIHNraXBwZWQgZm9yd2FyZCBvdmVyIHRoZSBFTFNFW11cblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdFTFNFW10nKTsgfVxuXG4gICAgc2tpcChzdGF0ZSwgZmFsc2UpO1xufVxuXG4vLyBKTVBSW10gSnVNUCBSZWxhdGl2ZVxuLy8gMHgxQ1xuZnVuY3Rpb24gSk1QUihzdGF0ZSkge1xuICAgIHZhciBvID0gc3RhdGUuc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnSk1QUltdJywgbyk7IH1cblxuICAgIC8vIEEganVtcCBieSAxIHdvdWxkIGRvIG5vdGhpbmcuXG4gICAgc3RhdGUuaXAgKz0gbyAtIDE7XG59XG5cbi8vIFNDVlRDSVtdIFNldCBDb250cm9sIFZhbHVlIFRhYmxlIEN1dC1JblxuLy8gMHgxRFxuZnVuY3Rpb24gU0NWVENJKHN0YXRlKSB7XG4gICAgdmFyIG4gPSBzdGF0ZS5zdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTQ1ZUQ0lbXScsIG4pOyB9XG5cbiAgICBzdGF0ZS5jdkN1dEluID0gbiAvIDB4NDA7XG59XG5cbi8vIERVUFtdIERVUGxpY2F0ZSB0b3Agc3RhY2sgZWxlbWVudFxuLy8gMHgyMFxuZnVuY3Rpb24gRFVQKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnRFVQW10nKTsgfVxuXG4gICAgc3RhY2sucHVzaChzdGFja1tzdGFjay5sZW5ndGggLSAxXSk7XG59XG5cbi8vIFBPUFtdIFBPUCB0b3Agc3RhY2sgZWxlbWVudFxuLy8gMHgyMVxuZnVuY3Rpb24gUE9QKHN0YXRlKSB7XG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1BPUFtdJyk7IH1cblxuICAgIHN0YXRlLnN0YWNrLnBvcCgpO1xufVxuXG4vLyBDTEVBUltdIENMRUFSIHRoZSBzdGFja1xuLy8gMHgyMlxuZnVuY3Rpb24gQ0xFQVIoc3RhdGUpIHtcbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnQ0xFQVJbXScpOyB9XG5cbiAgICBzdGF0ZS5zdGFjay5sZW5ndGggPSAwO1xufVxuXG4vLyBTV0FQW10gU1dBUCB0aGUgdG9wIHR3byBlbGVtZW50cyBvbiB0aGUgc3RhY2tcbi8vIDB4MjNcbmZ1bmN0aW9uIFNXQVAoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcblxuICAgIHZhciBhID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIGIgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTV0FQW10nKTsgfVxuXG4gICAgc3RhY2sucHVzaChhKTtcbiAgICBzdGFjay5wdXNoKGIpO1xufVxuXG4vLyBERVBUSFtdIERFUFRIIG9mIHRoZSBzdGFja1xuLy8gMHgyNFxuZnVuY3Rpb24gREVQVEgoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdERVBUSFtdJyk7IH1cblxuICAgIHN0YWNrLnB1c2goc3RhY2subGVuZ3RoKTtcbn1cblxuLy8gTE9PUENBTExbXSBMT09QQ0FMTCBmdW5jdGlvblxuLy8gMHgyQVxuZnVuY3Rpb24gTE9PUENBTEwoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgZm4gPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgYyA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ0xPT1BDQUxMW10nLCBmbiwgYyk7IH1cblxuICAgIC8vIHNhdmVzIGNhbGxlcnMgcHJvZ3JhbVxuICAgIHZhciBjaXAgPSBzdGF0ZS5pcDtcbiAgICB2YXIgY3Byb2cgPSBzdGF0ZS5wcm9nO1xuXG4gICAgc3RhdGUucHJvZyA9IHN0YXRlLmZ1bmNzW2ZuXTtcblxuICAgIC8vIGV4ZWN1dGVzIHRoZSBmdW5jdGlvblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYzsgaSsrKSB7XG4gICAgICAgIGV4ZWMoc3RhdGUpO1xuXG4gICAgICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgKytzdGF0ZS5zdGVwLFxuICAgICAgICAgICAgaSArIDEgPCBjID8gJ25leHQgbG9vcGNhbGwnIDogJ2RvbmUgbG9vcGNhbGwnLFxuICAgICAgICAgICAgaVxuICAgICAgICApOyB9XG4gICAgfVxuXG4gICAgLy8gcmVzdG9yZXMgdGhlIGNhbGxlcnMgcHJvZ3JhbVxuICAgIHN0YXRlLmlwID0gY2lwO1xuICAgIHN0YXRlLnByb2cgPSBjcHJvZztcbn1cblxuLy8gQ0FMTFtdIENBTEwgZnVuY3Rpb25cbi8vIDB4MkJcbmZ1bmN0aW9uIENBTEwoc3RhdGUpIHtcbiAgICB2YXIgZm4gPSBzdGF0ZS5zdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdDQUxMW10nLCBmbik7IH1cblxuICAgIC8vIHNhdmVzIGNhbGxlcnMgcHJvZ3JhbVxuICAgIHZhciBjaXAgPSBzdGF0ZS5pcDtcbiAgICB2YXIgY3Byb2cgPSBzdGF0ZS5wcm9nO1xuXG4gICAgc3RhdGUucHJvZyA9IHN0YXRlLmZ1bmNzW2ZuXTtcblxuICAgIC8vIGV4ZWN1dGVzIHRoZSBmdW5jdGlvblxuICAgIGV4ZWMoc3RhdGUpO1xuXG4gICAgLy8gcmVzdG9yZXMgdGhlIGNhbGxlcnMgcHJvZ3JhbVxuICAgIHN0YXRlLmlwID0gY2lwO1xuICAgIHN0YXRlLnByb2cgPSBjcHJvZztcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKCsrc3RhdGUuc3RlcCwgJ3JldHVybmluZyBmcm9tJywgZm4pOyB9XG59XG5cbi8vIENJTkRFWFtdIENvcHkgdGhlIElOREVYZWQgZWxlbWVudCB0byB0aGUgdG9wIG9mIHRoZSBzdGFja1xuLy8gMHgyNVxuZnVuY3Rpb24gQ0lOREVYKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIGsgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdDSU5ERVhbXScsIGspOyB9XG5cbiAgICAvLyBJbiBjYXNlIG9mIGsgPT0gMSwgaXQgY29waWVzIHRoZSBsYXN0IGVsZW1lbnQgYWZ0ZXIgcG9wcGluZ1xuICAgIC8vIHRodXMgc3RhY2subGVuZ3RoIC0gay5cbiAgICBzdGFjay5wdXNoKHN0YWNrW3N0YWNrLmxlbmd0aCAtIGtdKTtcbn1cblxuLy8gTUlOREVYW10gTW92ZSB0aGUgSU5ERVhlZCBlbGVtZW50IHRvIHRoZSB0b3Agb2YgdGhlIHN0YWNrXG4vLyAweDI2XG5mdW5jdGlvbiBNSU5ERVgoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgayA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ01JTkRFWFtdJywgayk7IH1cblxuICAgIHN0YWNrLnB1c2goc3RhY2suc3BsaWNlKHN0YWNrLmxlbmd0aCAtIGssIDEpWzBdKTtcbn1cblxuLy8gRkRFRltdIEZ1bmN0aW9uIERFRmluaXRpb25cbi8vIDB4MkNcbmZ1bmN0aW9uIEZERUYoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUuZW52ICE9PSAnZnBnbScpIHsgdGhyb3cgbmV3IEVycm9yKCdGREVGIG5vdCBhbGxvd2VkIGhlcmUnKTsgfVxuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBwcm9nID0gc3RhdGUucHJvZztcbiAgICB2YXIgaXAgPSBzdGF0ZS5pcDtcblxuICAgIHZhciBmbiA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBpcEJlZ2luID0gaXA7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnRkRFRltdJywgZm4pOyB9XG5cbiAgICB3aGlsZSAocHJvZ1srK2lwXSAhPT0gMHgyRCl7IH1cblxuICAgIHN0YXRlLmlwID0gaXA7XG4gICAgc3RhdGUuZnVuY3NbZm5dID0gcHJvZy5zbGljZShpcEJlZ2luICsgMSwgaXApO1xufVxuXG4vLyBNREFQW2FdIE1vdmUgRGlyZWN0IEFic29sdXRlIFBvaW50XG4vLyAweDJFLTB4MkZcbmZ1bmN0aW9uIE1EQVAocm91bmQsIHN0YXRlKSB7XG4gICAgdmFyIHBpID0gc3RhdGUuc3RhY2sucG9wKCk7XG4gICAgdmFyIHAgPSBzdGF0ZS56MFtwaV07XG4gICAgdmFyIGZ2ID0gc3RhdGUuZnY7XG4gICAgdmFyIHB2ID0gc3RhdGUucHY7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnTURBUFsnICsgcm91bmQgKyAnXScsIHBpKTsgfVxuXG4gICAgdmFyIGQgPSBwdi5kaXN0YW5jZShwLCBIUFplcm8pO1xuXG4gICAgaWYgKHJvdW5kKSB7IGQgPSBzdGF0ZS5yb3VuZChkKTsgfVxuXG4gICAgZnYuc2V0UmVsYXRpdmUocCwgSFBaZXJvLCBkLCBwdik7XG4gICAgZnYudG91Y2gocCk7XG5cbiAgICBzdGF0ZS5ycDAgPSBzdGF0ZS5ycDEgPSBwaTtcbn1cblxuLy8gSVVQW2FdIEludGVycG9sYXRlIFVudG91Y2hlZCBQb2ludHMgdGhyb3VnaCB0aGUgb3V0bGluZVxuLy8gMHgzMFxuZnVuY3Rpb24gSVVQKHYsIHN0YXRlKSB7XG4gICAgdmFyIHoyID0gc3RhdGUuejI7XG4gICAgdmFyIHBMZW4gPSB6Mi5sZW5ndGggLSAyO1xuICAgIHZhciBjcDtcbiAgICB2YXIgcHA7XG4gICAgdmFyIG5wO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ0lVUFsnICsgdi5heGlzICsgJ10nKTsgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwTGVuOyBpKyspIHtcbiAgICAgICAgY3AgPSB6MltpXTsgLy8gY3VycmVudCBwb2ludFxuXG4gICAgICAgIC8vIGlmIHRoaXMgcG9pbnQgaGFzIGJlZW4gdG91Y2hlZCBnbyBvblxuICAgICAgICBpZiAodi50b3VjaGVkKGNwKSkgeyBjb250aW51ZTsgfVxuXG4gICAgICAgIHBwID0gY3AucHJldlRvdWNoZWQodik7XG5cbiAgICAgICAgLy8gbm8gcG9pbnQgb24gdGhlIGNvbnRvdXIgaGFzIGJlZW4gdG91Y2hlZD9cbiAgICAgICAgaWYgKHBwID09PSBjcCkgeyBjb250aW51ZTsgfVxuXG4gICAgICAgIG5wID0gY3AubmV4dFRvdWNoZWQodik7XG5cbiAgICAgICAgaWYgKHBwID09PSBucCkge1xuICAgICAgICAgICAgLy8gb25seSBvbmUgcG9pbnQgb24gdGhlIGNvbnRvdXIgaGFzIGJlZW4gdG91Y2hlZFxuICAgICAgICAgICAgLy8gc28gc2ltcGx5IG1vdmVzIHRoZSBwb2ludCBsaWtlIHRoYXRcblxuICAgICAgICAgICAgdi5zZXRSZWxhdGl2ZShjcCwgY3AsIHYuZGlzdGFuY2UocHAsIHBwLCBmYWxzZSwgdHJ1ZSksIHYsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdi5pbnRlcnBvbGF0ZShjcCwgcHAsIG5wLCB2KTtcbiAgICB9XG59XG5cbi8vIFNIUFtdIFNIaWZ0IFBvaW50IHVzaW5nIHJlZmVyZW5jZSBwb2ludFxuLy8gMHgzMi0weDMzXG5mdW5jdGlvbiBTSFAoYSwgc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgcnBpID0gYSA/IHN0YXRlLnJwMSA6IHN0YXRlLnJwMjtcbiAgICB2YXIgcnAgPSAoYSA/IHN0YXRlLnowIDogc3RhdGUuejEpW3JwaV07XG4gICAgdmFyIGZ2ID0gc3RhdGUuZnY7XG4gICAgdmFyIHB2ID0gc3RhdGUucHY7XG4gICAgdmFyIGxvb3AgPSBzdGF0ZS5sb29wO1xuICAgIHZhciB6MiA9IHN0YXRlLnoyO1xuXG4gICAgd2hpbGUgKGxvb3AtLSlcbiAgICB7XG4gICAgICAgIHZhciBwaSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICB2YXIgcCA9IHoyW3BpXTtcblxuICAgICAgICB2YXIgZCA9IHB2LmRpc3RhbmNlKHJwLCBycCwgZmFsc2UsIHRydWUpO1xuICAgICAgICBmdi5zZXRSZWxhdGl2ZShwLCBwLCBkLCBwdik7XG4gICAgICAgIGZ2LnRvdWNoKHApO1xuXG4gICAgICAgIGlmIChleHBvcnRzLkRFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBzdGF0ZS5zdGVwLFxuICAgICAgICAgICAgICAgIChzdGF0ZS5sb29wID4gMSA/XG4gICAgICAgICAgICAgICAgICAgJ2xvb3AgJyArIChzdGF0ZS5sb29wIC0gbG9vcCkgKyAnOiAnIDpcbiAgICAgICAgICAgICAgICAgICAnJ1xuICAgICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAgICdTSFBbJyArIChhID8gJ3JwMScgOiAncnAyJykgKyAnXScsIHBpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGUubG9vcCA9IDE7XG59XG5cbi8vIFNIQ1tdIFNIaWZ0IENvbnRvdXIgdXNpbmcgcmVmZXJlbmNlIHBvaW50XG4vLyAweDM2LTB4MzdcbmZ1bmN0aW9uIFNIQyhhLCBzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBycGkgPSBhID8gc3RhdGUucnAxIDogc3RhdGUucnAyO1xuICAgIHZhciBycCA9IChhID8gc3RhdGUuejAgOiBzdGF0ZS56MSlbcnBpXTtcbiAgICB2YXIgZnYgPSBzdGF0ZS5mdjtcbiAgICB2YXIgcHYgPSBzdGF0ZS5wdjtcbiAgICB2YXIgY2kgPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgc3AgPSBzdGF0ZS56MltzdGF0ZS5jb250b3Vyc1tjaV1dO1xuICAgIHZhciBwID0gc3A7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnU0hDWycgKyBhICsgJ10nLCBjaSk7IH1cblxuICAgIHZhciBkID0gcHYuZGlzdGFuY2UocnAsIHJwLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgICBkbyB7XG4gICAgICAgIGlmIChwICE9PSBycCkgeyBmdi5zZXRSZWxhdGl2ZShwLCBwLCBkLCBwdik7IH1cbiAgICAgICAgcCA9IHAubmV4dFBvaW50T25Db250b3VyO1xuICAgIH0gd2hpbGUgKHAgIT09IHNwKTtcbn1cblxuLy8gU0haW10gU0hpZnQgWm9uZSB1c2luZyByZWZlcmVuY2UgcG9pbnRcbi8vIDB4MzYtMHgzN1xuZnVuY3Rpb24gU0haKGEsIHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIHJwaSA9IGEgPyBzdGF0ZS5ycDEgOiBzdGF0ZS5ycDI7XG4gICAgdmFyIHJwID0gKGEgPyBzdGF0ZS56MCA6IHN0YXRlLnoxKVtycGldO1xuICAgIHZhciBmdiA9IHN0YXRlLmZ2O1xuICAgIHZhciBwdiA9IHN0YXRlLnB2O1xuXG4gICAgdmFyIGUgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTSFpbJyArIGEgKyAnXScsIGUpOyB9XG5cbiAgICB2YXIgejtcbiAgICBzd2l0Y2ggKGUpIHtcbiAgICAgICAgY2FzZSAwIDogeiA9IHN0YXRlLnRab25lOyBicmVhaztcbiAgICAgICAgY2FzZSAxIDogeiA9IHN0YXRlLmdab25lOyBicmVhaztcbiAgICAgICAgZGVmYXVsdCA6IHRocm93IG5ldyBFcnJvcignSW52YWxpZCB6b25lJyk7XG4gICAgfVxuXG4gICAgdmFyIHA7XG4gICAgdmFyIGQgPSBwdi5kaXN0YW5jZShycCwgcnAsIGZhbHNlLCB0cnVlKTtcbiAgICB2YXIgcExlbiA9IHoubGVuZ3RoIC0gMjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBMZW47IGkrKylcbiAgICB7XG4gICAgICAgIHAgPSB6W2ldO1xuICAgICAgICBmdi5zZXRSZWxhdGl2ZShwLCBwLCBkLCBwdik7XG4gICAgICAgIC8vaWYgKHAgIT09IHJwKSBmdi5zZXRSZWxhdGl2ZShwLCBwLCBkLCBwdik7XG4gICAgfVxufVxuXG4vLyBTSFBJWFtdIFNIaWZ0IHBvaW50IGJ5IGEgUElYZWwgYW1vdW50XG4vLyAweDM4XG5mdW5jdGlvbiBTSFBJWChzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBsb29wID0gc3RhdGUubG9vcDtcbiAgICB2YXIgZnYgPSBzdGF0ZS5mdjtcbiAgICB2YXIgZCA9IHN0YWNrLnBvcCgpIC8gMHg0MDtcbiAgICB2YXIgejIgPSBzdGF0ZS56MjtcblxuICAgIHdoaWxlIChsb29wLS0pIHtcbiAgICAgICAgdmFyIHBpID0gc3RhY2sucG9wKCk7XG4gICAgICAgIHZhciBwID0gejJbcGldO1xuXG4gICAgICAgIGlmIChleHBvcnRzLkRFQlVHKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBzdGF0ZS5zdGVwLFxuICAgICAgICAgICAgICAgIChzdGF0ZS5sb29wID4gMSA/ICdsb29wICcgKyAoc3RhdGUubG9vcCAtIGxvb3ApICsgJzogJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgJ1NIUElYW10nLCBwaSwgZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ2LnNldFJlbGF0aXZlKHAsIHAsIGQpO1xuICAgICAgICBmdi50b3VjaChwKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5sb29wID0gMTtcbn1cblxuLy8gSVBbXSBJbnRlcnBvbGF0ZSBQb2ludFxuLy8gMHgzOVxuZnVuY3Rpb24gSVAoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgcnAxaSA9IHN0YXRlLnJwMTtcbiAgICB2YXIgcnAyaSA9IHN0YXRlLnJwMjtcbiAgICB2YXIgbG9vcCA9IHN0YXRlLmxvb3A7XG4gICAgdmFyIHJwMSA9IHN0YXRlLnowW3JwMWldO1xuICAgIHZhciBycDIgPSBzdGF0ZS56MVtycDJpXTtcbiAgICB2YXIgZnYgPSBzdGF0ZS5mdjtcbiAgICB2YXIgcHYgPSBzdGF0ZS5kcHY7XG4gICAgdmFyIHoyID0gc3RhdGUuejI7XG5cbiAgICB3aGlsZSAobG9vcC0tKSB7XG4gICAgICAgIHZhciBwaSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICB2YXIgcCA9IHoyW3BpXTtcblxuICAgICAgICBpZiAoZXhwb3J0cy5ERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgc3RhdGUuc3RlcCxcbiAgICAgICAgICAgICAgICAoc3RhdGUubG9vcCA+IDEgPyAnbG9vcCAnICsgKHN0YXRlLmxvb3AgLSBsb29wKSArICc6ICcgOiAnJykgK1xuICAgICAgICAgICAgICAgICdJUFtdJywgcGksIHJwMWksICc8LT4nLCBycDJpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnYuaW50ZXJwb2xhdGUocCwgcnAxLCBycDIsIHB2KTtcblxuICAgICAgICBmdi50b3VjaChwKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5sb29wID0gMTtcbn1cblxuLy8gTVNJUlBbYV0gTW92ZSBTdGFjayBJbmRpcmVjdCBSZWxhdGl2ZSBQb2ludFxuLy8gMHgzQS0weDNCXG5mdW5jdGlvbiBNU0lSUChhLCBzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBkID0gc3RhY2sucG9wKCkgLyA2NDtcbiAgICB2YXIgcGkgPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgcCA9IHN0YXRlLnoxW3BpXTtcbiAgICB2YXIgcnAwID0gc3RhdGUuejBbc3RhdGUucnAwXTtcbiAgICB2YXIgZnYgPSBzdGF0ZS5mdjtcbiAgICB2YXIgcHYgPSBzdGF0ZS5wdjtcblxuICAgIGZ2LnNldFJlbGF0aXZlKHAsIHJwMCwgZCwgcHYpO1xuICAgIGZ2LnRvdWNoKHApO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ01TSVJQWycgKyBhICsgJ10nLCBkLCBwaSk7IH1cblxuICAgIHN0YXRlLnJwMSA9IHN0YXRlLnJwMDtcbiAgICBzdGF0ZS5ycDIgPSBwaTtcbiAgICBpZiAoYSkgeyBzdGF0ZS5ycDAgPSBwaTsgfVxufVxuXG4vLyBBTElHTlJQW10gQWxpZ24gdG8gcmVmZXJlbmNlIHBvaW50LlxuLy8gMHgzQ1xuZnVuY3Rpb24gQUxJR05SUChzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBycDBpID0gc3RhdGUucnAwO1xuICAgIHZhciBycDAgPSBzdGF0ZS56MFtycDBpXTtcbiAgICB2YXIgbG9vcCA9IHN0YXRlLmxvb3A7XG4gICAgdmFyIGZ2ID0gc3RhdGUuZnY7XG4gICAgdmFyIHB2ID0gc3RhdGUucHY7XG4gICAgdmFyIHoxID0gc3RhdGUuejE7XG5cbiAgICB3aGlsZSAobG9vcC0tKSB7XG4gICAgICAgIHZhciBwaSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICB2YXIgcCA9IHoxW3BpXTtcblxuICAgICAgICBpZiAoZXhwb3J0cy5ERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgc3RhdGUuc3RlcCxcbiAgICAgICAgICAgICAgICAoc3RhdGUubG9vcCA+IDEgPyAnbG9vcCAnICsgKHN0YXRlLmxvb3AgLSBsb29wKSArICc6ICcgOiAnJykgK1xuICAgICAgICAgICAgICAgICdBTElHTlJQW10nLCBwaVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ2LnNldFJlbGF0aXZlKHAsIHJwMCwgMCwgcHYpO1xuICAgICAgICBmdi50b3VjaChwKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5sb29wID0gMTtcbn1cblxuLy8gUlRHW10gUm91bmQgVG8gRG91YmxlIEdyaWRcbi8vIDB4M0RcbmZ1bmN0aW9uIFJUREcoc3RhdGUpIHtcbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnUlRER1tdJyk7IH1cblxuICAgIHN0YXRlLnJvdW5kID0gcm91bmRUb0RvdWJsZUdyaWQ7XG59XG5cbi8vIE1JQVBbYV0gTW92ZSBJbmRpcmVjdCBBYnNvbHV0ZSBQb2ludFxuLy8gMHgzRS0weDNGXG5mdW5jdGlvbiBNSUFQKHJvdW5kLCBzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBuID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIHBpID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIHAgPSBzdGF0ZS56MFtwaV07XG4gICAgdmFyIGZ2ID0gc3RhdGUuZnY7XG4gICAgdmFyIHB2ID0gc3RhdGUucHY7XG4gICAgdmFyIGN2ID0gc3RhdGUuY3Z0W25dO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBzdGF0ZS5zdGVwLFxuICAgICAgICAgICAgJ01JQVBbJyArIHJvdW5kICsgJ10nLFxuICAgICAgICAgICAgbiwgJygnLCBjdiwgJyknLCBwaVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBkID0gcHYuZGlzdGFuY2UocCwgSFBaZXJvKTtcblxuICAgIGlmIChyb3VuZCkge1xuICAgICAgICBpZiAoTWF0aC5hYnMoZCAtIGN2KSA8IHN0YXRlLmN2Q3V0SW4pIHsgZCA9IGN2OyB9XG5cbiAgICAgICAgZCA9IHN0YXRlLnJvdW5kKGQpO1xuICAgIH1cblxuICAgIGZ2LnNldFJlbGF0aXZlKHAsIEhQWmVybywgZCwgcHYpO1xuXG4gICAgaWYgKHN0YXRlLnpwMCA9PT0gMCkge1xuICAgICAgICBwLnhvID0gcC54O1xuICAgICAgICBwLnlvID0gcC55O1xuICAgIH1cblxuICAgIGZ2LnRvdWNoKHApO1xuXG4gICAgc3RhdGUucnAwID0gc3RhdGUucnAxID0gcGk7XG59XG5cbi8vIE5QVVNCW10gUFVTSCBOIEJ5dGVzXG4vLyAweDQwXG5mdW5jdGlvbiBOUFVTSEIoc3RhdGUpIHtcbiAgICB2YXIgcHJvZyA9IHN0YXRlLnByb2c7XG4gICAgdmFyIGlwID0gc3RhdGUuaXA7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG5cbiAgICB2YXIgbiA9IHByb2dbKytpcF07XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnTlBVU0hCW10nLCBuKTsgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHsgc3RhY2sucHVzaChwcm9nWysraXBdKTsgfVxuXG4gICAgc3RhdGUuaXAgPSBpcDtcbn1cblxuLy8gTlBVU0hXW10gUFVTSCBOIFdvcmRzXG4vLyAweDQxXG5mdW5jdGlvbiBOUFVTSFcoc3RhdGUpIHtcbiAgICB2YXIgaXAgPSBzdGF0ZS5pcDtcbiAgICB2YXIgcHJvZyA9IHN0YXRlLnByb2c7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIG4gPSBwcm9nWysraXBdO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ05QVVNIV1tdJywgbik7IH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gKHByb2dbKytpcF0gPDwgOCkgfCBwcm9nWysraXBdO1xuICAgICAgICBpZiAodyAmIDB4ODAwMCkgeyB3ID0gLSgodyBeIDB4ZmZmZikgKyAxKTsgfVxuICAgICAgICBzdGFjay5wdXNoKHcpO1xuICAgIH1cblxuICAgIHN0YXRlLmlwID0gaXA7XG59XG5cbi8vIFdTW10gV3JpdGUgU3RvcmVcbi8vIDB4NDJcbmZ1bmN0aW9uIFdTKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIHN0b3JlID0gc3RhdGUuc3RvcmU7XG5cbiAgICBpZiAoIXN0b3JlKSB7IHN0b3JlID0gc3RhdGUuc3RvcmUgPSBbXTsgfVxuXG4gICAgdmFyIHYgPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgbCA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1dTJywgdiwgbCk7IH1cblxuICAgIHN0b3JlW2xdID0gdjtcbn1cblxuLy8gUlNbXSBSZWFkIFN0b3JlXG4vLyAweDQzXG5mdW5jdGlvbiBSUyhzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBzdG9yZSA9IHN0YXRlLnN0b3JlO1xuXG4gICAgdmFyIGwgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdSUycsIGwpOyB9XG5cbiAgICB2YXIgdiA9IChzdG9yZSAmJiBzdG9yZVtsXSkgfHwgMDtcblxuICAgIHN0YWNrLnB1c2godik7XG59XG5cbi8vIFdDVlRQW10gV3JpdGUgQ29udHJvbCBWYWx1ZSBUYWJsZSBpbiBQaXhlbCB1bml0c1xuLy8gMHg0NFxuZnVuY3Rpb24gV0NWVFAoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcblxuICAgIHZhciB2ID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIGwgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdXQ1ZUUCcsIHYsIGwpOyB9XG5cbiAgICBzdGF0ZS5jdnRbbF0gPSB2IC8gMHg0MDtcbn1cblxuLy8gUkNWVFtdIFJlYWQgQ29udHJvbCBWYWx1ZSBUYWJsZSBlbnRyeVxuLy8gMHg0NVxuZnVuY3Rpb24gUkNWVChzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBjdnRlID0gc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnUkNWVCcsIGN2dGUpOyB9XG5cbiAgICBzdGFjay5wdXNoKHN0YXRlLmN2dFtjdnRlXSAqIDB4NDApO1xufVxuXG4vLyBHQ1tdIEdldCBDb29yZGluYXRlIHByb2plY3RlZCBvbnRvIHRoZSBwcm9qZWN0aW9uIHZlY3RvclxuLy8gMHg0Ni0weDQ3XG5mdW5jdGlvbiBHQyhhLCBzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBwaSA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBwID0gc3RhdGUuejJbcGldO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ0dDWycgKyBhICsgJ10nLCBwaSk7IH1cblxuICAgIHN0YWNrLnB1c2goc3RhdGUuZHB2LmRpc3RhbmNlKHAsIEhQWmVybywgYSwgZmFsc2UpICogMHg0MCk7XG59XG5cbi8vIE1EW2FdIE1lYXN1cmUgRGlzdGFuY2Vcbi8vIDB4NDktMHg0QVxuZnVuY3Rpb24gTUQoYSwgc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgcGkyID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIHBpMSA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBwMiA9IHN0YXRlLnoxW3BpMl07XG4gICAgdmFyIHAxID0gc3RhdGUuejBbcGkxXTtcbiAgICB2YXIgZCA9IHN0YXRlLmRwdi5kaXN0YW5jZShwMSwgcDIsIGEsIGEpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ01EWycgKyBhICsgJ10nLCBwaTIsIHBpMSwgJy0+JywgZCk7IH1cblxuICAgIHN0YXRlLnN0YWNrLnB1c2goTWF0aC5yb3VuZChkICogNjQpKTtcbn1cblxuLy8gTVBQRU1bXSBNZWFzdXJlIFBpeGVscyBQZXIgRU1cbi8vIDB4NEJcbmZ1bmN0aW9uIE1QUEVNKHN0YXRlKSB7XG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ01QUEVNW10nKTsgfVxuICAgIHN0YXRlLnN0YWNrLnB1c2goc3RhdGUucHBlbSk7XG59XG5cbi8vIEZMSVBPTltdIHNldCB0aGUgYXV0byBGTElQIEJvb2xlYW4gdG8gT05cbi8vIDB4NERcbmZ1bmN0aW9uIEZMSVBPTihzdGF0ZSkge1xuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdGTElQT05bXScpOyB9XG4gICAgc3RhdGUuYXV0b0ZsaXAgPSB0cnVlO1xufVxuXG4vLyBMVFtdIExlc3MgVGhhblxuLy8gMHg1MFxuZnVuY3Rpb24gTFQoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgZTIgPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgZTEgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdMVFtdJywgZTIsIGUxKTsgfVxuXG4gICAgc3RhY2sucHVzaChlMSA8IGUyID8gMSA6IDApO1xufVxuXG4vLyBMVEVRW10gTGVzcyBUaGFuIG9yIEVRdWFsXG4vLyAweDUzXG5mdW5jdGlvbiBMVEVRKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIGUyID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIGUxID0gc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnTFRFUVtdJywgZTIsIGUxKTsgfVxuXG4gICAgc3RhY2sucHVzaChlMSA8PSBlMiA/IDEgOiAwKTtcbn1cblxuLy8gR1RFUVtdIEdyZWF0ZXIgVGhhblxuLy8gMHg1MlxuZnVuY3Rpb24gR1Qoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgZTIgPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgZTEgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdHVFtdJywgZTIsIGUxKTsgfVxuXG4gICAgc3RhY2sucHVzaChlMSA+IGUyID8gMSA6IDApO1xufVxuXG4vLyBHVEVRW10gR3JlYXRlciBUaGFuIG9yIEVRdWFsXG4vLyAweDUzXG5mdW5jdGlvbiBHVEVRKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIGUyID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIGUxID0gc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnR1RFUVtdJywgZTIsIGUxKTsgfVxuXG4gICAgc3RhY2sucHVzaChlMSA+PSBlMiA/IDEgOiAwKTtcbn1cblxuLy8gRVFbXSBFUXVhbFxuLy8gMHg1NFxuZnVuY3Rpb24gRVEoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgZTIgPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgZTEgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdFUVtdJywgZTIsIGUxKTsgfVxuXG4gICAgc3RhY2sucHVzaChlMiA9PT0gZTEgPyAxIDogMCk7XG59XG5cbi8vIE5FUVtdIE5vdCBFUXVhbFxuLy8gMHg1NVxuZnVuY3Rpb24gTkVRKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIGUyID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIGUxID0gc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnTkVRW10nLCBlMiwgZTEpOyB9XG5cbiAgICBzdGFjay5wdXNoKGUyICE9PSBlMSA/IDEgOiAwKTtcbn1cblxuLy8gT0REW10gT0REXG4vLyAweDU2XG5mdW5jdGlvbiBPREQoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgbiA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ09ERFtdJywgbik7IH1cblxuICAgIHN0YWNrLnB1c2goTWF0aC50cnVuYyhuKSAlIDIgPyAxIDogMCk7XG59XG5cbi8vIEVWRU5bXSBFVkVOXG4vLyAweDU3XG5mdW5jdGlvbiBFVkVOKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIG4gPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdFVkVOW10nLCBuKTsgfVxuXG4gICAgc3RhY2sucHVzaChNYXRoLnRydW5jKG4pICUgMiA/IDAgOiAxKTtcbn1cblxuLy8gSUZbXSBJRiB0ZXN0XG4vLyAweDU4XG5mdW5jdGlvbiBJRihzdGF0ZSkge1xuICAgIHZhciB0ZXN0ID0gc3RhdGUuc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnSUZbXScsIHRlc3QpOyB9XG5cbiAgICAvLyBpZiB0ZXN0IGlzIHRydWUgaXQganVzdCBjb250aW51ZXNcbiAgICAvLyBpZiBub3QgdGhlIGlwIGlzIHNraXBwZWQgdW50aWwgbWF0Y2hpbmcgRUxTRSBvciBFSUZcbiAgICBpZiAoIXRlc3QpIHtcbiAgICAgICAgc2tpcChzdGF0ZSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgICdFSUZbXScpOyB9XG4gICAgfVxufVxuXG4vLyBFSUZbXSBFbmQgSUZcbi8vIDB4NTlcbmZ1bmN0aW9uIEVJRihzdGF0ZSkge1xuICAgIC8vIHRoaXMgY2FuIGJlIHJlYWNoZWQgbm9ybWFsbHkgd2hlblxuICAgIC8vIGV4ZWN1dGluZyBhbiBlbHNlIGJyYW5jaC5cbiAgICAvLyAtPiBqdXN0IGlnbm9yZSBpdFxuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ0VJRltdJyk7IH1cbn1cblxuLy8gQU5EW10gbG9naWNhbCBBTkRcbi8vIDB4NUFcbmZ1bmN0aW9uIEFORChzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBlMiA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBlMSA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ0FORFtdJywgZTIsIGUxKTsgfVxuXG4gICAgc3RhY2sucHVzaChlMiAmJiBlMSA/IDEgOiAwKTtcbn1cblxuLy8gT1JbXSBsb2dpY2FsIE9SXG4vLyAweDVCXG5mdW5jdGlvbiBPUihzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBlMiA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBlMSA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ09SW10nLCBlMiwgZTEpOyB9XG5cbiAgICBzdGFjay5wdXNoKGUyIHx8IGUxID8gMSA6IDApO1xufVxuXG4vLyBOT1RbXSBsb2dpY2FsIE5PVFxuLy8gMHg1Q1xuZnVuY3Rpb24gTk9UKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIGUgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdOT1RbXScsIGUpOyB9XG5cbiAgICBzdGFjay5wdXNoKGUgPyAwIDogMSk7XG59XG5cbi8vIERFTFRBUDFbXSBERUxUQSBleGNlcHRpb24gUDFcbi8vIERFTFRBUDJbXSBERUxUQSBleGNlcHRpb24gUDJcbi8vIERFTFRBUDNbXSBERUxUQSBleGNlcHRpb24gUDNcbi8vIDB4NUQsIDB4NzEsIDB4NzJcbmZ1bmN0aW9uIERFTFRBUDEyMyhiLCBzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBuID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIGZ2ID0gc3RhdGUuZnY7XG4gICAgdmFyIHB2ID0gc3RhdGUucHY7XG4gICAgdmFyIHBwZW0gPSBzdGF0ZS5wcGVtO1xuICAgIHZhciBiYXNlID0gc3RhdGUuZGVsdGFCYXNlICsgKGIgLSAxKSAqIDE2O1xuICAgIHZhciBkcyA9IHN0YXRlLmRlbHRhU2hpZnQ7XG4gICAgdmFyIHowID0gc3RhdGUuejA7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnREVMVEFQWycgKyBiICsgJ10nLCBuLCBzdGFjayk7IH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHZhciBwaSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICB2YXIgYXJnID0gc3RhY2sucG9wKCk7XG4gICAgICAgIHZhciBhcHBlbSA9IGJhc2UgKyAoKGFyZyAmIDB4RjApID4+IDQpO1xuICAgICAgICBpZiAoYXBwZW0gIT09IHBwZW0pIHsgY29udGludWU7IH1cblxuICAgICAgICB2YXIgbWFnID0gKGFyZyAmIDB4MEYpIC0gODtcbiAgICAgICAgaWYgKG1hZyA+PSAwKSB7IG1hZysrOyB9XG4gICAgICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdERUxUQVBGSVgnLCBwaSwgJ2J5JywgbWFnICogZHMpOyB9XG5cbiAgICAgICAgdmFyIHAgPSB6MFtwaV07XG4gICAgICAgIGZ2LnNldFJlbGF0aXZlKHAsIHAsIG1hZyAqIGRzLCBwdik7XG4gICAgfVxufVxuXG4vLyBTREJbXSBTZXQgRGVsdGEgQmFzZSBpbiB0aGUgZ3JhcGhpY3Mgc3RhdGVcbi8vIDB4NUVcbmZ1bmN0aW9uIFNEQihzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBuID0gc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnU0RCW10nLCBuKTsgfVxuXG4gICAgc3RhdGUuZGVsdGFCYXNlID0gbjtcbn1cblxuLy8gU0RTW10gU2V0IERlbHRhIFNoaWZ0IGluIHRoZSBncmFwaGljcyBzdGF0ZVxuLy8gMHg1RlxuZnVuY3Rpb24gU0RTKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIG4gPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTRFNbXScsIG4pOyB9XG5cbiAgICBzdGF0ZS5kZWx0YVNoaWZ0ID0gTWF0aC5wb3coMC41LCBuKTtcbn1cblxuLy8gQUREW10gQUREXG4vLyAweDYwXG5mdW5jdGlvbiBBREQoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgbjIgPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgbjEgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdBRERbXScsIG4yLCBuMSk7IH1cblxuICAgIHN0YWNrLnB1c2gobjEgKyBuMik7XG59XG5cbi8vIFNVQltdIFNVQlxuLy8gMHg2MVxuZnVuY3Rpb24gU1VCKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIG4yID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIG4xID0gc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnU1VCW10nLCBuMiwgbjEpOyB9XG5cbiAgICBzdGFjay5wdXNoKG4xIC0gbjIpO1xufVxuXG4vLyBESVZbXSBESVZcbi8vIDB4NjJcbmZ1bmN0aW9uIERJVihzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBuMiA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBuMSA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ0RJVltdJywgbjIsIG4xKTsgfVxuXG4gICAgc3RhY2sucHVzaChuMSAqIDY0IC8gbjIpO1xufVxuXG4vLyBNVUxbXSBNVUxcbi8vIDB4NjNcbmZ1bmN0aW9uIE1VTChzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBuMiA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBuMSA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ01VTFtdJywgbjIsIG4xKTsgfVxuXG4gICAgc3RhY2sucHVzaChuMSAqIG4yIC8gNjQpO1xufVxuXG4vLyBBQlNbXSBBQlNvbHV0ZSB2YWx1ZVxuLy8gMHg2NFxuZnVuY3Rpb24gQUJTKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIG4gPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdBQlNbXScsIG4pOyB9XG5cbiAgICBzdGFjay5wdXNoKE1hdGguYWJzKG4pKTtcbn1cblxuLy8gTkVHW10gTkVHYXRlXG4vLyAweDY1XG5mdW5jdGlvbiBORUcoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgbiA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ05FR1tdJywgbik7IH1cblxuICAgIHN0YWNrLnB1c2goLW4pO1xufVxuXG4vLyBGTE9PUltdIEZMT09SXG4vLyAweDY2XG5mdW5jdGlvbiBGTE9PUihzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBuID0gc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnRkxPT1JbXScsIG4pOyB9XG5cbiAgICBzdGFjay5wdXNoKE1hdGguZmxvb3IobiAvIDB4NDApICogMHg0MCk7XG59XG5cbi8vIENFSUxJTkdbXSBDRUlMSU5HXG4vLyAweDY3XG5mdW5jdGlvbiBDRUlMSU5HKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIG4gPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdDRUlMSU5HW10nLCBuKTsgfVxuXG4gICAgc3RhY2sucHVzaChNYXRoLmNlaWwobiAvIDB4NDApICogMHg0MCk7XG59XG5cbi8vIFJPVU5EW2FiXSBST1VORCB2YWx1ZVxuLy8gMHg2OC0weDZCXG5mdW5jdGlvbiBST1VORChkdCwgc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgbiA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1JPVU5EW10nKTsgfVxuXG4gICAgc3RhY2sucHVzaChzdGF0ZS5yb3VuZChuIC8gMHg0MCkgKiAweDQwKTtcbn1cblxuLy8gV0NWVEZbXSBXcml0ZSBDb250cm9sIFZhbHVlIFRhYmxlIGluIEZ1bml0c1xuLy8gMHg3MFxuZnVuY3Rpb24gV0NWVEYoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgdiA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBsID0gc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnV0NWVEZbXScsIHYsIGwpOyB9XG5cbiAgICBzdGF0ZS5jdnRbbF0gPSB2ICogc3RhdGUucHBlbSAvIHN0YXRlLmZvbnQudW5pdHNQZXJFbTtcbn1cblxuLy8gREVMVEFDMVtdIERFTFRBIGV4Y2VwdGlvbiBDMVxuLy8gREVMVEFDMltdIERFTFRBIGV4Y2VwdGlvbiBDMlxuLy8gREVMVEFDM1tdIERFTFRBIGV4Y2VwdGlvbiBDM1xuLy8gMHg3MywgMHg3NCwgMHg3NVxuZnVuY3Rpb24gREVMVEFDMTIzKGIsIHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIG4gPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgcHBlbSA9IHN0YXRlLnBwZW07XG4gICAgdmFyIGJhc2UgPSBzdGF0ZS5kZWx0YUJhc2UgKyAoYiAtIDEpICogMTY7XG4gICAgdmFyIGRzID0gc3RhdGUuZGVsdGFTaGlmdDtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdERUxUQUNbJyArIGIgKyAnXScsIG4sIHN0YWNrKTsgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgdmFyIGFyZyA9IHN0YWNrLnBvcCgpO1xuICAgICAgICB2YXIgYXBwZW0gPSBiYXNlICsgKChhcmcgJiAweEYwKSA+PiA0KTtcbiAgICAgICAgaWYgKGFwcGVtICE9PSBwcGVtKSB7IGNvbnRpbnVlOyB9XG5cbiAgICAgICAgdmFyIG1hZyA9IChhcmcgJiAweDBGKSAtIDg7XG4gICAgICAgIGlmIChtYWcgPj0gMCkgeyBtYWcrKzsgfVxuXG4gICAgICAgIHZhciBkZWx0YSA9IG1hZyAqIGRzO1xuXG4gICAgICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdERUxUQUNGSVgnLCBjLCAnYnknLCBkZWx0YSk7IH1cblxuICAgICAgICBzdGF0ZS5jdnRbY10gKz0gZGVsdGE7XG4gICAgfVxufVxuXG4vLyBTUk9VTkRbXSBTdXBlciBST1VORFxuLy8gMHg3NlxuZnVuY3Rpb24gU1JPVU5EKHN0YXRlKSB7XG4gICAgdmFyIG4gPSBzdGF0ZS5zdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdTUk9VTkRbXScsIG4pOyB9XG5cbiAgICBzdGF0ZS5yb3VuZCA9IHJvdW5kU3VwZXI7XG5cbiAgICB2YXIgcGVyaW9kO1xuXG4gICAgc3dpdGNoIChuICYgMHhDMCkge1xuICAgICAgICBjYXNlIDB4MDA6XG4gICAgICAgICAgICBwZXJpb2QgPSAwLjU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAweDQwOlxuICAgICAgICAgICAgcGVyaW9kID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDB4ODA6XG4gICAgICAgICAgICBwZXJpb2QgPSAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgU1JPVU5EIHZhbHVlJyk7XG4gICAgfVxuXG4gICAgc3RhdGUuc3JQZXJpb2QgPSBwZXJpb2Q7XG5cbiAgICBzd2l0Y2ggKG4gJiAweDMwKSB7XG4gICAgICAgIGNhc2UgMHgwMDpcbiAgICAgICAgICAgIHN0YXRlLnNyUGhhc2UgPSAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHgxMDpcbiAgICAgICAgICAgIHN0YXRlLnNyUGhhc2UgPSAwLjI1ICogcGVyaW9kO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHgyMDpcbiAgICAgICAgICAgIHN0YXRlLnNyUGhhc2UgPSAwLjUgICogcGVyaW9kO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHgzMDpcbiAgICAgICAgICAgIHN0YXRlLnNyUGhhc2UgPSAwLjc1ICogcGVyaW9kO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignaW52YWxpZCBTUk9VTkQgdmFsdWUnKTtcbiAgICB9XG5cbiAgICBuICY9IDB4MEY7XG5cbiAgICBpZiAobiA9PT0gMCkgeyBzdGF0ZS5zclRocmVzaG9sZCA9IDA7IH1cbiAgICBlbHNlIHsgc3RhdGUuc3JUaHJlc2hvbGQgPSAobiAvIDggLSAwLjUpICogcGVyaW9kOyB9XG59XG5cbi8vIFM0NVJPVU5EW10gU3VwZXIgUk9VTkQgNDUgZGVncmVlc1xuLy8gMHg3N1xuZnVuY3Rpb24gUzQ1Uk9VTkQoc3RhdGUpIHtcbiAgICB2YXIgbiA9IHN0YXRlLnN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1M0NVJPVU5EW10nLCBuKTsgfVxuXG4gICAgc3RhdGUucm91bmQgPSByb3VuZFN1cGVyO1xuXG4gICAgdmFyIHBlcmlvZDtcblxuICAgIHN3aXRjaCAobiAmIDB4QzApIHtcbiAgICAgICAgY2FzZSAweDAwOlxuICAgICAgICAgICAgcGVyaW9kID0gTWF0aC5zcXJ0KDIpIC8gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDB4NDA6XG4gICAgICAgICAgICBwZXJpb2QgPSBNYXRoLnNxcnQoMik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAweDgwOlxuICAgICAgICAgICAgcGVyaW9kID0gMiAqIE1hdGguc3FydCgyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFM0NVJPVU5EIHZhbHVlJyk7XG4gICAgfVxuXG4gICAgc3RhdGUuc3JQZXJpb2QgPSBwZXJpb2Q7XG5cbiAgICBzd2l0Y2ggKG4gJiAweDMwKSB7XG4gICAgICAgIGNhc2UgMHgwMDpcbiAgICAgICAgICAgIHN0YXRlLnNyUGhhc2UgPSAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHgxMDpcbiAgICAgICAgICAgIHN0YXRlLnNyUGhhc2UgPSAwLjI1ICogcGVyaW9kO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHgyMDpcbiAgICAgICAgICAgIHN0YXRlLnNyUGhhc2UgPSAwLjUgICogcGVyaW9kO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHgzMDpcbiAgICAgICAgICAgIHN0YXRlLnNyUGhhc2UgPSAwLjc1ICogcGVyaW9kO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgUzQ1Uk9VTkQgdmFsdWUnKTtcbiAgICB9XG5cbiAgICBuICY9IDB4MEY7XG5cbiAgICBpZiAobiA9PT0gMCkgeyBzdGF0ZS5zclRocmVzaG9sZCA9IDA7IH1cbiAgICBlbHNlIHsgc3RhdGUuc3JUaHJlc2hvbGQgPSAobiAvIDggLSAwLjUpICogcGVyaW9kOyB9XG59XG5cbi8vIFJPRkZbXSBSb3VuZCBPZmZcbi8vIDB4N0FcbmZ1bmN0aW9uIFJPRkYoc3RhdGUpIHtcbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnUk9GRltdJyk7IH1cblxuICAgIHN0YXRlLnJvdW5kID0gcm91bmRPZmY7XG59XG5cbi8vIFJVVEdbXSBSb3VuZCBVcCBUbyBHcmlkXG4vLyAweDdDXG5mdW5jdGlvbiBSVVRHKHN0YXRlKSB7XG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1JVVEdbXScpOyB9XG5cbiAgICBzdGF0ZS5yb3VuZCA9IHJvdW5kVXBUb0dyaWQ7XG59XG5cbi8vIFJEVEdbXSBSb3VuZCBEb3duIFRvIEdyaWRcbi8vIDB4N0RcbmZ1bmN0aW9uIFJEVEcoc3RhdGUpIHtcbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnUkRUR1tdJyk7IH1cblxuICAgIHN0YXRlLnJvdW5kID0gcm91bmREb3duVG9HcmlkO1xufVxuXG4vLyBTQ0FOQ1RSTFtdIFNDQU4gY29udmVyc2lvbiBDb25UUm9MXG4vLyAweDg1XG5mdW5jdGlvbiBTQ0FOQ1RSTChzdGF0ZSkge1xuICAgIHZhciBuID0gc3RhdGUuc3RhY2sucG9wKCk7XG5cbiAgICAvLyBpZ25vcmVkIGJ5IG9wZW50eXBlLmpzXG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnU0NBTkNUUkxbXScsIG4pOyB9XG59XG5cbi8vIFNEUFZUTFthXSBTZXQgRHVhbCBQcm9qZWN0aW9uIFZlY3RvciBUbyBMaW5lXG4vLyAweDg2LTB4ODdcbmZ1bmN0aW9uIFNEUFZUTChhLCBzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBwMmkgPSBzdGFjay5wb3AoKTtcbiAgICB2YXIgcDFpID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIHAyID0gc3RhdGUuejJbcDJpXTtcbiAgICB2YXIgcDEgPSBzdGF0ZS56MVtwMWldO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1NEUFZUTFsnICsgYSArICddJywgcDJpLCBwMWkpOyB9XG5cbiAgICB2YXIgZHg7XG4gICAgdmFyIGR5O1xuXG4gICAgaWYgKCFhKSB7XG4gICAgICAgIGR4ID0gcDEueCAtIHAyLng7XG4gICAgICAgIGR5ID0gcDEueSAtIHAyLnk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZHggPSBwMi55IC0gcDEueTtcbiAgICAgICAgZHkgPSBwMS54IC0gcDIueDtcbiAgICB9XG5cbiAgICBzdGF0ZS5kcHYgPSBnZXRVbml0VmVjdG9yKGR4LCBkeSk7XG59XG5cbi8vIEdFVElORk9bXSBHRVQgSU5GT3JtYXRpb25cbi8vIDB4ODhcbmZ1bmN0aW9uIEdFVElORk8oc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgc2VsID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIHIgPSAwO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ0dFVElORk9bXScsIHNlbCk7IH1cblxuICAgIC8vIHYzNSBhcyBpbiBubyBzdWJwaXhlbCBoaW50aW5nXG4gICAgaWYgKHNlbCAmIDB4MDEpIHsgciA9IDM1OyB9XG5cbiAgICAvLyBUT0RPIHJvdGF0aW9uIGFuZCBzdHJldGNoIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkXG4gICAgLy8gYW5kIHRodXMgdGhvc2UgR0VUSU5GTyBhcmUgYWx3YXlzIDAuXG5cbiAgICAvLyBvcGVudHlwZS5qcyBpcyBhbHdheXMgZ3JheSBzY2FsaW5nXG4gICAgaWYgKHNlbCAmIDB4MjApIHsgciB8PSAweDEwMDA7IH1cblxuICAgIHN0YWNrLnB1c2gocik7XG59XG5cbi8vIFJPTExbXSBST0xMIHRoZSB0b3AgdGhyZWUgc3RhY2sgZWxlbWVudHNcbi8vIDB4OEFcbmZ1bmN0aW9uIFJPTEwoc3RhdGUpIHtcbiAgICB2YXIgc3RhY2sgPSBzdGF0ZS5zdGFjaztcbiAgICB2YXIgYSA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBiID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIGMgPSBzdGFjay5wb3AoKTtcblxuICAgIGlmIChleHBvcnRzLkRFQlVHKSB7IGNvbnNvbGUubG9nKHN0YXRlLnN0ZXAsICdST0xMW10nKTsgfVxuXG4gICAgc3RhY2sucHVzaChiKTtcbiAgICBzdGFjay5wdXNoKGEpO1xuICAgIHN0YWNrLnB1c2goYyk7XG59XG5cbi8vIE1BWFtdIE1BWGltdW0gb2YgdG9wIHR3byBzdGFjayBlbGVtZW50c1xuLy8gMHg4QlxuZnVuY3Rpb24gTUFYKHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIGUyID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIGUxID0gc3RhY2sucG9wKCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnTUFYW10nLCBlMiwgZTEpOyB9XG5cbiAgICBzdGFjay5wdXNoKE1hdGgubWF4KGUxLCBlMikpO1xufVxuXG4vLyBNSU5bXSBNSU5pbXVtIG9mIHRvcCB0d28gc3RhY2sgZWxlbWVudHNcbi8vIDB4OENcbmZ1bmN0aW9uIE1JTihzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBlMiA9IHN0YWNrLnBvcCgpO1xuICAgIHZhciBlMSA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ01JTltdJywgZTIsIGUxKTsgfVxuXG4gICAgc3RhY2sucHVzaChNYXRoLm1pbihlMSwgZTIpKTtcbn1cblxuLy8gU0NBTlRZUEVbXSBTQ0FOVFlQRVxuLy8gMHg4RFxuZnVuY3Rpb24gU0NBTlRZUEUoc3RhdGUpIHtcbiAgICB2YXIgbiA9IHN0YXRlLnN0YWNrLnBvcCgpO1xuICAgIC8vIGlnbm9yZWQgYnkgb3BlbnR5cGUuanNcbiAgICBpZiAoZXhwb3J0cy5ERUJVRykgeyBjb25zb2xlLmxvZyhzdGF0ZS5zdGVwLCAnU0NBTlRZUEVbXScsIG4pOyB9XG59XG5cbi8vIElOU1RDVFJMW10gSU5TVENUUkxcbi8vIDB4OERcbmZ1bmN0aW9uIElOU1RDVFJMKHN0YXRlKSB7XG4gICAgdmFyIHMgPSBzdGF0ZS5zdGFjay5wb3AoKTtcbiAgICB2YXIgdiA9IHN0YXRlLnN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ0lOU1RDVFJMW10nLCBzLCB2KTsgfVxuXG4gICAgc3dpdGNoIChzKSB7XG4gICAgICAgIGNhc2UgMSA6IHN0YXRlLmluaGliaXRHcmlkRml0ID0gISF2OyByZXR1cm47XG4gICAgICAgIGNhc2UgMiA6IHN0YXRlLmlnbm9yZUN2dCA9ICEhdjsgcmV0dXJuO1xuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgSU5TVENUUkxbXSBzZWxlY3RvcicpO1xuICAgIH1cbn1cblxuLy8gUFVTSEJbYWJjXSBQVVNIIEJ5dGVzXG4vLyAweEIwLTB4QjdcbmZ1bmN0aW9uIFBVU0hCKG4sIHN0YXRlKSB7XG4gICAgdmFyIHN0YWNrID0gc3RhdGUuc3RhY2s7XG4gICAgdmFyIHByb2cgPSBzdGF0ZS5wcm9nO1xuICAgIHZhciBpcCA9IHN0YXRlLmlwO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuc3RlcCwgJ1BVU0hCWycgKyBuICsgJ10nKTsgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHsgc3RhY2sucHVzaChwcm9nWysraXBdKTsgfVxuXG4gICAgc3RhdGUuaXAgPSBpcDtcbn1cblxuLy8gUFVTSFdbYWJjXSBQVVNIIFdvcmRzXG4vLyAweEI4LTB4QkZcbmZ1bmN0aW9uIFBVU0hXKG4sIHN0YXRlKSB7XG4gICAgdmFyIGlwID0gc3RhdGUuaXA7XG4gICAgdmFyIHByb2cgPSBzdGF0ZS5wcm9nO1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuXG4gICAgaWYgKGV4cG9ydHMuREVCVUcpIHsgY29uc29sZS5sb2coc3RhdGUuaXAsICdQVVNIV1snICsgbiArICddJyk7IH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gKHByb2dbKytpcF0gPDwgOCkgfCBwcm9nWysraXBdO1xuICAgICAgICBpZiAodyAmIDB4ODAwMCkgeyB3ID0gLSgodyBeIDB4ZmZmZikgKyAxKTsgfVxuICAgICAgICBzdGFjay5wdXNoKHcpO1xuICAgIH1cblxuICAgIHN0YXRlLmlwID0gaXA7XG59XG5cbi8vIE1EUlBbYWJjZGVdIE1vdmUgRGlyZWN0IFJlbGF0aXZlIFBvaW50XG4vLyAweEQwLTB4RUZcbi8vIChpZiBpbmRpcmVjdCBpcyAwKVxuLy9cbi8vIGFuZFxuLy9cbi8vIE1JUlBbYWJjZGVdIE1vdmUgSW5kaXJlY3QgUmVsYXRpdmUgUG9pbnRcbi8vIDB4RTAtMHhGRlxuLy8gKGlmIGluZGlyZWN0IGlzIDEpXG5cbmZ1bmN0aW9uIE1EUlBfTUlSUChpbmRpcmVjdCwgc2V0UnAwLCBrZWVwRCwgcm8sIGR0LCBzdGF0ZSkge1xuICAgIHZhciBzdGFjayA9IHN0YXRlLnN0YWNrO1xuICAgIHZhciBjdnRlID0gaW5kaXJlY3QgJiYgc3RhY2sucG9wKCk7XG4gICAgdmFyIHBpID0gc3RhY2sucG9wKCk7XG4gICAgdmFyIHJwMGkgPSBzdGF0ZS5ycDA7XG4gICAgdmFyIHJwID0gc3RhdGUuejBbcnAwaV07XG4gICAgdmFyIHAgPSBzdGF0ZS56MVtwaV07XG5cbiAgICB2YXIgbWQgPSBzdGF0ZS5taW5EaXM7XG4gICAgdmFyIGZ2ID0gc3RhdGUuZnY7XG4gICAgdmFyIHB2ID0gc3RhdGUuZHB2O1xuICAgIHZhciBvZDsgLy8gb3JpZ2luYWwgZGlzdGFuY2VcbiAgICB2YXIgZDsgLy8gbW92aW5nIGRpc3RhbmNlXG4gICAgdmFyIHNpZ247IC8vIHNpZ24gb2YgZGlzdGFuY2VcbiAgICB2YXIgY3Y7XG5cbiAgICBkID0gb2QgPSBwdi5kaXN0YW5jZShwLCBycCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgc2lnbiA9IGQgPj0gMCA/IDEgOiAtMTsgLy8gTWF0aC5zaWduIHdvdWxkIGJlIDAgaW4gY2FzZSBvZiAwXG5cbiAgICAvLyBUT0RPIGNvbnNpZGVyIGF1dG9GbGlwXG4gICAgZCA9IE1hdGguYWJzKGQpO1xuXG4gICAgaWYgKGluZGlyZWN0KSB7XG4gICAgICAgIGN2ID0gc3RhdGUuY3Z0W2N2dGVdO1xuXG4gICAgICAgIGlmIChybyAmJiBNYXRoLmFicyhkIC0gY3YpIDwgc3RhdGUuY3ZDdXRJbikgeyBkID0gY3Y7IH1cbiAgICB9XG5cbiAgICBpZiAoa2VlcEQgJiYgZCA8IG1kKSB7IGQgPSBtZDsgfVxuXG4gICAgaWYgKHJvKSB7IGQgPSBzdGF0ZS5yb3VuZChkKTsgfVxuXG4gICAgZnYuc2V0UmVsYXRpdmUocCwgcnAsIHNpZ24gKiBkLCBwdik7XG4gICAgZnYudG91Y2gocCk7XG5cbiAgICBpZiAoZXhwb3J0cy5ERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIHN0YXRlLnN0ZXAsXG4gICAgICAgICAgICAoaW5kaXJlY3QgPyAnTUlSUFsnIDogJ01EUlBbJykgK1xuICAgICAgICAgICAgKHNldFJwMCA/ICdNJyA6ICdtJykgK1xuICAgICAgICAgICAgKGtlZXBEID8gJz4nIDogJ18nKSArXG4gICAgICAgICAgICAocm8gPyAnUicgOiAnXycpICtcbiAgICAgICAgICAgIChkdCA9PT0gMCA/ICdHcicgOiAoZHQgPT09IDEgPyAnQmwnIDogKGR0ID09PSAyID8gJ1doJyA6ICcnKSkpICtcbiAgICAgICAgICAgICddJyxcbiAgICAgICAgICAgIGluZGlyZWN0ID9cbiAgICAgICAgICAgICAgICBjdnRlICsgJygnICsgc3RhdGUuY3Z0W2N2dGVdICsgJywnICsgIGN2ICsgJyknIDpcbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIHBpLFxuICAgICAgICAgICAgJyhkID0nLCBvZCwgJy0+Jywgc2lnbiAqIGQsICcpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIHN0YXRlLnJwMSA9IHN0YXRlLnJwMDtcbiAgICBzdGF0ZS5ycDIgPSBwaTtcbiAgICBpZiAoc2V0UnAwKSB7IHN0YXRlLnJwMCA9IHBpOyB9XG59XG5cbi8qXG4qIFRoZSBpbnN0cnVjdGlvbiB0YWJsZS5cbiovXG5pbnN0cnVjdGlvblRhYmxlID0gW1xuICAgIC8qIDB4MDAgKi8gU1ZUQ0EuYmluZCh1bmRlZmluZWQsIHlVbml0VmVjdG9yKSxcbiAgICAvKiAweDAxICovIFNWVENBLmJpbmQodW5kZWZpbmVkLCB4VW5pdFZlY3RvciksXG4gICAgLyogMHgwMiAqLyBTUFZUQ0EuYmluZCh1bmRlZmluZWQsIHlVbml0VmVjdG9yKSxcbiAgICAvKiAweDAzICovIFNQVlRDQS5iaW5kKHVuZGVmaW5lZCwgeFVuaXRWZWN0b3IpLFxuICAgIC8qIDB4MDQgKi8gU0ZWVENBLmJpbmQodW5kZWZpbmVkLCB5VW5pdFZlY3RvciksXG4gICAgLyogMHgwNSAqLyBTRlZUQ0EuYmluZCh1bmRlZmluZWQsIHhVbml0VmVjdG9yKSxcbiAgICAvKiAweDA2ICovIFNQVlRMLmJpbmQodW5kZWZpbmVkLCAwKSxcbiAgICAvKiAweDA3ICovIFNQVlRMLmJpbmQodW5kZWZpbmVkLCAxKSxcbiAgICAvKiAweDA4ICovIFNGVlRMLmJpbmQodW5kZWZpbmVkLCAwKSxcbiAgICAvKiAweDA5ICovIFNGVlRMLmJpbmQodW5kZWZpbmVkLCAxKSxcbiAgICAvKiAweDBBICovIFNQVkZTLFxuICAgIC8qIDB4MEIgKi8gU0ZWRlMsXG4gICAgLyogMHgwQyAqLyBHUFYsXG4gICAgLyogMHgwRCAqLyBHRlYsXG4gICAgLyogMHgwRSAqLyBTRlZUUFYsXG4gICAgLyogMHgwRiAqLyBJU0VDVCxcbiAgICAvKiAweDEwICovIFNSUDAsXG4gICAgLyogMHgxMSAqLyBTUlAxLFxuICAgIC8qIDB4MTIgKi8gU1JQMixcbiAgICAvKiAweDEzICovIFNaUDAsXG4gICAgLyogMHgxNCAqLyBTWlAxLFxuICAgIC8qIDB4MTUgKi8gU1pQMixcbiAgICAvKiAweDE2ICovIFNaUFMsXG4gICAgLyogMHgxNyAqLyBTTE9PUCxcbiAgICAvKiAweDE4ICovIFJURyxcbiAgICAvKiAweDE5ICovIFJUSEcsXG4gICAgLyogMHgxQSAqLyBTTUQsXG4gICAgLyogMHgxQiAqLyBFTFNFLFxuICAgIC8qIDB4MUMgKi8gSk1QUixcbiAgICAvKiAweDFEICovIFNDVlRDSSxcbiAgICAvKiAweDFFICovIHVuZGVmaW5lZCwgICAvLyBUT0RPIFNTV0NJXG4gICAgLyogMHgxRiAqLyB1bmRlZmluZWQsICAgLy8gVE9ETyBTU1dcbiAgICAvKiAweDIwICovIERVUCxcbiAgICAvKiAweDIxICovIFBPUCxcbiAgICAvKiAweDIyICovIENMRUFSLFxuICAgIC8qIDB4MjMgKi8gU1dBUCxcbiAgICAvKiAweDI0ICovIERFUFRILFxuICAgIC8qIDB4MjUgKi8gQ0lOREVYLFxuICAgIC8qIDB4MjYgKi8gTUlOREVYLFxuICAgIC8qIDB4MjcgKi8gdW5kZWZpbmVkLCAgIC8vIFRPRE8gQUxJR05QVFNcbiAgICAvKiAweDI4ICovIHVuZGVmaW5lZCxcbiAgICAvKiAweDI5ICovIHVuZGVmaW5lZCwgICAvLyBUT0RPIFVUUFxuICAgIC8qIDB4MkEgKi8gTE9PUENBTEwsXG4gICAgLyogMHgyQiAqLyBDQUxMLFxuICAgIC8qIDB4MkMgKi8gRkRFRixcbiAgICAvKiAweDJEICovIHVuZGVmaW5lZCwgICAvLyBFTkRGIChlYXRlbiBieSBGREVGKVxuICAgIC8qIDB4MkUgKi8gTURBUC5iaW5kKHVuZGVmaW5lZCwgMCksXG4gICAgLyogMHgyRiAqLyBNREFQLmJpbmQodW5kZWZpbmVkLCAxKSxcbiAgICAvKiAweDMwICovIElVUC5iaW5kKHVuZGVmaW5lZCwgeVVuaXRWZWN0b3IpLFxuICAgIC8qIDB4MzEgKi8gSVVQLmJpbmQodW5kZWZpbmVkLCB4VW5pdFZlY3RvciksXG4gICAgLyogMHgzMiAqLyBTSFAuYmluZCh1bmRlZmluZWQsIDApLFxuICAgIC8qIDB4MzMgKi8gU0hQLmJpbmQodW5kZWZpbmVkLCAxKSxcbiAgICAvKiAweDM0ICovIFNIQy5iaW5kKHVuZGVmaW5lZCwgMCksXG4gICAgLyogMHgzNSAqLyBTSEMuYmluZCh1bmRlZmluZWQsIDEpLFxuICAgIC8qIDB4MzYgKi8gU0haLmJpbmQodW5kZWZpbmVkLCAwKSxcbiAgICAvKiAweDM3ICovIFNIWi5iaW5kKHVuZGVmaW5lZCwgMSksXG4gICAgLyogMHgzOCAqLyBTSFBJWCxcbiAgICAvKiAweDM5ICovIElQLFxuICAgIC8qIDB4M0EgKi8gTVNJUlAuYmluZCh1bmRlZmluZWQsIDApLFxuICAgIC8qIDB4M0IgKi8gTVNJUlAuYmluZCh1bmRlZmluZWQsIDEpLFxuICAgIC8qIDB4M0MgKi8gQUxJR05SUCxcbiAgICAvKiAweDNEICovIFJUREcsXG4gICAgLyogMHgzRSAqLyBNSUFQLmJpbmQodW5kZWZpbmVkLCAwKSxcbiAgICAvKiAweDNGICovIE1JQVAuYmluZCh1bmRlZmluZWQsIDEpLFxuICAgIC8qIDB4NDAgKi8gTlBVU0hCLFxuICAgIC8qIDB4NDEgKi8gTlBVU0hXLFxuICAgIC8qIDB4NDIgKi8gV1MsXG4gICAgLyogMHg0MyAqLyBSUyxcbiAgICAvKiAweDQ0ICovIFdDVlRQLFxuICAgIC8qIDB4NDUgKi8gUkNWVCxcbiAgICAvKiAweDQ2ICovIEdDLmJpbmQodW5kZWZpbmVkLCAwKSxcbiAgICAvKiAweDQ3ICovIEdDLmJpbmQodW5kZWZpbmVkLCAxKSxcbiAgICAvKiAweDQ4ICovIHVuZGVmaW5lZCwgICAvLyBUT0RPIFNDRlNcbiAgICAvKiAweDQ5ICovIE1ELmJpbmQodW5kZWZpbmVkLCAwKSxcbiAgICAvKiAweDRBICovIE1ELmJpbmQodW5kZWZpbmVkLCAxKSxcbiAgICAvKiAweDRCICovIE1QUEVNLFxuICAgIC8qIDB4NEMgKi8gdW5kZWZpbmVkLCAgIC8vIFRPRE8gTVBTXG4gICAgLyogMHg0RCAqLyBGTElQT04sXG4gICAgLyogMHg0RSAqLyB1bmRlZmluZWQsICAgLy8gVE9ETyBGTElQT0ZGXG4gICAgLyogMHg0RiAqLyB1bmRlZmluZWQsICAgLy8gVE9ETyBERUJVR1xuICAgIC8qIDB4NTAgKi8gTFQsXG4gICAgLyogMHg1MSAqLyBMVEVRLFxuICAgIC8qIDB4NTIgKi8gR1QsXG4gICAgLyogMHg1MyAqLyBHVEVRLFxuICAgIC8qIDB4NTQgKi8gRVEsXG4gICAgLyogMHg1NSAqLyBORVEsXG4gICAgLyogMHg1NiAqLyBPREQsXG4gICAgLyogMHg1NyAqLyBFVkVOLFxuICAgIC8qIDB4NTggKi8gSUYsXG4gICAgLyogMHg1OSAqLyBFSUYsXG4gICAgLyogMHg1QSAqLyBBTkQsXG4gICAgLyogMHg1QiAqLyBPUixcbiAgICAvKiAweDVDICovIE5PVCxcbiAgICAvKiAweDVEICovIERFTFRBUDEyMy5iaW5kKHVuZGVmaW5lZCwgMSksXG4gICAgLyogMHg1RSAqLyBTREIsXG4gICAgLyogMHg1RiAqLyBTRFMsXG4gICAgLyogMHg2MCAqLyBBREQsXG4gICAgLyogMHg2MSAqLyBTVUIsXG4gICAgLyogMHg2MiAqLyBESVYsXG4gICAgLyogMHg2MyAqLyBNVUwsXG4gICAgLyogMHg2NCAqLyBBQlMsXG4gICAgLyogMHg2NSAqLyBORUcsXG4gICAgLyogMHg2NiAqLyBGTE9PUixcbiAgICAvKiAweDY3ICovIENFSUxJTkcsXG4gICAgLyogMHg2OCAqLyBST1VORC5iaW5kKHVuZGVmaW5lZCwgMCksXG4gICAgLyogMHg2OSAqLyBST1VORC5iaW5kKHVuZGVmaW5lZCwgMSksXG4gICAgLyogMHg2QSAqLyBST1VORC5iaW5kKHVuZGVmaW5lZCwgMiksXG4gICAgLyogMHg2QiAqLyBST1VORC5iaW5kKHVuZGVmaW5lZCwgMyksXG4gICAgLyogMHg2QyAqLyB1bmRlZmluZWQsICAgLy8gVE9ETyBOUk9VTkRbYWJdXG4gICAgLyogMHg2RCAqLyB1bmRlZmluZWQsICAgLy8gVE9ETyBOUk9VTkRbYWJdXG4gICAgLyogMHg2RSAqLyB1bmRlZmluZWQsICAgLy8gVE9ETyBOUk9VTkRbYWJdXG4gICAgLyogMHg2RiAqLyB1bmRlZmluZWQsICAgLy8gVE9ETyBOUk9VTkRbYWJdXG4gICAgLyogMHg3MCAqLyBXQ1ZURixcbiAgICAvKiAweDcxICovIERFTFRBUDEyMy5iaW5kKHVuZGVmaW5lZCwgMiksXG4gICAgLyogMHg3MiAqLyBERUxUQVAxMjMuYmluZCh1bmRlZmluZWQsIDMpLFxuICAgIC8qIDB4NzMgKi8gREVMVEFDMTIzLmJpbmQodW5kZWZpbmVkLCAxKSxcbiAgICAvKiAweDc0ICovIERFTFRBQzEyMy5iaW5kKHVuZGVmaW5lZCwgMiksXG4gICAgLyogMHg3NSAqLyBERUxUQUMxMjMuYmluZCh1bmRlZmluZWQsIDMpLFxuICAgIC8qIDB4NzYgKi8gU1JPVU5ELFxuICAgIC8qIDB4NzcgKi8gUzQ1Uk9VTkQsXG4gICAgLyogMHg3OCAqLyB1bmRlZmluZWQsICAgLy8gVE9ETyBKUk9UW11cbiAgICAvKiAweDc5ICovIHVuZGVmaW5lZCwgICAvLyBUT0RPIEpST0ZbXVxuICAgIC8qIDB4N0EgKi8gUk9GRixcbiAgICAvKiAweDdCICovIHVuZGVmaW5lZCxcbiAgICAvKiAweDdDICovIFJVVEcsXG4gICAgLyogMHg3RCAqLyBSRFRHLFxuICAgIC8qIDB4N0UgKi8gUE9QLCAvLyBhY3R1YWxseSBTQU5HVywgc3VwcG9zZWQgdG8gZG8gb25seSBhIHBvcCB0aG91Z2hcbiAgICAvKiAweDdGICovIFBPUCwgLy8gYWN0dWFsbHkgQUEsIHN1cHBvc2VkIHRvIGRvIG9ubHkgYSBwb3AgdGhvdWdoXG4gICAgLyogMHg4MCAqLyB1bmRlZmluZWQsICAgLy8gVE9ETyBGTElQUFRcbiAgICAvKiAweDgxICovIHVuZGVmaW5lZCwgICAvLyBUT0RPIEZMSVBSR09OXG4gICAgLyogMHg4MiAqLyB1bmRlZmluZWQsICAgLy8gVE9ETyBGTElQUkdPRkZcbiAgICAvKiAweDgzICovIHVuZGVmaW5lZCxcbiAgICAvKiAweDg0ICovIHVuZGVmaW5lZCxcbiAgICAvKiAweDg1ICovIFNDQU5DVFJMLFxuICAgIC8qIDB4ODYgKi8gU0RQVlRMLmJpbmQodW5kZWZpbmVkLCAwKSxcbiAgICAvKiAweDg3ICovIFNEUFZUTC5iaW5kKHVuZGVmaW5lZCwgMSksXG4gICAgLyogMHg4OCAqLyBHRVRJTkZPLFxuICAgIC8qIDB4ODkgKi8gdW5kZWZpbmVkLCAgIC8vIFRPRE8gSURFRlxuICAgIC8qIDB4OEEgKi8gUk9MTCxcbiAgICAvKiAweDhCICovIE1BWCxcbiAgICAvKiAweDhDICovIE1JTixcbiAgICAvKiAweDhEICovIFNDQU5UWVBFLFxuICAgIC8qIDB4OEUgKi8gSU5TVENUUkwsXG4gICAgLyogMHg4RiAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5MCAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5MSAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5MiAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5MyAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5NCAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5NSAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5NiAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5NyAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5OCAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5OSAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5QSAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5QiAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5QyAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5RCAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5RSAqLyB1bmRlZmluZWQsXG4gICAgLyogMHg5RiAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBMCAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBMSAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBMiAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBMyAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBNCAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBNSAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBNiAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBNyAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBOCAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBOSAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBQSAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBQiAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBQyAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBRCAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBRSAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhBRiAqLyB1bmRlZmluZWQsXG4gICAgLyogMHhCMCAqLyBQVVNIQi5iaW5kKHVuZGVmaW5lZCwgMSksXG4gICAgLyogMHhCMSAqLyBQVVNIQi5iaW5kKHVuZGVmaW5lZCwgMiksXG4gICAgLyogMHhCMiAqLyBQVVNIQi5iaW5kKHVuZGVmaW5lZCwgMyksXG4gICAgLyogMHhCMyAqLyBQVVNIQi5iaW5kKHVuZGVmaW5lZCwgNCksXG4gICAgLyogMHhCNCAqLyBQVVNIQi5iaW5kKHVuZGVmaW5lZCwgNSksXG4gICAgLyogMHhCNSAqLyBQVVNIQi5iaW5kKHVuZGVmaW5lZCwgNiksXG4gICAgLyogMHhCNiAqLyBQVVNIQi5iaW5kKHVuZGVmaW5lZCwgNyksXG4gICAgLyogMHhCNyAqLyBQVVNIQi5iaW5kKHVuZGVmaW5lZCwgOCksXG4gICAgLyogMHhCOCAqLyBQVVNIVy5iaW5kKHVuZGVmaW5lZCwgMSksXG4gICAgLyogMHhCOSAqLyBQVVNIVy5iaW5kKHVuZGVmaW5lZCwgMiksXG4gICAgLyogMHhCQSAqLyBQVVNIVy5iaW5kKHVuZGVmaW5lZCwgMyksXG4gICAgLyogMHhCQiAqLyBQVVNIVy5iaW5kKHVuZGVmaW5lZCwgNCksXG4gICAgLyogMHhCQyAqLyBQVVNIVy5iaW5kKHVuZGVmaW5lZCwgNSksXG4gICAgLyogMHhCRCAqLyBQVVNIVy5iaW5kKHVuZGVmaW5lZCwgNiksXG4gICAgLyogMHhCRSAqLyBQVVNIVy5iaW5kKHVuZGVmaW5lZCwgNyksXG4gICAgLyogMHhCRiAqLyBQVVNIVy5iaW5kKHVuZGVmaW5lZCwgOCksXG4gICAgLyogMHhDMCAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDAsIDAsIDAsIDAsIDApLFxuICAgIC8qIDB4QzEgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAwLCAwLCAwLCAwLCAxKSxcbiAgICAvKiAweEMyICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMCwgMCwgMCwgMCwgMiksXG4gICAgLyogMHhDMyAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDAsIDAsIDAsIDAsIDMpLFxuICAgIC8qIDB4QzQgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAwLCAwLCAwLCAxLCAwKSxcbiAgICAvKiAweEM1ICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMCwgMCwgMCwgMSwgMSksXG4gICAgLyogMHhDNiAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDAsIDAsIDAsIDEsIDIpLFxuICAgIC8qIDB4QzcgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAwLCAwLCAwLCAxLCAzKSxcbiAgICAvKiAweEM4ICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMCwgMCwgMSwgMCwgMCksXG4gICAgLyogMHhDOSAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDAsIDAsIDEsIDAsIDEpLFxuICAgIC8qIDB4Q0EgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAwLCAwLCAxLCAwLCAyKSxcbiAgICAvKiAweENCICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMCwgMCwgMSwgMCwgMyksXG4gICAgLyogMHhDQyAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDAsIDAsIDEsIDEsIDApLFxuICAgIC8qIDB4Q0QgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAwLCAwLCAxLCAxLCAxKSxcbiAgICAvKiAweENFICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMCwgMCwgMSwgMSwgMiksXG4gICAgLyogMHhDRiAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDAsIDAsIDEsIDEsIDMpLFxuICAgIC8qIDB4RDAgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAwLCAxLCAwLCAwLCAwKSxcbiAgICAvKiAweEQxICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMCwgMSwgMCwgMCwgMSksXG4gICAgLyogMHhEMiAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDAsIDEsIDAsIDAsIDIpLFxuICAgIC8qIDB4RDMgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAwLCAxLCAwLCAwLCAzKSxcbiAgICAvKiAweEQ0ICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMCwgMSwgMCwgMSwgMCksXG4gICAgLyogMHhENSAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDAsIDEsIDAsIDEsIDEpLFxuICAgIC8qIDB4RDYgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAwLCAxLCAwLCAxLCAyKSxcbiAgICAvKiAweEQ3ICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMCwgMSwgMCwgMSwgMyksXG4gICAgLyogMHhEOCAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDAsIDEsIDEsIDAsIDApLFxuICAgIC8qIDB4RDkgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAwLCAxLCAxLCAwLCAxKSxcbiAgICAvKiAweERBICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMCwgMSwgMSwgMCwgMiksXG4gICAgLyogMHhEQiAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDAsIDEsIDEsIDAsIDMpLFxuICAgIC8qIDB4REMgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAwLCAxLCAxLCAxLCAwKSxcbiAgICAvKiAweEREICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMCwgMSwgMSwgMSwgMSksXG4gICAgLyogMHhERSAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDAsIDEsIDEsIDEsIDIpLFxuICAgIC8qIDB4REYgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAwLCAxLCAxLCAxLCAzKSxcbiAgICAvKiAweEUwICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMSwgMCwgMCwgMCwgMCksXG4gICAgLyogMHhFMSAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDEsIDAsIDAsIDAsIDEpLFxuICAgIC8qIDB4RTIgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAxLCAwLCAwLCAwLCAyKSxcbiAgICAvKiAweEUzICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMSwgMCwgMCwgMCwgMyksXG4gICAgLyogMHhFNCAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDEsIDAsIDAsIDEsIDApLFxuICAgIC8qIDB4RTUgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAxLCAwLCAwLCAxLCAxKSxcbiAgICAvKiAweEU2ICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMSwgMCwgMCwgMSwgMiksXG4gICAgLyogMHhFNyAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDEsIDAsIDAsIDEsIDMpLFxuICAgIC8qIDB4RTggKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAxLCAwLCAxLCAwLCAwKSxcbiAgICAvKiAweEU5ICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMSwgMCwgMSwgMCwgMSksXG4gICAgLyogMHhFQSAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDEsIDAsIDEsIDAsIDIpLFxuICAgIC8qIDB4RUIgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAxLCAwLCAxLCAwLCAzKSxcbiAgICAvKiAweEVDICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMSwgMCwgMSwgMSwgMCksXG4gICAgLyogMHhFRCAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDEsIDAsIDEsIDEsIDEpLFxuICAgIC8qIDB4RUUgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAxLCAwLCAxLCAxLCAyKSxcbiAgICAvKiAweEVGICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMSwgMCwgMSwgMSwgMyksXG4gICAgLyogMHhGMCAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDEsIDEsIDAsIDAsIDApLFxuICAgIC8qIDB4RjEgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAxLCAxLCAwLCAwLCAxKSxcbiAgICAvKiAweEYyICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMSwgMSwgMCwgMCwgMiksXG4gICAgLyogMHhGMyAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDEsIDEsIDAsIDAsIDMpLFxuICAgIC8qIDB4RjQgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAxLCAxLCAwLCAxLCAwKSxcbiAgICAvKiAweEY1ICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMSwgMSwgMCwgMSwgMSksXG4gICAgLyogMHhGNiAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDEsIDEsIDAsIDEsIDIpLFxuICAgIC8qIDB4RjcgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAxLCAxLCAwLCAxLCAzKSxcbiAgICAvKiAweEY4ICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMSwgMSwgMSwgMCwgMCksXG4gICAgLyogMHhGOSAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDEsIDEsIDEsIDAsIDEpLFxuICAgIC8qIDB4RkEgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAxLCAxLCAxLCAwLCAyKSxcbiAgICAvKiAweEZCICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMSwgMSwgMSwgMCwgMyksXG4gICAgLyogMHhGQyAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDEsIDEsIDEsIDEsIDApLFxuICAgIC8qIDB4RkQgKi8gTURSUF9NSVJQLmJpbmQodW5kZWZpbmVkLCAxLCAxLCAxLCAxLCAxKSxcbiAgICAvKiAweEZFICovIE1EUlBfTUlSUC5iaW5kKHVuZGVmaW5lZCwgMSwgMSwgMSwgMSwgMiksXG4gICAgLyogMHhGRiAqLyBNRFJQX01JUlAuYmluZCh1bmRlZmluZWQsIDEsIDEsIDEsIDEsIDMpXG5dO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgTWF0aGVtYXRpY2FsIENvbnNpZGVyYXRpb25zXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuZnYgLi4uIHJlZmVycyB0byBmcmVlZG9tIHZlY3RvclxucHYgLi4uIHJlZmVycyB0byBwcm9qZWN0aW9uIHZlY3RvclxucnAgLi4uIHJlZmVycyB0byByZWZlcmVuY2UgcG9pbnRcbnAgIC4uLiByZWZlcnMgdG8gdG8gcG9pbnQgYmVpbmcgb3BlcmF0ZWQgb25cbmQgIC4uLiByZWZlcnMgdG8gZGlzdGFuY2VcblxuU0VUUkVMQVRJVkU6XG49PT09PT09PT09PT1cblxuY2FzZSBmcmVlZG9tIHZlY3RvciA9PSB4LWF4aXM6XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICAgICAgICAgICAgICAgICAgKHB2KVxuICAgICAgICAgICAgICAgICAgICAgLi0nXG4gICAgICAgICAgICAgIHJwZCAuLSdcbiAgICAgICAgICAgICAgIC4tKlxuICAgICAgICAgIGQgLi0nOTDCsCdcbiAgICAgICAgIC4tJyAgICAgICAnXG4gICAgICAuLScgICAgICAgICAgICdcbiAgICotJyAgICAgICAgICAgICAgICcgYlxuICBycCAgICAgICAgICAgICAgICAgICdcbiAgICAgICAgICAgICAgICAgICAgICAgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1xuICAgICAgICAgICAgcCAqLS0tLS0tLS0tLSotLS0tLS0tLS0tLS0tLSAoZnYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBtXG5cbiAgcnBkeCA9IHJweCArIGQgKiBwdi54XG4gIHJwZHkgPSBycHkgKyBkICogcHYueVxuXG4gIGVxdWF0aW9uIG9mIGxpbmUgYlxuXG4gICB5IC0gcnBkeSA9IHB2bnMgKiAoeC0gcnBkeClcblxuICAgeSA9IHAueVxuXG4gICB4ID0gcnBkeCArICggcC55IC0gcnBkeSApIC8gcHZuc1xuXG5cbmNhc2UgZnJlZWRvbSB2ZWN0b3IgPT0geS1heGlzOlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAqIHBtXG4gICAgfFxcXG4gICAgfCBcXFxuICAgIHwgIFxcXG4gICAgfCAgIFxcXG4gICAgfCAgICBcXFxuICAgIHwgICAgIFxcXG4gICAgfCAgICAgIFxcXG4gICAgfCAgICAgICBcXFxuICAgIHwgICAgICAgIFxcXG4gICAgfCAgICAgICAgIFxcIGJcbiAgICB8ICAgICAgICAgIFxcXG4gICAgfCAgICAgICAgICAgXFxcbiAgICB8ICAgICAgICAgICAgXFwgICAgLi0nIChwdilcbiAgICB8ICAgICAgICAgOTDCsCBcXC4tJ1xuICAgIHwgICAgICAgICAgIC4tJyogcnBkXG4gICAgfCAgICAgICAgLi0nXG4gICAgKiAgICAgKi0nICBkXG4gICAgcCAgICAgcnBcblxuICBycGR4ID0gcnB4ICsgZCAqIHB2LnhcbiAgcnBkeSA9IHJweSArIGQgKiBwdi55XG5cbiAgZXF1YXRpb24gb2YgbGluZSBiOlxuICAgICAgICAgICBwdm5zIC4uLiBub3JtYWwgc2xvcGUgdG8gcHZcblxuICAgeSAtIHJwZHkgPSBwdm5zICogKHggLSBycGR4KVxuXG4gICB4ID0gcC54XG5cbiAgIHkgPSBycGR5ICsgIHB2bnMgKiAocC54IC0gcnBkeClcblxuXG5cbmdlbmVyaWMgY2FzZTpcbi0tLS0tLS0tLS0tLS1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuJyhmdilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAuKiBwbVxuICAgICAgICAgICAgICAgICAgICAgICAgLicgIVxuICAgICAgICAgICAgICAgICAgICAgIC4nICAgIC5cbiAgICAgICAgICAgICAgICAgICAgLicgICAgICAhXG4gICAgICAgICAgICAgICAgICAuJyAgICAgICAgIC4gYlxuICAgICAgICAgICAgICAgIC4nICAgICAgICAgICAhXG4gICAgICAgICAgICAgICAqICAgICAgICAgICAgICAuXG4gICAgICAgICAgICAgIHAgICAgICAgICAgICAgICAhXG4gICAgICAgICAgICAgICAgICAgICAgICAgOTDCsCAgIC4gICAgLi4uIChwdilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLi0qLScnJ1xuICAgICAgICAgICAgICAgICAgLi4uLS0tJycnICAgIHJwZFxuICAgICAgICAgLi4uLS0tJycnICAgZFxuICAgKi0tJycnXG4gIHJwXG5cbiAgICBycGR4ID0gcnB4ICsgZCAqIHB2LnhcbiAgICBycGR5ID0gcnB5ICsgZCAqIHB2LnlcblxuIGVxdWF0aW9uIG9mIGxpbmUgYjpcbiAgICBwdm5zLi4uIG5vcm1hbCBzbG9wZSB0byBwdlxuXG4gICAgeSAtIHJwZHkgPSBwdm5zICogKHggLSBycGR4KVxuXG4gZXF1YXRpb24gb2YgZnJlZWRvbSB2ZWN0b3IgbGluZTpcbiAgICBmdnMgLi4uIHNsb3BlIG9mIGZyZWVkb20gdmVjdG9yICg9ZnkvZngpXG5cbiAgICB5IC0gcHkgPSBmdnMgKiAoeCAtIHB4KVxuXG5cbiAgb24gcG0gYm90aCBlcXVhdGlvbnMgYXJlIHRydWUgZm9yIHNhbWUgeC95XG5cbiAgICB5IC0gcnBkeSA9IHB2bnMgKiAoeCAtIHJwZHgpXG5cbiAgICB5IC0gcHkgPSBmdnMgKiAoeCAtIHB4KVxuXG4gIGZvcm0gdG8geSBhbmQgc2V0IGVxdWFsOlxuXG4gICAgcHZucyAqICh4IC0gcnBkeCkgKyBycGR5ID0gZnZzICogKHggLSBweCkgKyBweVxuXG4gIGV4cGFuZDpcblxuICAgIHB2bnMgKiB4IC0gcHZucyAqIHJwZHggKyBycGR5ID0gZnZzICogeCAtIGZ2cyAqIHB4ICsgcHlcblxuICBzd2l0Y2g6XG5cbiAgICBmdnMgKiB4IC0gZnZzICogcHggKyBweSA9IHB2bnMgKiB4IC0gcHZucyAqIHJwZHggKyBycGR5XG5cbiAgc29sdmUgZm9yIHg6XG5cbiAgICBmdnMgKiB4IC0gcHZucyAqIHggPSBmdnMgKiBweCAtIHB2bnMgKiBycGR4IC0gcHkgKyBycGR5XG5cblxuXG4gICAgICAgICAgZnZzICogcHggLSBwdm5zICogcnBkeCArIHJwZHkgLSBweVxuICAgIHggPSAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICAgZnZzIC0gcHZuc1xuXG4gIGFuZDpcblxuICAgIHkgPSBmdnMgKiAoeCAtIHB4KSArIHB5XG5cblxuXG5JTlRFUlBPTEFURTpcbj09PT09PT09PT09PVxuXG5FeGFtcGxlcyBvZiBwb2ludCBpbnRlcnBvbGF0aW9uLlxuXG5UaGUgd2VpZ2h0IG9mIHRoZSBtb3ZlbWVudCBvZiB0aGUgcmVmZXJlbmNlIHBvaW50IGdldHMgYmlnZ2VyXG50aGUgZnVydGhlciB0aGUgb3RoZXIgcmVmZXJlbmNlIHBvaW50IGlzIGF3YXksIHRodXMgdGhlIHNhZmVzdFxub3B0aW9uICh0aGF0IGlzIGF2b2lkaW5nIDAvMCBkaXZpc2lvbnMpIGlzIHRvIHdlaWdodCB0aGVcbm9yaWdpbmFsIGRpc3RhbmNlIG9mIHRoZSBvdGhlciBwb2ludCBieSB0aGUgc3VtIG9mIGJvdGggZGlzdGFuY2VzLlxuXG5JZiB0aGUgc3VtIG9mIGJvdGggZGlzdGFuY2VzIGlzIDAsIHRoZW4gbW92ZSB0aGUgcG9pbnQgYnkgdGhlXG5hcml0aG1ldGljIGF2ZXJhZ2Ugb2YgdGhlIG1vdmVtZW50IG9mIGJvdGggcmVmZXJlbmNlIHBvaW50cy5cblxuXG5cblxuICAgICAgICAgICAoKzYpXG4gICAgcnAxbyAqLS0tLT4qcnAxXG4gICAgICAgICAuICAgICAuICAgICAgICAgICAgICAgICAgICAgICAgICAoKzEyKVxuICAgICAgICAgLiAgICAgLiAgICAgICAgICAgICAgICAgIHJwMm8gKi0tLS0tLS0tLS0+KiBycDJcbiAgICAgICAgIC4gICAgIC4gICAgICAgICAgICAgICAgICAgICAgIC4gICAgICAgICAgIC5cbiAgICAgICAgIC4gICAgIC4gICAgICAgICAgICAgICAgICAgICAgIC4gICAgICAgICAgIC5cbiAgICAgICAgIC4gICAgMTAgICAgICAgICAgMjAgICAgICAgICAgIC4gICAgICAgICAgIC5cbiAgICAgICAgIHwuLi4uLi4uLi58Li4uLi4uLi4uLi4uLi4uLi4uLnwgICAgICAgICAgIC5cbiAgICAgICAgICAgICAgIC4gICAuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5cbiAgICAgICAgICAgICAgIC4gICAuICgrOCkgICAgICAgICAgICAgICAgICAgICAgICAgIC5cbiAgICAgICAgICAgICAgICBwbyAqLS0tLS0tPipwICAgICAgICAgICAgICAgICAgICAgIC5cbiAgICAgICAgICAgICAgIC4gICAgICAgICAgIC4gICAgICAgICAgICAgICAgICAgICAgIC5cbiAgICAgICAgICAgICAgIC4gICAgMTIgICAgIC4gICAgICAgICAgMjQgICAgICAgICAgIC5cbiAgICAgICAgICAgICAgIHwuLi4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzNlxuXG5cbi0tLS0tLS1cblxuXG5cbiAgICAgICAgICAgKCsxMClcbiAgICBycDFvICotLS0tLS0tLT4qcnAxXG4gICAgICAgICAuICAgICAgICAgLiAgICAgICAgICAgICAgICAgICAgICAoLTEwKVxuICAgICAgICAgLiAgICAgICAgIC4gICAgICAgICAgICAgIHJwMiAqPC0tLS0tLS0tLSogcnBvMlxuICAgICAgICAgLiAgICAgICAgIC4gICAgICAgICAgICAgICAgICAgLiAgICAgICAgIC5cbiAgICAgICAgIC4gICAgICAgICAuICAgICAgICAgICAgICAgICAgIC4gICAgICAgICAuXG4gICAgICAgICAuICAgIDEwICAgLiAgICAgICAgICAzMCAgICAgICAuICAgICAgICAgLlxuICAgICAgICAgfC4uLi4uLi4uLnwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLnxcbiAgICAgICAgICAgICAgICAgICAuICAgICAgICAgICAgICAgICAgIC5cbiAgICAgICAgICAgICAgICAgICAuICgrNSkgICAgICAgICAgICAgIC5cbiAgICAgICAgICAgICAgICBwbyAqLS0tPiogcCAgICAgICAgICAgIC5cbiAgICAgICAgICAgICAgICAgICAuICAgIC4gICAgICAgICAgICAgIC5cbiAgICAgICAgICAgICAgICAgICAuICAgIC4gICAyMCAgICAgICAgIC5cbiAgICAgICAgICAgICAgICAgICB8Li4uLnwuLi4uLi4uLi4uLi4uLnxcbiAgICAgICAgICAgICAgICAgICAgIDUgICAgICAgIDE1XG5cblxuLS0tLS0tLVxuXG5cbiAgICAgICAgICAgKCsxMClcbiAgICBycDFvICotLS0tLS0tLT4qcnAxXG4gICAgICAgICAuICAgICAgICAgLlxuICAgICAgICAgLiAgICAgICAgIC5cbiAgICBycDJvICotLS0tLS0tLT4qcnAyXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgrMTApXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBvICotLS0tLS0tLT4qIHBcblxuLS0tLS0tLVxuXG5cbiAgICAgICAgICAgKCsxMClcbiAgICBycDFvICotLS0tLS0tLT4qcnAxXG4gICAgICAgICAuICAgICAgICAgLlxuICAgICAgICAgLiAgICAgICAgIC4oKzMwKVxuICAgIHJwMm8gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0+KnJwMlxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKzI1KVxuICAgICAgICAgICAgICAgICAgICAgICAgICBwbyAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0+KiBwXG5cblxuXG52aW06IHNldCB0cz00IHN3PTQgZXhwYW5kdGFiOlxuKioqKiovXG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgaW50byBhIGxpc3Qgb2YgdG9rZW5zLlxuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHRva2VuXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hhciBhIHNpbmdsZSBjaGFyXG4gKi9cbmZ1bmN0aW9uIFRva2VuKGNoYXIpIHtcbiAgICB0aGlzLmNoYXIgPSBjaGFyO1xuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgICB0aGlzLmFjdGl2ZVN0YXRlID0gbnVsbDtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgY29udGV4dCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0SW5kZXggcmFuZ2Ugc3RhcnQgaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRPZmZzZXQgcmFuZ2UgZW5kIGluZGV4IG9mZnNldFxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHROYW1lIG93bmVyIGNvbnRleHQgbmFtZVxuICovXG5mdW5jdGlvbiBDb250ZXh0UmFuZ2Uoc3RhcnRJbmRleCwgZW5kT2Zmc2V0LCBjb250ZXh0TmFtZSkge1xuICAgIHRoaXMuY29udGV4dE5hbWUgPSBjb250ZXh0TmFtZTtcbiAgICB0aGlzLnN0YXJ0SW5kZXggPSBzdGFydEluZGV4O1xuICAgIHRoaXMuZW5kT2Zmc2V0ID0gZW5kT2Zmc2V0O1xufVxuXG4vKipcbiAqIENoZWNrIGNvbnRleHQgc3RhcnQgYW5kIGVuZFxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHROYW1lIGEgdW5pcXVlIGNvbnRleHQgbmFtZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2hlY2tTdGFydCBhIHByZWRpY2F0ZSBmdW5jdGlvbiB0aGUgaW5kaWNhdGVzIGEgY29udGV4dCdzIHN0YXJ0XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjaGVja0VuZCBhIHByZWRpY2F0ZSBmdW5jdGlvbiB0aGUgaW5kaWNhdGVzIGEgY29udGV4dCdzIGVuZFxuICovXG5mdW5jdGlvbiBDb250ZXh0Q2hlY2tlcihjb250ZXh0TmFtZSwgY2hlY2tTdGFydCwgY2hlY2tFbmQpIHtcbiAgICB0aGlzLmNvbnRleHROYW1lID0gY29udGV4dE5hbWU7XG4gICAgdGhpcy5vcGVuUmFuZ2UgPSBudWxsO1xuICAgIHRoaXMucmFuZ2VzID0gW107XG4gICAgdGhpcy5jaGVja1N0YXJ0ID0gY2hlY2tTdGFydDtcbiAgICB0aGlzLmNoZWNrRW5kID0gY2hlY2tFbmQ7XG59XG5cbi8qKlxuICogQHR5cGVkZWYgQ29udGV4dFBhcmFtc1xuICogQHR5cGUgT2JqZWN0XG4gKiBAcHJvcGVydHkge2FycmF5fSBjb250ZXh0IGNvbnRleHQgaXRlbXNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjdXJyZW50SW5kZXggY3VycmVudCBpdGVtIGluZGV4XG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBjb250ZXh0IHBhcmFtc1xuICogQHBhcmFtIHthcnJheX0gY29udGV4dCBhIGxpc3Qgb2YgaXRlbXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50SW5kZXggY3VycmVudCBpdGVtIGluZGV4XG4gKi9cbmZ1bmN0aW9uIENvbnRleHRQYXJhbXMoY29udGV4dCwgY3VycmVudEluZGV4KSB7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLmluZGV4ID0gY3VycmVudEluZGV4O1xuICAgIHRoaXMubGVuZ3RoID0gY29udGV4dC5sZW5ndGg7XG4gICAgdGhpcy5jdXJyZW50ID0gY29udGV4dFtjdXJyZW50SW5kZXhdO1xuICAgIHRoaXMuYmFja3RyYWNrID0gY29udGV4dC5zbGljZSgwLCBjdXJyZW50SW5kZXgpO1xuICAgIHRoaXMubG9va2FoZWFkID0gY29udGV4dC5zbGljZShjdXJyZW50SW5kZXggKyAxKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gZXZlbnQgaW5zdGFuY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudElkIGV2ZW50IHVuaXF1ZSBpZFxuICovXG5mdW5jdGlvbiBFdmVudChldmVudElkKSB7XG4gICAgdGhpcy5ldmVudElkID0gZXZlbnRJZDtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gW107XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIGNvcmUgZXZlbnRzIGFuZCBhdXRvIHN1YnNjcmliZSByZXF1aXJlZCBldmVudCBoYW5kbGVyc1xuICogQHBhcmFtIHthbnl9IGV2ZW50cyBhbiBvYmplY3QgdGhhdCBlbmxpc3RzIGNvcmUgZXZlbnRzIGhhbmRsZXJzXG4gKi9cbmZ1bmN0aW9uIGluaXRpYWxpemVDb3JlRXZlbnRzKGV2ZW50cykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNvcmVFdmVudHMgPSBbXG4gICAgICAgICdzdGFydCcsICdlbmQnLCAnbmV4dCcsICduZXdUb2tlbicsICdjb250ZXh0U3RhcnQnLFxuICAgICAgICAnY29udGV4dEVuZCcsICdpbnNlcnRUb2tlbicsICdyZW1vdmVUb2tlbicsICdyZW1vdmVSYW5nZScsXG4gICAgICAgICdyZXBsYWNlVG9rZW4nLCAncmVwbGFjZVJhbmdlJywgJ2NvbXBvc2VSVUQnLCAndXBkYXRlQ29udGV4dHNSYW5nZXMnXG4gICAgXTtcblxuICAgIGNvcmVFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRJZCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyQxLmV2ZW50cywgZXZlbnRJZCwge1xuICAgICAgICAgICAgdmFsdWU6IG5ldyBFdmVudChldmVudElkKVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmICghIWV2ZW50cykge1xuICAgICAgICBjb3JlRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SWQpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IGV2ZW50c1tldmVudElkXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzJDEuZXZlbnRzW2V2ZW50SWRdLnN1YnNjcmliZShldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgcmVxdWlyZXNDb250ZXh0VXBkYXRlID0gW1xuICAgICAgICAnaW5zZXJ0VG9rZW4nLCAncmVtb3ZlVG9rZW4nLCAncmVtb3ZlUmFuZ2UnLFxuICAgICAgICAncmVwbGFjZVRva2VuJywgJ3JlcGxhY2VSYW5nZScsICdjb21wb3NlUlVEJ1xuICAgIF07XG4gICAgcmVxdWlyZXNDb250ZXh0VXBkYXRlLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SWQpIHtcbiAgICAgICAgdGhpcyQxLmV2ZW50c1tldmVudElkXS5zdWJzY3JpYmUoXG4gICAgICAgICAgICB0aGlzJDEudXBkYXRlQ29udGV4dHNSYW5nZXNcbiAgICAgICAgKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBpbnRvIGEgbGlzdCBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7YW55fSBldmVudHMgdG9rZW5pemVyIGNvcmUgZXZlbnRzXG4gKi9cbmZ1bmN0aW9uIFRva2VuaXplcihldmVudHMpIHtcbiAgICB0aGlzLnRva2VucyA9IFtdO1xuICAgIHRoaXMucmVnaXN0ZXJlZENvbnRleHRzID0ge307XG4gICAgdGhpcy5jb250ZXh0Q2hlY2tlcnMgPSBbXTtcbiAgICB0aGlzLmV2ZW50cyA9IHt9O1xuICAgIHRoaXMucmVnaXN0ZXJlZE1vZGlmaWVycyA9IFtdO1xuXG4gICAgaW5pdGlhbGl6ZUNvcmVFdmVudHMuY2FsbCh0aGlzLCBldmVudHMpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIHN0YXRlIG9mIGEgdG9rZW4sIHVzdWFsbHkgY2FsbGVkIGJ5IGEgc3RhdGUgbW9kaWZpZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHN0YXRlIGl0ZW0ga2V5XG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgc3RhdGUgaXRlbSB2YWx1ZVxuICovXG5Ub2tlbi5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5zdGF0ZVtrZXldID0gdmFsdWU7XG4gICAgdGhpcy5hY3RpdmVTdGF0ZSA9IHsga2V5OiBrZXksIHZhbHVlOiB0aGlzLnN0YXRlW2tleV0gfTtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVTdGF0ZTtcbn07XG5cblRva2VuLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVbc3RhdGVJZF0gfHwgbnVsbDtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGluZGV4IGV4aXN0cyBpbiB0aGUgdG9rZW5zIGxpc3QuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggdG9rZW4gaW5kZXhcbiAqL1xuVG9rZW5pemVyLnByb3RvdHlwZS5pbmJvdW5kSW5kZXggPSBmdW5jdGlvbihpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy50b2tlbnMubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBDb21wb3NlIGFuZCBhcHBseSBhIGxpc3Qgb2Ygb3BlcmF0aW9ucyAocmVwbGFjZSwgdXBkYXRlLCBkZWxldGUpXG4gKiBAcGFyYW0ge2FycmF5fSBSVURzIHJlcGxhY2UsIHVwZGF0ZSBhbmQgZGVsZXRlIG9wZXJhdGlvbnNcbiAqIFRPRE86IFBlcmYuIE9wdGltaXphdGlvbiAobGVuZ3RoQmVmb3JlID09PSBsZW5ndGhBZnRlciA/IGRpc3BhdGNoIG9uY2UpXG4gKi9cblRva2VuaXplci5wcm90b3R5cGUuY29tcG9zZVJVRCA9IGZ1bmN0aW9uIChSVURzKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgc2lsZW50ID0gdHJ1ZTtcbiAgICB2YXIgc3RhdGUgPSBSVURzLm1hcChmdW5jdGlvbiAoUlVEKSB7IHJldHVybiAoXG4gICAgICAgIHRoaXMkMVtSVURbMF1dLmFwcGx5KHRoaXMkMSwgUlVELnNsaWNlKDEpLmNvbmNhdChzaWxlbnQpKVxuICAgICk7IH0pO1xuICAgIHZhciBoYXNGQUlMT2JqZWN0ID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gKFxuICAgICAgICB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBvYmouaGFzT3duUHJvcGVydHkoJ0ZBSUwnKVxuICAgICk7IH07XG4gICAgaWYgKHN0YXRlLmV2ZXJ5KGhhc0ZBSUxPYmplY3QpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBGQUlMOiBcImNvbXBvc2VSVUQ6IG9uZSBvciBtb3JlIG9wZXJhdGlvbnMgaGFzbid0IGNvbXBsZXRlZCBzdWNjZXNzZnVsbHlcIixcbiAgICAgICAgICAgIHJlcG9ydDogc3RhdGUuZmlsdGVyKGhhc0ZBSUxPYmplY3QpXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuZGlzcGF0Y2goJ2NvbXBvc2VSVUQnLCBbc3RhdGUuZmlsdGVyKGZ1bmN0aW9uIChvcCkgeyByZXR1cm4gIWhhc0ZBSUxPYmplY3Qob3ApOyB9KV0pO1xufTtcblxuLyoqXG4gKiBSZXBsYWNlIGEgcmFuZ2Ugb2YgdG9rZW5zIHdpdGggYSBsaXN0IG9mIHRva2Vuc1xuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0SW5kZXggcmFuZ2Ugc3RhcnQgaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgcmFuZ2Ugb2Zmc2V0XG4gKiBAcGFyYW0ge3Rva2VufSB0b2tlbnMgYSBsaXN0IG9mIHRva2VucyB0byByZXBsYWNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNpbGVudCBkaXNwYXRjaCBldmVudHMgYW5kIHVwZGF0ZSBjb250ZXh0IHJhbmdlc1xuICovXG5Ub2tlbml6ZXIucHJvdG90eXBlLnJlcGxhY2VSYW5nZSA9IGZ1bmN0aW9uIChzdGFydEluZGV4LCBvZmZzZXQsIHRva2Vucywgc2lsZW50KSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICE9PSBudWxsID8gb2Zmc2V0IDogdGhpcy50b2tlbnMubGVuZ3RoO1xuICAgIHZhciBpc1Rva2VuVHlwZSA9IHRva2Vucy5ldmVyeShmdW5jdGlvbiAodG9rZW4pIHsgcmV0dXJuIHRva2VuIGluc3RhbmNlb2YgVG9rZW47IH0pO1xuICAgIGlmICghaXNOYU4oc3RhcnRJbmRleCkgJiYgdGhpcy5pbmJvdW5kSW5kZXgoc3RhcnRJbmRleCkgJiYgaXNUb2tlblR5cGUpIHtcbiAgICAgICAgdmFyIHJlcGxhY2VkID0gdGhpcy50b2tlbnMuc3BsaWNlLmFwcGx5KFxuICAgICAgICAgICAgdGhpcy50b2tlbnMsIFtzdGFydEluZGV4LCBvZmZzZXRdLmNvbmNhdCh0b2tlbnMpXG4gICAgICAgICk7XG4gICAgICAgIGlmICghc2lsZW50KSB7IHRoaXMuZGlzcGF0Y2goJ3JlcGxhY2VUb2tlbicsIFtzdGFydEluZGV4LCBvZmZzZXQsIHRva2Vuc10pOyB9XG4gICAgICAgIHJldHVybiBbcmVwbGFjZWQsIHRva2Vuc107XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgRkFJTDogJ3JlcGxhY2VSYW5nZTogaW52YWxpZCB0b2tlbnMgb3Igc3RhcnRJbmRleC4nIH07XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZXBsYWNlIGEgdG9rZW4gd2l0aCBhbm90aGVyIHRva2VuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggdG9rZW4gaW5kZXhcbiAqIEBwYXJhbSB7dG9rZW59IHRva2VuIGEgdG9rZW4gdG8gcmVwbGFjZVxuICogQHBhcmFtIHtib29sZWFufSBzaWxlbnQgZGlzcGF0Y2ggZXZlbnRzIGFuZCB1cGRhdGUgY29udGV4dCByYW5nZXNcbiAqL1xuVG9rZW5pemVyLnByb3RvdHlwZS5yZXBsYWNlVG9rZW4gPSBmdW5jdGlvbiAoaW5kZXgsIHRva2VuLCBzaWxlbnQpIHtcbiAgICBpZiAoIWlzTmFOKGluZGV4KSAmJiB0aGlzLmluYm91bmRJbmRleChpbmRleCkgJiYgdG9rZW4gaW5zdGFuY2VvZiBUb2tlbikge1xuICAgICAgICB2YXIgcmVwbGFjZWQgPSB0aGlzLnRva2Vucy5zcGxpY2UoaW5kZXgsIDEsIHRva2VuKTtcbiAgICAgICAgaWYgKCFzaWxlbnQpIHsgdGhpcy5kaXNwYXRjaCgncmVwbGFjZVRva2VuJywgW2luZGV4LCB0b2tlbl0pOyB9XG4gICAgICAgIHJldHVybiBbcmVwbGFjZWRbMF0sIHRva2VuXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyBGQUlMOiAncmVwbGFjZVRva2VuOiBpbnZhbGlkIHRva2VuIG9yIGluZGV4LicgfTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSByYW5nZSBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydEluZGV4IHJhbmdlIHN0YXJ0IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IHJhbmdlIG9mZnNldFxuICogQHBhcmFtIHtib29sZWFufSBzaWxlbnQgZGlzcGF0Y2ggZXZlbnRzIGFuZCB1cGRhdGUgY29udGV4dCByYW5nZXNcbiAqL1xuVG9rZW5pemVyLnByb3RvdHlwZS5yZW1vdmVSYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0SW5kZXgsIG9mZnNldCwgc2lsZW50KSB7XG4gICAgb2Zmc2V0ID0gIWlzTmFOKG9mZnNldCkgPyBvZmZzZXQgOiB0aGlzLnRva2Vucy5sZW5ndGg7XG4gICAgdmFyIHRva2VucyA9IHRoaXMudG9rZW5zLnNwbGljZShzdGFydEluZGV4LCBvZmZzZXQpO1xuICAgIGlmICghc2lsZW50KSB7IHRoaXMuZGlzcGF0Y2goJ3JlbW92ZVJhbmdlJywgW3Rva2Vucywgc3RhcnRJbmRleCwgb2Zmc2V0XSk7IH1cbiAgICByZXR1cm4gdG9rZW5zO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYSB0b2tlbiBhdCBhIGNlcnRhaW4gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCB0b2tlbiBpbmRleFxuICogQHBhcmFtIHtib29sZWFufSBzaWxlbnQgZGlzcGF0Y2ggZXZlbnRzIGFuZCB1cGRhdGUgY29udGV4dCByYW5nZXNcbiAqL1xuVG9rZW5pemVyLnByb3RvdHlwZS5yZW1vdmVUb2tlbiA9IGZ1bmN0aW9uKGluZGV4LCBzaWxlbnQpIHtcbiAgICBpZiAoIWlzTmFOKGluZGV4KSAmJiB0aGlzLmluYm91bmRJbmRleChpbmRleCkpIHtcbiAgICAgICAgdmFyIHRva2VuID0gdGhpcy50b2tlbnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaWYgKCFzaWxlbnQpIHsgdGhpcy5kaXNwYXRjaCgncmVtb3ZlVG9rZW4nLCBbdG9rZW4sIGluZGV4XSk7IH1cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IEZBSUw6ICdyZW1vdmVUb2tlbjogaW52YWxpZCB0b2tlbiBpbmRleC4nIH07XG4gICAgfVxufTtcblxuLyoqXG4gKiBJbnNlcnQgYSBsaXN0IG9mIHRva2VucyBhdCBhIGNlcnRhaW4gaW5kZXhcbiAqIEBwYXJhbSB7YXJyYXl9IHRva2VucyBhIGxpc3Qgb2YgdG9rZW5zIHRvIGluc2VydFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IGluc2VydCB0aGUgbGlzdCBvZiB0b2tlbnMgYXQgaW5kZXhcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2lsZW50IGRpc3BhdGNoIGV2ZW50cyBhbmQgdXBkYXRlIGNvbnRleHQgcmFuZ2VzXG4gKi9cblRva2VuaXplci5wcm90b3R5cGUuaW5zZXJ0VG9rZW4gPSBmdW5jdGlvbiAodG9rZW5zLCBpbmRleCwgc2lsZW50KSB7XG4gICAgdmFyIHRva2VuVHlwZSA9IHRva2Vucy5ldmVyeShcbiAgICAgICAgZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiB0b2tlbiBpbnN0YW5jZW9mIFRva2VuOyB9XG4gICAgKTtcbiAgICBpZiAodG9rZW5UeXBlKSB7XG4gICAgICAgIHRoaXMudG9rZW5zLnNwbGljZS5hcHBseShcbiAgICAgICAgICAgIHRoaXMudG9rZW5zLCBbaW5kZXgsIDBdLmNvbmNhdCh0b2tlbnMpXG4gICAgICAgICk7XG4gICAgICAgIGlmICghc2lsZW50KSB7IHRoaXMuZGlzcGF0Y2goJ2luc2VydFRva2VuJywgW3Rva2VucywgaW5kZXhdKTsgfVxuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IEZBSUw6ICdpbnNlcnRUb2tlbjogaW52YWxpZCB0b2tlbihzKS4nIH07XG4gICAgfVxufTtcblxuLyoqXG4gKiBBIHN0YXRlIG1vZGlmaWVyIHRoYXQgaXMgY2FsbGVkIG9uICduZXdUb2tlbicgZXZlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2RpZmllcklkIHN0YXRlIG1vZGlmaWVyIGlkXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25kaXRpb24gYSBwcmVkaWNhdGUgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgb3IgZmFsc2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG1vZGlmaWVyIGEgZnVuY3Rpb24gdG8gdXBkYXRlIHRva2VuIHN0YXRlXG4gKi9cblRva2VuaXplci5wcm90b3R5cGUucmVnaXN0ZXJNb2RpZmllciA9IGZ1bmN0aW9uKG1vZGlmaWVySWQsIGNvbmRpdGlvbiwgbW9kaWZpZXIpIHtcbiAgICB0aGlzLmV2ZW50cy5uZXdUb2tlbi5zdWJzY3JpYmUoZnVuY3Rpb24odG9rZW4sIGNvbnRleHRQYXJhbXMpIHtcbiAgICAgICAgdmFyIGNvbmRpdGlvblBhcmFtcyA9IFt0b2tlbiwgY29udGV4dFBhcmFtc107XG4gICAgICAgIHZhciBjYW5BcHBseU1vZGlmaWVyID0gKFxuICAgICAgICAgICAgY29uZGl0aW9uID09PSBudWxsIHx8XG4gICAgICAgICAgICBjb25kaXRpb24uYXBwbHkodGhpcywgY29uZGl0aW9uUGFyYW1zKSA9PT0gdHJ1ZVxuICAgICAgICApO1xuICAgICAgICB2YXIgbW9kaWZpZXJQYXJhbXMgPSBbdG9rZW4sIGNvbnRleHRQYXJhbXNdO1xuICAgICAgICBpZiAoY2FuQXBwbHlNb2RpZmllcikge1xuICAgICAgICAgICAgdmFyIG5ld1N0YXRlVmFsdWUgPSBtb2RpZmllci5hcHBseSh0aGlzLCBtb2RpZmllclBhcmFtcyk7XG4gICAgICAgICAgICB0b2tlbi5zZXRTdGF0ZShtb2RpZmllcklkLCBuZXdTdGF0ZVZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMucmVnaXN0ZXJlZE1vZGlmaWVycy5wdXNoKG1vZGlmaWVySWQpO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgYSBoYW5kbGVyIHRvIGFuIGV2ZW50XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBldmVudEhhbmRsZXIgYW4gZXZlbnQgaGFuZGxlciBmdW5jdGlvblxuICovXG5FdmVudC5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGV2ZW50SGFuZGxlcikge1xuICAgIGlmICh0eXBlb2YgZXZlbnRIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiAoKHRoaXMuc3Vic2NyaWJlcnMucHVzaChldmVudEhhbmRsZXIpKSAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IEZBSUw6IChcImludmFsaWQgJ1wiICsgKHRoaXMuZXZlbnRJZCkgKyBcIicgZXZlbnQgaGFuZGxlclwiKX07XG4gICAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBhbiBldmVudCBoYW5kbGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3Vic0lkIHN1YnNjcmlwdGlvbiBpZFxuICovXG5FdmVudC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic0lkKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5zcGxpY2Uoc3Vic0lkLCAxKTtcbn07XG5cbi8qKlxuICogU2V0cyBjb250ZXh0IHBhcmFtcyBjdXJyZW50IHZhbHVlIGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggY29udGV4dCBwYXJhbXMgY3VycmVudCB2YWx1ZSBpbmRleFxuICovXG5Db250ZXh0UGFyYW1zLnByb3RvdHlwZS5zZXRDdXJyZW50SW5kZXggPSBmdW5jdGlvbihpbmRleCkge1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLmNvbnRleHRbaW5kZXhdO1xuICAgIHRoaXMuYmFja3RyYWNrID0gdGhpcy5jb250ZXh0LnNsaWNlKDAsIGluZGV4KTtcbiAgICB0aGlzLmxvb2thaGVhZCA9IHRoaXMuY29udGV4dC5zbGljZShpbmRleCArIDEpO1xufTtcblxuLyoqXG4gKiBHZXQgYW4gaXRlbSBhdCBhbiBvZmZzZXQgZnJvbSB0aGUgY3VycmVudCB2YWx1ZVxuICogZXhhbXBsZSAoY3VycmVudCB2YWx1ZSBpcyAzKTpcbiAqICAxICAgIDIgICBbM10gICA0ICAgIDUgICB8ICAgaXRlbXMgdmFsdWVzXG4gKiAtMiAgIC0xICAgIDAgICAgMSAgICAyICAgfCAgIG9mZnNldCB2YWx1ZXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgYW4gb2Zmc2V0IGZyb20gY3VycmVudCB2YWx1ZSBpbmRleFxuICovXG5Db250ZXh0UGFyYW1zLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgIGNhc2UgKG9mZnNldCA9PT0gMCk6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50O1xuICAgICAgICBjYXNlIChvZmZzZXQgPCAwICYmIE1hdGguYWJzKG9mZnNldCkgPD0gdGhpcy5iYWNrdHJhY2subGVuZ3RoKTpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhY2t0cmFjay5zbGljZShvZmZzZXQpWzBdO1xuICAgICAgICBjYXNlIChvZmZzZXQgPiAwICYmIG9mZnNldCA8PSB0aGlzLmxvb2thaGVhZC5sZW5ndGgpOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9va2FoZWFkW29mZnNldCAtIDFdO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbnRleHQgcmFuZ2UgaW50byBhIHN0cmluZyB2YWx1ZVxuICogQHBhcmFtIHtjb250ZXh0UmFuZ2V9IHJhbmdlIGEgY29udGV4dCByYW5nZVxuICovXG5Ub2tlbml6ZXIucHJvdG90eXBlLnJhbmdlVG9UZXh0ID0gZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgaWYgKHJhbmdlIGluc3RhbmNlb2YgQ29udGV4dFJhbmdlKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLmdldFJhbmdlVG9rZW5zKHJhbmdlKVxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiB0b2tlbi5jaGFyOyB9KS5qb2luKCcnKVxuICAgICAgICApO1xuICAgIH1cbn07XG5cbi8qKlxuICogQ29udmVydHMgYWxsIHRva2VucyBpbnRvIGEgc3RyaW5nXG4gKi9cblRva2VuaXplci5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy50b2tlbnMubWFwKGZ1bmN0aW9uICh0b2tlbikgeyByZXR1cm4gdG9rZW4uY2hhcjsgfSkuam9pbignJyk7XG59O1xuXG4vKipcbiAqIEdldCBhIGNvbnRleHQgYnkgbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHROYW1lIGNvbnRleHQgbmFtZSB0byBnZXRcbiAqL1xuVG9rZW5pemVyLnByb3RvdHlwZS5nZXRDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHROYW1lKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLnJlZ2lzdGVyZWRDb250ZXh0c1tjb250ZXh0TmFtZV07XG4gICAgcmV0dXJuICEhY29udGV4dCA/IGNvbnRleHQgOiBudWxsO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVzIGEgbmV3IGV2ZW50IGhhbmRsZXIgdG8gYW4gZXZlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgZXZlbnQgbmFtZSB0byBzdWJzY3JpYmUgdG9cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGV2ZW50SGFuZGxlciBhIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQgb24gZXZlbnRcbiAqL1xuVG9rZW5pemVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVyKSB7XG4gICAgdmFyIGV2ZW50ID0gdGhpcy5ldmVudHNbZXZlbnROYW1lXTtcbiAgICBpZiAoISFldmVudCkge1xuICAgICAgICByZXR1cm4gZXZlbnQuc3Vic2NyaWJlKGV2ZW50SGFuZGxlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufTtcblxuLyoqXG4gKiBEaXNwYXRjaGVzIGFuIGV2ZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7YW55fSBhcmdzIGV2ZW50IGhhbmRsZXIgYXJndW1lbnRzXG4gKi9cblRva2VuaXplci5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbihldmVudE5hbWUsIGFyZ3MpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBldmVudCA9IHRoaXMuZXZlbnRzW2V2ZW50TmFtZV07XG4gICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgRXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hcHBseSh0aGlzJDEsIGFyZ3MgfHwgW10pO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgbmV3IGNvbnRleHQgY2hlY2tlclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRleHROYW1lIGEgdW5pcXVlIGNvbnRleHQgbmFtZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29udGV4dFN0YXJ0Q2hlY2sgYSBwcmVkaWNhdGUgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgb24gY29udGV4dCBzdGFydFxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29udGV4dEVuZENoZWNrICBhIHByZWRpY2F0ZSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdHJ1ZSBvbiBjb250ZXh0IGVuZFxuICogVE9ETzogY2FsbCB0b2tlbml6ZSBvbiByZWdpc3RyYXRpb24gdG8gdXBkYXRlIGNvbnRleHQgcmFuZ2VzIHdpdGggdGhlIG5ldyBjb250ZXh0LlxuICovXG5Ub2tlbml6ZXIucHJvdG90eXBlLnJlZ2lzdGVyQ29udGV4dENoZWNrZXIgPSBmdW5jdGlvbihjb250ZXh0TmFtZSwgY29udGV4dFN0YXJ0Q2hlY2ssIGNvbnRleHRFbmRDaGVjaykge1xuICAgIGlmICghIXRoaXMuZ2V0Q29udGV4dChjb250ZXh0TmFtZSkpIHsgcmV0dXJuIHtcbiAgICAgICAgRkFJTDpcbiAgICAgICAgKFwiY29udGV4dCBuYW1lICdcIiArIGNvbnRleHROYW1lICsgXCInIGlzIGFscmVhZHkgcmVnaXN0ZXJlZC5cIilcbiAgICB9OyB9XG4gICAgaWYgKHR5cGVvZiBjb250ZXh0U3RhcnRDaGVjayAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4ge1xuICAgICAgICBGQUlMOlxuICAgICAgICBcIm1pc3NpbmcgY29udGV4dCBzdGFydCBjaGVjay5cIlxuICAgIH07IH1cbiAgICBpZiAodHlwZW9mIGNvbnRleHRFbmRDaGVjayAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4ge1xuICAgICAgICBGQUlMOlxuICAgICAgICBcIm1pc3NpbmcgY29udGV4dCBlbmQgY2hlY2suXCJcbiAgICB9OyB9XG4gICAgdmFyIGNvbnRleHRDaGVja2VycyA9IG5ldyBDb250ZXh0Q2hlY2tlcihcbiAgICAgICAgY29udGV4dE5hbWUsIGNvbnRleHRTdGFydENoZWNrLCBjb250ZXh0RW5kQ2hlY2tcbiAgICApO1xuICAgIHRoaXMucmVnaXN0ZXJlZENvbnRleHRzW2NvbnRleHROYW1lXSA9IGNvbnRleHRDaGVja2VycztcbiAgICB0aGlzLmNvbnRleHRDaGVja2Vycy5wdXNoKGNvbnRleHRDaGVja2Vycyk7XG4gICAgcmV0dXJuIGNvbnRleHRDaGVja2Vycztcbn07XG5cbi8qKlxuICogR2V0cyBhIGNvbnRleHQgcmFuZ2UgdG9rZW5zXG4gKiBAcGFyYW0ge2NvbnRleHRSYW5nZX0gcmFuZ2UgYSBjb250ZXh0IHJhbmdlXG4gKi9cblRva2VuaXplci5wcm90b3R5cGUuZ2V0UmFuZ2VUb2tlbnMgPSBmdW5jdGlvbihyYW5nZSkge1xuICAgIHZhciBlbmRJbmRleCA9IHJhbmdlLnN0YXJ0SW5kZXggKyByYW5nZS5lbmRPZmZzZXQ7XG4gICAgcmV0dXJuIFtdLmNvbmNhdChcbiAgICAgICAgdGhpcy50b2tlbnNcbiAgICAgICAgICAgIC5zbGljZShyYW5nZS5zdGFydEluZGV4LCBlbmRJbmRleClcbiAgICApO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSByYW5nZXMgb2YgYSBjb250ZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGV4dE5hbWUgY29udGV4dCBuYW1lXG4gKi9cblRva2VuaXplci5wcm90b3R5cGUuZ2V0Q29udGV4dFJhbmdlcyA9IGZ1bmN0aW9uKGNvbnRleHROYW1lKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLmdldENvbnRleHQoY29udGV4dE5hbWUpO1xuICAgIGlmICghIWNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQucmFuZ2VzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IEZBSUw6IChcImNvbnRleHQgY2hlY2tlciAnXCIgKyBjb250ZXh0TmFtZSArIFwiJyBpcyBub3QgcmVnaXN0ZXJlZC5cIikgfTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJlc2V0cyBjb250ZXh0IHJhbmdlcyB0byBydW4gY29udGV4dCB1cGRhdGVcbiAqL1xuVG9rZW5pemVyLnByb3RvdHlwZS5yZXNldENvbnRleHRzUmFuZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWdpc3RlcmVkQ29udGV4dHMgPSB0aGlzLnJlZ2lzdGVyZWRDb250ZXh0cztcbiAgICBmb3IgKHZhciBjb250ZXh0TmFtZSBpbiByZWdpc3RlcmVkQ29udGV4dHMpIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWRDb250ZXh0cy5oYXNPd25Qcm9wZXJ0eShjb250ZXh0TmFtZSkpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gcmVnaXN0ZXJlZENvbnRleHRzW2NvbnRleHROYW1lXTtcbiAgICAgICAgICAgIGNvbnRleHQucmFuZ2VzID0gW107XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZXMgY29udGV4dCByYW5nZXNcbiAqL1xuVG9rZW5pemVyLnByb3RvdHlwZS51cGRhdGVDb250ZXh0c1JhbmdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlc2V0Q29udGV4dHNSYW5nZXMoKTtcbiAgICB2YXIgY2hhcnMgPSB0aGlzLnRva2Vucy5tYXAoZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiB0b2tlbi5jaGFyOyB9KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjb250ZXh0UGFyYW1zID0gbmV3IENvbnRleHRQYXJhbXMoY2hhcnMsIGkpO1xuICAgICAgICB0aGlzLnJ1bkNvbnRleHRDaGVjayhjb250ZXh0UGFyYW1zKTtcbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaCgndXBkYXRlQ29udGV4dHNSYW5nZXMnLCBbdGhpcy5yZWdpc3RlcmVkQ29udGV4dHNdKTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgZW5kIG9mZnNldCBvZiBhbiBvcGVuIHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IHJhbmdlIGVuZCBvZmZzZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZXh0TmFtZSBjb250ZXh0IG5hbWVcbiAqL1xuVG9rZW5pemVyLnByb3RvdHlwZS5zZXRFbmRPZmZzZXQgPSBmdW5jdGlvbiAob2Zmc2V0LCBjb250ZXh0TmFtZSkge1xuICAgIHZhciBzdGFydEluZGV4ID0gdGhpcy5nZXRDb250ZXh0KGNvbnRleHROYW1lKS5vcGVuUmFuZ2Uuc3RhcnRJbmRleDtcbiAgICB2YXIgcmFuZ2UgPSBuZXcgQ29udGV4dFJhbmdlKHN0YXJ0SW5kZXgsIG9mZnNldCwgY29udGV4dE5hbWUpO1xuICAgIHZhciByYW5nZXMgPSB0aGlzLmdldENvbnRleHQoY29udGV4dE5hbWUpLnJhbmdlcztcbiAgICByYW5nZS5yYW5nZUlkID0gY29udGV4dE5hbWUgKyBcIi5cIiArIChyYW5nZXMubGVuZ3RoKTtcbiAgICByYW5nZXMucHVzaChyYW5nZSk7XG4gICAgdGhpcy5nZXRDb250ZXh0KGNvbnRleHROYW1lKS5vcGVuUmFuZ2UgPSBudWxsO1xuICAgIHJldHVybiByYW5nZTtcbn07XG5cbi8qKlxuICogUnVucyBhIGNvbnRleHQgY2hlY2sgb24gdGhlIGN1cnJlbnQgY29udGV4dFxuICogQHBhcmFtIHtjb250ZXh0UGFyYW1zfSBjb250ZXh0UGFyYW1zIGN1cnJlbnQgY29udGV4dCBwYXJhbXNcbiAqL1xuVG9rZW5pemVyLnByb3RvdHlwZS5ydW5Db250ZXh0Q2hlY2sgPSBmdW5jdGlvbihjb250ZXh0UGFyYW1zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgaW5kZXggPSBjb250ZXh0UGFyYW1zLmluZGV4O1xuICAgIHRoaXMuY29udGV4dENoZWNrZXJzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRleHRDaGVja2VyKSB7XG4gICAgICAgIHZhciBjb250ZXh0TmFtZSA9IGNvbnRleHRDaGVja2VyLmNvbnRleHROYW1lO1xuICAgICAgICB2YXIgb3BlblJhbmdlID0gdGhpcyQxLmdldENvbnRleHQoY29udGV4dE5hbWUpLm9wZW5SYW5nZTtcbiAgICAgICAgaWYgKCFvcGVuUmFuZ2UgJiYgY29udGV4dENoZWNrZXIuY2hlY2tTdGFydChjb250ZXh0UGFyYW1zKSkge1xuICAgICAgICAgICAgb3BlblJhbmdlID0gbmV3IENvbnRleHRSYW5nZShpbmRleCwgbnVsbCwgY29udGV4dE5hbWUpO1xuICAgICAgICAgICAgdGhpcyQxLmdldENvbnRleHQoY29udGV4dE5hbWUpLm9wZW5SYW5nZSA9IG9wZW5SYW5nZTtcbiAgICAgICAgICAgIHRoaXMkMS5kaXNwYXRjaCgnY29udGV4dFN0YXJ0JywgW2NvbnRleHROYW1lLCBpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghIW9wZW5SYW5nZSAmJiBjb250ZXh0Q2hlY2tlci5jaGVja0VuZChjb250ZXh0UGFyYW1zKSkge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IChpbmRleCAtIG9wZW5SYW5nZS5zdGFydEluZGV4KSArIDE7XG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzJDEuc2V0RW5kT2Zmc2V0KG9mZnNldCwgY29udGV4dE5hbWUpO1xuICAgICAgICAgICAgdGhpcyQxLmRpc3BhdGNoKCdjb250ZXh0RW5kJywgW2NvbnRleHROYW1lLCByYW5nZV0pO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgdGV4dCBpbnRvIGEgbGlzdCBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IGEgdGV4dCB0byB0b2tlbml6ZVxuICovXG5Ub2tlbml6ZXIucHJvdG90eXBlLnRva2VuaXplID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICB0aGlzLnRva2VucyA9IFtdO1xuICAgIHRoaXMucmVzZXRDb250ZXh0c1JhbmdlcygpO1xuICAgIHZhciBjaGFycyA9IEFycmF5LmZyb20odGV4dCk7XG4gICAgdGhpcy5kaXNwYXRjaCgnc3RhcnQnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGFyID0gY2hhcnNbaV07XG4gICAgICAgIHZhciBjb250ZXh0UGFyYW1zID0gbmV3IENvbnRleHRQYXJhbXMoY2hhcnMsIGkpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKCduZXh0JywgW2NvbnRleHRQYXJhbXNdKTtcbiAgICAgICAgdGhpcy5ydW5Db250ZXh0Q2hlY2soY29udGV4dFBhcmFtcyk7XG4gICAgICAgIHZhciB0b2tlbiA9IG5ldyBUb2tlbihjaGFyKTtcbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goJ25ld1Rva2VuJywgW3Rva2VuLCBjb250ZXh0UGFyYW1zXSk7XG4gICAgfVxuICAgIHRoaXMuZGlzcGF0Y2goJ2VuZCcsIFt0aGlzLnRva2Vuc10pO1xuICAgIHJldHVybiB0aGlzLnRva2Vucztcbn07XG5cbi8vIOKVreKUgOKUhOKUhOKUhOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUhOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKVrlxuLy8g4pSKIENoYXJhY3RlciBDbGFzcyBBc3NlcnRpb25zIOKUiiBDaGVja3MgaWYgYSBjaGFyIGJlbG9uZ3MgdG8gYSBjZXJ0YWluIGNsYXNzIOKUilxuLy8g4pWw4pSA4pW+4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSE4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pWvXG4vLyBqc2NzOmRpc2FibGUgbWF4aW11bUxpbmVMZW5ndGhcbi8qKlxuICogQ2hlY2sgaWYgYSBjaGFyIGlzIEFyYWJpY1xuICogQHBhcmFtIHtzdHJpbmd9IGMgYSBzaW5nbGUgY2hhclxuICovXG5mdW5jdGlvbiBpc0FyYWJpY0NoYXIoYykge1xuICAgIHJldHVybiAvW1xcdTA2MDAtXFx1MDY1RlxcdTA2NkEtXFx1MDZEMlxcdTA2RkEtXFx1MDZGRl0vLnRlc3QoYyk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBjaGFyIGlzIGFuIGlzb2xhdGVkIGFyYWJpYyBjaGFyXG4gKiBAcGFyYW0ge3N0cmluZ30gYyBhIHNpbmdsZSBjaGFyXG4gKi9cbmZ1bmN0aW9uIGlzSXNvbGF0ZWRBcmFiaWNDaGFyKGNoYXIpIHtcbiAgICByZXR1cm4gL1tcXHUwNjMwXFx1MDY5MFxcdTA2MjFcXHUwNjMxXFx1MDY2MVxcdTA2NzFcXHUwNjIyXFx1MDYzMlxcdTA2NzJcXHUwNjkyXFx1MDZDMlxcdTA2MjNcXHUwNjczXFx1MDY5M1xcdTA2QzNcXHUwNjI0XFx1MDY5NFxcdTA2QzRcXHUwNjI1XFx1MDY3NVxcdTA2OTVcXHUwNkM1XFx1MDZFNVxcdTA2NzZcXHUwNjk2XFx1MDZDNlxcdTA2MjdcXHUwNjc3XFx1MDY5N1xcdTA2QzdcXHUwNjQ4XFx1MDY4OFxcdTA2OThcXHUwNkM4XFx1MDY4OVxcdTA2OTlcXHUwNkM5XFx1MDY4QVxcdTA2Q0FcXHUwNjZCXFx1MDY4QlxcdTA2Q0JcXHUwNjhDXFx1MDY4RFxcdTA2Q0RcXHUwNkZEXFx1MDY4RVxcdTA2RUVcXHUwNkZFXFx1MDYyRlxcdTA2OEZcXHUwNkNGXFx1MDZFRl0vLnRlc3QoY2hhcik7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBjaGFyIGlzIGFuIEFyYWJpYyBUYXNoa2VlbCBjaGFyXG4gKiBAcGFyYW0ge3N0cmluZ30gYyBhIHNpbmdsZSBjaGFyXG4gKi9cbmZ1bmN0aW9uIGlzVGFzaGtlZWxBcmFiaWNDaGFyKGNoYXIpIHtcbiAgICByZXR1cm4gL1tcXHUwNjAwLVxcdTA2MDVcXHUwNjBDLVxcdTA2MEVcXHUwNjEwLVxcdTA2MUJcXHUwNjFFXFx1MDY0Qi1cXHUwNjVGXFx1MDY3MFxcdTA2RDYtXFx1MDZEQ1xcdTA2REYtXFx1MDZFNFxcdTA2RTdcXHUwNkU4XFx1MDZFQS1cXHUwNkVEXS8udGVzdChjaGFyKTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIGNoYXIgaXMgTGF0aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjIGEgc2luZ2xlIGNoYXJcbiAqL1xuZnVuY3Rpb24gaXNMYXRpbkNoYXIoYykge1xuICAgIHJldHVybiAvW0Etel0vLnRlc3QoYyk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBjaGFyIGlzIHdoaXRlc3BhY2UgY2hhclxuICogQHBhcmFtIHtzdHJpbmd9IGMgYSBzaW5nbGUgY2hhclxuICovXG5mdW5jdGlvbiBpc1doaXRlU3BhY2UoYykge1xuICAgIHJldHVybiAvXFxzLy50ZXN0KGMpO1xufVxuXG4vKipcbiAqIFF1ZXJ5IGEgZmVhdHVyZSBieSBzb21lIG9mIGl0J3MgcHJvcGVydGllcyB0byBsb29rdXAgYSBnbHlwaCBzdWJzdGl0dXRpb24uXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgZmVhdHVyZSBxdWVyeSBpbnN0YW5jZVxuICogQHBhcmFtIHtGb250fSBmb250IG9wZW50eXBlIGZvbnQgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gRmVhdHVyZVF1ZXJ5KGZvbnQpIHtcbiAgICB0aGlzLmZvbnQgPSBmb250O1xuICAgIHRoaXMuZmVhdHVyZXMgPSB7fTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiBTdWJzdGl0dXRpb25BY3Rpb25cbiAqIEB0eXBlIE9iamVjdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGlkIHN1YnN0aXR1dGlvbiB0eXBlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGFnIGZlYXR1cmUgdGFnXG4gKiBAcHJvcGVydHkge2FueX0gc3Vic3RpdHV0aW9uIHN1YnN0aXR1dGlvbiB2YWx1ZShzKVxuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgc3Vic3RpdHV0aW9uIGFjdGlvbiBpbnN0YW5jZVxuICogQHBhcmFtIHtTdWJzdGl0dXRpb25BY3Rpb259IGFjdGlvblxuICovXG5mdW5jdGlvbiBTdWJzdGl0dXRpb25BY3Rpb24oYWN0aW9uKSB7XG4gICAgdGhpcy5pZCA9IGFjdGlvbi5pZDtcbiAgICB0aGlzLnRhZyA9IGFjdGlvbi50YWc7XG4gICAgdGhpcy5zdWJzdGl0dXRpb24gPSBhY3Rpb24uc3Vic3RpdHV0aW9uO1xufVxuXG4vKipcbiAqIExvb2t1cCBhIGNvdmVyYWdlIHRhYmxlXG4gKiBAcGFyYW0ge251bWJlcn0gZ2x5cGhJbmRleCBnbHlwaCBpbmRleFxuICogQHBhcmFtIHtDb3ZlcmFnZVRhYmxlfSBjb3ZlcmFnZSBjb3ZlcmFnZSB0YWJsZVxuICovXG5mdW5jdGlvbiBsb29rdXBDb3ZlcmFnZShnbHlwaEluZGV4LCBjb3ZlcmFnZSkge1xuICAgIGlmICghZ2x5cGhJbmRleCkgeyByZXR1cm4gLTE7IH1cbiAgICBzd2l0Y2ggKGNvdmVyYWdlLmZvcm1hdCkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gY292ZXJhZ2UuZ2x5cGhzLmluZGV4T2YoZ2x5cGhJbmRleCk7XG5cbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgdmFyIHJhbmdlcyA9IGNvdmVyYWdlLnJhbmdlcztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gcmFuZ2VzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChnbHlwaEluZGV4ID49IHJhbmdlLnN0YXJ0ICYmIGdseXBoSW5kZXggPD0gcmFuZ2UuZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBnbHlwaEluZGV4IC0gcmFuZ2Uuc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByYW5nZS5pbmRleCArIG9mZnNldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAtMTsgLy8gbm90IGZvdW5kXG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBIYW5kbGUgYSBzaW5nbGUgc3Vic3RpdHV0aW9uIC0gZm9ybWF0IDFcbiAqIEBwYXJhbSB7Q29udGV4dFBhcmFtc30gY29udGV4dFBhcmFtcyBjb250ZXh0IHBhcmFtcyB0byBsb29rdXBcbiAqL1xuZnVuY3Rpb24gc2luZ2xlU3Vic3RpdHV0aW9uRm9ybWF0MShnbHlwaEluZGV4LCBzdWJ0YWJsZSkge1xuICAgIHZhciBzdWJzdGl0dXRlSW5kZXggPSBsb29rdXBDb3ZlcmFnZShnbHlwaEluZGV4LCBzdWJ0YWJsZS5jb3ZlcmFnZSk7XG4gICAgaWYgKHN1YnN0aXR1dGVJbmRleCA9PT0gLTEpIHsgcmV0dXJuIG51bGw7IH1cbiAgICByZXR1cm4gZ2x5cGhJbmRleCArIHN1YnRhYmxlLmRlbHRhR2x5cGhJZDtcbn1cblxuLyoqXG4gKiBIYW5kbGUgYSBzaW5nbGUgc3Vic3RpdHV0aW9uIC0gZm9ybWF0IDJcbiAqIEBwYXJhbSB7Q29udGV4dFBhcmFtc30gY29udGV4dFBhcmFtcyBjb250ZXh0IHBhcmFtcyB0byBsb29rdXBcbiAqL1xuZnVuY3Rpb24gc2luZ2xlU3Vic3RpdHV0aW9uRm9ybWF0MihnbHlwaEluZGV4LCBzdWJ0YWJsZSkge1xuICAgIHZhciBzdWJzdGl0dXRlSW5kZXggPSBsb29rdXBDb3ZlcmFnZShnbHlwaEluZGV4LCBzdWJ0YWJsZS5jb3ZlcmFnZSk7XG4gICAgaWYgKHN1YnN0aXR1dGVJbmRleCA9PT0gLTEpIHsgcmV0dXJuIG51bGw7IH1cbiAgICByZXR1cm4gc3VidGFibGUuc3Vic3RpdHV0ZVtzdWJzdGl0dXRlSW5kZXhdO1xufVxuXG4vKipcbiAqIExvb2t1cCBhIGxpc3Qgb2YgY292ZXJhZ2UgdGFibGVzXG4gKiBAcGFyYW0ge2FueX0gY292ZXJhZ2VMaXN0IGEgbGlzdCBvZiBjb3ZlcmFnZSB0YWJsZXNcbiAqIEBwYXJhbSB7Q29udGV4dFBhcmFtc30gY29udGV4dFBhcmFtcyBjb250ZXh0IHBhcmFtcyB0byBsb29rdXBcbiAqL1xuZnVuY3Rpb24gbG9va3VwQ292ZXJhZ2VMaXN0KGNvdmVyYWdlTGlzdCwgY29udGV4dFBhcmFtcykge1xuICAgIHZhciBsb29rdXBMaXN0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3ZlcmFnZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvdmVyYWdlID0gY292ZXJhZ2VMaXN0W2ldO1xuICAgICAgICB2YXIgZ2x5cGhJbmRleCA9IGNvbnRleHRQYXJhbXMuY3VycmVudDtcbiAgICAgICAgZ2x5cGhJbmRleCA9IEFycmF5LmlzQXJyYXkoZ2x5cGhJbmRleCkgPyBnbHlwaEluZGV4WzBdIDogZ2x5cGhJbmRleDtcbiAgICAgICAgdmFyIGxvb2t1cEluZGV4ID0gbG9va3VwQ292ZXJhZ2UoZ2x5cGhJbmRleCwgY292ZXJhZ2UpO1xuICAgICAgICBpZiAobG9va3VwSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBsb29rdXBMaXN0LnB1c2gobG9va3VwSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChsb29rdXBMaXN0Lmxlbmd0aCAhPT0gY292ZXJhZ2VMaXN0Lmxlbmd0aCkgeyByZXR1cm4gLTE7IH1cbiAgICByZXR1cm4gbG9va3VwTGlzdDtcbn1cblxuLyoqXG4gKiBIYW5kbGUgY2hhaW5pbmcgY29udGV4dCBzdWJzdGl0dXRpb24gLSBmb3JtYXQgM1xuICogQHBhcmFtIHtDb250ZXh0UGFyYW1zfSBjb250ZXh0UGFyYW1zIGNvbnRleHQgcGFyYW1zIHRvIGxvb2t1cFxuICovXG5mdW5jdGlvbiBjaGFpbmluZ1N1YnN0aXR1dGlvbkZvcm1hdDMoY29udGV4dFBhcmFtcywgc3VidGFibGUpIHtcbiAgICB2YXIgbG9va3Vwc0NvdW50ID0gKFxuICAgICAgICBzdWJ0YWJsZS5pbnB1dENvdmVyYWdlLmxlbmd0aCArXG4gICAgICAgIHN1YnRhYmxlLmxvb2thaGVhZENvdmVyYWdlLmxlbmd0aCArXG4gICAgICAgIHN1YnRhYmxlLmJhY2t0cmFja0NvdmVyYWdlLmxlbmd0aFxuICAgICk7XG4gICAgaWYgKGNvbnRleHRQYXJhbXMuY29udGV4dC5sZW5ndGggPCBsb29rdXBzQ291bnQpIHsgcmV0dXJuIFtdOyB9XG4gICAgLy8gSU5QVVQgTE9PS1VQIC8vXG4gICAgdmFyIGlucHV0TG9va3VwcyA9IGxvb2t1cENvdmVyYWdlTGlzdChcbiAgICAgICAgc3VidGFibGUuaW5wdXRDb3ZlcmFnZSwgY29udGV4dFBhcmFtc1xuICAgICk7XG4gICAgaWYgKGlucHV0TG9va3VwcyA9PT0gLTEpIHsgcmV0dXJuIFtdOyB9XG4gICAgLy8gTE9PS0FIRUFEIExPT0tVUCAvL1xuICAgIHZhciBsb29rYWhlYWRPZmZzZXQgPSBzdWJ0YWJsZS5pbnB1dENvdmVyYWdlLmxlbmd0aCAtIDE7XG4gICAgaWYgKGNvbnRleHRQYXJhbXMubG9va2FoZWFkLmxlbmd0aCA8IHN1YnRhYmxlLmxvb2thaGVhZENvdmVyYWdlLmxlbmd0aCkgeyByZXR1cm4gW107IH1cbiAgICB2YXIgbG9va2FoZWFkQ29udGV4dCA9IGNvbnRleHRQYXJhbXMubG9va2FoZWFkLnNsaWNlKGxvb2thaGVhZE9mZnNldCk7XG4gICAgd2hpbGUgKGxvb2thaGVhZENvbnRleHQubGVuZ3RoICYmIGlzVGFzaGtlZWxBcmFiaWNDaGFyKGxvb2thaGVhZENvbnRleHRbMF0uY2hhcikpIHtcbiAgICAgICAgbG9va2FoZWFkQ29udGV4dC5zaGlmdCgpO1xuICAgIH1cbiAgICB2YXIgbG9va2FoZWFkUGFyYW1zID0gbmV3IENvbnRleHRQYXJhbXMobG9va2FoZWFkQ29udGV4dCwgMCk7XG4gICAgdmFyIGxvb2thaGVhZExvb2t1cHMgPSBsb29rdXBDb3ZlcmFnZUxpc3QoXG4gICAgICAgIHN1YnRhYmxlLmxvb2thaGVhZENvdmVyYWdlLCBsb29rYWhlYWRQYXJhbXNcbiAgICApO1xuICAgIC8vIEJBQ0tUUkFDSyBMT09LVVAgLy9cbiAgICB2YXIgYmFja3RyYWNrQ29udGV4dCA9IFtdLmNvbmNhdChjb250ZXh0UGFyYW1zLmJhY2t0cmFjayk7XG4gICAgYmFja3RyYWNrQ29udGV4dC5yZXZlcnNlKCk7XG4gICAgd2hpbGUgKGJhY2t0cmFja0NvbnRleHQubGVuZ3RoICYmIGlzVGFzaGtlZWxBcmFiaWNDaGFyKGJhY2t0cmFja0NvbnRleHRbMF0uY2hhcikpIHtcbiAgICAgICAgYmFja3RyYWNrQ29udGV4dC5zaGlmdCgpO1xuICAgIH1cbiAgICBpZiAoYmFja3RyYWNrQ29udGV4dC5sZW5ndGggPCBzdWJ0YWJsZS5iYWNrdHJhY2tDb3ZlcmFnZS5sZW5ndGgpIHsgcmV0dXJuIFtdOyB9XG4gICAgdmFyIGJhY2t0cmFja1BhcmFtcyA9IG5ldyBDb250ZXh0UGFyYW1zKGJhY2t0cmFja0NvbnRleHQsIDApO1xuICAgIHZhciBiYWNrdHJhY2tMb29rdXBzID0gbG9va3VwQ292ZXJhZ2VMaXN0KFxuICAgICAgICBzdWJ0YWJsZS5iYWNrdHJhY2tDb3ZlcmFnZSwgYmFja3RyYWNrUGFyYW1zXG4gICAgKTtcbiAgICB2YXIgY29udGV4dFJ1bGVzTWF0Y2ggPSAoXG4gICAgICAgIGlucHV0TG9va3Vwcy5sZW5ndGggPT09IHN1YnRhYmxlLmlucHV0Q292ZXJhZ2UubGVuZ3RoICYmXG4gICAgICAgIGxvb2thaGVhZExvb2t1cHMubGVuZ3RoID09PSBzdWJ0YWJsZS5sb29rYWhlYWRDb3ZlcmFnZS5sZW5ndGggJiZcbiAgICAgICAgYmFja3RyYWNrTG9va3Vwcy5sZW5ndGggPT09IHN1YnRhYmxlLmJhY2t0cmFja0NvdmVyYWdlLmxlbmd0aFxuICAgICk7XG4gICAgdmFyIHN1YnN0aXR1dGlvbnMgPSBbXTtcbiAgICBpZiAoY29udGV4dFJ1bGVzTWF0Y2gpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJ0YWJsZS5sb29rdXBSZWNvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbG9va3VwUmVjb3JkID0gc3VidGFibGUubG9va3VwUmVjb3Jkc1tpXTtcbiAgICAgICAgICAgIHZhciBsb29rdXBMaXN0SW5kZXggPSBsb29rdXBSZWNvcmQubG9va3VwTGlzdEluZGV4O1xuICAgICAgICAgICAgdmFyIGxvb2t1cFRhYmxlID0gdGhpcy5nZXRMb29rdXBCeUluZGV4KGxvb2t1cExpc3RJbmRleCk7XG4gICAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IGxvb2t1cFRhYmxlLnN1YnRhYmxlcy5sZW5ndGg7IHMrKykge1xuICAgICAgICAgICAgICAgIHZhciBzdWJ0YWJsZSQxID0gbG9va3VwVGFibGUuc3VidGFibGVzW3NdO1xuICAgICAgICAgICAgICAgIHZhciBsb29rdXAgPSB0aGlzLmdldExvb2t1cE1ldGhvZChsb29rdXBUYWJsZSwgc3VidGFibGUkMSk7XG4gICAgICAgICAgICAgICAgdmFyIHN1YnN0aXR1dGlvblR5cGUgPSB0aGlzLmdldFN1YnN0aXR1dGlvblR5cGUobG9va3VwVGFibGUsIHN1YnRhYmxlJDEpO1xuICAgICAgICAgICAgICAgIGlmIChzdWJzdGl0dXRpb25UeXBlID09PSAnMTInKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgaW5wdXRMb29rdXBzLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2x5cGhJbmRleCA9IGNvbnRleHRQYXJhbXMuZ2V0KG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnN0aXR1dGlvbiA9IGxvb2t1cChnbHlwaEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWJzdGl0dXRpb24pIHsgc3Vic3RpdHV0aW9ucy5wdXNoKHN1YnN0aXR1dGlvbik7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9ucztcbn1cblxuLyoqXG4gKiBIYW5kbGUgbGlnYXR1cmUgc3Vic3RpdHV0aW9uIC0gZm9ybWF0IDFcbiAqIEBwYXJhbSB7Q29udGV4dFBhcmFtc30gY29udGV4dFBhcmFtcyBjb250ZXh0IHBhcmFtcyB0byBsb29rdXBcbiAqL1xuZnVuY3Rpb24gbGlnYXR1cmVTdWJzdGl0dXRpb25Gb3JtYXQxKGNvbnRleHRQYXJhbXMsIHN1YnRhYmxlKSB7XG4gICAgLy8gQ09WRVJBR0UgTE9PS1VQIC8vXG4gICAgdmFyIGdseXBoSW5kZXggPSBjb250ZXh0UGFyYW1zLmN1cnJlbnQ7XG4gICAgdmFyIGxpZ1NldEluZGV4ID0gbG9va3VwQ292ZXJhZ2UoZ2x5cGhJbmRleCwgc3VidGFibGUuY292ZXJhZ2UpO1xuICAgIGlmIChsaWdTZXRJbmRleCA9PT0gLTEpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAvLyBDT01QT05FTlRTIExPT0tVUFxuICAgIC8vICghKSBub3RlLCBjb21wb25lbnRzIGFyZSBvcmRlcmVkIGluIHRoZSB3cml0dGVuIGRpcmVjdGlvbi5cbiAgICB2YXIgbGlnYXR1cmU7XG4gICAgdmFyIGxpZ2F0dXJlU2V0ID0gc3VidGFibGUubGlnYXR1cmVTZXRzW2xpZ1NldEluZGV4XTtcbiAgICBmb3IgKHZhciBzID0gMDsgcyA8IGxpZ2F0dXJlU2V0Lmxlbmd0aDsgcysrKSB7XG4gICAgICAgIGxpZ2F0dXJlID0gbGlnYXR1cmVTZXRbc107XG4gICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgbGlnYXR1cmUuY29tcG9uZW50cy5sZW5ndGg7IGwrKykge1xuICAgICAgICAgICAgdmFyIGxvb2thaGVhZEl0ZW0gPSBjb250ZXh0UGFyYW1zLmxvb2thaGVhZFtsXTtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBsaWdhdHVyZS5jb21wb25lbnRzW2xdO1xuICAgICAgICAgICAgaWYgKGxvb2thaGVhZEl0ZW0gIT09IGNvbXBvbmVudCkgeyBicmVhazsgfVxuICAgICAgICAgICAgaWYgKGwgPT09IGxpZ2F0dXJlLmNvbXBvbmVudHMubGVuZ3RoIC0gMSkgeyByZXR1cm4gbGlnYXR1cmU7IH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBIYW5kbGUgZGVjb21wb3NpdGlvbiBzdWJzdGl0dXRpb24gLSBmb3JtYXQgMVxuICogQHBhcmFtIHtudW1iZXJ9IGdseXBoSW5kZXggZ2x5cGggaW5kZXhcbiAqIEBwYXJhbSB7YW55fSBzdWJ0YWJsZSBzdWJ0YWJsZVxuICovXG5mdW5jdGlvbiBkZWNvbXBvc2l0aW9uU3Vic3RpdHV0aW9uRm9ybWF0MShnbHlwaEluZGV4LCBzdWJ0YWJsZSkge1xuICAgIHZhciBzdWJzdGl0dXRlSW5kZXggPSBsb29rdXBDb3ZlcmFnZShnbHlwaEluZGV4LCBzdWJ0YWJsZS5jb3ZlcmFnZSk7XG4gICAgaWYgKHN1YnN0aXR1dGVJbmRleCA9PT0gLTEpIHsgcmV0dXJuIG51bGw7IH1cbiAgICByZXR1cm4gc3VidGFibGUuc2VxdWVuY2VzW3N1YnN0aXR1dGVJbmRleF07XG59XG5cbi8qKlxuICogR2V0IGRlZmF1bHQgc2NyaXB0IGZlYXR1cmVzIGluZGV4ZXNcbiAqL1xuRmVhdHVyZVF1ZXJ5LnByb3RvdHlwZS5nZXREZWZhdWx0U2NyaXB0RmVhdHVyZXNJbmRleGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JpcHRzID0gdGhpcy5mb250LnRhYmxlcy5nc3ViLnNjcmlwdHM7XG4gICAgZm9yICh2YXIgcyA9IDA7IHMgPCBzY3JpcHRzLmxlbmd0aDsgcysrKSB7XG4gICAgICAgIHZhciBzY3JpcHQgPSBzY3JpcHRzW3NdO1xuICAgICAgICBpZiAoc2NyaXB0LnRhZyA9PT0gJ0RGTFQnKSB7IHJldHVybiAoXG4gICAgICAgICAgICBzY3JpcHQuc2NyaXB0LmRlZmF1bHRMYW5nU3lzLmZlYXR1cmVJbmRleGVzXG4gICAgICAgICk7IH1cbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufTtcblxuLyoqXG4gKiBHZXQgZmVhdHVyZSBpbmRleGVzIG9mIGEgc3BlY2lmaWMgc2NyaXB0XG4gKiBAcGFyYW0ge3N0cmluZ30gc2NyaXB0VGFnIHNjcmlwdCB0YWdcbiAqL1xuRmVhdHVyZVF1ZXJ5LnByb3RvdHlwZS5nZXRTY3JpcHRGZWF0dXJlc0luZGV4ZXMgPSBmdW5jdGlvbihzY3JpcHRUYWcpIHtcbiAgICB2YXIgdGFibGVzID0gdGhpcy5mb250LnRhYmxlcztcbiAgICBpZiAoIXRhYmxlcy5nc3ViKSB7IHJldHVybiBbXTsgfVxuICAgIGlmICghc2NyaXB0VGFnKSB7IHJldHVybiB0aGlzLmdldERlZmF1bHRTY3JpcHRGZWF0dXJlc0luZGV4ZXMoKTsgfVxuICAgIHZhciBzY3JpcHRzID0gdGhpcy5mb250LnRhYmxlcy5nc3ViLnNjcmlwdHM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzY3JpcHQgPSBzY3JpcHRzW2ldO1xuICAgICAgICBpZiAoc2NyaXB0LnRhZyA9PT0gc2NyaXB0VGFnICYmIHNjcmlwdC5zY3JpcHQuZGVmYXVsdExhbmdTeXMpIHtcbiAgICAgICAgICAgIHJldHVybiBzY3JpcHQuc2NyaXB0LmRlZmF1bHRMYW5nU3lzLmZlYXR1cmVJbmRleGVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGxhbmdTeXNSZWNvcmRzID0gc2NyaXB0LmxhbmdTeXNSZWNvcmRzO1xuICAgICAgICAgICAgaWYgKCEhbGFuZ1N5c1JlY29yZHMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxhbmdTeXNSZWNvcmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYW5nU3lzUmVjb3JkID0gbGFuZ1N5c1JlY29yZHNbal07XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYW5nU3lzUmVjb3JkLnRhZyA9PT0gc2NyaXB0VGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZ1N5cyA9IGxhbmdTeXNSZWNvcmQubGFuZ1N5cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsYW5nU3lzLmZlYXR1cmVJbmRleGVzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldERlZmF1bHRTY3JpcHRGZWF0dXJlc0luZGV4ZXMoKTtcbn07XG5cbi8qKlxuICogTWFwIGEgZmVhdHVyZSB0YWcgdG8gYSBnc3ViIGZlYXR1cmVcbiAqIEBwYXJhbSB7YW55fSBmZWF0dXJlcyBnc3ViIGZlYXR1cmVzXG4gKiBAcGFyYW0ge3N0cmluZ30gc2NyaXB0VGFnIHNjcmlwdCB0YWdcbiAqL1xuRmVhdHVyZVF1ZXJ5LnByb3RvdHlwZS5tYXBUYWdzVG9GZWF0dXJlcyA9IGZ1bmN0aW9uIChmZWF0dXJlcywgc2NyaXB0VGFnKSB7XG4gICAgdmFyIHRhZ3MgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0YWcgPSBmZWF0dXJlc1tpXS50YWc7XG4gICAgICAgIHZhciBmZWF0dXJlID0gZmVhdHVyZXNbaV0uZmVhdHVyZTtcbiAgICAgICAgdGFnc1t0YWddID0gZmVhdHVyZTtcbiAgICB9XG4gICAgdGhpcy5mZWF0dXJlc1tzY3JpcHRUYWddLnRhZ3MgPSB0YWdzO1xufTtcblxuLyoqXG4gKiBHZXQgZmVhdHVyZXMgb2YgYSBzcGVjaWZpYyBzY3JpcHRcbiAqIEBwYXJhbSB7c3RyaW5nfSBzY3JpcHRUYWcgc2NyaXB0IHRhZ1xuICovXG5GZWF0dXJlUXVlcnkucHJvdG90eXBlLmdldFNjcmlwdEZlYXR1cmVzID0gZnVuY3Rpb24gKHNjcmlwdFRhZykge1xuICAgIHZhciBmZWF0dXJlcyA9IHRoaXMuZmVhdHVyZXNbc2NyaXB0VGFnXTtcbiAgICBpZiAodGhpcy5mZWF0dXJlcy5oYXNPd25Qcm9wZXJ0eShzY3JpcHRUYWcpKSB7IHJldHVybiBmZWF0dXJlczsgfVxuICAgIHZhciBmZWF0dXJlc0luZGV4ZXMgPSB0aGlzLmdldFNjcmlwdEZlYXR1cmVzSW5kZXhlcyhzY3JpcHRUYWcpO1xuICAgIGlmICghZmVhdHVyZXNJbmRleGVzKSB7IHJldHVybiBudWxsOyB9XG4gICAgdmFyIGdzdWIgPSB0aGlzLmZvbnQudGFibGVzLmdzdWI7XG4gICAgZmVhdHVyZXMgPSBmZWF0dXJlc0luZGV4ZXMubWFwKGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gZ3N1Yi5mZWF0dXJlc1tpbmRleF07IH0pO1xuICAgIHRoaXMuZmVhdHVyZXNbc2NyaXB0VGFnXSA9IGZlYXR1cmVzO1xuICAgIHRoaXMubWFwVGFnc1RvRmVhdHVyZXMoZmVhdHVyZXMsIHNjcmlwdFRhZyk7XG4gICAgcmV0dXJuIGZlYXR1cmVzO1xufTtcblxuLyoqXG4gKiBHZXQgc3Vic3RpdHV0aW9uIHR5cGVcbiAqIEBwYXJhbSB7YW55fSBsb29rdXBUYWJsZSBsb29rdXAgdGFibGVcbiAqIEBwYXJhbSB7YW55fSBzdWJ0YWJsZSBzdWJ0YWJsZVxuICovXG5GZWF0dXJlUXVlcnkucHJvdG90eXBlLmdldFN1YnN0aXR1dGlvblR5cGUgPSBmdW5jdGlvbihsb29rdXBUYWJsZSwgc3VidGFibGUpIHtcbiAgICB2YXIgbG9va3VwVHlwZSA9IGxvb2t1cFRhYmxlLmxvb2t1cFR5cGUudG9TdHJpbmcoKTtcbiAgICB2YXIgc3Vic3RGb3JtYXQgPSBzdWJ0YWJsZS5zdWJzdEZvcm1hdC50b1N0cmluZygpO1xuICAgIHJldHVybiBsb29rdXBUeXBlICsgc3Vic3RGb3JtYXQ7XG59O1xuXG4vKipcbiAqIEdldCBsb29rdXAgbWV0aG9kXG4gKiBAcGFyYW0ge2FueX0gbG9va3VwVGFibGUgbG9va3VwIHRhYmxlXG4gKiBAcGFyYW0ge2FueX0gc3VidGFibGUgc3VidGFibGVcbiAqL1xuRmVhdHVyZVF1ZXJ5LnByb3RvdHlwZS5nZXRMb29rdXBNZXRob2QgPSBmdW5jdGlvbihsb29rdXBUYWJsZSwgc3VidGFibGUpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBzdWJzdGl0dXRpb25UeXBlID0gdGhpcy5nZXRTdWJzdGl0dXRpb25UeXBlKGxvb2t1cFRhYmxlLCBzdWJ0YWJsZSk7XG4gICAgc3dpdGNoIChzdWJzdGl0dXRpb25UeXBlKSB7XG4gICAgICAgIGNhc2UgJzExJzpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZ2x5cGhJbmRleCkgeyByZXR1cm4gc2luZ2xlU3Vic3RpdHV0aW9uRm9ybWF0MS5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzJDEsIFtnbHlwaEluZGV4LCBzdWJ0YWJsZV1cbiAgICAgICAgICAgICk7IH07XG4gICAgICAgIGNhc2UgJzEyJzpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZ2x5cGhJbmRleCkgeyByZXR1cm4gc2luZ2xlU3Vic3RpdHV0aW9uRm9ybWF0Mi5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzJDEsIFtnbHlwaEluZGV4LCBzdWJ0YWJsZV1cbiAgICAgICAgICAgICk7IH07XG4gICAgICAgIGNhc2UgJzYzJzpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoY29udGV4dFBhcmFtcykgeyByZXR1cm4gY2hhaW5pbmdTdWJzdGl0dXRpb25Gb3JtYXQzLmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMkMSwgW2NvbnRleHRQYXJhbXMsIHN1YnRhYmxlXVxuICAgICAgICAgICAgKTsgfTtcbiAgICAgICAgY2FzZSAnNDEnOlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjb250ZXh0UGFyYW1zKSB7IHJldHVybiBsaWdhdHVyZVN1YnN0aXR1dGlvbkZvcm1hdDEuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyQxLCBbY29udGV4dFBhcmFtcywgc3VidGFibGVdXG4gICAgICAgICAgICApOyB9O1xuICAgICAgICBjYXNlICcyMSc6XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGdseXBoSW5kZXgpIHsgcmV0dXJuIGRlY29tcG9zaXRpb25TdWJzdGl0dXRpb25Gb3JtYXQxLmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMkMSwgW2dseXBoSW5kZXgsIHN1YnRhYmxlXVxuICAgICAgICAgICAgKTsgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcImxvb2t1cFR5cGU6IFwiICsgKGxvb2t1cFRhYmxlLmxvb2t1cFR5cGUpICsgXCIgLSBcIiArXG4gICAgICAgICAgICAgICAgXCJzdWJzdEZvcm1hdDogXCIgKyAoc3VidGFibGUuc3Vic3RGb3JtYXQpICsgXCIgXCIgK1xuICAgICAgICAgICAgICAgIFwiaXMgbm90IHlldCBzdXBwb3J0ZWRcIlxuICAgICAgICAgICAgKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFsgTE9PS1VQIFRZUEVTIF1cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFNpbmdsZSAgICAgICAgICAgICAgICAgICAgICAgIDE7XG4gKiBNdWx0aXBsZSAgICAgICAgICAgICAgICAgICAgICAyO1xuICogQWx0ZXJuYXRlICAgICAgICAgICAgICAgICAgICAgMztcbiAqIExpZ2F0dXJlICAgICAgICAgICAgICAgICAgICAgIDQ7XG4gKiBDb250ZXh0ICAgICAgICAgICAgICAgICAgICAgICA1O1xuICogQ2hhaW5pbmdDb250ZXh0ICAgICAgICAgICAgICAgNjtcbiAqIEV4dGVuc2lvblN1YnN0aXR1dGlvbiAgICAgICAgIDc7XG4gKiBSZXZlcnNlQ2hhaW5pbmdDb250ZXh0ICAgICAgICA4O1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIEZRdWVyeVxuICogQHR5cGUgT2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIGZlYXR1cmUgdGFnXG4gKiBAcGFyYW0ge3N0cmluZ30gc2NyaXB0IGZlYXR1cmUgc2NyaXB0XG4gKiBAcGFyYW0ge0NvbnRleHRQYXJhbXN9IGNvbnRleHRQYXJhbXMgY29udGV4dCBwYXJhbXNcbiAqL1xuXG4vKipcbiAqIExvb2t1cCBhIGZlYXR1cmUgdXNpbmcgYSBxdWVyeSBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge0ZRdWVyeX0gcXVlcnkgZmVhdHVyZSBxdWVyeVxuICovXG5GZWF0dXJlUXVlcnkucHJvdG90eXBlLmxvb2t1cEZlYXR1cmUgPSBmdW5jdGlvbiAocXVlcnkpIHtcbiAgICB2YXIgY29udGV4dFBhcmFtcyA9IHF1ZXJ5LmNvbnRleHRQYXJhbXM7XG4gICAgdmFyIGN1cnJlbnRJbmRleCA9IGNvbnRleHRQYXJhbXMuaW5kZXg7XG4gICAgdmFyIGZlYXR1cmUgPSB0aGlzLmdldEZlYXR1cmUoe1xuICAgICAgICB0YWc6IHF1ZXJ5LnRhZywgc2NyaXB0OiBxdWVyeS5zY3JpcHRcbiAgICB9KTtcbiAgICBpZiAoIWZlYXR1cmUpIHsgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgXCJmb250ICdcIiArICh0aGlzLmZvbnQubmFtZXMuZnVsbE5hbWUuZW4pICsgXCInIFwiICtcbiAgICAgICAgXCJkb2Vzbid0IHN1cHBvcnQgZmVhdHVyZSAnXCIgKyAocXVlcnkudGFnKSArIFwiJyBcIiArXG4gICAgICAgIFwiZm9yIHNjcmlwdCAnXCIgKyAocXVlcnkuc2NyaXB0KSArIFwiJy5cIlxuICAgICk7IH1cbiAgICB2YXIgbG9va3VwcyA9IHRoaXMuZ2V0RmVhdHVyZUxvb2t1cHMoZmVhdHVyZSk7XG4gICAgdmFyIHN1YnN0aXR1dGlvbnMgPSBbXS5jb25jYXQoY29udGV4dFBhcmFtcy5jb250ZXh0KTtcbiAgICBmb3IgKHZhciBsID0gMDsgbCA8IGxvb2t1cHMubGVuZ3RoOyBsKyspIHtcbiAgICAgICAgdmFyIGxvb2t1cFRhYmxlID0gbG9va3Vwc1tsXTtcbiAgICAgICAgdmFyIHN1YnRhYmxlcyA9IHRoaXMuZ2V0TG9va3VwU3VidGFibGVzKGxvb2t1cFRhYmxlKTtcbiAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCBzdWJ0YWJsZXMubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgIHZhciBzdWJ0YWJsZSA9IHN1YnRhYmxlc1tzXTtcbiAgICAgICAgICAgIHZhciBzdWJzdFR5cGUgPSB0aGlzLmdldFN1YnN0aXR1dGlvblR5cGUobG9va3VwVGFibGUsIHN1YnRhYmxlKTtcbiAgICAgICAgICAgIHZhciBsb29rdXAgPSB0aGlzLmdldExvb2t1cE1ldGhvZChsb29rdXBUYWJsZSwgc3VidGFibGUpO1xuICAgICAgICAgICAgdmFyIHN1YnN0aXR1dGlvbiA9ICh2b2lkIDApO1xuICAgICAgICAgICAgc3dpdGNoIChzdWJzdFR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICcxMSc6XG4gICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbiA9IGxvb2t1cChjb250ZXh0UGFyYW1zLmN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic3RpdHV0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb25zLnNwbGljZShjdXJyZW50SW5kZXgsIDEsIG5ldyBTdWJzdGl0dXRpb25BY3Rpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAxMSwgdGFnOiBxdWVyeS50YWcsIHN1YnN0aXR1dGlvbjogc3Vic3RpdHV0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnMTInOlxuICAgICAgICAgICAgICAgICAgICBzdWJzdGl0dXRpb24gPSBsb29rdXAoY29udGV4dFBhcmFtcy5jdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnN0aXR1dGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9ucy5zcGxpY2UoY3VycmVudEluZGV4LCAxLCBuZXcgU3Vic3RpdHV0aW9uQWN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogMTIsIHRhZzogcXVlcnkudGFnLCBzdWJzdGl0dXRpb246IHN1YnN0aXR1dGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJzYzJzpcbiAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9uID0gbG9va3VwKGNvbnRleHRQYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJzdGl0dXRpb24pICYmIHN1YnN0aXR1dGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbnMuc3BsaWNlKGN1cnJlbnRJbmRleCwgMSwgbmV3IFN1YnN0aXR1dGlvbkFjdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IDYzLCB0YWc6IHF1ZXJ5LnRhZywgc3Vic3RpdHV0aW9uOiBzdWJzdGl0dXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICc0MSc6XG4gICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbiA9IGxvb2t1cChjb250ZXh0UGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnN0aXR1dGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9ucy5zcGxpY2UoY3VycmVudEluZGV4LCAxLCBuZXcgU3Vic3RpdHV0aW9uQWN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogNDEsIHRhZzogcXVlcnkudGFnLCBzdWJzdGl0dXRpb246IHN1YnN0aXR1dGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJzIxJzpcbiAgICAgICAgICAgICAgICAgICAgc3Vic3RpdHV0aW9uID0gbG9va3VwKGNvbnRleHRQYXJhbXMuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzdGl0dXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbnMuc3BsaWNlKGN1cnJlbnRJbmRleCwgMSwgbmV3IFN1YnN0aXR1dGlvbkFjdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IDIxLCB0YWc6IHF1ZXJ5LnRhZywgc3Vic3RpdHV0aW9uOiBzdWJzdGl0dXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHRQYXJhbXMgPSBuZXcgQ29udGV4dFBhcmFtcyhzdWJzdGl0dXRpb25zLCBjdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3Vic3RpdHV0aW9uKSAmJiAhc3Vic3RpdHV0aW9uLmxlbmd0aCkgeyBjb250aW51ZTsgfVxuICAgICAgICAgICAgc3Vic3RpdHV0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9ucy5sZW5ndGggPyBzdWJzdGl0dXRpb25zIDogbnVsbDtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZm9udCBzdXBwb3J0cyBhIHNwZWNpZmljIGZlYXR1cmVzXG4gKiBAcGFyYW0ge0ZRdWVyeX0gcXVlcnkgZmVhdHVyZSBxdWVyeSBvYmplY3RcbiAqL1xuRmVhdHVyZVF1ZXJ5LnByb3RvdHlwZS5zdXBwb3J0cyA9IGZ1bmN0aW9uIChxdWVyeSkge1xuICAgIGlmICghcXVlcnkuc2NyaXB0KSB7IHJldHVybiBmYWxzZTsgfVxuICAgIHRoaXMuZ2V0U2NyaXB0RmVhdHVyZXMocXVlcnkuc2NyaXB0KTtcbiAgICB2YXIgc3VwcG9ydGVkU2NyaXB0ID0gdGhpcy5mZWF0dXJlcy5oYXNPd25Qcm9wZXJ0eShxdWVyeS5zY3JpcHQpO1xuICAgIGlmICghcXVlcnkudGFnKSB7IHJldHVybiBzdXBwb3J0ZWRTY3JpcHQ7IH1cbiAgICB2YXIgc3VwcG9ydGVkRmVhdHVyZSA9IChcbiAgICAgICAgdGhpcy5mZWF0dXJlc1txdWVyeS5zY3JpcHRdLnNvbWUoZnVuY3Rpb24gKGZlYXR1cmUpIHsgcmV0dXJuIGZlYXR1cmUudGFnID09PSBxdWVyeS50YWc7IH0pXG4gICAgKTtcbiAgICByZXR1cm4gc3VwcG9ydGVkU2NyaXB0ICYmIHN1cHBvcnRlZEZlYXR1cmU7XG59O1xuXG4vKipcbiAqIEdldCBsb29rdXAgdGFibGUgc3VidGFibGVzXG4gKiBAcGFyYW0ge2FueX0gbG9va3VwVGFibGUgbG9va3VwIHRhYmxlXG4gKi9cbkZlYXR1cmVRdWVyeS5wcm90b3R5cGUuZ2V0TG9va3VwU3VidGFibGVzID0gZnVuY3Rpb24gKGxvb2t1cFRhYmxlKSB7XG4gICAgcmV0dXJuIGxvb2t1cFRhYmxlLnN1YnRhYmxlcyB8fCBudWxsO1xufTtcblxuLyoqXG4gKiBHZXQgbG9va3VwIHRhYmxlIGJ5IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggbG9va3VwIHRhYmxlIGluZGV4XG4gKi9cbkZlYXR1cmVRdWVyeS5wcm90b3R5cGUuZ2V0TG9va3VwQnlJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHZhciBsb29rdXBzID0gdGhpcy5mb250LnRhYmxlcy5nc3ViLmxvb2t1cHM7XG4gICAgcmV0dXJuIGxvb2t1cHNbaW5kZXhdIHx8IG51bGw7XG59O1xuXG4vKipcbiAqIEdldCBsb29rdXAgdGFibGVzIGZvciBhIGZlYXR1cmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmZWF0dXJlXG4gKi9cbkZlYXR1cmVRdWVyeS5wcm90b3R5cGUuZ2V0RmVhdHVyZUxvb2t1cHMgPSBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgIC8vIFRPRE86IG1lbW9pemVcbiAgICByZXR1cm4gZmVhdHVyZS5sb29rdXBMaXN0SW5kZXhlcy5tYXAodGhpcy5nZXRMb29rdXBCeUluZGV4LmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBRdWVyeSBhIGZlYXR1cmUgYnkgaXQncyBwcm9wZXJ0aWVzXG4gKiBAcGFyYW0ge2FueX0gcXVlcnkgYW4gb2JqZWN0IHRoYXQgZGVzY3JpYmVzIHRoZSBwcm9wZXJ0aWVzIG9mIGEgcXVlcnlcbiAqL1xuRmVhdHVyZVF1ZXJ5LnByb3RvdHlwZS5nZXRGZWF0dXJlID0gZnVuY3Rpb24gZ2V0RmVhdHVyZShxdWVyeSkge1xuICAgIGlmICghdGhpcy5mb250KSB7IHJldHVybiB7IEZBSUw6IFwiTm8gZm9udCB3YXMgZm91bmRcIn07IH1cbiAgICBpZiAoIXRoaXMuZmVhdHVyZXMuaGFzT3duUHJvcGVydHkocXVlcnkuc2NyaXB0KSkge1xuICAgICAgICB0aGlzLmdldFNjcmlwdEZlYXR1cmVzKHF1ZXJ5LnNjcmlwdCk7XG4gICAgfVxuICAgIHZhciBzY3JpcHRGZWF0dXJlcyA9IHRoaXMuZmVhdHVyZXNbcXVlcnkuc2NyaXB0XTtcbiAgICBpZiAoIXNjcmlwdEZlYXR1cmVzKSB7IHJldHVybiAoXG4gICAgICAgIHsgRkFJTDogKFwiTm8gZmVhdHVyZSBmb3Igc2NyaXB0IFwiICsgKHF1ZXJ5LnNjcmlwdCkpfVxuICAgICk7IH1cbiAgICBpZiAoIXNjcmlwdEZlYXR1cmVzLnRhZ3NbcXVlcnkudGFnXSkgeyByZXR1cm4gbnVsbDsgfVxuICAgIHJldHVybiB0aGlzLmZlYXR1cmVzW3F1ZXJ5LnNjcmlwdF0udGFnc1txdWVyeS50YWddO1xufTtcblxuLyoqXG4gKiBBcmFiaWMgd29yZCBjb250ZXh0IGNoZWNrZXJzXG4gKi9cblxuZnVuY3Rpb24gYXJhYmljV29yZFN0YXJ0Q2hlY2soY29udGV4dFBhcmFtcykge1xuICAgIHZhciBjaGFyID0gY29udGV4dFBhcmFtcy5jdXJyZW50O1xuICAgIHZhciBwcmV2Q2hhciA9IGNvbnRleHRQYXJhbXMuZ2V0KC0xKTtcbiAgICByZXR1cm4gKFxuICAgICAgICAvLyA/IGFyYWJpYyBmaXJzdCBjaGFyXG4gICAgICAgIChwcmV2Q2hhciA9PT0gbnVsbCAmJiBpc0FyYWJpY0NoYXIoY2hhcikpIHx8XG4gICAgICAgIC8vID8gYXJhYmljIGNoYXIgcHJlY2VkZWQgd2l0aCBhIG5vbiBhcmFiaWMgY2hhclxuICAgICAgICAoIWlzQXJhYmljQ2hhcihwcmV2Q2hhcikgJiYgaXNBcmFiaWNDaGFyKGNoYXIpKVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGFyYWJpY1dvcmRFbmRDaGVjayhjb250ZXh0UGFyYW1zKSB7XG4gICAgdmFyIG5leHRDaGFyID0gY29udGV4dFBhcmFtcy5nZXQoMSk7XG4gICAgcmV0dXJuIChcbiAgICAgICAgLy8gPyBsYXN0IGFyYWJpYyBjaGFyXG4gICAgICAgIChuZXh0Q2hhciA9PT0gbnVsbCkgfHxcbiAgICAgICAgLy8gPyBuZXh0IGNoYXIgaXMgbm90IGFyYWJpY1xuICAgICAgICAoIWlzQXJhYmljQ2hhcihuZXh0Q2hhcikpXG4gICAgKTtcbn1cblxudmFyIGFyYWJpY1dvcmRDaGVjayA9IHtcbiAgICBzdGFydENoZWNrOiBhcmFiaWNXb3JkU3RhcnRDaGVjayxcbiAgICBlbmRDaGVjazogYXJhYmljV29yZEVuZENoZWNrXG59O1xuXG4vKipcbiAqIEFyYWJpYyBzZW50ZW5jZSBjb250ZXh0IGNoZWNrZXJzXG4gKi9cblxuZnVuY3Rpb24gYXJhYmljU2VudGVuY2VTdGFydENoZWNrKGNvbnRleHRQYXJhbXMpIHtcbiAgICB2YXIgY2hhciA9IGNvbnRleHRQYXJhbXMuY3VycmVudDtcbiAgICB2YXIgcHJldkNoYXIgPSBjb250ZXh0UGFyYW1zLmdldCgtMSk7XG4gICAgcmV0dXJuIChcbiAgICAgICAgLy8gPyBhbiBhcmFiaWMgY2hhciBwcmVjZWRlZCB3aXRoIGEgbm9uIGFyYWJpYyBjaGFyXG4gICAgICAgIChpc0FyYWJpY0NoYXIoY2hhcikgfHwgaXNUYXNoa2VlbEFyYWJpY0NoYXIoY2hhcikpICYmXG4gICAgICAgICFpc0FyYWJpY0NoYXIocHJldkNoYXIpXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gYXJhYmljU2VudGVuY2VFbmRDaGVjayhjb250ZXh0UGFyYW1zKSB7XG4gICAgdmFyIG5leHRDaGFyID0gY29udGV4dFBhcmFtcy5nZXQoMSk7XG4gICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgIGNhc2UgbmV4dENoYXIgPT09IG51bGw6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgY2FzZSAoIWlzQXJhYmljQ2hhcihuZXh0Q2hhcikgJiYgIWlzVGFzaGtlZWxBcmFiaWNDaGFyKG5leHRDaGFyKSk6XG4gICAgICAgICAgICB2YXIgbmV4dElzV2hpdGVzcGFjZSA9IGlzV2hpdGVTcGFjZShuZXh0Q2hhcik7XG4gICAgICAgICAgICBpZiAoIW5leHRJc1doaXRlc3BhY2UpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgICAgIGlmIChuZXh0SXNXaGl0ZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyYWJpY0NoYXJBaGVhZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGFyYWJpY0NoYXJBaGVhZCA9IChcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFBhcmFtcy5sb29rYWhlYWQuc29tZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChjKSB7IHJldHVybiBpc0FyYWJpY0NoYXIoYykgfHwgaXNUYXNoa2VlbEFyYWJpY0NoYXIoYyk7IH1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKCFhcmFiaWNDaGFyQWhlYWQpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxudmFyIGFyYWJpY1NlbnRlbmNlQ2hlY2sgPSB7XG4gICAgc3RhcnRDaGVjazogYXJhYmljU2VudGVuY2VTdGFydENoZWNrLFxuICAgIGVuZENoZWNrOiBhcmFiaWNTZW50ZW5jZUVuZENoZWNrXG59O1xuXG4vKipcbiAqIEFwcGx5IHNpbmdsZSBzdWJzdGl0dXRpb24gZm9ybWF0IDFcbiAqIEBwYXJhbSB7QXJyYXl9IHN1YnN0aXR1dGlvbnMgc3Vic3RpdHV0aW9uc1xuICogQHBhcmFtIHthbnl9IHRva2VucyBhIGxpc3Qgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggdG9rZW4gaW5kZXhcbiAqL1xuZnVuY3Rpb24gc2luZ2xlU3Vic3RpdHV0aW9uRm9ybWF0MSQxKGFjdGlvbiwgdG9rZW5zLCBpbmRleCkge1xuICAgIHRva2Vuc1tpbmRleF0uc2V0U3RhdGUoYWN0aW9uLnRhZywgYWN0aW9uLnN1YnN0aXR1dGlvbik7XG59XG5cbi8qKlxuICogQXBwbHkgc2luZ2xlIHN1YnN0aXR1dGlvbiBmb3JtYXQgMlxuICogQHBhcmFtIHtBcnJheX0gc3Vic3RpdHV0aW9ucyBzdWJzdGl0dXRpb25zXG4gKiBAcGFyYW0ge2FueX0gdG9rZW5zIGEgbGlzdCBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCB0b2tlbiBpbmRleFxuICovXG5mdW5jdGlvbiBzaW5nbGVTdWJzdGl0dXRpb25Gb3JtYXQyJDEoYWN0aW9uLCB0b2tlbnMsIGluZGV4KSB7XG4gICAgdG9rZW5zW2luZGV4XS5zZXRTdGF0ZShhY3Rpb24udGFnLCBhY3Rpb24uc3Vic3RpdHV0aW9uKTtcbn1cblxuLyoqXG4gKiBBcHBseSBjaGFpbmluZyBjb250ZXh0IHN1YnN0aXR1dGlvbiBmb3JtYXQgM1xuICogQHBhcmFtIHtBcnJheX0gc3Vic3RpdHV0aW9ucyBzdWJzdGl0dXRpb25zXG4gKiBAcGFyYW0ge2FueX0gdG9rZW5zIGEgbGlzdCBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCB0b2tlbiBpbmRleFxuICovXG5mdW5jdGlvbiBjaGFpbmluZ1N1YnN0aXR1dGlvbkZvcm1hdDMkMShhY3Rpb24sIHRva2VucywgaW5kZXgpIHtcbiAgICBhY3Rpb24uc3Vic3RpdHV0aW9uLmZvckVhY2goZnVuY3Rpb24gKHN1YnN0LCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2luZGV4ICsgb2Zmc2V0XTtcbiAgICAgICAgdG9rZW4uc2V0U3RhdGUoYWN0aW9uLnRhZywgc3Vic3QpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEFwcGx5IGxpZ2F0dXJlIHN1YnN0aXR1dGlvbiBmb3JtYXQgMVxuICogQHBhcmFtIHtBcnJheX0gc3Vic3RpdHV0aW9ucyBzdWJzdGl0dXRpb25zXG4gKiBAcGFyYW0ge2FueX0gdG9rZW5zIGEgbGlzdCBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCB0b2tlbiBpbmRleFxuICovXG5mdW5jdGlvbiBsaWdhdHVyZVN1YnN0aXR1dGlvbkZvcm1hdDEkMShhY3Rpb24sIHRva2VucywgaW5kZXgpIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaW5kZXhdO1xuICAgIHRva2VuLnNldFN0YXRlKGFjdGlvbi50YWcsIGFjdGlvbi5zdWJzdGl0dXRpb24ubGlnR2x5cGgpO1xuICAgIHZhciBjb21wc0NvdW50ID0gYWN0aW9uLnN1YnN0aXR1dGlvbi5jb21wb25lbnRzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBzQ291bnQ7IGkrKykge1xuICAgICAgICB0b2tlbiA9IHRva2Vuc1tpbmRleCArIGkgKyAxXTtcbiAgICAgICAgdG9rZW4uc2V0U3RhdGUoJ2RlbGV0ZWQnLCB0cnVlKTtcbiAgICB9XG59XG5cbi8qKlxuICogU3VwcG9ydGVkIHN1YnN0aXR1dGlvbnNcbiAqL1xudmFyIFNVQlNUSVRVVElPTlMgPSB7XG4gICAgMTE6IHNpbmdsZVN1YnN0aXR1dGlvbkZvcm1hdDEkMSxcbiAgICAxMjogc2luZ2xlU3Vic3RpdHV0aW9uRm9ybWF0MiQxLFxuICAgIDYzOiBjaGFpbmluZ1N1YnN0aXR1dGlvbkZvcm1hdDMkMSxcbiAgICA0MTogbGlnYXR1cmVTdWJzdGl0dXRpb25Gb3JtYXQxJDFcbn07XG5cbi8qKlxuICogQXBwbHkgc3Vic3RpdHV0aW9ucyB0byBhIGxpc3Qgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge0FycmF5fSBzdWJzdGl0dXRpb25zIHN1YnN0aXR1dGlvbnNcbiAqIEBwYXJhbSB7YW55fSB0b2tlbnMgYSBsaXN0IG9mIHRva2Vuc1xuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IHRva2VuIGluZGV4XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3Vic3RpdHV0aW9uKGFjdGlvbiwgdG9rZW5zLCBpbmRleCkge1xuICAgIGlmIChhY3Rpb24gaW5zdGFuY2VvZiBTdWJzdGl0dXRpb25BY3Rpb24gJiYgU1VCU1RJVFVUSU9OU1thY3Rpb24uaWRdKSB7XG4gICAgICAgIFNVQlNUSVRVVElPTlNbYWN0aW9uLmlkXShhY3Rpb24sIHRva2VucywgaW5kZXgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBcHBseSBBcmFiaWMgcHJlc2VudGF0aW9uIGZvcm1zIHRvIGEgcmFuZ2Ugb2YgdG9rZW5zXG4gKi9cblxuLyoqXG4gKiBDaGVjayBpZiBhIGNoYXIgY2FuIGJlIGNvbm5lY3RlZCB0byBpdCdzIHByZWNlZGluZyBjaGFyXG4gKiBAcGFyYW0ge0NvbnRleHRQYXJhbXN9IGNoYXJDb250ZXh0UGFyYW1zIGNvbnRleHQgcGFyYW1zIG9mIGEgY2hhclxuICovXG5mdW5jdGlvbiB3aWxsQ29ubmVjdFByZXYoY2hhckNvbnRleHRQYXJhbXMpIHtcbiAgICB2YXIgYmFja3RyYWNrID0gW10uY29uY2F0KGNoYXJDb250ZXh0UGFyYW1zLmJhY2t0cmFjayk7XG4gICAgZm9yICh2YXIgaSA9IGJhY2t0cmFjay5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgcHJldkNoYXIgPSBiYWNrdHJhY2tbaV07XG4gICAgICAgIHZhciBpc29sYXRlZCA9IGlzSXNvbGF0ZWRBcmFiaWNDaGFyKHByZXZDaGFyKTtcbiAgICAgICAgdmFyIHRhc2hrZWVsID0gaXNUYXNoa2VlbEFyYWJpY0NoYXIocHJldkNoYXIpO1xuICAgICAgICBpZiAoIWlzb2xhdGVkICYmICF0YXNoa2VlbCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICBpZiAoaXNvbGF0ZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIGNoYXIgY2FuIGJlIGNvbm5lY3RlZCB0byBpdCdzIHByb2NlZWRpbmcgY2hhclxuICogQHBhcmFtIHtDb250ZXh0UGFyYW1zfSBjaGFyQ29udGV4dFBhcmFtcyBjb250ZXh0IHBhcmFtcyBvZiBhIGNoYXJcbiAqL1xuZnVuY3Rpb24gd2lsbENvbm5lY3ROZXh0KGNoYXJDb250ZXh0UGFyYW1zKSB7XG4gICAgaWYgKGlzSXNvbGF0ZWRBcmFiaWNDaGFyKGNoYXJDb250ZXh0UGFyYW1zLmN1cnJlbnQpKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhckNvbnRleHRQYXJhbXMubG9va2FoZWFkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXh0Q2hhciA9IGNoYXJDb250ZXh0UGFyYW1zLmxvb2thaGVhZFtpXTtcbiAgICAgICAgdmFyIHRhc2hrZWVsID0gaXNUYXNoa2VlbEFyYWJpY0NoYXIobmV4dENoYXIpO1xuICAgICAgICBpZiAoIXRhc2hrZWVsKSB7IHJldHVybiB0cnVlOyB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBBcHBseSBhcmFiaWMgcHJlc2VudGF0aW9uIGZvcm1zIHRvIGEgbGlzdCBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7Q29udGV4dFJhbmdlfSByYW5nZSBhIHJhbmdlIG9mIHRva2Vuc1xuICovXG5mdW5jdGlvbiBhcmFiaWNQcmVzZW50YXRpb25Gb3JtcyhyYW5nZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHNjcmlwdCA9ICdhcmFiJztcbiAgICB2YXIgdGFncyA9IHRoaXMuZmVhdHVyZXNUYWdzW3NjcmlwdF07XG4gICAgdmFyIHRva2VucyA9IHRoaXMudG9rZW5pemVyLmdldFJhbmdlVG9rZW5zKHJhbmdlKTtcbiAgICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMSkgeyByZXR1cm47IH1cbiAgICB2YXIgY29udGV4dFBhcmFtcyA9IG5ldyBDb250ZXh0UGFyYW1zKFxuICAgICAgICB0b2tlbnMubWFwKGZ1bmN0aW9uICh0b2tlbikgeyByZXR1cm4gdG9rZW4uZ2V0U3RhdGUoJ2dseXBoSW5kZXgnKTsgfVxuICAgICksIDApO1xuICAgIHZhciBjaGFyQ29udGV4dFBhcmFtcyA9IG5ldyBDb250ZXh0UGFyYW1zKFxuICAgICAgICB0b2tlbnMubWFwKGZ1bmN0aW9uICh0b2tlbikgeyByZXR1cm4gdG9rZW4uY2hhcjsgfVxuICAgICksIDApO1xuICAgIHRva2Vucy5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbiwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzVGFzaGtlZWxBcmFiaWNDaGFyKHRva2VuLmNoYXIpKSB7IHJldHVybjsgfVxuICAgICAgICBjb250ZXh0UGFyYW1zLnNldEN1cnJlbnRJbmRleChpbmRleCk7XG4gICAgICAgIGNoYXJDb250ZXh0UGFyYW1zLnNldEN1cnJlbnRJbmRleChpbmRleCk7XG4gICAgICAgIHZhciBDT05ORUNUID0gMDsgLy8gMiBiaXRzIDAwICgxMDogY2FuIGNvbm5lY3QgbmV4dCkgKDAxOiBjYW4gY29ubmVjdCBwcmV2KVxuICAgICAgICBpZiAod2lsbENvbm5lY3RQcmV2KGNoYXJDb250ZXh0UGFyYW1zKSkgeyBDT05ORUNUIHw9IDE7IH1cbiAgICAgICAgaWYgKHdpbGxDb25uZWN0TmV4dChjaGFyQ29udGV4dFBhcmFtcykpIHsgQ09OTkVDVCB8PSAyOyB9XG4gICAgICAgIHZhciB0YWc7XG4gICAgICAgIHN3aXRjaCAoQ09OTkVDVCkge1xuICAgICAgICAgICAgY2FzZSAxOiAodGFnID0gJ2ZpbmEnKTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6ICh0YWcgPSAnaW5pdCcpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzogKHRhZyA9ICdtZWRpJyk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWdzLmluZGV4T2YodGFnKSA9PT0gLTEpIHsgcmV0dXJuOyB9XG4gICAgICAgIHZhciBzdWJzdGl0dXRpb25zID0gdGhpcyQxLnF1ZXJ5Lmxvb2t1cEZlYXR1cmUoe1xuICAgICAgICAgICAgdGFnOiB0YWcsIHNjcmlwdDogc2NyaXB0LCBjb250ZXh0UGFyYW1zOiBjb250ZXh0UGFyYW1zXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3Vic3RpdHV0aW9ucyBpbnN0YW5jZW9mIEVycm9yKSB7IHJldHVybiBjb25zb2xlLmluZm8oc3Vic3RpdHV0aW9ucy5tZXNzYWdlKTsgfVxuICAgICAgICBzdWJzdGl0dXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbiwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChhY3Rpb24gaW5zdGFuY2VvZiBTdWJzdGl0dXRpb25BY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBhcHBseVN1YnN0aXR1dGlvbihhY3Rpb24sIHRva2VucywgaW5kZXgpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRQYXJhbXMuY29udGV4dFtpbmRleF0gPSBhY3Rpb24uc3Vic3RpdHV0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBBcHBseSBBcmFiaWMgcmVxdWlyZWQgbGlnYXR1cmVzIGZlYXR1cmUgdG8gYSByYW5nZSBvZiB0b2tlbnNcbiAqL1xuXG4vKipcbiAqIFVwZGF0ZSBjb250ZXh0IHBhcmFtc1xuICogQHBhcmFtIHthbnl9IHRva2VucyBhIGxpc3Qgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggY3VycmVudCBpdGVtIGluZGV4XG4gKi9cbmZ1bmN0aW9uIGdldENvbnRleHRQYXJhbXModG9rZW5zLCBpbmRleCkge1xuICAgIHZhciBjb250ZXh0ID0gdG9rZW5zLm1hcChmdW5jdGlvbiAodG9rZW4pIHsgcmV0dXJuIHRva2VuLmFjdGl2ZVN0YXRlLnZhbHVlOyB9KTtcbiAgICByZXR1cm4gbmV3IENvbnRleHRQYXJhbXMoY29udGV4dCwgaW5kZXggfHwgMCk7XG59XG5cbi8qKlxuICogQXBwbHkgQXJhYmljIHJlcXVpcmVkIGxpZ2F0dXJlcyB0byBhIGNvbnRleHQgcmFuZ2VcbiAqIEBwYXJhbSB7Q29udGV4dFJhbmdlfSByYW5nZSBhIHJhbmdlIG9mIHRva2Vuc1xuICovXG5mdW5jdGlvbiBhcmFiaWNSZXF1aXJlZExpZ2F0dXJlcyhyYW5nZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHNjcmlwdCA9ICdhcmFiJztcbiAgICB2YXIgdG9rZW5zID0gdGhpcy50b2tlbml6ZXIuZ2V0UmFuZ2VUb2tlbnMocmFuZ2UpO1xuICAgIHZhciBjb250ZXh0UGFyYW1zID0gZ2V0Q29udGV4dFBhcmFtcyh0b2tlbnMpO1xuICAgIGNvbnRleHRQYXJhbXMuY29udGV4dC5mb3JFYWNoKGZ1bmN0aW9uIChnbHlwaEluZGV4LCBpbmRleCkge1xuICAgICAgICBjb250ZXh0UGFyYW1zLnNldEN1cnJlbnRJbmRleChpbmRleCk7XG4gICAgICAgIHZhciBzdWJzdGl0dXRpb25zID0gdGhpcyQxLnF1ZXJ5Lmxvb2t1cEZlYXR1cmUoe1xuICAgICAgICAgICAgdGFnOiAncmxpZycsIHNjcmlwdDogc2NyaXB0LCBjb250ZXh0UGFyYW1zOiBjb250ZXh0UGFyYW1zXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3Vic3RpdHV0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN1YnN0aXR1dGlvbnMuZm9yRWFjaChcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBhcHBseVN1YnN0aXR1dGlvbihhY3Rpb24sIHRva2VucywgaW5kZXgpOyB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29udGV4dFBhcmFtcyA9IGdldENvbnRleHRQYXJhbXModG9rZW5zKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vKipcbiAqIExhdGluIHdvcmQgY29udGV4dCBjaGVja2Vyc1xuICovXG5cbmZ1bmN0aW9uIGxhdGluV29yZFN0YXJ0Q2hlY2soY29udGV4dFBhcmFtcykge1xuICAgIHZhciBjaGFyID0gY29udGV4dFBhcmFtcy5jdXJyZW50O1xuICAgIHZhciBwcmV2Q2hhciA9IGNvbnRleHRQYXJhbXMuZ2V0KC0xKTtcbiAgICByZXR1cm4gKFxuICAgICAgICAvLyA/IGxhdGluIGZpcnN0IGNoYXJcbiAgICAgICAgKHByZXZDaGFyID09PSBudWxsICYmIGlzTGF0aW5DaGFyKGNoYXIpKSB8fFxuICAgICAgICAvLyA/IGxhdGluIGNoYXIgcHJlY2VkZWQgd2l0aCBhIG5vbiBsYXRpbiBjaGFyXG4gICAgICAgICghaXNMYXRpbkNoYXIocHJldkNoYXIpICYmIGlzTGF0aW5DaGFyKGNoYXIpKVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGxhdGluV29yZEVuZENoZWNrKGNvbnRleHRQYXJhbXMpIHtcbiAgICB2YXIgbmV4dENoYXIgPSBjb250ZXh0UGFyYW1zLmdldCgxKTtcbiAgICByZXR1cm4gKFxuICAgICAgICAvLyA/IGxhc3QgbGF0aW4gY2hhclxuICAgICAgICAobmV4dENoYXIgPT09IG51bGwpIHx8XG4gICAgICAgIC8vID8gbmV4dCBjaGFyIGlzIG5vdCBsYXRpblxuICAgICAgICAoIWlzTGF0aW5DaGFyKG5leHRDaGFyKSlcbiAgICApO1xufVxuXG52YXIgbGF0aW5Xb3JkQ2hlY2sgPSB7XG4gICAgc3RhcnRDaGVjazogbGF0aW5Xb3JkU3RhcnRDaGVjayxcbiAgICBlbmRDaGVjazogbGF0aW5Xb3JkRW5kQ2hlY2tcbn07XG5cbi8qKlxuICogQXBwbHkgTGF0aW4gbGlnYXR1cmUgZmVhdHVyZSB0byBhIHJhbmdlIG9mIHRva2Vuc1xuICovXG5cbi8qKlxuICogVXBkYXRlIGNvbnRleHQgcGFyYW1zXG4gKiBAcGFyYW0ge2FueX0gdG9rZW5zIGEgbGlzdCBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBjdXJyZW50IGl0ZW0gaW5kZXhcbiAqL1xuZnVuY3Rpb24gZ2V0Q29udGV4dFBhcmFtcyQxKHRva2VucywgaW5kZXgpIHtcbiAgICB2YXIgY29udGV4dCA9IHRva2Vucy5tYXAoZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiB0b2tlbi5hY3RpdmVTdGF0ZS52YWx1ZTsgfSk7XG4gICAgcmV0dXJuIG5ldyBDb250ZXh0UGFyYW1zKGNvbnRleHQsIGluZGV4IHx8IDApO1xufVxuXG4vKipcbiAqIEFwcGx5IEFyYWJpYyByZXF1aXJlZCBsaWdhdHVyZXMgdG8gYSBjb250ZXh0IHJhbmdlXG4gKiBAcGFyYW0ge0NvbnRleHRSYW5nZX0gcmFuZ2UgYSByYW5nZSBvZiB0b2tlbnNcbiAqL1xuZnVuY3Rpb24gbGF0aW5MaWdhdHVyZShyYW5nZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHNjcmlwdCA9ICdsYXRuJztcbiAgICB2YXIgdG9rZW5zID0gdGhpcy50b2tlbml6ZXIuZ2V0UmFuZ2VUb2tlbnMocmFuZ2UpO1xuICAgIHZhciBjb250ZXh0UGFyYW1zID0gZ2V0Q29udGV4dFBhcmFtcyQxKHRva2Vucyk7XG4gICAgY29udGV4dFBhcmFtcy5jb250ZXh0LmZvckVhY2goZnVuY3Rpb24gKGdseXBoSW5kZXgsIGluZGV4KSB7XG4gICAgICAgIGNvbnRleHRQYXJhbXMuc2V0Q3VycmVudEluZGV4KGluZGV4KTtcbiAgICAgICAgdmFyIHN1YnN0aXR1dGlvbnMgPSB0aGlzJDEucXVlcnkubG9va3VwRmVhdHVyZSh7XG4gICAgICAgICAgICB0YWc6ICdsaWdhJywgc2NyaXB0OiBzY3JpcHQsIGNvbnRleHRQYXJhbXM6IGNvbnRleHRQYXJhbXNcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzdWJzdGl0dXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgc3Vic3RpdHV0aW9ucy5mb3JFYWNoKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFwcGx5U3Vic3RpdHV0aW9uKGFjdGlvbiwgdG9rZW5zLCBpbmRleCk7IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb250ZXh0UGFyYW1zID0gZ2V0Q29udGV4dFBhcmFtcyQxKHRva2Vucyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLyoqXG4gKiBJbmZlciBiaWRpcmVjdGlvbmFsIHByb3BlcnRpZXMgZm9yIGEgZ2l2ZW4gdGV4dCBhbmQgYXBwbHlcbiAqIHRoZSBjb3JyZXNwb25kaW5nIGxheW91dCBydWxlcy5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBCaWRpLiBmZWF0dXJlc1xuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VEaXIgdGV4dCBiYXNlIGRpcmVjdGlvbi4gdmFsdWUgZWl0aGVyICdsdHInIG9yICdydGwnXG4gKi9cbmZ1bmN0aW9uIEJpZGkoYmFzZURpcikge1xuICAgIHRoaXMuYmFzZURpciA9IGJhc2VEaXIgfHwgJ2x0cic7XG4gICAgdGhpcy50b2tlbml6ZXIgPSBuZXcgVG9rZW5pemVyKCk7XG4gICAgdGhpcy5mZWF0dXJlc1RhZ3MgPSB7fTtcbn1cblxuLyoqXG4gKiBTZXRzIEJpZGkgdGV4dFxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgYSB0ZXh0IGlucHV0XG4gKi9cbkJpZGkucHJvdG90eXBlLnNldFRleHQgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG59O1xuXG4vKipcbiAqIFN0b3JlIGVzc2VudGlhbCBjb250ZXh0IGNoZWNrczpcbiAqIGFyYWJpYyB3b3JkIGNoZWNrIGZvciBhcHBseWluZyBnc3ViIGZlYXR1cmVzXG4gKiBhcmFiaWMgc2VudGVuY2UgY2hlY2sgZm9yIGFkanVzdGluZyBhcmFiaWMgbGF5b3V0XG4gKi9cbkJpZGkucHJvdG90eXBlLmNvbnRleHRDaGVja3MgPSAoe1xuICAgIGxhdGluV29yZENoZWNrOiBsYXRpbldvcmRDaGVjayxcbiAgICBhcmFiaWNXb3JkQ2hlY2s6IGFyYWJpY1dvcmRDaGVjayxcbiAgICBhcmFiaWNTZW50ZW5jZUNoZWNrOiBhcmFiaWNTZW50ZW5jZUNoZWNrXG59KTtcblxuLyoqXG4gKiBSZWdpc3RlciBhcmFiaWMgd29yZCBjaGVja1xuICovXG5mdW5jdGlvbiByZWdpc3RlckNvbnRleHRDaGVja2VyKGNoZWNrSWQpIHtcbiAgICB2YXIgY2hlY2sgPSB0aGlzLmNvbnRleHRDaGVja3NbKGNoZWNrSWQgKyBcIkNoZWNrXCIpXTtcbiAgICByZXR1cm4gdGhpcy50b2tlbml6ZXIucmVnaXN0ZXJDb250ZXh0Q2hlY2tlcihcbiAgICAgICAgY2hlY2tJZCwgY2hlY2suc3RhcnRDaGVjaywgY2hlY2suZW5kQ2hlY2tcbiAgICApO1xufVxuXG4vKipcbiAqIFBlcmZvcm0gcHJlIHRva2VuaXphdGlvbiBwcm9jZWR1cmUgdGhlblxuICogdG9rZW5pemUgdGV4dCBpbnB1dFxuICovXG5mdW5jdGlvbiB0b2tlbml6ZVRleHQoKSB7XG4gICAgcmVnaXN0ZXJDb250ZXh0Q2hlY2tlci5jYWxsKHRoaXMsICdsYXRpbldvcmQnKTtcbiAgICByZWdpc3RlckNvbnRleHRDaGVja2VyLmNhbGwodGhpcywgJ2FyYWJpY1dvcmQnKTtcbiAgICByZWdpc3RlckNvbnRleHRDaGVja2VyLmNhbGwodGhpcywgJ2FyYWJpY1NlbnRlbmNlJyk7XG4gICAgcmV0dXJuIHRoaXMudG9rZW5pemVyLnRva2VuaXplKHRoaXMudGV4dCk7XG59XG5cbi8qKlxuICogUmV2ZXJzZSBhcmFiaWMgc2VudGVuY2UgbGF5b3V0XG4gKiBUT0RPOiBjaGVjayBiYXNlIGRpciBiZWZvcmUgYXBwbHlpbmcgYWRqdXN0bWVudHMgLSBwcmlvcml0eSBsb3dcbiAqL1xuZnVuY3Rpb24gcmV2ZXJzZUFyYWJpY1NlbnRlbmNlcygpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByYW5nZXMgPSB0aGlzLnRva2VuaXplci5nZXRDb250ZXh0UmFuZ2VzKCdhcmFiaWNTZW50ZW5jZScpO1xuICAgIHJhbmdlcy5mb3JFYWNoKGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICB2YXIgcmFuZ2VUb2tlbnMgPSB0aGlzJDEudG9rZW5pemVyLmdldFJhbmdlVG9rZW5zKHJhbmdlKTtcbiAgICAgICAgdGhpcyQxLnRva2VuaXplci5yZXBsYWNlUmFuZ2UoXG4gICAgICAgICAgICByYW5nZS5zdGFydEluZGV4LFxuICAgICAgICAgICAgcmFuZ2UuZW5kT2Zmc2V0LFxuICAgICAgICAgICAgcmFuZ2VUb2tlbnMucmV2ZXJzZSgpXG4gICAgICAgICk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogUmVnaXN0ZXIgc3VwcG9ydGVkIGZlYXR1cmVzIHRhZ3NcbiAqIEBwYXJhbSB7c2NyaXB0fSBzY3JpcHQgc2NyaXB0IHRhZ1xuICogQHBhcmFtIHtBcnJheX0gdGFncyBmZWF0dXJlcyB0YWdzIGxpc3RcbiAqL1xuQmlkaS5wcm90b3R5cGUucmVnaXN0ZXJGZWF0dXJlcyA9IGZ1bmN0aW9uIChzY3JpcHQsIHRhZ3MpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBzdXBwb3J0ZWRUYWdzID0gdGFncy5maWx0ZXIoXG4gICAgICAgIGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHRoaXMkMS5xdWVyeS5zdXBwb3J0cyh7c2NyaXB0OiBzY3JpcHQsIHRhZzogdGFnfSk7IH1cbiAgICApO1xuICAgIGlmICghdGhpcy5mZWF0dXJlc1RhZ3MuaGFzT3duUHJvcGVydHkoc2NyaXB0KSkge1xuICAgICAgICB0aGlzLmZlYXR1cmVzVGFnc1tzY3JpcHRdID0gc3VwcG9ydGVkVGFncztcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZlYXR1cmVzVGFnc1tzY3JpcHRdID1cbiAgICAgICAgdGhpcy5mZWF0dXJlc1RhZ3Nbc2NyaXB0XS5jb25jYXQoc3VwcG9ydGVkVGFncyk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBBcHBseSBHU1VCIGZlYXR1cmVzXG4gKiBAcGFyYW0ge0FycmF5fSB0YWdzTGlzdCBhIGxpc3Qgb2YgZmVhdHVyZXMgdGFnc1xuICogQHBhcmFtIHtzdHJpbmd9IHNjcmlwdCBhIHNjcmlwdCB0YWdcbiAqIEBwYXJhbSB7Rm9udH0gZm9udCBvcGVudHlwZSBmb250IGluc3RhbmNlXG4gKi9cbkJpZGkucHJvdG90eXBlLmFwcGx5RmVhdHVyZXMgPSBmdW5jdGlvbiAoZm9udCwgZmVhdHVyZXMpIHtcbiAgICBpZiAoIWZvbnQpIHsgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnTm8gdmFsaWQgZm9udCB3YXMgcHJvdmlkZWQgdG8gYXBwbHkgZmVhdHVyZXMnXG4gICAgKTsgfVxuICAgIGlmICghdGhpcy5xdWVyeSkgeyB0aGlzLnF1ZXJ5ID0gbmV3IEZlYXR1cmVRdWVyeShmb250KTsgfVxuICAgIGZvciAodmFyIGYgPSAwOyBmIDwgZmVhdHVyZXMubGVuZ3RoOyBmKyspIHtcbiAgICAgICAgdmFyIGZlYXR1cmUgPSBmZWF0dXJlc1tmXTtcbiAgICAgICAgaWYgKCF0aGlzLnF1ZXJ5LnN1cHBvcnRzKHtzY3JpcHQ6IGZlYXR1cmUuc2NyaXB0fSkpIHsgY29udGludWU7IH1cbiAgICAgICAgdGhpcy5yZWdpc3RlckZlYXR1cmVzKGZlYXR1cmUuc2NyaXB0LCBmZWF0dXJlLnRhZ3MpO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBzdGF0ZSBtb2RpZmllclxuICogQHBhcmFtIHtzdHJpbmd9IG1vZGlmaWVySWQgc3RhdGUgbW9kaWZpZXIgaWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbmRpdGlvbiBhIHByZWRpY2F0ZSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdHJ1ZSBvciBmYWxzZVxuICogQHBhcmFtIHtmdW5jdGlvbn0gbW9kaWZpZXIgYSBtb2RpZmllciBmdW5jdGlvbiB0byBzZXQgdG9rZW4gc3RhdGVcbiAqL1xuQmlkaS5wcm90b3R5cGUucmVnaXN0ZXJNb2RpZmllciA9IGZ1bmN0aW9uIChtb2RpZmllcklkLCBjb25kaXRpb24sIG1vZGlmaWVyKSB7XG4gICAgdGhpcy50b2tlbml6ZXIucmVnaXN0ZXJNb2RpZmllcihtb2RpZmllcklkLCBjb25kaXRpb24sIG1vZGlmaWVyKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgJ2dseXBoSW5kZXgnIGlzIHJlZ2lzdGVyZWRcbiAqL1xuZnVuY3Rpb24gY2hlY2tHbHlwaEluZGV4U3RhdHVzKCkge1xuICAgIGlmICh0aGlzLnRva2VuaXplci5yZWdpc3RlcmVkTW9kaWZpZXJzLmluZGV4T2YoJ2dseXBoSW5kZXgnKSA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ2dseXBoSW5kZXggbW9kaWZpZXIgaXMgcmVxdWlyZWQgdG8gYXBwbHkgJyArXG4gICAgICAgICAgICAnYXJhYmljIHByZXNlbnRhdGlvbiBmZWF0dXJlcy4nXG4gICAgICAgICk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFwcGx5IGFyYWJpYyBwcmVzZW50YXRpb24gZm9ybXMgZmVhdHVyZXNcbiAqL1xuZnVuY3Rpb24gYXBwbHlBcmFiaWNQcmVzZW50YXRpb25Gb3JtcygpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBzY3JpcHQgPSAnYXJhYic7XG4gICAgaWYgKCF0aGlzLmZlYXR1cmVzVGFncy5oYXNPd25Qcm9wZXJ0eShzY3JpcHQpKSB7IHJldHVybjsgfVxuICAgIGNoZWNrR2x5cGhJbmRleFN0YXR1cy5jYWxsKHRoaXMpO1xuICAgIHZhciByYW5nZXMgPSB0aGlzLnRva2VuaXplci5nZXRDb250ZXh0UmFuZ2VzKCdhcmFiaWNXb3JkJyk7XG4gICAgcmFuZ2VzLmZvckVhY2goZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgICAgIGFyYWJpY1ByZXNlbnRhdGlvbkZvcm1zLmNhbGwodGhpcyQxLCByYW5nZSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogQXBwbHkgcmVxdWlyZWQgYXJhYmljIGxpZ2F0dXJlc1xuICovXG5mdW5jdGlvbiBhcHBseUFyYWJpY1JlcXVpcmVMaWdhdHVyZXMoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgc2NyaXB0ID0gJ2FyYWInO1xuICAgIGlmICghdGhpcy5mZWF0dXJlc1RhZ3MuaGFzT3duUHJvcGVydHkoc2NyaXB0KSkgeyByZXR1cm47IH1cbiAgICB2YXIgdGFncyA9IHRoaXMuZmVhdHVyZXNUYWdzW3NjcmlwdF07XG4gICAgaWYgKHRhZ3MuaW5kZXhPZigncmxpZycpID09PSAtMSkgeyByZXR1cm47IH1cbiAgICBjaGVja0dseXBoSW5kZXhTdGF0dXMuY2FsbCh0aGlzKTtcbiAgICB2YXIgcmFuZ2VzID0gdGhpcy50b2tlbml6ZXIuZ2V0Q29udGV4dFJhbmdlcygnYXJhYmljV29yZCcpO1xuICAgIHJhbmdlcy5mb3JFYWNoKGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICBhcmFiaWNSZXF1aXJlZExpZ2F0dXJlcy5jYWxsKHRoaXMkMSwgcmFuZ2UpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEFwcGx5IHJlcXVpcmVkIGFyYWJpYyBsaWdhdHVyZXNcbiAqL1xuZnVuY3Rpb24gYXBwbHlMYXRpbkxpZ2F0dXJlcygpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBzY3JpcHQgPSAnbGF0bic7XG4gICAgaWYgKCF0aGlzLmZlYXR1cmVzVGFncy5oYXNPd25Qcm9wZXJ0eShzY3JpcHQpKSB7IHJldHVybjsgfVxuICAgIHZhciB0YWdzID0gdGhpcy5mZWF0dXJlc1RhZ3Nbc2NyaXB0XTtcbiAgICBpZiAodGFncy5pbmRleE9mKCdsaWdhJykgPT09IC0xKSB7IHJldHVybjsgfVxuICAgIGNoZWNrR2x5cGhJbmRleFN0YXR1cy5jYWxsKHRoaXMpO1xuICAgIHZhciByYW5nZXMgPSB0aGlzLnRva2VuaXplci5nZXRDb250ZXh0UmFuZ2VzKCdsYXRpbldvcmQnKTtcbiAgICByYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgbGF0aW5MaWdhdHVyZS5jYWxsKHRoaXMkMSwgcmFuZ2UpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgY29udGV4dCBpcyByZWdpc3RlcmVkXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGV4dElkIGNvbnRleHQgaWRcbiAqL1xuQmlkaS5wcm90b3R5cGUuY2hlY2tDb250ZXh0UmVhZHkgPSBmdW5jdGlvbiAoY29udGV4dElkKSB7XG4gICAgcmV0dXJuICEhdGhpcy50b2tlbml6ZXIuZ2V0Q29udGV4dChjb250ZXh0SWQpO1xufTtcblxuLyoqXG4gKiBBcHBseSBmZWF0dXJlcyB0byByZWdpc3RlcmVkIGNvbnRleHRzXG4gKi9cbkJpZGkucHJvdG90eXBlLmFwcGx5RmVhdHVyZXNUb0NvbnRleHRzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmNoZWNrQ29udGV4dFJlYWR5KCdhcmFiaWNXb3JkJykpIHtcbiAgICAgICAgYXBwbHlBcmFiaWNQcmVzZW50YXRpb25Gb3Jtcy5jYWxsKHRoaXMpO1xuICAgICAgICBhcHBseUFyYWJpY1JlcXVpcmVMaWdhdHVyZXMuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY2hlY2tDb250ZXh0UmVhZHkoJ2xhdGluV29yZCcpKSB7XG4gICAgICAgIGFwcGx5TGF0aW5MaWdhdHVyZXMuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY2hlY2tDb250ZXh0UmVhZHkoJ2FyYWJpY1NlbnRlbmNlJykpIHtcbiAgICAgICAgcmV2ZXJzZUFyYWJpY1NlbnRlbmNlcy5jYWxsKHRoaXMpO1xuICAgIH1cbn07XG5cbi8qKlxuICogcHJvY2VzcyB0ZXh0IGlucHV0XG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBhbiBpbnB1dCB0ZXh0XG4gKi9cbkJpZGkucHJvdG90eXBlLnByb2Nlc3NUZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICAgIGlmICghdGhpcy50ZXh0IHx8IHRoaXMudGV4dCAhPT0gdGV4dCkge1xuICAgICAgICB0aGlzLnNldFRleHQodGV4dCk7XG4gICAgICAgIHRva2VuaXplVGV4dC5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmFwcGx5RmVhdHVyZXNUb0NvbnRleHRzKCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBQcm9jZXNzIGEgc3RyaW5nIG9mIHRleHQgdG8gaWRlbnRpZnkgYW5kIGFkanVzdFxuICogYmlkaXJlY3Rpb25hbCB0ZXh0IGVudGl0aWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgaW5wdXQgdGV4dFxuICovXG5CaWRpLnByb3RvdHlwZS5nZXRCaWRpVGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgdGhpcy5wcm9jZXNzVGV4dCh0ZXh0KTtcbiAgICByZXR1cm4gdGhpcy50b2tlbml6ZXIuZ2V0VGV4dCgpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgc3RhdGUgaW5kZXggb2YgZWFjaCB0b2tlblxuICogQHBhcmFtIHt0ZXh0fSB0ZXh0IGFuIGlucHV0IHRleHRcbiAqL1xuQmlkaS5wcm90b3R5cGUuZ2V0VGV4dEdseXBocyA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgdGhpcy5wcm9jZXNzVGV4dCh0ZXh0KTtcbiAgICB2YXIgaW5kZXhlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50b2tlbml6ZXIudG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHRoaXMudG9rZW5pemVyLnRva2Vuc1tpXTtcbiAgICAgICAgaWYgKHRva2VuLnN0YXRlLmRlbGV0ZWQpIHsgY29udGludWU7IH1cbiAgICAgICAgdmFyIGluZGV4ID0gdG9rZW4uYWN0aXZlU3RhdGUudmFsdWU7XG4gICAgICAgIGluZGV4ZXMucHVzaChBcnJheS5pc0FycmF5KGluZGV4KSA/IGluZGV4WzBdIDogaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXhlcztcbn07XG5cbi8vIFRoZSBGb250IG9iamVjdFxuXG4vKipcbiAqIEB0eXBlZGVmIEZvbnRPcHRpb25zXG4gKiBAdHlwZSBPYmplY3RcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZW1wdHkgLSB3aGV0aGVyIHRvIGNyZWF0ZSBhIG5ldyBlbXB0eSBmb250XG4gKiBAcHJvcGVydHkge3N0cmluZ30gZmFtaWx5TmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0eWxlTmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmc9fSBmdWxsTmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmc9fSBwb3N0U2NyaXB0TmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmc9fSBkZXNpZ25lclxuICogQHByb3BlcnR5IHtzdHJpbmc9fSBkZXNpZ25lclVSTFxuICogQHByb3BlcnR5IHtzdHJpbmc9fSBtYW51ZmFjdHVyZXJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nPX0gbWFudWZhY3R1cmVyVVJMXG4gKiBAcHJvcGVydHkge3N0cmluZz19IGxpY2Vuc2VcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nPX0gbGljZW5zZVVSTFxuICogQHByb3BlcnR5IHtzdHJpbmc9fSB2ZXJzaW9uXG4gKiBAcHJvcGVydHkge3N0cmluZz19IGRlc2NyaXB0aW9uXG4gKiBAcHJvcGVydHkge3N0cmluZz19IGNvcHlyaWdodFxuICogQHByb3BlcnR5IHtzdHJpbmc9fSB0cmFkZW1hcmtcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB1bml0c1BlckVtXG4gKiBAcHJvcGVydHkge051bWJlcn0gYXNjZW5kZXJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBkZXNjZW5kZXJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBjcmVhdGVkVGltZXN0YW1wXG4gKiBAcHJvcGVydHkge3N0cmluZz19IHdlaWdodENsYXNzXG4gKiBAcHJvcGVydHkge3N0cmluZz19IHdpZHRoQ2xhc3NcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nPX0gZnNTZWxlY3Rpb25cbiAqL1xuXG4vKipcbiAqIEEgRm9udCByZXByZXNlbnRzIGEgbG9hZGVkIE9wZW5UeXBlIGZvbnQgZmlsZS5cbiAqIEl0IGNvbnRhaW5zIGEgc2V0IG9mIGdseXBocyBhbmQgbWV0aG9kcyB0byBkcmF3IHRleHQgb24gYSBkcmF3aW5nIGNvbnRleHQsXG4gKiBvciB0byBnZXQgYSBwYXRoIHJlcHJlc2VudGluZyB0aGUgdGV4dC5cbiAqIEBleHBvcnRzIG9wZW50eXBlLkZvbnRcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGb250T3B0aW9uc31cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBGb250KG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnRhYmxlcyA9IG9wdGlvbnMudGFibGVzIHx8IHt9O1xuXG4gICAgaWYgKCFvcHRpb25zLmVtcHR5KSB7XG4gICAgICAgIC8vIENoZWNrIHRoYXQgd2UndmUgcHJvdmlkZWQgdGhlIG1pbmltdW0gc2V0IG9mIG5hbWVzLlxuICAgICAgICBjaGVja0FyZ3VtZW50KG9wdGlvbnMuZmFtaWx5TmFtZSwgJ1doZW4gY3JlYXRpbmcgYSBuZXcgRm9udCBvYmplY3QsIGZhbWlseU5hbWUgaXMgcmVxdWlyZWQuJyk7XG4gICAgICAgIGNoZWNrQXJndW1lbnQob3B0aW9ucy5zdHlsZU5hbWUsICdXaGVuIGNyZWF0aW5nIGEgbmV3IEZvbnQgb2JqZWN0LCBzdHlsZU5hbWUgaXMgcmVxdWlyZWQuJyk7XG4gICAgICAgIGNoZWNrQXJndW1lbnQob3B0aW9ucy51bml0c1BlckVtLCAnV2hlbiBjcmVhdGluZyBhIG5ldyBGb250IG9iamVjdCwgdW5pdHNQZXJFbSBpcyByZXF1aXJlZC4nKTtcbiAgICAgICAgY2hlY2tBcmd1bWVudChvcHRpb25zLmFzY2VuZGVyLCAnV2hlbiBjcmVhdGluZyBhIG5ldyBGb250IG9iamVjdCwgYXNjZW5kZXIgaXMgcmVxdWlyZWQuJyk7XG4gICAgICAgIGNoZWNrQXJndW1lbnQob3B0aW9ucy5kZXNjZW5kZXIgPD0gMCwgJ1doZW4gY3JlYXRpbmcgYSBuZXcgRm9udCBvYmplY3QsIG5lZ2F0aXZlIGRlc2NlbmRlciB2YWx1ZSBpcyByZXF1aXJlZC4nKTtcblxuICAgICAgICAvLyBPUyBYIHdpbGwgY29tcGxhaW4gaWYgdGhlIG5hbWVzIGFyZSBlbXB0eSwgc28gd2UgcHV0IGEgc2luZ2xlIHNwYWNlIGV2ZXJ5d2hlcmUgYnkgZGVmYXVsdC5cbiAgICAgICAgdGhpcy5uYW1lcyA9IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IHtlbjogb3B0aW9ucy5mYW1pbHlOYW1lIHx8ICcgJ30sXG4gICAgICAgICAgICBmb250U3ViZmFtaWx5OiB7ZW46IG9wdGlvbnMuc3R5bGVOYW1lIHx8ICcgJ30sXG4gICAgICAgICAgICBmdWxsTmFtZToge2VuOiBvcHRpb25zLmZ1bGxOYW1lIHx8IG9wdGlvbnMuZmFtaWx5TmFtZSArICcgJyArIG9wdGlvbnMuc3R5bGVOYW1lfSxcbiAgICAgICAgICAgIC8vIHBvc3RTY3JpcHROYW1lIG1heSBub3QgY29udGFpbiBhbnkgd2hpdGVzcGFjZVxuICAgICAgICAgICAgcG9zdFNjcmlwdE5hbWU6IHtlbjogb3B0aW9ucy5wb3N0U2NyaXB0TmFtZSB8fCAob3B0aW9ucy5mYW1pbHlOYW1lICsgb3B0aW9ucy5zdHlsZU5hbWUpLnJlcGxhY2UoL1xccy9nLCAnJyl9LFxuICAgICAgICAgICAgZGVzaWduZXI6IHtlbjogb3B0aW9ucy5kZXNpZ25lciB8fCAnICd9LFxuICAgICAgICAgICAgZGVzaWduZXJVUkw6IHtlbjogb3B0aW9ucy5kZXNpZ25lclVSTCB8fCAnICd9LFxuICAgICAgICAgICAgbWFudWZhY3R1cmVyOiB7ZW46IG9wdGlvbnMubWFudWZhY3R1cmVyIHx8ICcgJ30sXG4gICAgICAgICAgICBtYW51ZmFjdHVyZXJVUkw6IHtlbjogb3B0aW9ucy5tYW51ZmFjdHVyZXJVUkwgfHwgJyAnfSxcbiAgICAgICAgICAgIGxpY2Vuc2U6IHtlbjogb3B0aW9ucy5saWNlbnNlIHx8ICcgJ30sXG4gICAgICAgICAgICBsaWNlbnNlVVJMOiB7ZW46IG9wdGlvbnMubGljZW5zZVVSTCB8fCAnICd9LFxuICAgICAgICAgICAgdmVyc2lvbjoge2VuOiBvcHRpb25zLnZlcnNpb24gfHwgJ1ZlcnNpb24gMC4xJ30sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjoge2VuOiBvcHRpb25zLmRlc2NyaXB0aW9uIHx8ICcgJ30sXG4gICAgICAgICAgICBjb3B5cmlnaHQ6IHtlbjogb3B0aW9ucy5jb3B5cmlnaHQgfHwgJyAnfSxcbiAgICAgICAgICAgIHRyYWRlbWFyazoge2VuOiBvcHRpb25zLnRyYWRlbWFyayB8fCAnICd9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudW5pdHNQZXJFbSA9IG9wdGlvbnMudW5pdHNQZXJFbSB8fCAxMDAwO1xuICAgICAgICB0aGlzLmFzY2VuZGVyID0gb3B0aW9ucy5hc2NlbmRlcjtcbiAgICAgICAgdGhpcy5kZXNjZW5kZXIgPSBvcHRpb25zLmRlc2NlbmRlcjtcbiAgICAgICAgdGhpcy5jcmVhdGVkVGltZXN0YW1wID0gb3B0aW9ucy5jcmVhdGVkVGltZXN0YW1wO1xuICAgICAgICB0aGlzLnRhYmxlcyA9IE9iamVjdC5hc3NpZ24ob3B0aW9ucy50YWJsZXMsIHtcbiAgICAgICAgICAgIG9zMjogT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAgICAgdXNXZWlnaHRDbGFzczogb3B0aW9ucy53ZWlnaHRDbGFzcyB8fCB0aGlzLnVzV2VpZ2h0Q2xhc3Nlcy5NRURJVU0sXG4gICAgICAgICAgICAgICAgdXNXaWR0aENsYXNzOiBvcHRpb25zLndpZHRoQ2xhc3MgfHwgdGhpcy51c1dpZHRoQ2xhc3Nlcy5NRURJVU0sXG4gICAgICAgICAgICAgICAgZnNTZWxlY3Rpb246IG9wdGlvbnMuZnNTZWxlY3Rpb24gfHwgdGhpcy5mc1NlbGVjdGlvblZhbHVlcy5SRUdVTEFSLFxuICAgICAgICAgICAgfSwgb3B0aW9ucy50YWJsZXMub3MyKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnN1cHBvcnRlZCA9IHRydWU7IC8vIERlcHJlY2F0ZWQ6IHBhcnNlQnVmZmVyIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgZm9udCBpcyBub3Qgc3VwcG9ydGVkLlxuICAgIHRoaXMuZ2x5cGhzID0gbmV3IGdseXBoc2V0LkdseXBoU2V0KHRoaXMsIG9wdGlvbnMuZ2x5cGhzIHx8IFtdKTtcbiAgICB0aGlzLmVuY29kaW5nID0gbmV3IERlZmF1bHRFbmNvZGluZyh0aGlzKTtcbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFBvc2l0aW9uKHRoaXMpO1xuICAgIHRoaXMuc3Vic3RpdHV0aW9uID0gbmV3IFN1YnN0aXR1dGlvbih0aGlzKTtcbiAgICB0aGlzLnRhYmxlcyA9IHRoaXMudGFibGVzIHx8IHt9O1xuXG4gICAgLy8gbmVlZGVkIGZvciBsb3cgbWVtb3J5IG1vZGUgb25seS5cbiAgICB0aGlzLl9wdXNoID0gbnVsbDtcbiAgICB0aGlzLl9obXR4VGFibGVEYXRhID0ge307XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2hpbnRpbmcnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faGludGluZykgeyByZXR1cm4gdGhpcy5faGludGluZzsgfVxuICAgICAgICAgICAgaWYgKHRoaXMub3V0bGluZXNGb3JtYXQgPT09ICd0cnVldHlwZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuX2hpbnRpbmcgPSBuZXcgSGludGluZyh0aGlzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZm9udCBoYXMgYSBnbHlwaCBmb3IgdGhlIGdpdmVuIGNoYXJhY3Rlci5cbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbkZvbnQucHJvdG90eXBlLmhhc0NoYXIgPSBmdW5jdGlvbihjKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5jb2RpbmcuY2hhclRvR2x5cGhJbmRleChjKSAhPT0gbnVsbDtcbn07XG5cbi8qKlxuICogQ29udmVydCB0aGUgZ2l2ZW4gY2hhcmFjdGVyIHRvIGEgc2luZ2xlIGdseXBoIGluZGV4LlxuICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gYXNzdW1lcyB0aGF0IHRoZXJlIGlzIGEgb25lLXRvLW9uZSBtYXBwaW5nIGJldHdlZW5cbiAqIHRoZSBnaXZlbiBjaGFyYWN0ZXIgYW5kIGEgZ2x5cGg7IGZvciBjb21wbGV4IHNjcmlwdHMgdGhpcyBtaWdodCBub3QgYmUgdGhlIGNhc2UuXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbkZvbnQucHJvdG90eXBlLmNoYXJUb0dseXBoSW5kZXggPSBmdW5jdGlvbihzKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5jb2RpbmcuY2hhclRvR2x5cGhJbmRleChzKTtcbn07XG5cbi8qKlxuICogQ29udmVydCB0aGUgZ2l2ZW4gY2hhcmFjdGVyIHRvIGEgc2luZ2xlIEdseXBoIG9iamVjdC5cbiAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCB0aGVyZSBpcyBhIG9uZS10by1vbmUgbWFwcGluZyBiZXR3ZWVuXG4gKiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGFuZCBhIGdseXBoOyBmb3IgY29tcGxleCBzY3JpcHRzIHRoaXMgbWlnaHQgbm90IGJlIHRoZSBjYXNlLlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7b3BlbnR5cGUuR2x5cGh9XG4gKi9cbkZvbnQucHJvdG90eXBlLmNoYXJUb0dseXBoID0gZnVuY3Rpb24oYykge1xuICAgIHZhciBnbHlwaEluZGV4ID0gdGhpcy5jaGFyVG9HbHlwaEluZGV4KGMpO1xuICAgIHZhciBnbHlwaCA9IHRoaXMuZ2x5cGhzLmdldChnbHlwaEluZGV4KTtcbiAgICBpZiAoIWdseXBoKSB7XG4gICAgICAgIC8vIC5ub3RkZWZcbiAgICAgICAgZ2x5cGggPSB0aGlzLmdseXBocy5nZXQoMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdseXBoO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgZmVhdHVyZXNcbiAqIEBwYXJhbSB7YW55fSBvcHRpb25zIGZlYXR1cmVzIG9wdGlvbnNcbiAqL1xuRm9udC5wcm90b3R5cGUudXBkYXRlRmVhdHVyZXMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIC8vIFRPRE86IHVwZGF0ZSBhbGwgZmVhdHVyZXMgb3B0aW9ucyBub3Qgb25seSAnbGF0bicuXG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdFJlbmRlck9wdGlvbnMuZmVhdHVyZXMubWFwKGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgIGlmIChmZWF0dXJlLnNjcmlwdCA9PT0gJ2xhdG4nKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNjcmlwdDogJ2xhdG4nLFxuICAgICAgICAgICAgICAgIHRhZ3M6IGZlYXR1cmUudGFncy5maWx0ZXIoZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gb3B0aW9uc1t0YWddOyB9KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmZWF0dXJlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgdGhlIGdpdmVuIHRleHQgdG8gYSBsaXN0IG9mIEdseXBoIG9iamVjdHMuXG4gKiBOb3RlIHRoYXQgdGhlcmUgaXMgbm8gc3RyaWN0IG9uZS10by1vbmUgbWFwcGluZyBiZXR3ZWVuIGNoYXJhY3RlcnMgYW5kXG4gKiBnbHlwaHMsIHNvIHRoZSBsaXN0IG9mIHJldHVybmVkIGdseXBocyBjYW4gYmUgbGFyZ2VyIG9yIHNtYWxsZXIgdGhhbiB0aGVcbiAqIGxlbmd0aCBvZiB0aGUgZ2l2ZW4gc3RyaW5nLlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHBhcmFtICB7R2x5cGhSZW5kZXJPcHRpb25zfSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge29wZW50eXBlLkdseXBoW119XG4gKi9cbkZvbnQucHJvdG90eXBlLnN0cmluZ1RvR2x5cGhzID0gZnVuY3Rpb24ocywgb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG5cbiAgICB2YXIgYmlkaSA9IG5ldyBCaWRpKCk7XG5cbiAgICAvLyBDcmVhdGUgYW5kIHJlZ2lzdGVyICdnbHlwaEluZGV4JyBzdGF0ZSBtb2RpZmllclxuICAgIHZhciBjaGFyVG9HbHlwaEluZGV4TW9kID0gZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiB0aGlzJDEuY2hhclRvR2x5cGhJbmRleCh0b2tlbi5jaGFyKTsgfTtcbiAgICBiaWRpLnJlZ2lzdGVyTW9kaWZpZXIoJ2dseXBoSW5kZXgnLCBudWxsLCBjaGFyVG9HbHlwaEluZGV4TW9kKTtcblxuICAgIC8vIHJvbGwtYmFjayB0byBkZWZhdWx0IGZlYXR1cmVzXG4gICAgdmFyIGZlYXR1cmVzID0gb3B0aW9ucyA/XG4gICAgdGhpcy51cGRhdGVGZWF0dXJlcyhvcHRpb25zLmZlYXR1cmVzKSA6XG4gICAgdGhpcy5kZWZhdWx0UmVuZGVyT3B0aW9ucy5mZWF0dXJlcztcblxuICAgIGJpZGkuYXBwbHlGZWF0dXJlcyh0aGlzLCBmZWF0dXJlcyk7XG5cbiAgICB2YXIgaW5kZXhlcyA9IGJpZGkuZ2V0VGV4dEdseXBocyhzKTtcblxuICAgIHZhciBsZW5ndGggPSBpbmRleGVzLmxlbmd0aDtcblxuICAgIC8vIGNvbnZlcnQgZ2x5cGggaW5kZXhlcyB0byBnbHlwaCBvYmplY3RzXG4gICAgdmFyIGdseXBocyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIHZhciBub3RkZWYgPSB0aGlzLmdseXBocy5nZXQoMCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBnbHlwaHNbaV0gPSB0aGlzLmdseXBocy5nZXQoaW5kZXhlc1tpXSkgfHwgbm90ZGVmO1xuICAgIH1cbiAgICByZXR1cm4gZ2x5cGhzO1xufTtcblxuLyoqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbkZvbnQucHJvdG90eXBlLm5hbWVUb0dseXBoSW5kZXggPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2x5cGhOYW1lcy5uYW1lVG9HbHlwaEluZGV4KG5hbWUpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtvcGVudHlwZS5HbHlwaH1cbiAqL1xuRm9udC5wcm90b3R5cGUubmFtZVRvR2x5cGggPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGdseXBoSW5kZXggPSB0aGlzLm5hbWVUb0dseXBoSW5kZXgobmFtZSk7XG4gICAgdmFyIGdseXBoID0gdGhpcy5nbHlwaHMuZ2V0KGdseXBoSW5kZXgpO1xuICAgIGlmICghZ2x5cGgpIHtcbiAgICAgICAgLy8gLm5vdGRlZlxuICAgICAgICBnbHlwaCA9IHRoaXMuZ2x5cGhzLmdldCgwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2x5cGg7XG59O1xuXG4vKipcbiAqIEBwYXJhbSAge051bWJlcn1cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuRm9udC5wcm90b3R5cGUuZ2x5cGhJbmRleFRvTmFtZSA9IGZ1bmN0aW9uKGdpZCkge1xuICAgIGlmICghdGhpcy5nbHlwaE5hbWVzLmdseXBoSW5kZXhUb05hbWUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdseXBoTmFtZXMuZ2x5cGhJbmRleFRvTmFtZShnaWQpO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgdmFsdWUgb2YgdGhlIGtlcm5pbmcgcGFpciBiZXR3ZWVuIHRoZSBsZWZ0IGdseXBoIChvciBpdHMgaW5kZXgpXG4gKiBhbmQgdGhlIHJpZ2h0IGdseXBoIChvciBpdHMgaW5kZXgpLiBJZiBubyBrZXJuaW5nIHBhaXIgaXMgZm91bmQsIHJldHVybiAwLlxuICogVGhlIGtlcm5pbmcgdmFsdWUgZ2V0cyBhZGRlZCB0byB0aGUgYWR2YW5jZSB3aWR0aCB3aGVuIGNhbGN1bGF0aW5nIHRoZSBzcGFjaW5nXG4gKiBiZXR3ZWVuIGdseXBocy5cbiAqIEZvciBHUE9TIGtlcm5pbmcsIHRoaXMgbWV0aG9kIHVzZXMgdGhlIGRlZmF1bHQgc2NyaXB0IGFuZCBsYW5ndWFnZSwgd2hpY2ggY292ZXJzXG4gKiBtb3N0IHVzZSBjYXNlcy4gVG8gaGF2ZSBncmVhdGVyIGNvbnRyb2wsIHVzZSBmb250LnBvc2l0aW9uLmdldEtlcm5pbmdWYWx1ZSAuXG4gKiBAcGFyYW0gIHtvcGVudHlwZS5HbHlwaH0gbGVmdEdseXBoXG4gKiBAcGFyYW0gIHtvcGVudHlwZS5HbHlwaH0gcmlnaHRHbHlwaFxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5Gb250LnByb3RvdHlwZS5nZXRLZXJuaW5nVmFsdWUgPSBmdW5jdGlvbihsZWZ0R2x5cGgsIHJpZ2h0R2x5cGgpIHtcbiAgICBsZWZ0R2x5cGggPSBsZWZ0R2x5cGguaW5kZXggfHwgbGVmdEdseXBoO1xuICAgIHJpZ2h0R2x5cGggPSByaWdodEdseXBoLmluZGV4IHx8IHJpZ2h0R2x5cGg7XG4gICAgdmFyIGdwb3NLZXJuaW5nID0gdGhpcy5wb3NpdGlvbi5kZWZhdWx0S2VybmluZ1RhYmxlcztcbiAgICBpZiAoZ3Bvc0tlcm5pbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24uZ2V0S2VybmluZ1ZhbHVlKGdwb3NLZXJuaW5nLCBsZWZ0R2x5cGgsIHJpZ2h0R2x5cGgpO1xuICAgIH1cbiAgICAvLyBcImtlcm5cIiB0YWJsZVxuICAgIHJldHVybiB0aGlzLmtlcm5pbmdQYWlyc1tsZWZ0R2x5cGggKyAnLCcgKyByaWdodEdseXBoXSB8fCAwO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiBHbHlwaFJlbmRlck9wdGlvbnNcbiAqIEB0eXBlIE9iamVjdFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtzY3JpcHRdIC0gc2NyaXB0IHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGZlYXR1cmVzIHRvIGFwcGx5LiBCeSBkZWZhdWx0LCAnREZMVCcgb3IgJ2xhdG4nIGlzIHVzZWQuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWUgaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L290c3BlYy9zY3JpcHR0YWdzLmh0bVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtsYW5ndWFnZT0nZGZsdCddIC0gbGFuZ3VhZ2Ugc3lzdGVtIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIGZlYXR1cmVzIHRvIGFwcGx5LlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VlIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vdHlwb2dyYXBoeS9kZXZlbG9wZXJzL29wZW50eXBlL2xhbmd1YWdldGFncy5hc3B4XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtrZXJuaW5nPXRydWVdIC0gd2hldGhlciB0byBpbmNsdWRlIGtlcm5pbmcgdmFsdWVzXG4gKiBAcHJvcGVydHkge29iamVjdH0gW2ZlYXR1cmVzXSAtIE9wZW5UeXBlIExheW91dCBmZWF0dXJlIHRhZ3MuIFVzZWQgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIGZlYXR1cmVzIG9mIHRoZSBnaXZlbiBzY3JpcHQvbGFuZ3VhZ2Ugc3lzdGVtLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWUgaHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS90eXBvZ3JhcGh5L290c3BlYy9mZWF0dXJldGFncy5odG1cbiAqL1xuRm9udC5wcm90b3R5cGUuZGVmYXVsdFJlbmRlck9wdGlvbnMgPSB7XG4gICAga2VybmluZzogdHJ1ZSxcbiAgICBmZWF0dXJlczogW1xuICAgICAgICAvKipcbiAgICAgICAgICogdGhlc2UgNCBmZWF0dXJlcyBhcmUgcmVxdWlyZWQgdG8gcmVuZGVyIEFyYWJpYyB0ZXh0IHByb3Blcmx5XG4gICAgICAgICAqIGFuZCBzaG91bGRuJ3QgYmUgdHVybmVkIG9mZiB3aGVuIHJlbmRlcmluZyBhcmFiaWMgdGV4dC5cbiAgICAgICAgICovXG4gICAgICAgIHsgc2NyaXB0OiAnYXJhYicsIHRhZ3M6IFsnaW5pdCcsICdtZWRpJywgJ2ZpbmEnLCAncmxpZyddIH0sXG4gICAgICAgIHsgc2NyaXB0OiAnbGF0bicsIHRhZ3M6IFsnbGlnYScsICdybGlnJ10gfVxuICAgIF1cbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGVhY2ggZ2x5cGggaW4gdGhlIGdpdmVuIHRleHQuXG4gKiBUaGUgY2FsbGJhY2sgZ2V0cyBgKGdseXBoLCB4LCB5LCBmb250U2l6ZSwgb3B0aW9ucylgLiogQHBhcmFtICB7c3RyaW5nfSB0ZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRoZSB0ZXh0IHRvIGFwcGx5LlxuICogQHBhcmFtICB7bnVtYmVyfSBbeD0wXSAtIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIGJlZ2lubmluZyBvZiB0aGUgdGV4dC5cbiAqIEBwYXJhbSAge251bWJlcn0gW3k9MF0gLSBWZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgKmJhc2VsaW5lKiBvZiB0aGUgdGV4dC5cbiAqIEBwYXJhbSAge251bWJlcn0gW2ZvbnRTaXplPTcyXSAtIEZvbnQgc2l6ZSBpbiBwaXhlbHMuIFdlIHNjYWxlIHRoZSBnbHlwaCB1bml0cyBieSBgMSAvIHVuaXRzUGVyRW0gKiBmb250U2l6ZWAuXG4gKiBAcGFyYW0gIHtHbHlwaFJlbmRlck9wdGlvbnM9fSBvcHRpb25zXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuRm9udC5wcm90b3R5cGUuZm9yRWFjaEdseXBoID0gZnVuY3Rpb24odGV4dCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgeCA9IHggIT09IHVuZGVmaW5lZCA/IHggOiAwO1xuICAgIHkgPSB5ICE9PSB1bmRlZmluZWQgPyB5IDogMDtcbiAgICBmb250U2l6ZSA9IGZvbnRTaXplICE9PSB1bmRlZmluZWQgPyBmb250U2l6ZSA6IDcyO1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmRlZmF1bHRSZW5kZXJPcHRpb25zLCBvcHRpb25zKTtcbiAgICB2YXIgZm9udFNjYWxlID0gMSAvIHRoaXMudW5pdHNQZXJFbSAqIGZvbnRTaXplO1xuICAgIHZhciBnbHlwaHMgPSB0aGlzLnN0cmluZ1RvR2x5cGhzKHRleHQsIG9wdGlvbnMpO1xuICAgIHZhciBrZXJuaW5nTG9va3VwcztcbiAgICBpZiAob3B0aW9ucy5rZXJuaW5nKSB7XG4gICAgICAgIHZhciBzY3JpcHQgPSBvcHRpb25zLnNjcmlwdCB8fCB0aGlzLnBvc2l0aW9uLmdldERlZmF1bHRTY3JpcHROYW1lKCk7XG4gICAgICAgIGtlcm5pbmdMb29rdXBzID0gdGhpcy5wb3NpdGlvbi5nZXRLZXJuaW5nVGFibGVzKHNjcmlwdCwgb3B0aW9ucy5sYW5ndWFnZSk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2x5cGhzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBnbHlwaCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoZ2x5cGguYWR2YW5jZVdpZHRoKSB7XG4gICAgICAgICAgICB4ICs9IGdseXBoLmFkdmFuY2VXaWR0aCAqIGZvbnRTY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmtlcm5pbmcgJiYgaSA8IGdseXBocy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAvLyBXZSBzaG91bGQgYXBwbHkgcG9zaXRpb24gYWRqdXN0bWVudCBsb29rdXBzIGluIGEgbW9yZSBnZW5lcmljIHdheS5cbiAgICAgICAgICAgIC8vIEhlcmUgd2Ugb25seSB1c2UgdGhlIHhBZHZhbmNlIHZhbHVlLlxuICAgICAgICAgICAgdmFyIGtlcm5pbmdWYWx1ZSA9IGtlcm5pbmdMb29rdXBzID9cbiAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24uZ2V0S2VybmluZ1ZhbHVlKGtlcm5pbmdMb29rdXBzLCBnbHlwaC5pbmRleCwgZ2x5cGhzW2kgKyAxXS5pbmRleCkgOlxuICAgICAgICAgICAgICAgICAgdGhpcy5nZXRLZXJuaW5nVmFsdWUoZ2x5cGgsIGdseXBoc1tpICsgMV0pO1xuICAgICAgICAgICAgeCArPSBrZXJuaW5nVmFsdWUgKiBmb250U2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5sZXR0ZXJTcGFjaW5nKSB7XG4gICAgICAgICAgICB4ICs9IG9wdGlvbnMubGV0dGVyU3BhY2luZyAqIGZvbnRTaXplO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMudHJhY2tpbmcpIHtcbiAgICAgICAgICAgIHggKz0gKG9wdGlvbnMudHJhY2tpbmcgLyAxMDAwKSAqIGZvbnRTaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB4O1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBQYXRoIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGdpdmVuIHRleHQuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRleHQgLSBUaGUgdGV4dCB0byBjcmVhdGUuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFt4PTBdIC0gSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0ZXh0LlxuICogQHBhcmFtICB7bnVtYmVyfSBbeT0wXSAtIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSAqYmFzZWxpbmUqIG9mIHRoZSB0ZXh0LlxuICogQHBhcmFtICB7bnVtYmVyfSBbZm9udFNpemU9NzJdIC0gRm9udCBzaXplIGluIHBpeGVscy4gV2Ugc2NhbGUgdGhlIGdseXBoIHVuaXRzIGJ5IGAxIC8gdW5pdHNQZXJFbSAqIGZvbnRTaXplYC5cbiAqIEBwYXJhbSAge0dseXBoUmVuZGVyT3B0aW9ucz19IG9wdGlvbnNcbiAqIEByZXR1cm4ge29wZW50eXBlLlBhdGh9XG4gKi9cbkZvbnQucHJvdG90eXBlLmdldFBhdGggPSBmdW5jdGlvbih0ZXh0LCB4LCB5LCBmb250U2l6ZSwgb3B0aW9ucykge1xuICAgIHZhciBmdWxsUGF0aCA9IG5ldyBQYXRoKCk7XG4gICAgdGhpcy5mb3JFYWNoR2x5cGgodGV4dCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMsIGZ1bmN0aW9uKGdseXBoLCBnWCwgZ1ksIGdGb250U2l6ZSkge1xuICAgICAgICB2YXIgZ2x5cGhQYXRoID0gZ2x5cGguZ2V0UGF0aChnWCwgZ1ksIGdGb250U2l6ZSwgb3B0aW9ucywgdGhpcyk7XG4gICAgICAgIGZ1bGxQYXRoLmV4dGVuZChnbHlwaFBhdGgpO1xuICAgIH0pO1xuICAgIHJldHVybiBmdWxsUGF0aDtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGFuIGFycmF5IG9mIFBhdGggb2JqZWN0cyB0aGF0IHJlcHJlc2VudCB0aGUgZ2x5cGhzIG9mIGEgZ2l2ZW4gdGV4dC5cbiAqIEBwYXJhbSAge3N0cmluZ30gdGV4dCAtIFRoZSB0ZXh0IHRvIGNyZWF0ZS5cbiAqIEBwYXJhbSAge251bWJlcn0gW3g9MF0gLSBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHRleHQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFt5PTBdIC0gVmVydGljYWwgcG9zaXRpb24gb2YgdGhlICpiYXNlbGluZSogb2YgdGhlIHRleHQuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtmb250U2l6ZT03Ml0gLSBGb250IHNpemUgaW4gcGl4ZWxzLiBXZSBzY2FsZSB0aGUgZ2x5cGggdW5pdHMgYnkgYDEgLyB1bml0c1BlckVtICogZm9udFNpemVgLlxuICogQHBhcmFtICB7R2x5cGhSZW5kZXJPcHRpb25zPX0gb3B0aW9uc1xuICogQHJldHVybiB7b3BlbnR5cGUuUGF0aFtdfVxuICovXG5Gb250LnByb3RvdHlwZS5nZXRQYXRocyA9IGZ1bmN0aW9uKHRleHQsIHgsIHksIGZvbnRTaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGdseXBoUGF0aHMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2hHbHlwaCh0ZXh0LCB4LCB5LCBmb250U2l6ZSwgb3B0aW9ucywgZnVuY3Rpb24oZ2x5cGgsIGdYLCBnWSwgZ0ZvbnRTaXplKSB7XG4gICAgICAgIHZhciBnbHlwaFBhdGggPSBnbHlwaC5nZXRQYXRoKGdYLCBnWSwgZ0ZvbnRTaXplLCBvcHRpb25zLCB0aGlzKTtcbiAgICAgICAgZ2x5cGhQYXRocy5wdXNoKGdseXBoUGF0aCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ2x5cGhQYXRocztcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWR2YW5jZSB3aWR0aCBvZiBhIHRleHQuXG4gKlxuICogVGhpcyBpcyBzb21ldGhpbmcgZGlmZmVyZW50IHRoYW4gUGF0aC5nZXRCb3VuZGluZ0JveCgpIGFzIGZvciBleGFtcGxlIGFcbiAqIHN1ZmZpeGVkIHdoaXRlc3BhY2UgaW5jcmVhc2VzIHRoZSBhZHZhbmNlV2lkdGggYnV0IG5vdCB0aGUgYm91bmRpbmcgYm94XG4gKiBvciBhbiBvdmVyaGFuZ2luZyBsZXR0ZXIgbGlrZSBhIGNhbGxpZ3JhcGhpYyAnZicgbWlnaHQgaGF2ZSBhIHF1aXRlIGxhcmdlclxuICogYm91bmRpbmcgYm94IHRoYW4gaXRzIGFkdmFuY2Ugd2lkdGguXG4gKlxuICogVGhpcyBjb3JyZXNwb25kcyB0byBjYW52YXMyZENvbnRleHQubWVhc3VyZVRleHQodGV4dCkud2lkdGhcbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRleHQgLSBUaGUgdGV4dCB0byBjcmVhdGUuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtmb250U2l6ZT03Ml0gLSBGb250IHNpemUgaW4gcGl4ZWxzLiBXZSBzY2FsZSB0aGUgZ2x5cGggdW5pdHMgYnkgYDEgLyB1bml0c1BlckVtICogZm9udFNpemVgLlxuICogQHBhcmFtICB7R2x5cGhSZW5kZXJPcHRpb25zPX0gb3B0aW9uc1xuICogQHJldHVybiBhZHZhbmNlIHdpZHRoXG4gKi9cbkZvbnQucHJvdG90eXBlLmdldEFkdmFuY2VXaWR0aCA9IGZ1bmN0aW9uKHRleHQsIGZvbnRTaXplLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9yRWFjaEdseXBoKHRleHQsIDAsIDAsIGZvbnRTaXplLCBvcHRpb25zLCBmdW5jdGlvbigpIHt9KTtcbn07XG5cbi8qKlxuICogRHJhdyB0aGUgdGV4dCBvbiB0aGUgZ2l2ZW4gZHJhd2luZyBjb250ZXh0LlxuICogQHBhcmFtICB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggLSBBIDJEIGRyYXdpbmcgY29udGV4dCwgbGlrZSBDYW52YXMuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRleHQgLSBUaGUgdGV4dCB0byBjcmVhdGUuXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFt4PTBdIC0gSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0ZXh0LlxuICogQHBhcmFtICB7bnVtYmVyfSBbeT0wXSAtIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSAqYmFzZWxpbmUqIG9mIHRoZSB0ZXh0LlxuICogQHBhcmFtICB7bnVtYmVyfSBbZm9udFNpemU9NzJdIC0gRm9udCBzaXplIGluIHBpeGVscy4gV2Ugc2NhbGUgdGhlIGdseXBoIHVuaXRzIGJ5IGAxIC8gdW5pdHNQZXJFbSAqIGZvbnRTaXplYC5cbiAqIEBwYXJhbSAge0dseXBoUmVuZGVyT3B0aW9ucz19IG9wdGlvbnNcbiAqL1xuRm9udC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGN0eCwgdGV4dCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmdldFBhdGgodGV4dCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMpLmRyYXcoY3R4KTtcbn07XG5cbi8qKlxuICogRHJhdyB0aGUgcG9pbnRzIG9mIGFsbCBnbHlwaHMgaW4gdGhlIHRleHQuXG4gKiBPbi1jdXJ2ZSBwb2ludHMgd2lsbCBiZSBkcmF3biBpbiBibHVlLCBvZmYtY3VydmUgcG9pbnRzIHdpbGwgYmUgZHJhd24gaW4gcmVkLlxuICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCAtIEEgMkQgZHJhd2luZyBjb250ZXh0LCBsaWtlIENhbnZhcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gVGhlIHRleHQgdG8gY3JlYXRlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdIC0gSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0ZXh0LlxuICogQHBhcmFtIHtudW1iZXJ9IFt5PTBdIC0gVmVydGljYWwgcG9zaXRpb24gb2YgdGhlICpiYXNlbGluZSogb2YgdGhlIHRleHQuXG4gKiBAcGFyYW0ge251bWJlcn0gW2ZvbnRTaXplPTcyXSAtIEZvbnQgc2l6ZSBpbiBwaXhlbHMuIFdlIHNjYWxlIHRoZSBnbHlwaCB1bml0cyBieSBgMSAvIHVuaXRzUGVyRW0gKiBmb250U2l6ZWAuXG4gKiBAcGFyYW0ge0dseXBoUmVuZGVyT3B0aW9ucz19IG9wdGlvbnNcbiAqL1xuRm9udC5wcm90b3R5cGUuZHJhd1BvaW50cyA9IGZ1bmN0aW9uKGN0eCwgdGV4dCwgeCwgeSwgZm9udFNpemUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmZvckVhY2hHbHlwaCh0ZXh0LCB4LCB5LCBmb250U2l6ZSwgb3B0aW9ucywgZnVuY3Rpb24oZ2x5cGgsIGdYLCBnWSwgZ0ZvbnRTaXplKSB7XG4gICAgICAgIGdseXBoLmRyYXdQb2ludHMoY3R4LCBnWCwgZ1ksIGdGb250U2l6ZSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIERyYXcgbGluZXMgaW5kaWNhdGluZyBpbXBvcnRhbnQgZm9udCBtZWFzdXJlbWVudHMgZm9yIGFsbCBnbHlwaHMgaW4gdGhlIHRleHQuXG4gKiBCbGFjayBsaW5lcyBpbmRpY2F0ZSB0aGUgb3JpZ2luIG9mIHRoZSBjb29yZGluYXRlIHN5c3RlbSAocG9pbnQgMCwwKS5cbiAqIEJsdWUgbGluZXMgaW5kaWNhdGUgdGhlIGdseXBoIGJvdW5kaW5nIGJveC5cbiAqIEdyZWVuIGxpbmUgaW5kaWNhdGVzIHRoZSBhZHZhbmNlIHdpZHRoIG9mIHRoZSBnbHlwaC5cbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggLSBBIDJEIGRyYXdpbmcgY29udGV4dCwgbGlrZSBDYW52YXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRoZSB0ZXh0IHRvIGNyZWF0ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbeD0wXSAtIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIGJlZ2lubmluZyBvZiB0aGUgdGV4dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSAtIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSAqYmFzZWxpbmUqIG9mIHRoZSB0ZXh0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtmb250U2l6ZT03Ml0gLSBGb250IHNpemUgaW4gcGl4ZWxzLiBXZSBzY2FsZSB0aGUgZ2x5cGggdW5pdHMgYnkgYDEgLyB1bml0c1BlckVtICogZm9udFNpemVgLlxuICogQHBhcmFtIHtHbHlwaFJlbmRlck9wdGlvbnM9fSBvcHRpb25zXG4gKi9cbkZvbnQucHJvdG90eXBlLmRyYXdNZXRyaWNzID0gZnVuY3Rpb24oY3R4LCB0ZXh0LCB4LCB5LCBmb250U2l6ZSwgb3B0aW9ucykge1xuICAgIHRoaXMuZm9yRWFjaEdseXBoKHRleHQsIHgsIHksIGZvbnRTaXplLCBvcHRpb25zLCBmdW5jdGlvbihnbHlwaCwgZ1gsIGdZLCBnRm9udFNpemUpIHtcbiAgICAgICAgZ2x5cGguZHJhd01ldHJpY3MoY3R4LCBnWCwgZ1ksIGdGb250U2l6ZSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuRm9udC5wcm90b3R5cGUuZ2V0RW5nbGlzaE5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIHRyYW5zbGF0aW9ucyA9IHRoaXMubmFtZXNbbmFtZV07XG4gICAgaWYgKHRyYW5zbGF0aW9ucykge1xuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25zLmVuO1xuICAgIH1cbn07XG5cbi8qKlxuICogVmFsaWRhdGVcbiAqL1xuRm9udC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gYXNzZXJ0KHByZWRpY2F0ZSwgbWVzc2FnZSkge1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2VydE5hbWVQcmVzZW50KG5hbWUpIHtcbiAgICAgICAgdmFyIGVuZ2xpc2hOYW1lID0gX3RoaXMuZ2V0RW5nbGlzaE5hbWUobmFtZSk7XG4gICAgICAgIGFzc2VydChlbmdsaXNoTmFtZSAmJiBlbmdsaXNoTmFtZS50cmltKCkubGVuZ3RoID4gMCk7XG4gICAgfVxuXG4gICAgLy8gSWRlbnRpZmljYXRpb24gaW5mb3JtYXRpb25cbiAgICBhc3NlcnROYW1lUHJlc2VudCgnZm9udEZhbWlseScpO1xuICAgIGFzc2VydE5hbWVQcmVzZW50KCd3ZWlnaHROYW1lJyk7XG4gICAgYXNzZXJ0TmFtZVByZXNlbnQoJ21hbnVmYWN0dXJlcicpO1xuICAgIGFzc2VydE5hbWVQcmVzZW50KCdjb3B5cmlnaHQnKTtcbiAgICBhc3NlcnROYW1lUHJlc2VudCgndmVyc2lvbicpO1xuXG4gICAgLy8gRGltZW5zaW9uIGluZm9ybWF0aW9uXG4gICAgYXNzZXJ0KHRoaXMudW5pdHNQZXJFbSA+IDApO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IHRoZSBmb250IG9iamVjdCB0byBhIFNGTlQgZGF0YSBzdHJ1Y3R1cmUuXG4gKiBUaGlzIHN0cnVjdHVyZSBjb250YWlucyBhbGwgdGhlIG5lY2Vzc2FyeSB0YWJsZXMgYW5kIG1ldGFkYXRhIHRvIGNyZWF0ZSBhIGJpbmFyeSBPVEYgZmlsZS5cbiAqIEByZXR1cm4ge29wZW50eXBlLlRhYmxlfVxuICovXG5Gb250LnByb3RvdHlwZS50b1RhYmxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZm50LmZvbnRUb1RhYmxlKHRoaXMpO1xufTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgRm9udC50b0J1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgRm9udC50b0FycmF5QnVmZmVyIGluc3RlYWQuXG4gKi9cbkZvbnQucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS53YXJuKCdGb250LnRvQnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBGb250LnRvQXJyYXlCdWZmZXIgaW5zdGVhZC4nKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5QnVmZmVyKCk7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIGBvcGVudHlwZS5Gb250YCBpbnRvIGFuIGBBcnJheUJ1ZmZlcmBcbiAqIEByZXR1cm4ge0FycmF5QnVmZmVyfVxuICovXG5Gb250LnByb3RvdHlwZS50b0FycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNmbnRUYWJsZSA9IHRoaXMudG9UYWJsZXMoKTtcbiAgICB2YXIgYnl0ZXMgPSBzZm50VGFibGUuZW5jb2RlKCk7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihieXRlcy5sZW5ndGgpO1xuICAgIHZhciBpbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnRBcnJheVtpXSA9IGJ5dGVzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBidWZmZXI7XG59O1xuXG4vKipcbiAqIEluaXRpYXRlIGEgZG93bmxvYWQgb2YgdGhlIE9wZW5UeXBlIGZvbnQuXG4gKi9cbkZvbnQucHJvdG90eXBlLmRvd25sb2FkID0gZnVuY3Rpb24oZmlsZU5hbWUpIHtcbiAgICB2YXIgZmFtaWx5TmFtZSA9IHRoaXMuZ2V0RW5nbGlzaE5hbWUoJ2ZvbnRGYW1pbHknKTtcbiAgICB2YXIgc3R5bGVOYW1lID0gdGhpcy5nZXRFbmdsaXNoTmFtZSgnZm9udFN1YmZhbWlseScpO1xuICAgIGZpbGVOYW1lID0gZmlsZU5hbWUgfHwgZmFtaWx5TmFtZS5yZXBsYWNlKC9cXHMvZywgJycpICsgJy0nICsgc3R5bGVOYW1lICsgJy5vdGYnO1xuICAgIHZhciBhcnJheUJ1ZmZlciA9IHRoaXMudG9BcnJheUJ1ZmZlcigpO1xuXG4gICAgaWYgKGlzQnJvd3NlcigpKSB7XG4gICAgICAgIHdpbmRvdy5VUkwgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkw7XG5cbiAgICAgICAgaWYgKHdpbmRvdy5VUkwpIHtcbiAgICAgICAgICAgIHZhciBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlcik7XG4gICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtkYXRhVmlld10sIHt0eXBlOiAnZm9udC9vcGVudHlwZSd9KTtcblxuICAgICAgICAgICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICBsaW5rLmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgICAgIGxpbmsuZG93bmxvYWQgPSBmaWxlTmFtZTtcblxuICAgICAgICAgICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJyk7XG4gICAgICAgICAgICBldmVudC5pbml0RXZlbnQoJ2NsaWNrJywgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgbGluay5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRm9udCBmaWxlIGNvdWxkIG5vdCBiZSBkb3dubG9hZGVkLiBUcnkgdXNpbmcgYSBkaWZmZXJlbnQgYnJvd3Nlci4nKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgICAgIHZhciBidWZmZXIgPSBhcnJheUJ1ZmZlclRvTm9kZUJ1ZmZlcihhcnJheUJ1ZmZlcik7XG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZU5hbWUsIGJ1ZmZlcik7XG4gICAgfVxufTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuRm9udC5wcm90b3R5cGUuZnNTZWxlY3Rpb25WYWx1ZXMgPSB7XG4gICAgSVRBTElDOiAgICAgICAgICAgICAgMHgwMDEsIC8vMVxuICAgIFVOREVSU0NPUkU6ICAgICAgICAgIDB4MDAyLCAvLzJcbiAgICBORUdBVElWRTogICAgICAgICAgICAweDAwNCwgLy80XG4gICAgT1VUTElORUQ6ICAgICAgICAgICAgMHgwMDgsIC8vOFxuICAgIFNUUklLRU9VVDogICAgICAgICAgIDB4MDEwLCAvLzE2XG4gICAgQk9MRDogICAgICAgICAgICAgICAgMHgwMjAsIC8vMzJcbiAgICBSRUdVTEFSOiAgICAgICAgICAgICAweDA0MCwgLy82NFxuICAgIFVTRVJfVFlQT19NRVRSSUNTOiAgIDB4MDgwLCAvLzEyOFxuICAgIFdXUzogICAgICAgICAgICAgICAgIDB4MTAwLCAvLzI1NlxuICAgIE9CTElRVUU6ICAgICAgICAgICAgIDB4MjAwICAvLzUxMlxufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5Gb250LnByb3RvdHlwZS51c1dpZHRoQ2xhc3NlcyA9IHtcbiAgICBVTFRSQV9DT05ERU5TRUQ6IDEsXG4gICAgRVhUUkFfQ09OREVOU0VEOiAyLFxuICAgIENPTkRFTlNFRDogMyxcbiAgICBTRU1JX0NPTkRFTlNFRDogNCxcbiAgICBNRURJVU06IDUsXG4gICAgU0VNSV9FWFBBTkRFRDogNixcbiAgICBFWFBBTkRFRDogNyxcbiAgICBFWFRSQV9FWFBBTkRFRDogOCxcbiAgICBVTFRSQV9FWFBBTkRFRDogOVxufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5Gb250LnByb3RvdHlwZS51c1dlaWdodENsYXNzZXMgPSB7XG4gICAgVEhJTjogMTAwLFxuICAgIEVYVFJBX0xJR0hUOiAyMDAsXG4gICAgTElHSFQ6IDMwMCxcbiAgICBOT1JNQUw6IDQwMCxcbiAgICBNRURJVU06IDUwMCxcbiAgICBTRU1JX0JPTEQ6IDYwMCxcbiAgICBCT0xEOiA3MDAsXG4gICAgRVhUUkFfQk9MRDogODAwLFxuICAgIEJMQUNLOiAgICA5MDBcbn07XG5cbi8vIFRoZSBgZnZhcmAgdGFibGUgc3RvcmVzIGZvbnQgdmFyaWF0aW9uIGF4ZXMgYW5kIGluc3RhbmNlcy5cblxuZnVuY3Rpb24gYWRkTmFtZShuYW1lLCBuYW1lcykge1xuICAgIHZhciBuYW1lU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkobmFtZSk7XG4gICAgdmFyIG5hbWVJRCA9IDI1NjtcbiAgICBmb3IgKHZhciBuYW1lS2V5IGluIG5hbWVzKSB7XG4gICAgICAgIHZhciBuID0gcGFyc2VJbnQobmFtZUtleSk7XG4gICAgICAgIGlmICghbiB8fCBuIDwgMjU2KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShuYW1lc1tuYW1lS2V5XSkgPT09IG5hbWVTdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hbWVJRCA8PSBuKSB7XG4gICAgICAgICAgICBuYW1lSUQgPSBuICsgMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5hbWVzW25hbWVJRF0gPSBuYW1lO1xuICAgIHJldHVybiBuYW1lSUQ7XG59XG5cbmZ1bmN0aW9uIG1ha2VGdmFyQXhpcyhuLCBheGlzLCBuYW1lcykge1xuICAgIHZhciBuYW1lSUQgPSBhZGROYW1lKGF4aXMubmFtZSwgbmFtZXMpO1xuICAgIHJldHVybiBbXG4gICAgICAgIHtuYW1lOiAndGFnXycgKyBuLCB0eXBlOiAnVEFHJywgdmFsdWU6IGF4aXMudGFnfSxcbiAgICAgICAge25hbWU6ICdtaW5WYWx1ZV8nICsgbiwgdHlwZTogJ0ZJWEVEJywgdmFsdWU6IGF4aXMubWluVmFsdWUgPDwgMTZ9LFxuICAgICAgICB7bmFtZTogJ2RlZmF1bHRWYWx1ZV8nICsgbiwgdHlwZTogJ0ZJWEVEJywgdmFsdWU6IGF4aXMuZGVmYXVsdFZhbHVlIDw8IDE2fSxcbiAgICAgICAge25hbWU6ICdtYXhWYWx1ZV8nICsgbiwgdHlwZTogJ0ZJWEVEJywgdmFsdWU6IGF4aXMubWF4VmFsdWUgPDwgMTZ9LFxuICAgICAgICB7bmFtZTogJ2ZsYWdzXycgKyBuLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDB9LFxuICAgICAgICB7bmFtZTogJ25hbWVJRF8nICsgbiwgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBuYW1lSUR9XG4gICAgXTtcbn1cblxuZnVuY3Rpb24gcGFyc2VGdmFyQXhpcyhkYXRhLCBzdGFydCwgbmFtZXMpIHtcbiAgICB2YXIgYXhpcyA9IHt9O1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgYXhpcy50YWcgPSBwLnBhcnNlVGFnKCk7XG4gICAgYXhpcy5taW5WYWx1ZSA9IHAucGFyc2VGaXhlZCgpO1xuICAgIGF4aXMuZGVmYXVsdFZhbHVlID0gcC5wYXJzZUZpeGVkKCk7XG4gICAgYXhpcy5tYXhWYWx1ZSA9IHAucGFyc2VGaXhlZCgpO1xuICAgIHAuc2tpcCgndVNob3J0JywgMSk7ICAvLyByZXNlcnZlZCBmb3IgZmxhZ3M7IG5vIHZhbHVlcyBkZWZpbmVkXG4gICAgYXhpcy5uYW1lID0gbmFtZXNbcC5wYXJzZVVTaG9ydCgpXSB8fCB7fTtcbiAgICByZXR1cm4gYXhpcztcbn1cblxuZnVuY3Rpb24gbWFrZUZ2YXJJbnN0YW5jZShuLCBpbnN0LCBheGVzLCBuYW1lcykge1xuICAgIHZhciBuYW1lSUQgPSBhZGROYW1lKGluc3QubmFtZSwgbmFtZXMpO1xuICAgIHZhciBmaWVsZHMgPSBbXG4gICAgICAgIHtuYW1lOiAnbmFtZUlEXycgKyBuLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IG5hbWVJRH0sXG4gICAgICAgIHtuYW1lOiAnZmxhZ3NfJyArIG4sIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH1cbiAgICBdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBheGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBheGlzVGFnID0gYXhlc1tpXS50YWc7XG4gICAgICAgIGZpZWxkcy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6ICdheGlzXycgKyBuICsgJyAnICsgYXhpc1RhZyxcbiAgICAgICAgICAgIHR5cGU6ICdGSVhFRCcsXG4gICAgICAgICAgICB2YWx1ZTogaW5zdC5jb29yZGluYXRlc1theGlzVGFnXSA8PCAxNlxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmllbGRzO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ2YXJJbnN0YW5jZShkYXRhLCBzdGFydCwgYXhlcywgbmFtZXMpIHtcbiAgICB2YXIgaW5zdCA9IHt9O1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgaW5zdC5uYW1lID0gbmFtZXNbcC5wYXJzZVVTaG9ydCgpXSB8fCB7fTtcbiAgICBwLnNraXAoJ3VTaG9ydCcsIDEpOyAgLy8gcmVzZXJ2ZWQgZm9yIGZsYWdzOyBubyB2YWx1ZXMgZGVmaW5lZFxuXG4gICAgaW5zdC5jb29yZGluYXRlcyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXhlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpbnN0LmNvb3JkaW5hdGVzW2F4ZXNbaV0udGFnXSA9IHAucGFyc2VGaXhlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0O1xufVxuXG5mdW5jdGlvbiBtYWtlRnZhclRhYmxlKGZ2YXIsIG5hbWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyB0YWJsZS5UYWJsZSgnZnZhcicsIFtcbiAgICAgICAge25hbWU6ICd2ZXJzaW9uJywgdHlwZTogJ1VMT05HJywgdmFsdWU6IDB4MTAwMDB9LFxuICAgICAgICB7bmFtZTogJ29mZnNldFRvRGF0YScsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogMH0sXG4gICAgICAgIHtuYW1lOiAnY291bnRTaXplUGFpcnMnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDJ9LFxuICAgICAgICB7bmFtZTogJ2F4aXNDb3VudCcsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogZnZhci5heGVzLmxlbmd0aH0sXG4gICAgICAgIHtuYW1lOiAnYXhpc1NpemUnLCB0eXBlOiAnVVNIT1JUJywgdmFsdWU6IDIwfSxcbiAgICAgICAge25hbWU6ICdpbnN0YW5jZUNvdW50JywgdHlwZTogJ1VTSE9SVCcsIHZhbHVlOiBmdmFyLmluc3RhbmNlcy5sZW5ndGh9LFxuICAgICAgICB7bmFtZTogJ2luc3RhbmNlU2l6ZScsIHR5cGU6ICdVU0hPUlQnLCB2YWx1ZTogNCArIGZ2YXIuYXhlcy5sZW5ndGggKiA0fVxuICAgIF0pO1xuICAgIHJlc3VsdC5vZmZzZXRUb0RhdGEgPSByZXN1bHQuc2l6ZU9mKCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZ2YXIuYXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQuZmllbGRzID0gcmVzdWx0LmZpZWxkcy5jb25jYXQobWFrZUZ2YXJBeGlzKGksIGZ2YXIuYXhlc1tpXSwgbmFtZXMpKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZ2YXIuaW5zdGFuY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHJlc3VsdC5maWVsZHMgPSByZXN1bHQuZmllbGRzLmNvbmNhdChtYWtlRnZhckluc3RhbmNlKGosIGZ2YXIuaW5zdGFuY2VzW2pdLCBmdmFyLmF4ZXMsIG5hbWVzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcGFyc2VGdmFyVGFibGUoZGF0YSwgc3RhcnQsIG5hbWVzKSB7XG4gICAgdmFyIHAgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0KTtcbiAgICB2YXIgdGFibGVWZXJzaW9uID0gcC5wYXJzZVVMb25nKCk7XG4gICAgY2hlY2suYXJndW1lbnQodGFibGVWZXJzaW9uID09PSAweDAwMDEwMDAwLCAnVW5zdXBwb3J0ZWQgZnZhciB0YWJsZSB2ZXJzaW9uLicpO1xuICAgIHZhciBvZmZzZXRUb0RhdGEgPSBwLnBhcnNlT2Zmc2V0MTYoKTtcbiAgICAvLyBTa2lwIGNvdW50U2l6ZVBhaXJzLlxuICAgIHAuc2tpcCgndVNob3J0JywgMSk7XG4gICAgdmFyIGF4aXNDb3VudCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICB2YXIgYXhpc1NpemUgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgdmFyIGluc3RhbmNlQ291bnQgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgdmFyIGluc3RhbmNlU2l6ZSA9IHAucGFyc2VVU2hvcnQoKTtcblxuICAgIHZhciBheGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBheGlzQ291bnQ7IGkrKykge1xuICAgICAgICBheGVzLnB1c2gocGFyc2VGdmFyQXhpcyhkYXRhLCBzdGFydCArIG9mZnNldFRvRGF0YSArIGkgKiBheGlzU2l6ZSwgbmFtZXMpKTtcbiAgICB9XG5cbiAgICB2YXIgaW5zdGFuY2VzID0gW107XG4gICAgdmFyIGluc3RhbmNlU3RhcnQgPSBzdGFydCArIG9mZnNldFRvRGF0YSArIGF4aXNDb3VudCAqIGF4aXNTaXplO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgaW5zdGFuY2VDb3VudDsgaisrKSB7XG4gICAgICAgIGluc3RhbmNlcy5wdXNoKHBhcnNlRnZhckluc3RhbmNlKGRhdGEsIGluc3RhbmNlU3RhcnQgKyBqICogaW5zdGFuY2VTaXplLCBheGVzLCBuYW1lcykpO1xuICAgIH1cblxuICAgIHJldHVybiB7YXhlczogYXhlcywgaW5zdGFuY2VzOiBpbnN0YW5jZXN9O1xufVxuXG52YXIgZnZhciA9IHsgbWFrZTogbWFrZUZ2YXJUYWJsZSwgcGFyc2U6IHBhcnNlRnZhclRhYmxlIH07XG5cbi8vIFRoZSBgR0RFRmAgdGFibGUgY29udGFpbnMgdmFyaW91cyBnbHlwaCBwcm9wZXJ0aWVzXG5cbnZhciBhdHRhY2hMaXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY292ZXJhZ2U6IHRoaXMucGFyc2VQb2ludGVyKFBhcnNlci5jb3ZlcmFnZSksXG4gICAgICAgIGF0dGFjaFBvaW50czogdGhpcy5wYXJzZUxpc3QoUGFyc2VyLnBvaW50ZXIoUGFyc2VyLnVTaG9ydExpc3QpKVxuICAgIH07XG59O1xuXG52YXIgY2FyZXRWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmb3JtYXQgPSB0aGlzLnBhcnNlVVNob3J0KCk7XG4gICAgY2hlY2suYXJndW1lbnQoZm9ybWF0ID09PSAxIHx8IGZvcm1hdCA9PT0gMiB8fCBmb3JtYXQgPT09IDMsXG4gICAgICAgICdVbnN1cHBvcnRlZCBDYXJldFZhbHVlIHRhYmxlIHZlcnNpb24uJyk7XG4gICAgaWYgKGZvcm1hdCA9PT0gMSkge1xuICAgICAgICByZXR1cm4geyBjb29yZGluYXRlOiB0aGlzLnBhcnNlU2hvcnQoKSB9O1xuICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAyKSB7XG4gICAgICAgIHJldHVybiB7IHBvaW50aW5kZXg6IHRoaXMucGFyc2VTaG9ydCgpIH07XG4gICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IDMpIHtcbiAgICAgICAgLy8gRGV2aWNlIC8gVmFyaWF0aW9uIEluZGV4IHRhYmxlcyB1bnN1cHBvcnRlZFxuICAgICAgICByZXR1cm4geyBjb29yZGluYXRlOiB0aGlzLnBhcnNlU2hvcnQoKSB9O1xuICAgIH1cbn07XG5cbnZhciBsaWdHbHlwaCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnBhcnNlTGlzdChQYXJzZXIucG9pbnRlcihjYXJldFZhbHVlKSk7XG59O1xuXG52YXIgbGlnQ2FyZXRMaXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY292ZXJhZ2U6IHRoaXMucGFyc2VQb2ludGVyKFBhcnNlci5jb3ZlcmFnZSksXG4gICAgICAgIGxpZ0dseXBoczogdGhpcy5wYXJzZUxpc3QoUGFyc2VyLnBvaW50ZXIobGlnR2x5cGgpKVxuICAgIH07XG59O1xuXG52YXIgbWFya0dseXBoU2V0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucGFyc2VVU2hvcnQoKTsgLy8gVmVyc2lvblxuICAgIHJldHVybiB0aGlzLnBhcnNlTGlzdChQYXJzZXIucG9pbnRlcihQYXJzZXIuY292ZXJhZ2UpKTtcbn07XG5cbmZ1bmN0aW9uIHBhcnNlR0RFRlRhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgIHZhciBwID0gbmV3IFBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIHRhYmxlVmVyc2lvbiA9IHAucGFyc2VWZXJzaW9uKDEpO1xuICAgIGNoZWNrLmFyZ3VtZW50KHRhYmxlVmVyc2lvbiA9PT0gMSB8fCB0YWJsZVZlcnNpb24gPT09IDEuMiB8fCB0YWJsZVZlcnNpb24gPT09IDEuMyxcbiAgICAgICAgJ1Vuc3VwcG9ydGVkIEdERUYgdGFibGUgdmVyc2lvbi4nKTtcbiAgICB2YXIgZ2RlZiA9IHtcbiAgICAgICAgdmVyc2lvbjogdGFibGVWZXJzaW9uLFxuICAgICAgICBjbGFzc0RlZjogcC5wYXJzZVBvaW50ZXIoUGFyc2VyLmNsYXNzRGVmKSxcbiAgICAgICAgYXR0YWNoTGlzdDogcC5wYXJzZVBvaW50ZXIoYXR0YWNoTGlzdCksXG4gICAgICAgIGxpZ0NhcmV0TGlzdDogcC5wYXJzZVBvaW50ZXIobGlnQ2FyZXRMaXN0KSxcbiAgICAgICAgbWFya0F0dGFjaENsYXNzRGVmOiBwLnBhcnNlUG9pbnRlcihQYXJzZXIuY2xhc3NEZWYpXG4gICAgfTtcbiAgICBpZiAodGFibGVWZXJzaW9uID49IDEuMikge1xuICAgICAgICBnZGVmLm1hcmtHbHlwaFNldHMgPSBwLnBhcnNlUG9pbnRlcihtYXJrR2x5cGhTZXRzKTtcbiAgICB9XG4gICAgcmV0dXJuIGdkZWY7XG59XG52YXIgZ2RlZiA9IHsgcGFyc2U6IHBhcnNlR0RFRlRhYmxlIH07XG5cbi8vIFRoZSBgR1BPU2AgdGFibGUgY29udGFpbnMga2VybmluZyBwYWlycywgYW1vbmcgb3RoZXIgdGhpbmdzLlxuXG52YXIgc3VidGFibGVQYXJzZXJzJDEgPSBuZXcgQXJyYXkoMTApOyAgICAgICAgIC8vIHN1YnRhYmxlUGFyc2Vyc1swXSBpcyB1bnVzZWRcblxuLy8gaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvdHlwb2dyYXBoeS9vcGVudHlwZS9zcGVjL2dwb3MjbG9va3VwLXR5cGUtMS1zaW5nbGUtYWRqdXN0bWVudC1wb3NpdGlvbmluZy1zdWJ0YWJsZVxuLy8gdGhpcyA9IFBhcnNlciBpbnN0YW5jZVxuc3VidGFibGVQYXJzZXJzJDFbMV0gPSBmdW5jdGlvbiBwYXJzZUxvb2t1cDEoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5vZmZzZXQgKyB0aGlzLnJlbGF0aXZlT2Zmc2V0O1xuICAgIHZhciBwb3Nmb3JtYXQgPSB0aGlzLnBhcnNlVVNob3J0KCk7XG4gICAgaWYgKHBvc2Zvcm1hdCA9PT0gMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9zRm9ybWF0OiAxLFxuICAgICAgICAgICAgY292ZXJhZ2U6IHRoaXMucGFyc2VQb2ludGVyKFBhcnNlci5jb3ZlcmFnZSksXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5wYXJzZVZhbHVlUmVjb3JkKClcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHBvc2Zvcm1hdCA9PT0gMikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9zRm9ybWF0OiAyLFxuICAgICAgICAgICAgY292ZXJhZ2U6IHRoaXMucGFyc2VQb2ludGVyKFBhcnNlci5jb3ZlcmFnZSksXG4gICAgICAgICAgICB2YWx1ZXM6IHRoaXMucGFyc2VWYWx1ZVJlY29yZExpc3QoKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjaGVjay5hc3NlcnQoZmFsc2UsICcweCcgKyBzdGFydC50b1N0cmluZygxNikgKyAnOiBHUE9TIGxvb2t1cCB0eXBlIDEgZm9ybWF0IG11c3QgYmUgMSBvciAyLicpO1xufTtcblxuLy8gaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvdHlwb2dyYXBoeS9vcGVudHlwZS9zcGVjL2dwb3MjbG9va3VwLXR5cGUtMi1wYWlyLWFkanVzdG1lbnQtcG9zaXRpb25pbmctc3VidGFibGVcbnN1YnRhYmxlUGFyc2VycyQxWzJdID0gZnVuY3Rpb24gcGFyc2VMb29rdXAyKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMub2Zmc2V0ICsgdGhpcy5yZWxhdGl2ZU9mZnNldDtcbiAgICB2YXIgcG9zRm9ybWF0ID0gdGhpcy5wYXJzZVVTaG9ydCgpO1xuICAgIGNoZWNrLmFzc2VydChwb3NGb3JtYXQgPT09IDEgfHwgcG9zRm9ybWF0ID09PSAyLCAnMHgnICsgc3RhcnQudG9TdHJpbmcoMTYpICsgJzogR1BPUyBsb29rdXAgdHlwZSAyIGZvcm1hdCBtdXN0IGJlIDEgb3IgMi4nKTtcbiAgICB2YXIgY292ZXJhZ2UgPSB0aGlzLnBhcnNlUG9pbnRlcihQYXJzZXIuY292ZXJhZ2UpO1xuICAgIHZhciB2YWx1ZUZvcm1hdDEgPSB0aGlzLnBhcnNlVVNob3J0KCk7XG4gICAgdmFyIHZhbHVlRm9ybWF0MiA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICBpZiAocG9zRm9ybWF0ID09PSAxKSB7XG4gICAgICAgIC8vIEFkanVzdG1lbnRzIGZvciBHbHlwaCBQYWlyc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9zRm9ybWF0OiBwb3NGb3JtYXQsXG4gICAgICAgICAgICBjb3ZlcmFnZTogY292ZXJhZ2UsXG4gICAgICAgICAgICB2YWx1ZUZvcm1hdDE6IHZhbHVlRm9ybWF0MSxcbiAgICAgICAgICAgIHZhbHVlRm9ybWF0MjogdmFsdWVGb3JtYXQyLFxuICAgICAgICAgICAgcGFpclNldHM6IHRoaXMucGFyc2VMaXN0KFBhcnNlci5wb2ludGVyKFBhcnNlci5saXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7ICAgICAgICAvLyBwYWlyVmFsdWVSZWNvcmRcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kR2x5cGg6IHRoaXMucGFyc2VVU2hvcnQoKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUxOiB0aGlzLnBhcnNlVmFsdWVSZWNvcmQodmFsdWVGb3JtYXQxKSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUyOiB0aGlzLnBhcnNlVmFsdWVSZWNvcmQodmFsdWVGb3JtYXQyKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSkpXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChwb3NGb3JtYXQgPT09IDIpIHtcbiAgICAgICAgdmFyIGNsYXNzRGVmMSA9IHRoaXMucGFyc2VQb2ludGVyKFBhcnNlci5jbGFzc0RlZik7XG4gICAgICAgIHZhciBjbGFzc0RlZjIgPSB0aGlzLnBhcnNlUG9pbnRlcihQYXJzZXIuY2xhc3NEZWYpO1xuICAgICAgICB2YXIgY2xhc3MxQ291bnQgPSB0aGlzLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciBjbGFzczJDb3VudCA9IHRoaXMucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIENsYXNzIFBhaXIgQWRqdXN0bWVudFxuICAgICAgICAgICAgcG9zRm9ybWF0OiBwb3NGb3JtYXQsXG4gICAgICAgICAgICBjb3ZlcmFnZTogY292ZXJhZ2UsXG4gICAgICAgICAgICB2YWx1ZUZvcm1hdDE6IHZhbHVlRm9ybWF0MSxcbiAgICAgICAgICAgIHZhbHVlRm9ybWF0MjogdmFsdWVGb3JtYXQyLFxuICAgICAgICAgICAgY2xhc3NEZWYxOiBjbGFzc0RlZjEsXG4gICAgICAgICAgICBjbGFzc0RlZjI6IGNsYXNzRGVmMixcbiAgICAgICAgICAgIGNsYXNzMUNvdW50OiBjbGFzczFDb3VudCxcbiAgICAgICAgICAgIGNsYXNzMkNvdW50OiBjbGFzczJDb3VudCxcbiAgICAgICAgICAgIGNsYXNzUmVjb3JkczogdGhpcy5wYXJzZUxpc3QoY2xhc3MxQ291bnQsIFBhcnNlci5saXN0KGNsYXNzMkNvdW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTE6IHRoaXMucGFyc2VWYWx1ZVJlY29yZCh2YWx1ZUZvcm1hdDEpLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTI6IHRoaXMucGFyc2VWYWx1ZVJlY29yZCh2YWx1ZUZvcm1hdDIpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKVxuICAgICAgICB9O1xuICAgIH1cbn07XG5cbnN1YnRhYmxlUGFyc2VycyQxWzNdID0gZnVuY3Rpb24gcGFyc2VMb29rdXAzKCkgeyByZXR1cm4geyBlcnJvcjogJ0dQT1MgTG9va3VwIDMgbm90IHN1cHBvcnRlZCcgfTsgfTtcbnN1YnRhYmxlUGFyc2VycyQxWzRdID0gZnVuY3Rpb24gcGFyc2VMb29rdXA0KCkgeyByZXR1cm4geyBlcnJvcjogJ0dQT1MgTG9va3VwIDQgbm90IHN1cHBvcnRlZCcgfTsgfTtcbnN1YnRhYmxlUGFyc2VycyQxWzVdID0gZnVuY3Rpb24gcGFyc2VMb29rdXA1KCkgeyByZXR1cm4geyBlcnJvcjogJ0dQT1MgTG9va3VwIDUgbm90IHN1cHBvcnRlZCcgfTsgfTtcbnN1YnRhYmxlUGFyc2VycyQxWzZdID0gZnVuY3Rpb24gcGFyc2VMb29rdXA2KCkgeyByZXR1cm4geyBlcnJvcjogJ0dQT1MgTG9va3VwIDYgbm90IHN1cHBvcnRlZCcgfTsgfTtcbnN1YnRhYmxlUGFyc2VycyQxWzddID0gZnVuY3Rpb24gcGFyc2VMb29rdXA3KCkgeyByZXR1cm4geyBlcnJvcjogJ0dQT1MgTG9va3VwIDcgbm90IHN1cHBvcnRlZCcgfTsgfTtcbnN1YnRhYmxlUGFyc2VycyQxWzhdID0gZnVuY3Rpb24gcGFyc2VMb29rdXA4KCkgeyByZXR1cm4geyBlcnJvcjogJ0dQT1MgTG9va3VwIDggbm90IHN1cHBvcnRlZCcgfTsgfTtcbnN1YnRhYmxlUGFyc2VycyQxWzldID0gZnVuY3Rpb24gcGFyc2VMb29rdXA5KCkgeyByZXR1cm4geyBlcnJvcjogJ0dQT1MgTG9va3VwIDkgbm90IHN1cHBvcnRlZCcgfTsgfTtcblxuLy8gaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvdHlwb2dyYXBoeS9vcGVudHlwZS9zcGVjL2dwb3NcbmZ1bmN0aW9uIHBhcnNlR3Bvc1RhYmxlKGRhdGEsIHN0YXJ0KSB7XG4gICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgIHZhciBwID0gbmV3IFBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIHRhYmxlVmVyc2lvbiA9IHAucGFyc2VWZXJzaW9uKDEpO1xuICAgIGNoZWNrLmFyZ3VtZW50KHRhYmxlVmVyc2lvbiA9PT0gMSB8fCB0YWJsZVZlcnNpb24gPT09IDEuMSwgJ1Vuc3VwcG9ydGVkIEdQT1MgdGFibGUgdmVyc2lvbiAnICsgdGFibGVWZXJzaW9uKTtcblxuICAgIGlmICh0YWJsZVZlcnNpb24gPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcnNpb246IHRhYmxlVmVyc2lvbixcbiAgICAgICAgICAgIHNjcmlwdHM6IHAucGFyc2VTY3JpcHRMaXN0KCksXG4gICAgICAgICAgICBmZWF0dXJlczogcC5wYXJzZUZlYXR1cmVMaXN0KCksXG4gICAgICAgICAgICBsb29rdXBzOiBwLnBhcnNlTG9va3VwTGlzdChzdWJ0YWJsZVBhcnNlcnMkMSlcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVyc2lvbjogdGFibGVWZXJzaW9uLFxuICAgICAgICAgICAgc2NyaXB0czogcC5wYXJzZVNjcmlwdExpc3QoKSxcbiAgICAgICAgICAgIGZlYXR1cmVzOiBwLnBhcnNlRmVhdHVyZUxpc3QoKSxcbiAgICAgICAgICAgIGxvb2t1cHM6IHAucGFyc2VMb29rdXBMaXN0KHN1YnRhYmxlUGFyc2VycyQxKSxcbiAgICAgICAgICAgIHZhcmlhdGlvbnM6IHAucGFyc2VGZWF0dXJlVmFyaWF0aW9uc0xpc3QoKVxuICAgICAgICB9O1xuICAgIH1cblxufVxuXG4vLyBHUE9TIFdyaXRpbmcgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gTk9UIFNVUFBPUlRFRFxudmFyIHN1YnRhYmxlTWFrZXJzJDEgPSBuZXcgQXJyYXkoMTApO1xuXG5mdW5jdGlvbiBtYWtlR3Bvc1RhYmxlKGdwb3MpIHtcbiAgICByZXR1cm4gbmV3IHRhYmxlLlRhYmxlKCdHUE9TJywgW1xuICAgICAgICB7bmFtZTogJ3ZlcnNpb24nLCB0eXBlOiAnVUxPTkcnLCB2YWx1ZTogMHgxMDAwMH0sXG4gICAgICAgIHtuYW1lOiAnc2NyaXB0cycsIHR5cGU6ICdUQUJMRScsIHZhbHVlOiBuZXcgdGFibGUuU2NyaXB0TGlzdChncG9zLnNjcmlwdHMpfSxcbiAgICAgICAge25hbWU6ICdmZWF0dXJlcycsIHR5cGU6ICdUQUJMRScsIHZhbHVlOiBuZXcgdGFibGUuRmVhdHVyZUxpc3QoZ3Bvcy5mZWF0dXJlcyl9LFxuICAgICAgICB7bmFtZTogJ2xvb2t1cHMnLCB0eXBlOiAnVEFCTEUnLCB2YWx1ZTogbmV3IHRhYmxlLkxvb2t1cExpc3QoZ3Bvcy5sb29rdXBzLCBzdWJ0YWJsZU1ha2VycyQxKX1cbiAgICBdKTtcbn1cblxudmFyIGdwb3MgPSB7IHBhcnNlOiBwYXJzZUdwb3NUYWJsZSwgbWFrZTogbWFrZUdwb3NUYWJsZSB9O1xuXG4vLyBUaGUgYGtlcm5gIHRhYmxlIGNvbnRhaW5zIGtlcm5pbmcgcGFpcnMuXG5cbmZ1bmN0aW9uIHBhcnNlV2luZG93c0tlcm5UYWJsZShwKSB7XG4gICAgdmFyIHBhaXJzID0ge307XG4gICAgLy8gU2tpcCBuVGFibGVzLlxuICAgIHAuc2tpcCgndVNob3J0Jyk7XG4gICAgdmFyIHN1YnRhYmxlVmVyc2lvbiA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBjaGVjay5hcmd1bWVudChzdWJ0YWJsZVZlcnNpb24gPT09IDAsICdVbnN1cHBvcnRlZCBrZXJuIHN1Yi10YWJsZSB2ZXJzaW9uLicpO1xuICAgIC8vIFNraXAgc3VidGFibGVMZW5ndGgsIHN1YnRhYmxlQ292ZXJhZ2VcbiAgICBwLnNraXAoJ3VTaG9ydCcsIDIpO1xuICAgIHZhciBuUGFpcnMgPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgLy8gU2tpcCBzZWFyY2hSYW5nZSwgZW50cnlTZWxlY3RvciwgcmFuZ2VTaGlmdC5cbiAgICBwLnNraXAoJ3VTaG9ydCcsIDMpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgblBhaXJzOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGxlZnRJbmRleCA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICAgICAgdmFyIHJpZ2h0SW5kZXggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHAucGFyc2VTaG9ydCgpO1xuICAgICAgICBwYWlyc1tsZWZ0SW5kZXggKyAnLCcgKyByaWdodEluZGV4XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcGFpcnM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWFjS2VyblRhYmxlKHApIHtcbiAgICB2YXIgcGFpcnMgPSB7fTtcbiAgICAvLyBUaGUgTWFjIGtlcm4gdGFibGUgc3RvcmVzIHRoZSB2ZXJzaW9uIGFzIGEgZml4ZWQgKDMyIGJpdHMpIGJ1dCB3ZSBvbmx5IGxvYWRlZCB0aGUgZmlyc3QgMTYgYml0cy5cbiAgICAvLyBTa2lwIHRoZSByZXN0LlxuICAgIHAuc2tpcCgndVNob3J0Jyk7XG4gICAgdmFyIG5UYWJsZXMgPSBwLnBhcnNlVUxvbmcoKTtcbiAgICAvL2NoZWNrLmFyZ3VtZW50KG5UYWJsZXMgPT09IDEsICdPbmx5IDEgc3VidGFibGUgaXMgc3VwcG9ydGVkIChnb3QgJyArIG5UYWJsZXMgKyAnKS4nKTtcbiAgICBpZiAoblRhYmxlcyA+IDEpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdPbmx5IHRoZSBmaXJzdCBrZXJuIHN1YnRhYmxlIGlzIHN1cHBvcnRlZC4nKTtcbiAgICB9XG4gICAgcC5za2lwKCd1TG9uZycpO1xuICAgIHZhciBjb3ZlcmFnZSA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICB2YXIgc3VidGFibGVWZXJzaW9uID0gY292ZXJhZ2UgJiAweEZGO1xuICAgIHAuc2tpcCgndVNob3J0Jyk7XG4gICAgaWYgKHN1YnRhYmxlVmVyc2lvbiA9PT0gMCkge1xuICAgICAgICB2YXIgblBhaXJzID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICAvLyBTa2lwIHNlYXJjaFJhbmdlLCBlbnRyeVNlbGVjdG9yLCByYW5nZVNoaWZ0LlxuICAgICAgICBwLnNraXAoJ3VTaG9ydCcsIDMpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5QYWlyczsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgbGVmdEluZGV4ID0gcC5wYXJzZVVTaG9ydCgpO1xuICAgICAgICAgICAgdmFyIHJpZ2h0SW5kZXggPSBwLnBhcnNlVVNob3J0KCk7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBwLnBhcnNlU2hvcnQoKTtcbiAgICAgICAgICAgIHBhaXJzW2xlZnRJbmRleCArICcsJyArIHJpZ2h0SW5kZXhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhaXJzO1xufVxuXG4vLyBQYXJzZSB0aGUgYGtlcm5gIHRhYmxlIHdoaWNoIGNvbnRhaW5zIGtlcm5pbmcgcGFpcnMuXG5mdW5jdGlvbiBwYXJzZUtlcm5UYWJsZShkYXRhLCBzdGFydCkge1xuICAgIHZhciBwID0gbmV3IHBhcnNlLlBhcnNlcihkYXRhLCBzdGFydCk7XG4gICAgdmFyIHRhYmxlVmVyc2lvbiA9IHAucGFyc2VVU2hvcnQoKTtcbiAgICBpZiAodGFibGVWZXJzaW9uID09PSAwKSB7XG4gICAgICAgIHJldHVybiBwYXJzZVdpbmRvd3NLZXJuVGFibGUocCk7XG4gICAgfSBlbHNlIGlmICh0YWJsZVZlcnNpb24gPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlTWFjS2VyblRhYmxlKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQga2VybiB0YWJsZSB2ZXJzaW9uICgnICsgdGFibGVWZXJzaW9uICsgJykuJyk7XG4gICAgfVxufVxuXG52YXIga2VybiA9IHsgcGFyc2U6IHBhcnNlS2VyblRhYmxlIH07XG5cbi8vIFRoZSBgbG9jYWAgdGFibGUgc3RvcmVzIHRoZSBvZmZzZXRzIHRvIHRoZSBsb2NhdGlvbnMgb2YgdGhlIGdseXBocyBpbiB0aGUgZm9udC5cblxuLy8gUGFyc2UgdGhlIGBsb2NhYCB0YWJsZS4gVGhpcyB0YWJsZSBzdG9yZXMgdGhlIG9mZnNldHMgdG8gdGhlIGxvY2F0aW9ucyBvZiB0aGUgZ2x5cGhzIGluIHRoZSBmb250LFxuLy8gcmVsYXRpdmUgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgZ2x5cGhEYXRhIHRhYmxlLlxuLy8gVGhlIG51bWJlciBvZiBnbHlwaHMgc3RvcmVkIGluIHRoZSBgbG9jYWAgdGFibGUgaXMgc3BlY2lmaWVkIGluIHRoZSBgbWF4cGAgdGFibGUgKHVuZGVyIG51bUdseXBocylcbi8vIFRoZSBsb2NhIHRhYmxlIGhhcyB0d28gdmVyc2lvbnM6IGEgc2hvcnQgdmVyc2lvbiB3aGVyZSBvZmZzZXRzIGFyZSBzdG9yZWQgYXMgdVNob3J0cywgYW5kIGEgbG9uZ1xuLy8gdmVyc2lvbiB3aGVyZSBvZmZzZXRzIGFyZSBzdG9yZWQgYXMgdUxvbmdzLiBUaGUgYGhlYWRgIHRhYmxlIHNwZWNpZmllcyB3aGljaCB2ZXJzaW9uIHRvIHVzZVxuLy8gKHVuZGVyIGluZGV4VG9Mb2NGb3JtYXQpLlxuZnVuY3Rpb24gcGFyc2VMb2NhVGFibGUoZGF0YSwgc3RhcnQsIG51bUdseXBocywgc2hvcnRWZXJzaW9uKSB7XG4gICAgdmFyIHAgPSBuZXcgcGFyc2UuUGFyc2VyKGRhdGEsIHN0YXJ0KTtcbiAgICB2YXIgcGFyc2VGbiA9IHNob3J0VmVyc2lvbiA/IHAucGFyc2VVU2hvcnQgOiBwLnBhcnNlVUxvbmc7XG4gICAgLy8gVGhlcmUgaXMgYW4gZXh0cmEgZW50cnkgYWZ0ZXIgdGhlIGxhc3QgaW5kZXggZWxlbWVudCB0byBjb21wdXRlIHRoZSBsZW5ndGggb2YgdGhlIGxhc3QgZ2x5cGguXG4gICAgLy8gVGhhdCdzIHdoeSB3ZSB1c2UgbnVtR2x5cGhzICsgMS5cbiAgICB2YXIgZ2x5cGhPZmZzZXRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1HbHlwaHMgKyAxOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGdseXBoT2Zmc2V0ID0gcGFyc2VGbi5jYWxsKHApO1xuICAgICAgICBpZiAoc2hvcnRWZXJzaW9uKSB7XG4gICAgICAgICAgICAvLyBUaGUgc2hvcnQgdGFibGUgdmVyc2lvbiBzdG9yZXMgdGhlIGFjdHVhbCBvZmZzZXQgZGl2aWRlZCBieSAyLlxuICAgICAgICAgICAgZ2x5cGhPZmZzZXQgKj0gMjtcbiAgICAgICAgfVxuXG4gICAgICAgIGdseXBoT2Zmc2V0cy5wdXNoKGdseXBoT2Zmc2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2x5cGhPZmZzZXRzO1xufVxuXG52YXIgbG9jYSA9IHsgcGFyc2U6IHBhcnNlTG9jYVRhYmxlIH07XG5cbi8vIG9wZW50eXBlLmpzXG5cbi8qKlxuICogVGhlIG9wZW50eXBlIGxpYnJhcnkuXG4gKiBAbmFtZXNwYWNlIG9wZW50eXBlXG4gKi9cblxuLy8gRmlsZSBsb2FkZXJzIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBMb2FkcyBhIGZvbnQgZnJvbSBhIGZpbGUuIFRoZSBjYWxsYmFjayB0aHJvd3MgYW4gZXJyb3IgbWVzc2FnZSBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyIGlmIGl0IGZhaWxzXG4gKiBhbmQgdGhlIGZvbnQgYXMgYW4gQXJyYXlCdWZmZXIgaW4gdGhlIHNlY29uZCBwYXJhbWV0ZXIgaWYgaXQgc3VjY2VlZHMuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCBvZiB0aGUgZmlsZVxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZm9udCBsb2FkIGNvbXBsZXRlc1xuICovXG5mdW5jdGlvbiBsb2FkRnJvbUZpbGUocGF0aCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuICAgIGZzLnJlYWRGaWxlKHBhdGgsIGZ1bmN0aW9uKGVyciwgYnVmZmVyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhudWxsLCBub2RlQnVmZmVyVG9BcnJheUJ1ZmZlcihidWZmZXIpKTtcbiAgICB9KTtcbn1cbi8qKlxuICogTG9hZHMgYSBmb250IGZyb20gYSBVUkwuIFRoZSBjYWxsYmFjayB0aHJvd3MgYW4gZXJyb3IgbWVzc2FnZSBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyIGlmIGl0IGZhaWxzXG4gKiBhbmQgdGhlIGZvbnQgYXMgYW4gQXJyYXlCdWZmZXIgaW4gdGhlIHNlY29uZCBwYXJhbWV0ZXIgaWYgaXQgc3VjY2VlZHMuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHVybCAtIFRoZSBVUkwgb2YgdGhlIGZvbnQgZmlsZS5cbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGZvbnQgbG9hZCBjb21wbGV0ZXNcbiAqL1xuZnVuY3Rpb24gbG9hZEZyb21VcmwodXJsLCBjYWxsYmFjaykge1xuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgcmVxdWVzdC5vcGVuKCdnZXQnLCB1cmwsIHRydWUpO1xuICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocmVxdWVzdC5yZXNwb25zZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlcXVlc3QucmVzcG9uc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCdGb250IGNvdWxkIG5vdCBiZSBsb2FkZWQ6ICcgKyByZXF1ZXN0LnN0YXR1c1RleHQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2soJ0ZvbnQgY291bGQgbm90IGJlIGxvYWRlZCcpO1xuICAgIH07XG5cbiAgICByZXF1ZXN0LnNlbmQoKTtcbn1cblxuLy8gVGFibGUgRGlyZWN0b3J5IEVudHJpZXMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBQYXJzZXMgT3BlblR5cGUgdGFibGUgZW50cmllcy5cbiAqIEBwYXJhbSAge0RhdGFWaWV3fVxuICogQHBhcmFtICB7TnVtYmVyfVxuICogQHJldHVybiB7T2JqZWN0W119XG4gKi9cbmZ1bmN0aW9uIHBhcnNlT3BlblR5cGVUYWJsZUVudHJpZXMoZGF0YSwgbnVtVGFibGVzKSB7XG4gICAgdmFyIHRhYmxlRW50cmllcyA9IFtdO1xuICAgIHZhciBwID0gMTI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1UYWJsZXM7IGkgKz0gMSkge1xuICAgICAgICB2YXIgdGFnID0gcGFyc2UuZ2V0VGFnKGRhdGEsIHApO1xuICAgICAgICB2YXIgY2hlY2tzdW0gPSBwYXJzZS5nZXRVTG9uZyhkYXRhLCBwICsgNCk7XG4gICAgICAgIHZhciBvZmZzZXQgPSBwYXJzZS5nZXRVTG9uZyhkYXRhLCBwICsgOCk7XG4gICAgICAgIHZhciBsZW5ndGggPSBwYXJzZS5nZXRVTG9uZyhkYXRhLCBwICsgMTIpO1xuICAgICAgICB0YWJsZUVudHJpZXMucHVzaCh7dGFnOiB0YWcsIGNoZWNrc3VtOiBjaGVja3N1bSwgb2Zmc2V0OiBvZmZzZXQsIGxlbmd0aDogbGVuZ3RoLCBjb21wcmVzc2lvbjogZmFsc2V9KTtcbiAgICAgICAgcCArPSAxNjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFibGVFbnRyaWVzO1xufVxuXG4vKipcbiAqIFBhcnNlcyBXT0ZGIHRhYmxlIGVudHJpZXMuXG4gKiBAcGFyYW0gIHtEYXRhVmlld31cbiAqIEBwYXJhbSAge051bWJlcn1cbiAqIEByZXR1cm4ge09iamVjdFtdfVxuICovXG5mdW5jdGlvbiBwYXJzZVdPRkZUYWJsZUVudHJpZXMoZGF0YSwgbnVtVGFibGVzKSB7XG4gICAgdmFyIHRhYmxlRW50cmllcyA9IFtdO1xuICAgIHZhciBwID0gNDQ7IC8vIG9mZnNldCB0byB0aGUgZmlyc3QgdGFibGUgZGlyZWN0b3J5IGVudHJ5LlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVGFibGVzOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHRhZyA9IHBhcnNlLmdldFRhZyhkYXRhLCBwKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IHBhcnNlLmdldFVMb25nKGRhdGEsIHAgKyA0KTtcbiAgICAgICAgdmFyIGNvbXBMZW5ndGggPSBwYXJzZS5nZXRVTG9uZyhkYXRhLCBwICsgOCk7XG4gICAgICAgIHZhciBvcmlnTGVuZ3RoID0gcGFyc2UuZ2V0VUxvbmcoZGF0YSwgcCArIDEyKTtcbiAgICAgICAgdmFyIGNvbXByZXNzaW9uID0gKHZvaWQgMCk7XG4gICAgICAgIGlmIChjb21wTGVuZ3RoIDwgb3JpZ0xlbmd0aCkge1xuICAgICAgICAgICAgY29tcHJlc3Npb24gPSAnV09GRic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wcmVzc2lvbiA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFibGVFbnRyaWVzLnB1c2goe3RhZzogdGFnLCBvZmZzZXQ6IG9mZnNldCwgY29tcHJlc3Npb246IGNvbXByZXNzaW9uLFxuICAgICAgICAgICAgY29tcHJlc3NlZExlbmd0aDogY29tcExlbmd0aCwgbGVuZ3RoOiBvcmlnTGVuZ3RofSk7XG4gICAgICAgIHAgKz0gMjA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhYmxlRW50cmllcztcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiBUYWJsZURhdGFcbiAqIEB0eXBlIE9iamVjdFxuICogQHByb3BlcnR5IHtEYXRhVmlld30gZGF0YSAtIFRoZSBEYXRhVmlld1xuICogQHByb3BlcnR5IHtudW1iZXJ9IG9mZnNldCAtIFRoZSBkYXRhIG9mZnNldC5cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSAge0RhdGFWaWV3fVxuICogQHBhcmFtICB7T2JqZWN0fVxuICogQHJldHVybiB7VGFibGVEYXRhfVxuICovXG5mdW5jdGlvbiB1bmNvbXByZXNzVGFibGUoZGF0YSwgdGFibGVFbnRyeSkge1xuICAgIGlmICh0YWJsZUVudHJ5LmNvbXByZXNzaW9uID09PSAnV09GRicpIHtcbiAgICAgICAgdmFyIGluQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIHRhYmxlRW50cnkub2Zmc2V0ICsgMiwgdGFibGVFbnRyeS5jb21wcmVzc2VkTGVuZ3RoIC0gMik7XG4gICAgICAgIHZhciBvdXRCdWZmZXIgPSBuZXcgVWludDhBcnJheSh0YWJsZUVudHJ5Lmxlbmd0aCk7XG4gICAgICAgIHRpbnlJbmZsYXRlKGluQnVmZmVyLCBvdXRCdWZmZXIpO1xuICAgICAgICBpZiAob3V0QnVmZmVyLmJ5dGVMZW5ndGggIT09IHRhYmxlRW50cnkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlY29tcHJlc3Npb24gZXJyb3I6ICcgKyB0YWJsZUVudHJ5LnRhZyArICcgZGVjb21wcmVzc2VkIGxlbmd0aCBkb2VzblxcJ3QgbWF0Y2ggcmVjb3JkZWQgbGVuZ3RoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhvdXRCdWZmZXIuYnVmZmVyLCAwKTtcbiAgICAgICAgcmV0dXJuIHtkYXRhOiB2aWV3LCBvZmZzZXQ6IDB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7ZGF0YTogZGF0YSwgb2Zmc2V0OiB0YWJsZUVudHJ5Lm9mZnNldH07XG4gICAgfVxufVxuXG4vLyBQdWJsaWMgQVBJIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogUGFyc2UgdGhlIE9wZW5UeXBlIGZpbGUgZGF0YSAoYXMgYW4gQXJyYXlCdWZmZXIpIGFuZCByZXR1cm4gYSBGb250IG9iamVjdC5cbiAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgZm9udCBjb3VsZCBub3QgYmUgcGFyc2VkLlxuICogQHBhcmFtICB7QXJyYXlCdWZmZXJ9XG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdCAtIG9wdGlvbnMgZm9yIHBhcnNpbmdcbiAqIEByZXR1cm4ge29wZW50eXBlLkZvbnR9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlQnVmZmVyKGJ1ZmZlciwgb3B0KSB7XG4gICAgb3B0ID0gKG9wdCA9PT0gdW5kZWZpbmVkIHx8IG9wdCA9PT0gbnVsbCkgPyAge30gOiBvcHQ7XG5cbiAgICB2YXIgaW5kZXhUb0xvY0Zvcm1hdDtcbiAgICB2YXIgbHRhZ1RhYmxlO1xuXG4gICAgLy8gU2luY2UgdGhlIGNvbnN0cnVjdG9yIGNhbiBhbHNvIGJlIGNhbGxlZCB0byBjcmVhdGUgbmV3IGZvbnRzIGZyb20gc2NyYXRjaCwgd2UgaW5kaWNhdGUgdGhpc1xuICAgIC8vIHNob3VsZCBiZSBhbiBlbXB0eSBmb250IHRoYXQgd2UnbGwgZmlsbCB3aXRoIG91ciBvd24gZGF0YS5cbiAgICB2YXIgZm9udCA9IG5ldyBGb250KHtlbXB0eTogdHJ1ZX0pO1xuXG4gICAgLy8gT3BlblR5cGUgZm9udHMgdXNlIGJpZyBlbmRpYW4gYnl0ZSBvcmRlcmluZy5cbiAgICAvLyBXZSBjYW4ndCByZWx5IG9uIHR5cGVkIGFycmF5IHZpZXcgdHlwZXMsIGJlY2F1c2UgdGhleSBvcGVyYXRlIHdpdGggdGhlIGVuZGlhbm5lc3Mgb2YgdGhlIGhvc3QgY29tcHV0ZXIuXG4gICAgLy8gSW5zdGVhZCB3ZSB1c2UgRGF0YVZpZXdzIHdoZXJlIHdlIGNhbiBzcGVjaWZ5IGVuZGlhbm5lc3MuXG4gICAgdmFyIGRhdGEgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCAwKTtcbiAgICB2YXIgbnVtVGFibGVzO1xuICAgIHZhciB0YWJsZUVudHJpZXMgPSBbXTtcbiAgICB2YXIgc2lnbmF0dXJlID0gcGFyc2UuZ2V0VGFnKGRhdGEsIDApO1xuICAgIGlmIChzaWduYXR1cmUgPT09IFN0cmluZy5mcm9tQ2hhckNvZGUoMCwgMSwgMCwgMCkgfHwgc2lnbmF0dXJlID09PSAndHJ1ZScgfHwgc2lnbmF0dXJlID09PSAndHlwMScpIHtcbiAgICAgICAgZm9udC5vdXRsaW5lc0Zvcm1hdCA9ICd0cnVldHlwZSc7XG4gICAgICAgIG51bVRhYmxlcyA9IHBhcnNlLmdldFVTaG9ydChkYXRhLCA0KTtcbiAgICAgICAgdGFibGVFbnRyaWVzID0gcGFyc2VPcGVuVHlwZVRhYmxlRW50cmllcyhkYXRhLCBudW1UYWJsZXMpO1xuICAgIH0gZWxzZSBpZiAoc2lnbmF0dXJlID09PSAnT1RUTycpIHtcbiAgICAgICAgZm9udC5vdXRsaW5lc0Zvcm1hdCA9ICdjZmYnO1xuICAgICAgICBudW1UYWJsZXMgPSBwYXJzZS5nZXRVU2hvcnQoZGF0YSwgNCk7XG4gICAgICAgIHRhYmxlRW50cmllcyA9IHBhcnNlT3BlblR5cGVUYWJsZUVudHJpZXMoZGF0YSwgbnVtVGFibGVzKTtcbiAgICB9IGVsc2UgaWYgKHNpZ25hdHVyZSA9PT0gJ3dPRkYnKSB7XG4gICAgICAgIHZhciBmbGF2b3IgPSBwYXJzZS5nZXRUYWcoZGF0YSwgNCk7XG4gICAgICAgIGlmIChmbGF2b3IgPT09IFN0cmluZy5mcm9tQ2hhckNvZGUoMCwgMSwgMCwgMCkpIHtcbiAgICAgICAgICAgIGZvbnQub3V0bGluZXNGb3JtYXQgPSAndHJ1ZXR5cGUnO1xuICAgICAgICB9IGVsc2UgaWYgKGZsYXZvciA9PT0gJ09UVE8nKSB7XG4gICAgICAgICAgICBmb250Lm91dGxpbmVzRm9ybWF0ID0gJ2NmZic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIE9wZW5UeXBlIGZsYXZvciAnICsgc2lnbmF0dXJlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG51bVRhYmxlcyA9IHBhcnNlLmdldFVTaG9ydChkYXRhLCAxMik7XG4gICAgICAgIHRhYmxlRW50cmllcyA9IHBhcnNlV09GRlRhYmxlRW50cmllcyhkYXRhLCBudW1UYWJsZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgT3BlblR5cGUgc2lnbmF0dXJlICcgKyBzaWduYXR1cmUpO1xuICAgIH1cblxuICAgIHZhciBjZmZUYWJsZUVudHJ5O1xuICAgIHZhciBmdmFyVGFibGVFbnRyeTtcbiAgICB2YXIgZ2x5ZlRhYmxlRW50cnk7XG4gICAgdmFyIGdkZWZUYWJsZUVudHJ5O1xuICAgIHZhciBncG9zVGFibGVFbnRyeTtcbiAgICB2YXIgZ3N1YlRhYmxlRW50cnk7XG4gICAgdmFyIGhtdHhUYWJsZUVudHJ5O1xuICAgIHZhciBrZXJuVGFibGVFbnRyeTtcbiAgICB2YXIgbG9jYVRhYmxlRW50cnk7XG4gICAgdmFyIG5hbWVUYWJsZUVudHJ5O1xuICAgIHZhciBtZXRhVGFibGVFbnRyeTtcbiAgICB2YXIgcDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVGFibGVzOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIHRhYmxlRW50cnkgPSB0YWJsZUVudHJpZXNbaV07XG4gICAgICAgIHZhciB0YWJsZSA9ICh2b2lkIDApO1xuICAgICAgICBzd2l0Y2ggKHRhYmxlRW50cnkudGFnKSB7XG4gICAgICAgICAgICBjYXNlICdjbWFwJzpcbiAgICAgICAgICAgICAgICB0YWJsZSA9IHVuY29tcHJlc3NUYWJsZShkYXRhLCB0YWJsZUVudHJ5KTtcbiAgICAgICAgICAgICAgICBmb250LnRhYmxlcy5jbWFwID0gY21hcC5wYXJzZSh0YWJsZS5kYXRhLCB0YWJsZS5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIGZvbnQuZW5jb2RpbmcgPSBuZXcgQ21hcEVuY29kaW5nKGZvbnQudGFibGVzLmNtYXApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY3Z0ICcgOlxuICAgICAgICAgICAgICAgIHRhYmxlID0gdW5jb21wcmVzc1RhYmxlKGRhdGEsIHRhYmxlRW50cnkpO1xuICAgICAgICAgICAgICAgIHAgPSBuZXcgcGFyc2UuUGFyc2VyKHRhYmxlLmRhdGEsIHRhYmxlLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgZm9udC50YWJsZXMuY3Z0ID0gcC5wYXJzZVNob3J0TGlzdCh0YWJsZUVudHJ5Lmxlbmd0aCAvIDIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZnZhcic6XG4gICAgICAgICAgICAgICAgZnZhclRhYmxlRW50cnkgPSB0YWJsZUVudHJ5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZnBnbScgOlxuICAgICAgICAgICAgICAgIHRhYmxlID0gdW5jb21wcmVzc1RhYmxlKGRhdGEsIHRhYmxlRW50cnkpO1xuICAgICAgICAgICAgICAgIHAgPSBuZXcgcGFyc2UuUGFyc2VyKHRhYmxlLmRhdGEsIHRhYmxlLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgZm9udC50YWJsZXMuZnBnbSA9IHAucGFyc2VCeXRlTGlzdCh0YWJsZUVudHJ5Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdoZWFkJzpcbiAgICAgICAgICAgICAgICB0YWJsZSA9IHVuY29tcHJlc3NUYWJsZShkYXRhLCB0YWJsZUVudHJ5KTtcbiAgICAgICAgICAgICAgICBmb250LnRhYmxlcy5oZWFkID0gaGVhZC5wYXJzZSh0YWJsZS5kYXRhLCB0YWJsZS5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIGZvbnQudW5pdHNQZXJFbSA9IGZvbnQudGFibGVzLmhlYWQudW5pdHNQZXJFbTtcbiAgICAgICAgICAgICAgICBpbmRleFRvTG9jRm9ybWF0ID0gZm9udC50YWJsZXMuaGVhZC5pbmRleFRvTG9jRm9ybWF0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaGhlYSc6XG4gICAgICAgICAgICAgICAgdGFibGUgPSB1bmNvbXByZXNzVGFibGUoZGF0YSwgdGFibGVFbnRyeSk7XG4gICAgICAgICAgICAgICAgZm9udC50YWJsZXMuaGhlYSA9IGhoZWEucGFyc2UodGFibGUuZGF0YSwgdGFibGUub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBmb250LmFzY2VuZGVyID0gZm9udC50YWJsZXMuaGhlYS5hc2NlbmRlcjtcbiAgICAgICAgICAgICAgICBmb250LmRlc2NlbmRlciA9IGZvbnQudGFibGVzLmhoZWEuZGVzY2VuZGVyO1xuICAgICAgICAgICAgICAgIGZvbnQubnVtYmVyT2ZITWV0cmljcyA9IGZvbnQudGFibGVzLmhoZWEubnVtYmVyT2ZITWV0cmljcztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2htdHgnOlxuICAgICAgICAgICAgICAgIGhtdHhUYWJsZUVudHJ5ID0gdGFibGVFbnRyeTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2x0YWcnOlxuICAgICAgICAgICAgICAgIHRhYmxlID0gdW5jb21wcmVzc1RhYmxlKGRhdGEsIHRhYmxlRW50cnkpO1xuICAgICAgICAgICAgICAgIGx0YWdUYWJsZSA9IGx0YWcucGFyc2UodGFibGUuZGF0YSwgdGFibGUub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21heHAnOlxuICAgICAgICAgICAgICAgIHRhYmxlID0gdW5jb21wcmVzc1RhYmxlKGRhdGEsIHRhYmxlRW50cnkpO1xuICAgICAgICAgICAgICAgIGZvbnQudGFibGVzLm1heHAgPSBtYXhwLnBhcnNlKHRhYmxlLmRhdGEsIHRhYmxlLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgZm9udC5udW1HbHlwaHMgPSBmb250LnRhYmxlcy5tYXhwLm51bUdseXBocztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25hbWUnOlxuICAgICAgICAgICAgICAgIG5hbWVUYWJsZUVudHJ5ID0gdGFibGVFbnRyeTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ09TLzInOlxuICAgICAgICAgICAgICAgIHRhYmxlID0gdW5jb21wcmVzc1RhYmxlKGRhdGEsIHRhYmxlRW50cnkpO1xuICAgICAgICAgICAgICAgIGZvbnQudGFibGVzLm9zMiA9IG9zMi5wYXJzZSh0YWJsZS5kYXRhLCB0YWJsZS5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncG9zdCc6XG4gICAgICAgICAgICAgICAgdGFibGUgPSB1bmNvbXByZXNzVGFibGUoZGF0YSwgdGFibGVFbnRyeSk7XG4gICAgICAgICAgICAgICAgZm9udC50YWJsZXMucG9zdCA9IHBvc3QucGFyc2UodGFibGUuZGF0YSwgdGFibGUub2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBmb250LmdseXBoTmFtZXMgPSBuZXcgR2x5cGhOYW1lcyhmb250LnRhYmxlcy5wb3N0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3ByZXAnIDpcbiAgICAgICAgICAgICAgICB0YWJsZSA9IHVuY29tcHJlc3NUYWJsZShkYXRhLCB0YWJsZUVudHJ5KTtcbiAgICAgICAgICAgICAgICBwID0gbmV3IHBhcnNlLlBhcnNlcih0YWJsZS5kYXRhLCB0YWJsZS5vZmZzZXQpO1xuICAgICAgICAgICAgICAgIGZvbnQudGFibGVzLnByZXAgPSBwLnBhcnNlQnl0ZUxpc3QodGFibGVFbnRyeS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZ2x5Zic6XG4gICAgICAgICAgICAgICAgZ2x5ZlRhYmxlRW50cnkgPSB0YWJsZUVudHJ5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbG9jYSc6XG4gICAgICAgICAgICAgICAgbG9jYVRhYmxlRW50cnkgPSB0YWJsZUVudHJ5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnQ0ZGICc6XG4gICAgICAgICAgICAgICAgY2ZmVGFibGVFbnRyeSA9IHRhYmxlRW50cnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdrZXJuJzpcbiAgICAgICAgICAgICAgICBrZXJuVGFibGVFbnRyeSA9IHRhYmxlRW50cnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdHREVGJzpcbiAgICAgICAgICAgICAgICBnZGVmVGFibGVFbnRyeSA9IHRhYmxlRW50cnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdHUE9TJzpcbiAgICAgICAgICAgICAgICBncG9zVGFibGVFbnRyeSA9IHRhYmxlRW50cnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdHU1VCJzpcbiAgICAgICAgICAgICAgICBnc3ViVGFibGVFbnRyeSA9IHRhYmxlRW50cnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtZXRhJzpcbiAgICAgICAgICAgICAgICBtZXRhVGFibGVFbnRyeSA9IHRhYmxlRW50cnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbmFtZVRhYmxlID0gdW5jb21wcmVzc1RhYmxlKGRhdGEsIG5hbWVUYWJsZUVudHJ5KTtcbiAgICBmb250LnRhYmxlcy5uYW1lID0gX25hbWUucGFyc2UobmFtZVRhYmxlLmRhdGEsIG5hbWVUYWJsZS5vZmZzZXQsIGx0YWdUYWJsZSk7XG4gICAgZm9udC5uYW1lcyA9IGZvbnQudGFibGVzLm5hbWU7XG5cbiAgICBpZiAoZ2x5ZlRhYmxlRW50cnkgJiYgbG9jYVRhYmxlRW50cnkpIHtcbiAgICAgICAgdmFyIHNob3J0VmVyc2lvbiA9IGluZGV4VG9Mb2NGb3JtYXQgPT09IDA7XG4gICAgICAgIHZhciBsb2NhVGFibGUgPSB1bmNvbXByZXNzVGFibGUoZGF0YSwgbG9jYVRhYmxlRW50cnkpO1xuICAgICAgICB2YXIgbG9jYU9mZnNldHMgPSBsb2NhLnBhcnNlKGxvY2FUYWJsZS5kYXRhLCBsb2NhVGFibGUub2Zmc2V0LCBmb250Lm51bUdseXBocywgc2hvcnRWZXJzaW9uKTtcbiAgICAgICAgdmFyIGdseWZUYWJsZSA9IHVuY29tcHJlc3NUYWJsZShkYXRhLCBnbHlmVGFibGVFbnRyeSk7XG4gICAgICAgIGZvbnQuZ2x5cGhzID0gZ2x5Zi5wYXJzZShnbHlmVGFibGUuZGF0YSwgZ2x5ZlRhYmxlLm9mZnNldCwgbG9jYU9mZnNldHMsIGZvbnQsIG9wdCk7XG4gICAgfSBlbHNlIGlmIChjZmZUYWJsZUVudHJ5KSB7XG4gICAgICAgIHZhciBjZmZUYWJsZSA9IHVuY29tcHJlc3NUYWJsZShkYXRhLCBjZmZUYWJsZUVudHJ5KTtcbiAgICAgICAgY2ZmLnBhcnNlKGNmZlRhYmxlLmRhdGEsIGNmZlRhYmxlLm9mZnNldCwgZm9udCwgb3B0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvbnQgZG9lc25cXCd0IGNvbnRhaW4gVHJ1ZVR5cGUgb3IgQ0ZGIG91dGxpbmVzLicpO1xuICAgIH1cblxuICAgIHZhciBobXR4VGFibGUgPSB1bmNvbXByZXNzVGFibGUoZGF0YSwgaG10eFRhYmxlRW50cnkpO1xuICAgIGhtdHgucGFyc2UoZm9udCwgaG10eFRhYmxlLmRhdGEsIGhtdHhUYWJsZS5vZmZzZXQsIGZvbnQubnVtYmVyT2ZITWV0cmljcywgZm9udC5udW1HbHlwaHMsIGZvbnQuZ2x5cGhzLCBvcHQpO1xuICAgIGFkZEdseXBoTmFtZXMoZm9udCwgb3B0KTtcblxuICAgIGlmIChrZXJuVGFibGVFbnRyeSkge1xuICAgICAgICB2YXIga2VyblRhYmxlID0gdW5jb21wcmVzc1RhYmxlKGRhdGEsIGtlcm5UYWJsZUVudHJ5KTtcbiAgICAgICAgZm9udC5rZXJuaW5nUGFpcnMgPSBrZXJuLnBhcnNlKGtlcm5UYWJsZS5kYXRhLCBrZXJuVGFibGUub2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb250Lmtlcm5pbmdQYWlycyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChnZGVmVGFibGVFbnRyeSkge1xuICAgICAgICB2YXIgZ2RlZlRhYmxlID0gdW5jb21wcmVzc1RhYmxlKGRhdGEsIGdkZWZUYWJsZUVudHJ5KTtcbiAgICAgICAgZm9udC50YWJsZXMuZ2RlZiA9IGdkZWYucGFyc2UoZ2RlZlRhYmxlLmRhdGEsIGdkZWZUYWJsZS5vZmZzZXQpO1xuICAgIH1cblxuICAgIGlmIChncG9zVGFibGVFbnRyeSkge1xuICAgICAgICB2YXIgZ3Bvc1RhYmxlID0gdW5jb21wcmVzc1RhYmxlKGRhdGEsIGdwb3NUYWJsZUVudHJ5KTtcbiAgICAgICAgZm9udC50YWJsZXMuZ3BvcyA9IGdwb3MucGFyc2UoZ3Bvc1RhYmxlLmRhdGEsIGdwb3NUYWJsZS5vZmZzZXQpO1xuICAgICAgICBmb250LnBvc2l0aW9uLmluaXQoKTtcbiAgICB9XG5cbiAgICBpZiAoZ3N1YlRhYmxlRW50cnkpIHtcbiAgICAgICAgdmFyIGdzdWJUYWJsZSA9IHVuY29tcHJlc3NUYWJsZShkYXRhLCBnc3ViVGFibGVFbnRyeSk7XG4gICAgICAgIGZvbnQudGFibGVzLmdzdWIgPSBnc3ViLnBhcnNlKGdzdWJUYWJsZS5kYXRhLCBnc3ViVGFibGUub2Zmc2V0KTtcbiAgICB9XG5cbiAgICBpZiAoZnZhclRhYmxlRW50cnkpIHtcbiAgICAgICAgdmFyIGZ2YXJUYWJsZSA9IHVuY29tcHJlc3NUYWJsZShkYXRhLCBmdmFyVGFibGVFbnRyeSk7XG4gICAgICAgIGZvbnQudGFibGVzLmZ2YXIgPSBmdmFyLnBhcnNlKGZ2YXJUYWJsZS5kYXRhLCBmdmFyVGFibGUub2Zmc2V0LCBmb250Lm5hbWVzKTtcbiAgICB9XG5cbiAgICBpZiAobWV0YVRhYmxlRW50cnkpIHtcbiAgICAgICAgdmFyIG1ldGFUYWJsZSA9IHVuY29tcHJlc3NUYWJsZShkYXRhLCBtZXRhVGFibGVFbnRyeSk7XG4gICAgICAgIGZvbnQudGFibGVzLm1ldGEgPSBtZXRhLnBhcnNlKG1ldGFUYWJsZS5kYXRhLCBtZXRhVGFibGUub2Zmc2V0KTtcbiAgICAgICAgZm9udC5tZXRhcyA9IGZvbnQudGFibGVzLm1ldGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvbnQ7XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgbG9hZCB0aGUgZm9udCBmcm9tIGEgVVJMIG9yIGEgZmlsZXN5c3RlbS4gV2hlbiBkb25lLCBjYWxsIHRoZSBjYWxsYmFja1xuICogd2l0aCB0d28gYXJndW1lbnRzIGAoZXJyLCBmb250KWAuIFRoZSBgZXJyYCB3aWxsIGJlIG51bGwgb24gc3VjY2VzcyxcbiAqIHRoZSBgZm9udGAgaXMgYSBGb250IG9iamVjdC5cbiAqIFdlIHVzZSB0aGUgbm9kZS5qcyBjYWxsYmFjayBjb252ZW50aW9uIHNvIHRoYXRcbiAqIG9wZW50eXBlLmpzIGNhbiBpbnRlZ3JhdGUgd2l0aCBmcmFtZXdvcmtzIGxpa2UgYXN5bmMuanMuXG4gKiBAYWxpYXMgb3BlbnR5cGUubG9hZFxuICogQHBhcmFtICB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIG9mIHRoZSBmb250IHRvIGxvYWQuXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2suXG4gKi9cbmZ1bmN0aW9uIGxvYWQodXJsLCBjYWxsYmFjaywgb3B0KSB7XG4gICAgb3B0ID0gKG9wdCA9PT0gdW5kZWZpbmVkIHx8IG9wdCA9PT0gbnVsbCkgPyAge30gOiBvcHQ7XG4gICAgdmFyIGlzTm9kZSA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnO1xuICAgIHZhciBsb2FkRm4gPSBpc05vZGUgJiYgIW9wdC5pc1VybCA/IGxvYWRGcm9tRmlsZSA6IGxvYWRGcm9tVXJsO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbG9hZEZuKHVybCwgZnVuY3Rpb24oZXJyLCBhcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZm9udDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9udCA9IHBhcnNlQnVmZmVyKGFycmF5QnVmZmVyLCBvcHQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBmb250KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmb250KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogU3luY2hyb25vdXNseSBsb2FkIHRoZSBmb250IGZyb20gYSBVUkwgb3IgZmlsZS5cbiAqIFdoZW4gZG9uZSwgcmV0dXJucyB0aGUgZm9udCBvYmplY3Qgb3IgdGhyb3dzIGFuIGVycm9yLlxuICogQGFsaWFzIG9wZW50eXBlLmxvYWRTeW5jXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHVybCAtIFRoZSBVUkwgb2YgdGhlIGZvbnQgdG8gbG9hZC5cbiAqIEBwYXJhbSAge09iamVjdH0gb3B0IC0gb3B0Lmxvd01lbW9yeVxuICogQHJldHVybiB7b3BlbnR5cGUuRm9udH1cbiAqL1xuZnVuY3Rpb24gbG9hZFN5bmModXJsLCBvcHQpIHtcbiAgICB2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuICAgIHZhciBidWZmZXIgPSBmcy5yZWFkRmlsZVN5bmModXJsKTtcbiAgICByZXR1cm4gcGFyc2VCdWZmZXIobm9kZUJ1ZmZlclRvQXJyYXlCdWZmZXIoYnVmZmVyKSwgb3B0KTtcbn1cblxudmFyIG9wZW50eXBlID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRfX3Byb3RvX186IG51bGwsXG5cdEZvbnQ6IEZvbnQsXG5cdEdseXBoOiBHbHlwaCxcblx0UGF0aDogUGF0aCxcblx0Qm91bmRpbmdCb3g6IEJvdW5kaW5nQm94LFxuXHRfcGFyc2U6IHBhcnNlLFxuXHRwYXJzZTogcGFyc2VCdWZmZXIsXG5cdGxvYWQ6IGxvYWQsXG5cdGxvYWRTeW5jOiBsb2FkU3luY1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG9wZW50eXBlO1xuZXhwb3J0IHsgQm91bmRpbmdCb3gsIEZvbnQsIEdseXBoLCBQYXRoLCBwYXJzZSBhcyBfcGFyc2UsIGxvYWQsIGxvYWRTeW5jLCBwYXJzZUJ1ZmZlciBhcyBwYXJzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlbnR5cGUubW9kdWxlLmpzLm1hcFxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDcxMjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5PLmogPSAoY2h1bmtJZCkgPT4gKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMCk7XG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcblx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR9XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0fVxuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHJlc3VsdCk7XG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rc3VicGl4ZWxfcmVuZGVyaW5nXCJdID0gc2VsZltcIndlYnBhY2tDaHVua3N1YnBpeGVsX3JlbmRlcmluZ1wiXSB8fCBbXTtcbmNodW5rTG9hZGluZ0dsb2JhbC5mb3JFYWNoKHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgMCkpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxuX193ZWJwYWNrX3JlcXVpcmVfXygxODcpO1xuX193ZWJwYWNrX3JlcXVpcmVfXyg0MjIpO1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg4Nyk7XG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwiZWFyY3V0IiwiZGF0YSIsImhvbGVJbmRpY2VzIiwiZGltIiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsIngiLCJ5IiwiaW52U2l6ZSIsImhhc0hvbGVzIiwibGVuZ3RoIiwib3V0ZXJMZW4iLCJvdXRlck5vZGUiLCJsaW5rZWRMaXN0IiwidHJpYW5nbGVzIiwibmV4dCIsInByZXYiLCJpIiwibGVuIiwibGlzdCIsInF1ZXVlIiwic3RlaW5lciIsInB1c2giLCJnZXRMZWZ0bW9zdCIsInNvcnQiLCJjb21wYXJlWCIsImVsaW1pbmF0ZUhvbGUiLCJlbGltaW5hdGVIb2xlcyIsIk1hdGgiLCJtYXgiLCJlYXJjdXRMaW5rZWQiLCJzdGFydCIsImVuZCIsImNsb2Nrd2lzZSIsImxhc3QiLCJzaWduZWRBcmVhIiwiaW5zZXJ0Tm9kZSIsImVxdWFscyIsInJlbW92ZU5vZGUiLCJmaWx0ZXJQb2ludHMiLCJhZ2FpbiIsInAiLCJhcmVhIiwiZWFyIiwicGFzcyIsInoiLCJ6T3JkZXIiLCJwcmV2WiIsIm5leHRaIiwicSIsImUiLCJ0YWlsIiwibnVtTWVyZ2VzIiwicFNpemUiLCJxU2l6ZSIsImluU2l6ZSIsInNvcnRMaW5rZWQiLCJpbmRleEN1cnZlIiwic3RvcCIsImlzRWFySGFzaGVkIiwiaXNFYXIiLCJjdXJlTG9jYWxJbnRlcnNlY3Rpb25zIiwic3BsaXRFYXJjdXQiLCJhIiwiYiIsImMiLCJheCIsImJ4IiwiY3giLCJheSIsImJ5IiwiY3kiLCJ4MCIsInkwIiwieDEiLCJ5MSIsInBvaW50SW5UcmlhbmdsZSIsIm1pbloiLCJtYXhaIiwibiIsImludGVyc2VjdHMiLCJsb2NhbGx5SW5zaWRlIiwiaXNWYWxpZERpYWdvbmFsIiwic3BsaXRQb2x5Z29uIiwiaG9sZSIsImJyaWRnZSIsIm0iLCJoeCIsImh5IiwicXgiLCJ0YW4iLCJteCIsIm15IiwidGFuTWluIiwiSW5maW5pdHkiLCJhYnMiLCJzZWN0b3JDb250YWluc1NlY3RvciIsImZpbmRIb2xlQnJpZGdlIiwiYnJpZGdlUmV2ZXJzZSIsImxlZnRtb3N0IiwicHgiLCJweSIsImludGVyc2VjdHNQb2x5Z29uIiwiaW5zaWRlIiwibWlkZGxlSW5zaWRlIiwiciIsInAxIiwicDIiLCJxMSIsInEyIiwibzEiLCJzaWduIiwibzIiLCJvMyIsIm80Iiwib25TZWdtZW50IiwibWluIiwibnVtIiwiYTIiLCJOb2RlIiwiYjIiLCJhbiIsImJwIiwidGhpcyIsInN1bSIsImoiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGV2aWF0aW9uIiwicG9seWdvbkFyZWEiLCJ0cmlhbmdsZXNBcmVhIiwiZmxhdHRlbiIsInJlc3VsdCIsInZlcnRpY2VzIiwiaG9sZXMiLCJkaW1lbnNpb25zIiwiaG9sZUluZGV4IiwiZCIsIkVQU0lMT04iLCJBUlJBWV9UWVBFIiwiRmxvYXQzMkFycmF5IiwiQXJyYXkiLCJSQU5ET00iLCJyYW5kb20iLCJzZXRNYXRyaXhBcnJheVR5cGUiLCJ0eXBlIiwiZGVncmVlIiwiUEkiLCJ0b1JhZGlhbiIsImNyZWF0ZSIsIm91dCIsImNsb25lIiwiY29weSIsImlkZW50aXR5IiwiZnJvbVZhbHVlcyIsIm0wMCIsIm0wMSIsIm0xMCIsIm0xMSIsInNldCIsInRyYW5zcG9zZSIsImExIiwiaW52ZXJ0IiwiYTAiLCJhMyIsImRldCIsImFkam9pbnQiLCJkZXRlcm1pbmFudCIsIm11bHRpcGx5IiwiYjAiLCJiMSIsImIzIiwicm90YXRlIiwicmFkIiwicyIsInNpbiIsImNvcyIsInNjYWxlIiwidiIsInYwIiwidjEiLCJmcm9tUm90YXRpb24iLCJmcm9tU2NhbGluZyIsInN0ciIsImZyb2IiLCJoeXBvdCIsIkxEVSIsIkwiLCJEIiwiVSIsImFkZCIsInN1YnRyYWN0IiwiZXhhY3RFcXVhbHMiLCJtdWx0aXBseVNjYWxhciIsIm11bHRpcGx5U2NhbGFyQW5kQWRkIiwiYXJndW1lbnRzIiwic3FydCIsIm11bCIsInN1YiIsInR4IiwidHkiLCJhYSIsImFiIiwiYWMiLCJhZCIsImF0eCIsImF0eSIsImE0IiwiYTUiLCJiNCIsImI1IiwidHJhbnNsYXRlIiwiZnJvbVRyYW5zbGF0aW9uIiwiZnJvbU1hdDQiLCJtMDIiLCJtMTIiLCJtMjAiLCJtMjEiLCJtMjIiLCJhMDEiLCJhMDIiLCJhMTIiLCJhMDAiLCJhMTAiLCJhMTEiLCJhMjAiLCJhMjEiLCJhMjIiLCJiMDEiLCJiMTEiLCJiMjEiLCJiMDAiLCJiMDIiLCJiMTAiLCJiMTIiLCJiMjAiLCJiMjIiLCJmcm9tTWF0MmQiLCJmcm9tUXVhdCIsInciLCJ4MiIsInkyIiwiejIiLCJ4eCIsInl4IiwieXkiLCJ6eCIsInp5IiwienoiLCJ3eCIsInd5Iiwid3oiLCJub3JtYWxGcm9tTWF0NCIsImEwMyIsImExMyIsImEyMyIsImEzMCIsImEzMSIsImEzMiIsImEzMyIsImIwMyIsImIwNCIsImIwNSIsImIwNiIsImIwNyIsImIwOCIsImIwOSIsInByb2plY3Rpb24iLCJ3aWR0aCIsImhlaWdodCIsImE2IiwiYTciLCJhOCIsImI2IiwiYjciLCJiOCIsIm0wMyIsIm0xMyIsIm0yMyIsIm0zMCIsIm0zMSIsIm0zMiIsIm0zMyIsImF4aXMiLCJ0Iiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwiZnJvbVhSb3RhdGlvbiIsImZyb21ZUm90YXRpb24iLCJmcm9tWlJvdGF0aW9uIiwiZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24iLCJ4eSIsInh6IiwieXoiLCJmcm9tUXVhdDIiLCJ0cmFuc2xhdGlvbiIsImJ6IiwiYnciLCJheiIsImF3IiwibWFnbml0dWRlIiwiZ2V0VHJhbnNsYXRpb24iLCJtYXQiLCJnZXRTY2FsaW5nIiwiZ2V0Um90YXRpb24iLCJzY2FsaW5nIiwiaXMxIiwiaXMyIiwiaXMzIiwic20xMSIsInNtMTIiLCJzbTEzIiwic20yMSIsInNtMjIiLCJzbTIzIiwic20zMSIsInNtMzIiLCJzbTMzIiwidHJhY2UiLCJTIiwiZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZSIsInN4Iiwic3kiLCJzeiIsImZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGVPcmlnaW4iLCJvIiwib3giLCJveSIsIm96Iiwib3V0MCIsIm91dDEiLCJvdXQyIiwib3V0NCIsIm91dDUiLCJvdXQ2Iiwib3V0OCIsIm91dDkiLCJvdXQxMCIsImZydXN0dW0iLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJ0b3AiLCJuZWFyIiwiZmFyIiwicmwiLCJ0YiIsIm5mIiwicGVyc3BlY3RpdmVOTyIsImZvdnkiLCJhc3BlY3QiLCJmIiwicGVyc3BlY3RpdmUiLCJwZXJzcGVjdGl2ZVpPIiwicGVyc3BlY3RpdmVGcm9tRmllbGRPZlZpZXciLCJmb3YiLCJ1cFRhbiIsInVwRGVncmVlcyIsImRvd25UYW4iLCJkb3duRGVncmVlcyIsImxlZnRUYW4iLCJsZWZ0RGVncmVlcyIsInJpZ2h0VGFuIiwicmlnaHREZWdyZWVzIiwieFNjYWxlIiwieVNjYWxlIiwib3J0aG9OTyIsImxyIiwiYnQiLCJvcnRobyIsIm9ydGhvWk8iLCJsb29rQXQiLCJleWUiLCJjZW50ZXIiLCJ1cCIsInowIiwiejEiLCJleWV4IiwiZXlleSIsImV5ZXoiLCJ1cHgiLCJ1cHkiLCJ1cHoiLCJjZW50ZXJ4IiwiY2VudGVyeSIsImNlbnRlcnoiLCJ0YXJnZXRUbyIsInRhcmdldCIsImE5IiwiYTE0IiwiYTE1IiwiYjkiLCJiMTMiLCJiMTQiLCJiMTUiLCJkaXZpZGUiLCJjZWlsIiwiZmxvb3IiLCJyb3VuZCIsInNjYWxlQW5kQWRkIiwiZGlzdGFuY2UiLCJzcXVhcmVkRGlzdGFuY2UiLCJzcXVhcmVkTGVuZ3RoIiwibmVnYXRlIiwiaW52ZXJzZSIsIm5vcm1hbGl6ZSIsImNyb3NzIiwibGVycCIsImhlcm1pdGUiLCJmYWN0b3JUaW1lczIiLCJmYWN0b3IxIiwiZmFjdG9yMiIsImZhY3RvcjMiLCJmYWN0b3I0IiwiYmV6aWVyIiwiaW52ZXJzZUZhY3RvciIsImludmVyc2VGYWN0b3JUaW1lc1R3byIsInpTY2FsZSIsInRyYW5zZm9ybU1hdDQiLCJ0cmFuc2Zvcm1NYXQzIiwidHJhbnNmb3JtUXVhdCIsInF5IiwicXoiLCJxdyIsInV2eCIsInV2eSIsInV2eiIsInV1dngiLCJ1dXZ5IiwidXV2eiIsIncyIiwiYW5nbGUiLCJtYWciLCJjb3NpbmUiLCJhY29zIiwiemVybyIsInZlYyIsImRpdiIsImRpc3QiLCJzcXJEaXN0Iiwic3FyTGVuIiwiZm9yRWFjaCIsInN0cmlkZSIsIm9mZnNldCIsImNvdW50IiwiZm4iLCJhcmciLCJsIiwiZG90IiwidSIsIkEiLCJCIiwiQyIsIkUiLCJGIiwiRyIsIkgiLCJJIiwiSiIsInYyIiwidjMiLCJ2NCIsInMxIiwiczIiLCJpeCIsIml5IiwiaXoiLCJpdyIsInNldEF4aXNBbmdsZSIsImdldEF4aXNBbmdsZSIsIm91dF9heGlzIiwiZ2V0QW5nbGUiLCJkb3Rwcm9kdWN0IiwiY2FsY3VsYXRlVyIsImV4cCIsImV0IiwibG4iLCJhdGFuMiIsImxvZyIsInBvdyIsInNsZXJwIiwib21lZ2EiLCJjb3NvbSIsInNpbm9tIiwic2NhbGUwIiwic2NhbGUxIiwidTEiLCJ1MiIsInUzIiwic3FydDFNaW51c1UxIiwic3FydFUxIiwiaW52RG90IiwiY29uanVnYXRlIiwiZnJvbU1hdDMiLCJmUm9vdCIsImZUcmFjZSIsImsiLCJmcm9tRXVsZXIiLCJoYWxmVG9SYWQiLCJjeiIsInRtcHZlYzMiLCJ4VW5pdFZlYzMiLCJ5VW5pdFZlYzMiLCJ0ZW1wMSIsInRlbXAyIiwibWF0ciIsInJvdGF0aW9uVG8iLCJzcWxlcnAiLCJzZXRBeGVzIiwidmlldyIsImRxIiwidzEiLCJmcm9tUm90YXRpb25UcmFuc2xhdGlvblZhbHVlcyIsIm91dGVyIiwiZ2V0UmVhbCIsImdldER1YWwiLCJzZXRSZWFsIiwic2V0RHVhbCIsImF4MSIsImF5MSIsImF6MSIsImF3MSIsImJ4MSIsImJ5MSIsImJ6MSIsImF4MiIsImF5MiIsImF6MiIsImF3MiIsInJvdGF0ZUJ5UXVhdEFwcGVuZCIsInJvdGF0ZUJ5UXVhdFByZXBlbmQiLCJyb3RhdGVBcm91bmRBeGlzIiwiYXhpc0xlbmd0aCIsImF4MCIsImF5MCIsImF6MCIsImF3MCIsImJ3MSIsImJ4MCIsImJ5MCIsImJ6MCIsImJ3MCIsIm10Iiwic3FsZW4iLCJhX2RvdF9iIiwidHJhbnNmb3JtTWF0MiIsInRyYW5zZm9ybU1hdDJkIiwicDAiLCJzaW5DIiwiY29zQyIsImRlZmluZVByb3BlcnR5IiwiY29kZVBvaW50QXQiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJwb3NpdGlvbiIsIlR5cGVFcnJvciIsInN0cmluZyIsInNpemUiLCJpbmRleCIsIk51bWJlciIsInNlY29uZCIsImZpcnN0IiwiY2hhckNvZGVBdCIsIm9iamVjdCIsIiRkZWZpbmVQcm9wZXJ0eSIsIk9iamVjdCIsImVycm9yIiwiVHJlZSIsInRhYmxlIiwiVWludDE2QXJyYXkiLCJ0cmFucyIsIkRhdGEiLCJzb3VyY2UiLCJkZXN0Iiwic291cmNlSW5kZXgiLCJ0YWciLCJiaXRjb3VudCIsImRlc3RMZW4iLCJsdHJlZSIsImR0cmVlIiwic2x0cmVlIiwic2R0cmVlIiwibGVuZ3RoX2JpdHMiLCJVaW50OEFycmF5IiwibGVuZ3RoX2Jhc2UiLCJkaXN0X2JpdHMiLCJkaXN0X2Jhc2UiLCJjbGNpZHgiLCJjb2RlX3RyZWUiLCJsZW5ndGhzIiwidGluZl9idWlsZF9iaXRzX2Jhc2UiLCJiaXRzIiwiYmFzZSIsImRlbHRhIiwib2ZmcyIsInRpbmZfYnVpbGRfdHJlZSIsIm9mZiIsInRpbmZfZ2V0Yml0IiwiYml0IiwidGluZl9yZWFkX2JpdHMiLCJ2YWwiLCJ0aW5mX2RlY29kZV9zeW1ib2wiLCJjdXIiLCJ0aW5mX2RlY29kZV90cmVlcyIsImx0IiwiZHQiLCJobGl0IiwiaGRpc3QiLCJoY2xlbiIsImNsZW4iLCJzeW0iLCJ0aW5mX2luZmxhdGVfYmxvY2tfZGF0YSIsInRpbmZfaW5mbGF0ZV91bmNvbXByZXNzZWRfYmxvY2siLCJ0aW5mX2J1aWxkX2ZpeGVkX3RyZWVzIiwidGlueUluZmxhdGUiLCJiZmluYWwiLCJyZXMiLCJFcnJvciIsInNsaWNlIiwic3ViYXJyYXkiLCJkZXJpdmUiLCJCb3VuZGluZ0JveCIsIk5hTiIsIlBhdGgiLCJjb21tYW5kcyIsImZpbGwiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsImZhaWwiLCJtZXNzYWdlIiwiYXJndW1lbnQiLCJwcmVkaWNhdGUiLCJpc0VtcHR5IiwiaXNOYU4iLCJhZGRQb2ludCIsImFkZFgiLCJhZGRZIiwiYWRkQmV6aWVyIiwicDMiLCJiMmFjIiwidDEiLCJ0MiIsImFkZFF1YWQiLCJjcDF4IiwiY3AxeSIsImNwMngiLCJjcDJ5IiwibW92ZVRvIiwibGluZVRvIiwiY3VydmVUbyIsImJlemllckN1cnZlVG8iLCJxdWFkVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiY2xvc2UiLCJjbG9zZVBhdGgiLCJleHRlbmQiLCJwYXRoT3JDb21tYW5kcyIsImJveCIsImFwcGx5IiwiZ2V0Qm91bmRpbmdCb3giLCJzdGFydFgiLCJzdGFydFkiLCJwcmV2WCIsInByZXZZIiwiY21kIiwiZHJhdyIsImN0eCIsImJlZ2luUGF0aCIsImZpbGxTdHlsZSIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwidG9QYXRoRGF0YSIsImRlY2ltYWxQbGFjZXMiLCJmbG9hdFRvU3RyaW5nIiwidG9GaXhlZCIsInBhY2tWYWx1ZXMiLCJhcmd1bWVudHMkMSIsInVuZGVmaW5lZCIsInRvU1ZHIiwic3ZnIiwidG9ET01FbGVtZW50IiwidGVtcG9yYXJ5UGF0aCIsIm5ld1BhdGgiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsInNldEF0dHJpYnV0ZSIsImNoZWNrIiwiYXNzZXJ0IiwiTElNSVQzMiIsImRlY29kZSIsImVuY29kZSIsInNpemVPZiIsImNvbnN0YW50IiwiQllURSIsIkNIQVIiLCJDSEFSQVJSQVkiLCJjb25zb2xlIiwid2FybiIsIlVTSE9SVCIsIlNIT1JUIiwiVUlOVDI0IiwiVUxPTkciLCJMT05HIiwiRklYRUQiLCJGV09SRCIsIlVGV09SRCIsIkxPTkdEQVRFVElNRSIsIlRBRyIsIkNhcmQ4IiwiQ2FyZDE2IiwiT2ZmU2l6ZSIsIlNJRCIsIk5VTUJFUiIsIk5VTUJFUjE2IiwiTlVNQkVSMzIiLCJSRUFMIiwidmFsdWUiLCJ0b1N0cmluZyIsImV4ZWMiLCJlcHNpbG9uIiwicGFyc2VGbG9hdCIsIm5pYmJsZXMiLCJpaSIsImkkMSIsImlpJDEiLCJwYXJzZUludCIsInN1YnN0ciIsIk5BTUUiLCJTVFJJTkciLCJVVEY4IiwibnVtQnl0ZXMiLCJjb2RlUG9pbnRzIiwibnVtQ2hhcnMiLCJnZXRVaW50OCIsImZyb21DaGFyQ29kZSIsIlVURjE2IiwiZ2V0VWludDE2IiwiY29kZXBvaW50IiwiZWlnaHRCaXRNYWNFbmNvZGluZ3MiLCJtYWNpbnRvc2giLCJNQUNTVFJJTkciLCJkYXRhVmlldyIsImRhdGFMZW5ndGgiLCJlbmNvZGluZyIsIm1hY0VuY29kaW5nQ2FjaGVLZXlzIiwibWFjRW5jb2RpbmdUYWJsZUNhY2hlIiwiV2Vha01hcCIsImlzQnl0ZUVuY29kYWJsZSIsImVuY29kZVZhckRlbHRhUnVuQXNaZXJvZXMiLCJkZWx0YXMiLCJwb3MiLCJydW5MZW5ndGgiLCJudW1EZWx0YXMiLCJlbmNvZGVWYXJEZWx0YVJ1bkFzQnl0ZXMiLCJlbmNvZGVWYXJEZWx0YVJ1bkFzV29yZHMiLCJjYWNoZUtleSIsImNhY2hlZFRhYmxlIiwiZ2V0IiwiZGVjb2RpbmdUYWJsZSIsImVuY29kaW5nVGFibGUiLCJnZXRNYWNFbmNvZGluZ1RhYmxlIiwiVkFSREVMVEFTIiwiSU5ERVgiLCJvZmZzZXRzIiwiT0JKRUNUIiwiZW5jb2RlZE9mZnNldHMiLCJvZmZTaXplIiwib2Zmc2V0RW5jb2RlciIsImVuY29kZWRPZmZzZXQiLCJjb25jYXQiLCJESUNUIiwia2V5cyIsIk9QRVJBTkQiLCJPUEVSQVRPUiIsImlzQXJyYXkiLCJPUCIsIndtbSIsIlRhYmxlIiwidGFibGVOYW1lIiwiZmllbGRzIiwib3B0aW9ucyIsIm5hbWUiLCJmaWVsZCIsIm9wdGlvbktleXMiLCJ1c2hvcnRMaXN0IiwiaXRlbU5hbWUiLCJ0YWJsZUxpc3QiLCJyZWNvcmRzIiwiaXRlbUNhbGxiYWNrIiwicmVjb3JkTGlzdCIsIkNvdmVyYWdlIiwiY292ZXJhZ2VUYWJsZSIsImZvcm1hdCIsImNhbGwiLCJnbHlwaHMiLCJyYW5nZXMiLCJSYW5nZVJlY29yZCIsIlNjcmlwdExpc3QiLCJzY3JpcHRMaXN0VGFibGUiLCJzY3JpcHRSZWNvcmQiLCJzY3JpcHQiLCJkZWZhdWx0TGFuZ1N5cyIsInJlcUZlYXR1cmVJbmRleCIsImZlYXR1cmVJbmRleGVzIiwibGFuZ1N5c1JlY29yZHMiLCJsYW5nU3lzUmVjb3JkIiwibGFuZ1N5cyIsIkZlYXR1cmVMaXN0IiwiZmVhdHVyZUxpc3RUYWJsZSIsImZlYXR1cmVSZWNvcmQiLCJmZWF0dXJlIiwiZmVhdHVyZVBhcmFtcyIsImxvb2t1cExpc3RJbmRleGVzIiwiTG9va3VwTGlzdCIsImxvb2t1cExpc3RUYWJsZSIsInN1YnRhYmxlTWFrZXJzIiwibG9va3VwVGFibGUiLCJzdWJ0YWJsZUNhbGxiYWNrIiwibG9va3VwVHlwZSIsImxvb2t1cEZsYWciLCJzdWJ0YWJsZXMiLCJDSEFSU1RSSU5HIiwib3BzIiwiY2FjaGVkVmFsdWUiLCJvcCIsImVuY29kaW5nRnVuY3Rpb24iLCJzaXplT2ZGdW5jdGlvbiIsIlRBQkxFIiwic3VidGFibGVPZmZzZXRzIiwiYnl0ZXMiLCJSRUNPUkQiLCJMSVRFUkFMIiwiY29uc3RydWN0b3IiLCJSZWNvcmQiLCJnZXRCeXRlIiwiZ2V0VVNob3J0IiwiZ2V0VUxvbmciLCJnZXRVaW50MzIiLCJnZXRGaXhlZCIsImdldEludDE2IiwidHlwZU9mZnNldHMiLCJieXRlIiwidVNob3J0Iiwic2hvcnQiLCJ1TG9uZyIsImZpeGVkIiwibG9uZ0RhdGVUaW1lIiwiUGFyc2VyIiwicmVsYXRpdmVPZmZzZXQiLCJwYXJzZUJ5dGUiLCJwYXJzZUNoYXIiLCJnZXRJbnQ4IiwicGFyc2VDYXJkOCIsInBhcnNlVVNob3J0IiwicGFyc2VDYXJkMTYiLCJwYXJzZVNJRCIsInBhcnNlT2Zmc2V0MTYiLCJwYXJzZVNob3J0IiwicGFyc2VGMkRvdDE0IiwicGFyc2VVTG9uZyIsInBhcnNlT2Zmc2V0MzIiLCJwYXJzZUZpeGVkIiwicGFyc2VTdHJpbmciLCJwYXJzZVRhZyIsInBhcnNlTG9uZ0RhdGVUaW1lIiwicGFyc2VWZXJzaW9uIiwibWlub3JCYXNlIiwibWFqb3IiLCJtaW5vciIsInNraXAiLCJhbW91bnQiLCJwYXJzZVVMb25nTGlzdCIsInBhcnNlT2Zmc2V0MTZMaXN0IiwicGFyc2VVU2hvcnRMaXN0IiwicGFyc2VTaG9ydExpc3QiLCJwYXJzZUJ5dGVMaXN0IiwicGFyc2VMaXN0IiwicGFyc2VMaXN0MzIiLCJwYXJzZVJlY29yZExpc3QiLCJyZWNvcmREZXNjcmlwdGlvbiIsInJlYyIsImZpZWxkTmFtZSIsImZpZWxkVHlwZSIsInBhcnNlUmVjb3JkTGlzdDMyIiwicGFyc2VTdHJ1Y3QiLCJkZXNjcmlwdGlvbiIsInN0cnVjdCIsInBhcnNlVmFsdWVSZWNvcmQiLCJ2YWx1ZUZvcm1hdCIsInZhbHVlUmVjb3JkIiwieFBsYWNlbWVudCIsInlQbGFjZW1lbnQiLCJ4QWR2YW5jZSIsInlBZHZhbmNlIiwieFBsYURldmljZSIsInlQbGFEZXZpY2UiLCJ4QWR2RGV2aWNlIiwieUFkdkRldmljZSIsInBhcnNlVmFsdWVSZWNvcmRMaXN0IiwidmFsdWVDb3VudCIsInZhbHVlcyIsInBhcnNlUG9pbnRlciIsInN0cnVjdE9mZnNldCIsInBhcnNlUG9pbnRlcjMyIiwicGFyc2VMaXN0T2ZMaXN0cyIsInN1Yk9mZnNldHMiLCJzdWJMaXN0IiwicGFyc2VDb3ZlcmFnZSIsInN0YXJ0T2Zmc2V0IiwicGFyc2VDbGFzc0RlZiIsInN0YXJ0R2x5cGgiLCJjbGFzc2VzIiwiY2xhc3NJZCIsImxpc3QzMiIsInJlY29yZExpc3QzMiIsInBvaW50ZXIiLCJwb2ludGVyMzIiLCJvZmZzZXQxNiIsInVTaG9ydExpc3QiLCJvZmZzZXQzMiIsInVMb25nTGlzdCIsImNvdmVyYWdlIiwiY2xhc3NEZWYiLCJsYW5nU3lzVGFibGUiLCJyZXNlcnZlZCIsInBhcnNlU2NyaXB0TGlzdCIsInBhcnNlRmVhdHVyZUxpc3QiLCJwYXJzZUxvb2t1cExpc3QiLCJsb29rdXBUYWJsZVBhcnNlcnMiLCJ1c2VNYXJrRmlsdGVyaW5nU2V0IiwibWFya0ZpbHRlcmluZ1NldCIsInBhcnNlRmVhdHVyZVZhcmlhdGlvbnNMaXN0IiwibWFqb3JWZXJzaW9uIiwibWlub3JWZXJzaW9uIiwiY29uZGl0aW9uU2V0T2Zmc2V0IiwiZmVhdHVyZVRhYmxlU3Vic3RpdHV0aW9uT2Zmc2V0IiwicGFyc2UiLCJnZXRDYXJkOCIsImdldENhcmQxNiIsImdldFNob3J0IiwiZ2V0VGFnIiwiZ2V0T2Zmc2V0IiwiZ2V0Qnl0ZXMiLCJlbmRPZmZzZXQiLCJieXRlc1RvU3RyaW5nIiwiYWRkU2VnbWVudCIsImNvZGUiLCJnbHlwaEluZGV4Iiwic2VnbWVudHMiLCJjbWFwIiwidmVyc2lvbiIsIm51bVRhYmxlcyIsInBsYXRmb3JtSWQiLCJlbmNvZGluZ0lkIiwiZ3JvdXBDb3VudCIsImxhbmd1YWdlIiwiZ2x5cGhJbmRleE1hcCIsInN0YXJ0Q2hhckNvZGUiLCJlbmRDaGFyQ29kZSIsInN0YXJ0R2x5cGhJZCIsInBhcnNlQ21hcFRhYmxlRm9ybWF0MTIiLCJzZWdDb3VudCIsImVuZENvdW50UGFyc2VyIiwic3RhcnRDb3VudFBhcnNlciIsImlkRGVsdGFQYXJzZXIiLCJpZFJhbmdlT2Zmc2V0UGFyc2VyIiwiZ2x5cGhJbmRleE9mZnNldCIsImVuZENvdW50Iiwic3RhcnRDb3VudCIsImlkRGVsdGEiLCJpZFJhbmdlT2Zmc2V0IiwicGFyc2VDbWFwVGFibGVGb3JtYXQ0IiwibWFrZSIsImlzUGxhbjBPbmx5IiwidW5pY29kZSIsImNtYXBUYWJsZSIsImdseXBoIiwidW5pY29kZXMiLCJhZGRUZXJtaW5hdG9yU2VnbWVudCIsInNlZ0NvdW50VG9SZW1vdmUiLCJlbmRDb3VudHMiLCJzdGFydENvdW50cyIsImlkRGVsdGFzIiwiaWRSYW5nZU9mZnNldHMiLCJnbHlwaElkcyIsImNtYXAxMkdyb3VwcyIsInNlZ21lbnQiLCJnbHlwaElkIiwic2VnQ291bnRYMiIsInNlYXJjaFJhbmdlIiwiZW50cnlTZWxlY3RvciIsInJhbmdlU2hpZnQiLCJjbWFwNExlbmd0aCIsImNtYXAxMkxlbmd0aCIsImNtYXAxMk9mZnNldCIsImNmZlN0YW5kYXJkU3RyaW5ncyIsImNmZlN0YW5kYXJkRW5jb2RpbmciLCJjZmZFeHBlcnRFbmNvZGluZyIsInN0YW5kYXJkTmFtZXMiLCJEZWZhdWx0RW5jb2RpbmciLCJmb250IiwiQ21hcEVuY29kaW5nIiwiQ2ZmRW5jb2RpbmciLCJjaGFyc2V0IiwiR2x5cGhOYW1lcyIsInBvc3QiLCJuYW1lcyIsIm51bWJlck9mR2x5cGhzIiwiZ2x5cGhOYW1lSW5kZXgiLCJjaGFyVG9HbHlwaEluZGV4IiwiY2hhck5hbWUiLCJpbmRleE9mIiwibmFtZVRvR2x5cGhJbmRleCIsImdseXBoSW5kZXhUb05hbWUiLCJnaWQiLCJHbHlwaCIsImJpbmRDb25zdHJ1Y3RvclZhbHVlcyIsImRlZmluZURlcGVuZGVudFByb3BlcnR5IiwiZXh0ZXJuYWxOYW1lIiwiaW50ZXJuYWxOYW1lIiwicGF0aCIsIm5ld1ZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIkdseXBoU2V0IiwidW5pdHNQZXJFbSIsIl9wYXRoIiwieE1pbiIsInlNaW4iLCJ4TWF4IiwieU1heCIsImFkdmFuY2VXaWR0aCIsImFkZFVuaWNvZGUiLCJnZXRQYXRoIiwiZm9udFNpemUiLCJoUG9pbnRzIiwiaGludGluZyIsImdldENvbW1hbmRzIiwiZ2V0Q29udG91cnMiLCJwb2ludHMiLCJjb250b3VycyIsImN1cnJlbnRDb250b3VyIiwicHQiLCJsYXN0UG9pbnRPZkNvbnRvdXIiLCJnZXRNZXRyaWNzIiwieENvb3JkcyIsInlDb29yZHMiLCJtZXRyaWNzIiwibGVmdFNpZGVCZWFyaW5nIiwiaXNGaW5pdGUiLCJyaWdodFNpZGVCZWFyaW5nIiwiZHJhd1BvaW50cyIsImRyYXdDaXJjbGVzIiwiYXJjIiwiYmx1ZUNpcmNsZXMiLCJyZWRDaXJjbGVzIiwiZHJhd01ldHJpY3MiLCJfcHVzaCIsInVuaWNvZGVPYmoiLCJfSW5kZXhUb1VuaWNvZGVNYXAiLCJjZmZFbmNvZGluZyIsImlzQ0lERm9udCIsImdseXBoTmFtZXMiLCJfaG10eFRhYmxlRGF0YSIsImxvYWRlciIsImdseXBoc2V0IiwiZ2x5cGhMb2FkZXIiLCJ0dGZHbHlwaExvYWRlciIsInBhcnNlR2x5cGgiLCJidWlsZFBhdGgiLCJjZmZHbHlwaExvYWRlciIsInBhcnNlQ0ZGQ2hhcnN0cmluZyIsImNoYXJzdHJpbmciLCJjYWxjQ0ZGU3Vicm91dGluZUJpYXMiLCJzdWJycyIsInBhcnNlQ0ZGSW5kZXgiLCJjb252ZXJzaW9uRm4iLCJvYmplY3RPZmZzZXQiLCJvYmplY3RzIiwib2Zmc2V0U2l6ZSIsInBhcnNlT3BlcmFuZCIsInBhcnNlciIsImxvb2t1cCIsIm4xIiwibjIiLCJwYXJzZUZsb2F0T3BlcmFuZCIsInBhcnNlQ0ZGRGljdCIsImVudHJpZXMiLCJvcGVyYW5kcyIsImtleSIsImhhc093blByb3BlcnR5IiwiZW50cmllc1RvT2JqZWN0IiwiZ2V0Q0ZGU3RyaW5nIiwic3RyaW5ncyIsImludGVycHJldERpY3QiLCJkaWN0IiwibWV0YSIsIm5ld0RpY3QiLCJUT1BfRElDVF9NRVRBIiwiUFJJVkFURV9ESUNUX01FVEEiLCJwYXJzZUNGRlRvcERpY3QiLCJieXRlTGVuZ3RoIiwicGFyc2VDRkZQcml2YXRlRGljdCIsImdhdGhlckNGRlRvcERpY3RzIiwiY2ZmSW5kZXgiLCJ0b3BEaWN0QXJyYXkiLCJpVG9wRGljdCIsInRvcERpY3QiLCJEYXRhVmlldyIsImJ1ZmZlciIsIl9zdWJycyIsIl9zdWJyc0JpYXMiLCJfZGVmYXVsdFdpZHRoWCIsIl9ub21pbmFsV2lkdGhYIiwicHJpdmF0ZVNpemUiLCJwcml2YXRlIiwicHJpdmF0ZU9mZnNldCIsInByaXZhdGVEaWN0IiwiZGVmYXVsdFdpZHRoWCIsIm5vbWluYWxXaWR0aFgiLCJzdWJySW5kZXgiLCJfcHJpdmF0ZURpY3QiLCJjMXgiLCJjMXkiLCJjMngiLCJjMnkiLCJzdWJyc0JpYXMiLCJzdGFjayIsIm5TdGVtcyIsImhhdmVXaWR0aCIsIm9wZW4iLCJmZEluZGV4IiwidGFibGVzIiwiY2ZmIiwiX2ZkU2VsZWN0IiwiZmREaWN0IiwiX2ZkQXJyYXkiLCJuZXdDb250b3VyIiwicGFyc2VTdGVtcyIsInNoaWZ0IiwiY29kZUluZGV4Iiwic3VickNvZGUiLCJqcHgiLCJqcHkiLCJjM3giLCJjM3kiLCJjNHgiLCJjNHkiLCJwb3AiLCJnc3VicnNCaWFzIiwiZ3N1YnJzIiwiZW5jb2RlU3RyaW5nIiwic2lkIiwibWFrZURpY3QiLCJhdHRycyIsImVudHJ5IiwibWFrZVRvcERpY3QiLCJtYWtlVG9wRGljdEluZGV4IiwidG9wRGljdHMiLCJnbHlwaFRvT3BzIiwiZHgiLCJkeSIsIl8xMyIsIl8yMyIsImR4MSIsImR5MSIsImR4MiIsImR5MiIsIm9wdCIsImhlYWRlciIsImZvcm1hdE1ham9yIiwiZm9ybWF0TWlub3IiLCJwYXJzZUNGRkhlYWRlciIsIm5hbWVJbmRleCIsInRvcERpY3RJbmRleCIsInN0cmluZ0luZGV4IiwiZ2xvYmFsU3VickluZGV4Iiwicm9zIiwiZmRBcnJheU9mZnNldCIsImZkQXJyYXkiLCJmZFNlbGVjdE9mZnNldCIsImZkU2VsZWN0IiwiZmRBcnJheUluZGV4IiwibkdseXBocyIsImZkQXJyYXlDb3VudCIsImlHaWQiLCJuUmFuZ2VzIiwiaVJhbmdlIiwicGFyc2VDRkZGRFNlbGVjdCIsIm51bUdseXBocyIsImNoYXJTdHJpbmdzSW5kZXgiLCJwcml2YXRlRGljdE9mZnNldCIsInN1YnJPZmZzZXQiLCJsb3dNZW1vcnkiLCJwYXJzZUNGRkluZGV4TG93TWVtb3J5IiwiY2hhclN0cmluZ3MiLCJpJDIiLCJwYXJzZUNGRkNoYXJzZXQiLCJlbmMiLCJuQ29kZXMiLCJuTGVmdCIsInBhcnNlQ0ZGRW5jb2RpbmciLCJjaGFyU3RyaW5nIiwiZ2V0Q2ZmSW5kZXhPYmplY3QiLCJmb250U2NhbGUiLCJmdWxsTmFtZSIsImZhbWlseU5hbWUiLCJ3ZWlnaHQiLCJ3ZWlnaHROYW1lIiwiZm9udEJCb3giLCJmb250TWF0cml4IiwiZm9udE5hbWVzIiwibWFrZU5hbWVJbmRleCIsInBvc3RTY3JpcHROYW1lIiwiY2hhcnNldHMiLCJnbHlwaFNJRCIsIm1ha2VDaGFyc2V0cyIsIm1ha2VDaGFyU3RyaW5nc0luZGV4IiwibWFrZVByaXZhdGVEaWN0IiwibWFrZVN0cmluZ0luZGV4IiwiaGVhZCIsImZvbnRSZXZpc2lvbiIsImNoZWNrU3VtQWRqdXN0bWVudCIsIm1hZ2ljTnVtYmVyIiwiZmxhZ3MiLCJjcmVhdGVkIiwibW9kaWZpZWQiLCJtYWNTdHlsZSIsImxvd2VzdFJlY1BQRU0iLCJmb250RGlyZWN0aW9uSGludCIsImluZGV4VG9Mb2NGb3JtYXQiLCJnbHlwaERhdGFGb3JtYXQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwiZ2V0VGltZSIsImNyZWF0ZWRUaW1lc3RhbXAiLCJoaGVhIiwiYXNjZW5kZXIiLCJkZXNjZW5kZXIiLCJsaW5lR2FwIiwiYWR2YW5jZVdpZHRoTWF4IiwibWluTGVmdFNpZGVCZWFyaW5nIiwibWluUmlnaHRTaWRlQmVhcmluZyIsInhNYXhFeHRlbnQiLCJjYXJldFNsb3BlUmlzZSIsImNhcmV0U2xvcGVSdW4iLCJjYXJldE9mZnNldCIsIm1ldHJpY0RhdGFGb3JtYXQiLCJudW1iZXJPZkhNZXRyaWNzIiwiaG10eCIsIm51bU1ldHJpY3MiLCJwYXJzZUhtdHhUYWJsZU9uTG93TWVtb3J5IiwicGFyc2VIbXR4VGFibGVBbGwiLCJsdGFnIiwidGFncyIsInN0cmluZ1Bvb2wiLCJzdHJpbmdQb29sT2Zmc2V0IiwidGFibGVWZXJzaW9uIiwibnVtVGFncyIsIm1heHAiLCJtYXhQb2ludHMiLCJtYXhDb250b3VycyIsIm1heENvbXBvc2l0ZVBvaW50cyIsIm1heENvbXBvc2l0ZUNvbnRvdXJzIiwibWF4Wm9uZXMiLCJtYXhUd2lsaWdodFBvaW50cyIsIm1heFN0b3JhZ2UiLCJtYXhGdW5jdGlvbkRlZnMiLCJtYXhJbnN0cnVjdGlvbkRlZnMiLCJtYXhTdGFja0VsZW1lbnRzIiwibWF4U2l6ZU9mSW5zdHJ1Y3Rpb25zIiwibWF4Q29tcG9uZW50RWxlbWVudHMiLCJtYXhDb21wb25lbnREZXB0aCIsIm5hbWVUYWJsZU5hbWVzIiwibWFjTGFuZ3VhZ2VzIiwibWFjTGFuZ3VhZ2VUb1NjcmlwdCIsIndpbmRvd3NMYW5ndWFnZXMiLCJnZXRMYW5ndWFnZUNvZGUiLCJwbGF0Zm9ybUlEIiwibGFuZ3VhZ2VJRCIsInV0ZjE2IiwibWFjU2NyaXB0RW5jb2RpbmdzIiwibWFjTGFuZ3VhZ2VFbmNvZGluZ3MiLCJnZXRFbmNvZGluZyIsImVuY29kaW5nSUQiLCJyZXZlcnNlRGljdCIsIm1ha2VOYW1lUmVjb3JkIiwibmFtZUlEIiwiYWRkU3RyaW5nVG9Qb29sIiwicG9vbCIsIm5lZWRsZSIsImhheXN0YWNrIiwibmVlZGxlTGVuZ3RoIiwibGltaXQiLCJsb29wIiwiZmluZFN1YkFycmF5IiwiX25hbWUiLCJzdHJpbmdPZmZzZXQiLCJwcm9wZXJ0eSIsInRleHQiLCJ0cmFuc2xhdGlvbnMiLCJuYW1lSURzIiwibmFtZXNXaXRoTnVtZXJpY0tleXMiLCJuYW1lVGFibGVJZHMiLCJpZCIsIm1hY0xhbmd1YWdlSWRzIiwid2luZG93c0xhbmd1YWdlSWRzIiwibmFtZVJlY29yZHMiLCJsYW5nIiwibWFjUGxhdGZvcm0iLCJtYWNMYW5ndWFnZSIsIm1hY1NjcmlwdCIsIm1hY0VuY29kaW5nIiwibWFjTmFtZSIsIm1hY05hbWVPZmZzZXQiLCJ3aW5MYW5ndWFnZSIsIndpbk5hbWUiLCJ3aW5OYW1lT2Zmc2V0IiwidW5pY29kZVJhbmdlcyIsImJlZ2luIiwib3MyIiwieEF2Z0NoYXJXaWR0aCIsInVzV2VpZ2h0Q2xhc3MiLCJ1c1dpZHRoQ2xhc3MiLCJmc1R5cGUiLCJ5U3Vic2NyaXB0WFNpemUiLCJ5U3Vic2NyaXB0WVNpemUiLCJ5U3Vic2NyaXB0WE9mZnNldCIsInlTdWJzY3JpcHRZT2Zmc2V0IiwieVN1cGVyc2NyaXB0WFNpemUiLCJ5U3VwZXJzY3JpcHRZU2l6ZSIsInlTdXBlcnNjcmlwdFhPZmZzZXQiLCJ5U3VwZXJzY3JpcHRZT2Zmc2V0IiwieVN0cmlrZW91dFNpemUiLCJ5U3RyaWtlb3V0UG9zaXRpb24iLCJzRmFtaWx5Q2xhc3MiLCJwYW5vc2UiLCJ1bFVuaWNvZGVSYW5nZTEiLCJ1bFVuaWNvZGVSYW5nZTIiLCJ1bFVuaWNvZGVSYW5nZTMiLCJ1bFVuaWNvZGVSYW5nZTQiLCJhY2hWZW5kSUQiLCJmc1NlbGVjdGlvbiIsInVzRmlyc3RDaGFySW5kZXgiLCJ1c0xhc3RDaGFySW5kZXgiLCJzVHlwb0FzY2VuZGVyIiwic1R5cG9EZXNjZW5kZXIiLCJzVHlwb0xpbmVHYXAiLCJ1c1dpbkFzY2VudCIsInVzV2luRGVzY2VudCIsInVsQ29kZVBhZ2VSYW5nZTEiLCJ1bENvZGVQYWdlUmFuZ2UyIiwic3hIZWlnaHQiLCJzQ2FwSGVpZ2h0IiwidXNEZWZhdWx0Q2hhciIsInVzQnJlYWtDaGFyIiwidXNNYXhDb250ZW50IiwiZ2V0VW5pY29kZVJhbmdlIiwicmFuZ2UiLCJpdGFsaWNBbmdsZSIsInVuZGVybGluZVBvc2l0aW9uIiwidW5kZXJsaW5lVGhpY2tuZXNzIiwiaXNGaXhlZFBpdGNoIiwibWluTWVtVHlwZTQyIiwibWF4TWVtVHlwZTQyIiwibWluTWVtVHlwZTEiLCJtYXhNZW1UeXBlMSIsIm5hbWVMZW5ndGgiLCJzdWJ0YWJsZVBhcnNlcnMiLCJzdWJzdEZvcm1hdCIsImRlbHRhR2x5cGhJZCIsInN1YnN0aXR1dGUiLCJzZXF1ZW5jZXMiLCJhbHRlcm5hdGVTZXRzIiwibGlnYXR1cmVTZXRzIiwibGlnR2x5cGgiLCJjb21wb25lbnRzIiwibG9va3VwUmVjb3JkRGVzYyIsInNlcXVlbmNlSW5kZXgiLCJsb29rdXBMaXN0SW5kZXgiLCJydWxlU2V0cyIsImdseXBoQ291bnQiLCJzdWJzdENvdW50IiwiaW5wdXQiLCJsb29rdXBSZWNvcmRzIiwiY2xhc3NTZXRzIiwiY292ZXJhZ2VzIiwiY2hhaW5SdWxlU2V0cyIsImJhY2t0cmFjayIsImxvb2thaGVhZCIsImJhY2t0cmFja0NsYXNzRGVmIiwiaW5wdXRDbGFzc0RlZiIsImxvb2thaGVhZENsYXNzRGVmIiwiY2hhaW5DbGFzc1NldCIsImJhY2t0cmFja0NvdmVyYWdlIiwiaW5wdXRDb3ZlcmFnZSIsImxvb2thaGVhZENvdmVyYWdlIiwiZXh0ZW5zaW9uTG9va3VwVHlwZSIsImV4dGVuc2lvblBhcnNlciIsImV4dGVuc2lvbiIsInN1YnN0aXR1dGVzIiwic3VidGFibGUiLCJzZXF1ZW5jZVNldCIsImFsdGVybmF0ZVNldCIsImxpZ2F0dXJlU2V0IiwibGlnYXR1cmUiLCJyZXR1cm5UYWJsZSIsImNoYWluUnVsZVNldCIsImNoYWluUnVsZSIsInRhYmxlRGF0YSIsInJlY29yZCIsImdzdWIiLCJzY3JpcHRzIiwiZmVhdHVyZXMiLCJsb29rdXBzIiwidmFyaWF0aW9ucyIsIm51bURhdGFNYXBzIiwiZGF0YU9mZnNldCIsImxvZzIiLCJjb21wdXRlQ2hlY2tTdW0iLCJtYWtlVGFibGVSZWNvcmQiLCJjaGVja1N1bSIsIm1ha2VTZm50VGFibGUiLCJzZm50IiwiaGlnaGVzdFBvd2VyT2YyIiwicmVjb3JkRmllbGRzIiwidGFibGVGaWVsZHMiLCJ0YWJsZUxlbmd0aCIsInRhYmxlUmVjb3JkIiwicjEiLCJyMiIsIm1ldHJpY3NGb3JDaGFyIiwiY2hhcnMiLCJub3RGb3VuZE1ldHJpY3MiLCJhdmVyYWdlIiwidnMiLCJmaXJzdENoYXJJbmRleCIsInhNaW5zIiwieU1pbnMiLCJ4TWF4cyIsInlNYXhzIiwiYWR2YW5jZVdpZHRocyIsImxlZnRTaWRlQmVhcmluZ3MiLCJyaWdodFNpZGVCZWFyaW5ncyIsImxhc3RDaGFySW5kZXgiLCJnbG9iYWxzIiwiYWR2YW5jZVdpZHRoQXZnIiwibWF4TGVmdFNpZGVCZWFyaW5nIiwiaGVhZFRhYmxlIiwiaGhlYVRhYmxlIiwibWF4cFRhYmxlIiwib3MyVGFibGUiLCJhc3NpZ24iLCJoYXNDaGFyIiwiaG10eFRhYmxlIiwiZW5nbGlzaEZhbWlseU5hbWUiLCJnZXRFbmdsaXNoTmFtZSIsImVuZ2xpc2hTdHlsZU5hbWUiLCJlbmdsaXNoRnVsbE5hbWUiLCJyZXBsYWNlIiwidW5pcXVlSUQiLCJlbiIsInByZWZlcnJlZEZhbWlseSIsImZvbnRGYW1pbHkiLCJwcmVmZXJyZWRTdWJmYW1pbHkiLCJmb250U3ViZmFtaWx5IiwibGFuZ3VhZ2VUYWdzIiwibmFtZVRhYmxlIiwibHRhZ1RhYmxlIiwicG9zdFRhYmxlIiwiY2ZmVGFibGUiLCJtZXRhVGFibGUiLCJtZXRhcyIsInNmbnRUYWJsZSIsImNoZWNrU3VtQWRqdXN0ZWQiLCJzZWFyY2hUYWciLCJhcnIiLCJpbWluIiwiaW1heCIsImltaWQiLCJiaW5TZWFyY2giLCJMYXlvdXQiLCJQb3NpdGlvbiIsIlN1YnN0aXR1dGlvbiIsImFycmF5c0VxdWFsIiwiYXIxIiwiYXIyIiwiZ2V0U3Vic3RGb3JtYXQiLCJkZWZhdWx0U3VidGFibGUiLCJub2RlQnVmZmVyVG9BcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiY2hlY2tBcmd1bWVudCIsImV4cHJlc3Npb24iLCJwYXJzZUdseXBoQ29vcmRpbmF0ZSIsImZsYWciLCJwcmV2aW91c1ZhbHVlIiwic2hvcnRWZWN0b3JCaXRNYXNrIiwic2FtZUJpdE1hc2siLCJudW1iZXJPZkNvbnRvdXJzIiwiX3hNaW4iLCJfeU1pbiIsIl94TWF4IiwiX3lNYXgiLCJlbmRQb2ludEluZGljZXMiLCJpbnN0cnVjdGlvbkxlbmd0aCIsImluc3RydWN0aW9ucyIsIm51bWJlck9mQ29vcmRpbmF0ZXMiLCJyZXBlYXRDb3VudCIsInBvaW50IiwiaSQzIiwib25DdXJ2ZSIsImkkNCIsImkkNSIsImlzQ29tcG9zaXRlIiwibW9yZUNvbXBvbmVudHMiLCJjb21wb25lbnQiLCJzY2FsZTAxIiwic2NhbGUxMCIsIm1hdGNoZWRQb2ludHMiLCJpJDYiLCJ0cmFuc2Zvcm1Qb2ludHMiLCJ0cmFuc2Zvcm0iLCJuZXdQb2ludHMiLCJuZXdQdCIsImNvbnRvdXJJbmRleCIsImNvbnRvdXIiLCJjdXJyIiwibmV4dDIiLCJjb21wb25lbnRHbHlwaCIsInRyYW5zZm9ybWVkUG9pbnRzIiwiZmlyc3RQdCIsInNlY29uZFB0IiwiZ2V0VGFibGUiLCJsYXlvdXQiLCJjcmVhdGVEZWZhdWx0VGFibGUiLCJnZXRTY3JpcHROYW1lcyIsIm1hcCIsImdldERlZmF1bHRTY3JpcHROYW1lIiwiaGFzTGF0biIsImdldFNjcmlwdFRhYmxlIiwic2NyIiwic3BsaWNlIiwiZ2V0TGFuZ1N5c1RhYmxlIiwic2NyaXB0VGFibGUiLCJnZXRGZWF0dXJlVGFibGUiLCJmZWF0SW5kZXhlcyIsImFsbEZlYXR1cmVzIiwicGFyYW1zIiwiZ2V0TG9va3VwVGFibGVzIiwiZmVhdHVyZVRhYmxlIiwiYWxsTG9va3VwcyIsImdldEdseXBoQ2xhc3MiLCJjbGFzc0RlZlRhYmxlIiwiZ2V0Q292ZXJhZ2VJbmRleCIsImV4cGFuZENvdmVyYWdlIiwiaW5pdCIsImRlZmF1bHRLZXJuaW5nVGFibGVzIiwiZ2V0S2VybmluZ1RhYmxlcyIsImdldEtlcm5pbmdWYWx1ZSIsImtlcm5pbmdMb29rdXBzIiwibGVmdEluZGV4IiwicmlnaHRJbmRleCIsImNvdkluZGV4IiwicG9zRm9ybWF0IiwicGFpclNldCIsInBhaXJTZXRzIiwicGFpciIsInNlY29uZEdseXBoIiwidmFsdWUxIiwiY2xhc3MxIiwiY2xhc3NEZWYxIiwiY2xhc3MyIiwiY2xhc3NEZWYyIiwicGFpciQxIiwiY2xhc3NSZWNvcmRzIiwiZ3BvcyIsImdldFNpbmdsZSIsInN1YnN0aXR1dGlvbnMiLCJsb29rdXBUYWJsZXMiLCJpZHgiLCJnZXRNdWx0aXBsZSIsInJlcGxhY2VtZW50cyIsImdldEFsdGVybmF0ZXMiLCJhbHRlcm5hdGVzIiwiZ2V0TGlnYXR1cmVzIiwibGlnYXR1cmVzIiwibGlnU2V0IiwibGlnIiwiYWRkU2luZ2xlIiwic3Vic3RpdHV0aW9uIiwiY292ZXJhZ2VHbHlwaCIsImFkZE11bHRpcGxlIiwiYWRkQWx0ZXJuYXRlIiwiYWRkTGlnYXR1cmUiLCJsaWdDb21wb25lbnRzIiwibGlnYXR1cmVUYWJsZSIsImdldEZlYXR1cmUiLCJ0ZXN0IiwiaW5zdHJ1Y3Rpb25UYWJsZSIsImV4ZWNHbHlwaCIsImV4ZWNDb21wb25lbnQiLCJnbHlmIiwibG9jYSIsInBhcnNlR2x5ZlRhYmxlT25Mb3dNZW1vcnkiLCJwYXJzZUdseWZUYWJsZUFsbCIsIkhpbnRpbmciLCJfZnBnbVN0YXRlIiwiX3ByZXBTdGF0ZSIsIl9lcnJvclN0YXRlIiwicm91bmRPZmYiLCJyb3VuZFRvR3JpZCIsInJvdW5kVG9Eb3VibGVHcmlkIiwicm91bmRUb0hhbGZHcmlkIiwicm91bmRVcFRvR3JpZCIsInJvdW5kRG93blRvR3JpZCIsInJvdW5kU3VwZXIiLCJwZXJpb2QiLCJzclBlcmlvZCIsInBoYXNlIiwic3JQaGFzZSIsInNyVGhyZXNob2xkIiwidHJ1bmMiLCJ4VW5pdFZlY3RvciIsInhvIiwiaW50ZXJwb2xhdGUiLCJycDEiLCJycDIiLCJwdiIsImRvMSIsImRvMiIsImRvYTEiLCJkb2EyIiwiZG0xIiwiZG0yIiwic2V0UmVsYXRpdmUiLCJub3JtYWxTbG9wZSIsIk5FR0FUSVZFX0lORklOSVRZIiwicnAiLCJvcmciLCJycHgiLCJycHkiLCJ5byIsInJwZHgiLCJycGR5Iiwic2xvcGUiLCJ0b3VjaCIsInhUb3VjaGVkIiwidG91Y2hlZCIsInVudG91Y2giLCJ5VW5pdFZlY3RvciIsIlBPU0lUSVZFX0lORklOSVRZIiwieVRvdWNoZWQiLCJVbml0VmVjdG9yIiwiZnJlZXplIiwiZ2V0VW5pdFZlY3RvciIsIkhQb2ludCIsInByZXZQb2ludE9uQ29udG91ciIsIm5leHRQb2ludE9uQ29udG91ciIsInByZXZlbnRFeHRlbnNpb25zIiwicHZucyIsImZ2cyIsIm5leHRUb3VjaGVkIiwicHJldlRvdWNoZWQiLCJIUFplcm8iLCJkZWZhdWx0U3RhdGUiLCJjdkN1dEluIiwiZGVsdGFCYXNlIiwiZGVsdGFTaGlmdCIsIm1pbkRpcyIsImF1dG9GbGlwIiwiU3RhdGUiLCJlbnYiLCJwcm9nIiwienAwIiwienAxIiwienAyIiwicnAwIiwiZnYiLCJkcHYiLCJpbml0VFpvbmUiLCJzdGF0ZSIsInRab25lIiwiZ1pvbmUiLCJoYW5kbGVFbHNlIiwiaW5zIiwiaXAiLCJuZXN0aW5nIiwiU1ZUQ0EiLCJERUJVRyIsInN0ZXAiLCJTUFZUQ0EiLCJTRlZUQ0EiLCJTUFZUTCIsInAyaSIsInAxaSIsIlNGVlRMIiwiUE9QIiwiTURBUCIsInBpIiwiSVVQIiwiY3AiLCJwcCIsIm5wIiwicExlbiIsIlNIUCIsInJwaSIsIlNIQyIsImNpIiwic3AiLCJTSFoiLCJNU0lSUCIsIk1JQVAiLCJjdiIsImN2dCIsIkdDIiwiTUQiLCJwaTIiLCJwaTEiLCJERUxUQVAxMjMiLCJwcGVtIiwiZHMiLCJST1VORCIsIkRFTFRBQzEyMyIsIlNEUFZUTCIsIlBVU0hCIiwiUFVTSFciLCJNRFJQX01JUlAiLCJpbmRpcmVjdCIsInNldFJwMCIsImtlZXBEIiwicm8iLCJvZCIsImN2dGUiLCJycDBpIiwibWQiLCJUb2tlbiIsImNoYXIiLCJhY3RpdmVTdGF0ZSIsIkNvbnRleHRSYW5nZSIsInN0YXJ0SW5kZXgiLCJjb250ZXh0TmFtZSIsIkNvbnRleHRDaGVja2VyIiwiY2hlY2tTdGFydCIsImNoZWNrRW5kIiwib3BlblJhbmdlIiwiQ29udGV4dFBhcmFtcyIsImNvbnRleHQiLCJjdXJyZW50SW5kZXgiLCJjdXJyZW50IiwiRXZlbnQiLCJldmVudElkIiwic3Vic2NyaWJlcnMiLCJpbml0aWFsaXplQ29yZUV2ZW50cyIsImV2ZW50cyIsInRoaXMkMSIsImNvcmVFdmVudHMiLCJldmVudCIsInN1YnNjcmliZSIsInVwZGF0ZUNvbnRleHRzUmFuZ2VzIiwiVG9rZW5pemVyIiwidG9rZW5zIiwicmVnaXN0ZXJlZENvbnRleHRzIiwiY29udGV4dENoZWNrZXJzIiwicmVnaXN0ZXJlZE1vZGlmaWVycyIsImlzQXJhYmljQ2hhciIsImlzSXNvbGF0ZWRBcmFiaWNDaGFyIiwiaXNUYXNoa2VlbEFyYWJpY0NoYXIiLCJpc0xhdGluQ2hhciIsIkZlYXR1cmVRdWVyeSIsIlN1YnN0aXR1dGlvbkFjdGlvbiIsImFjdGlvbiIsImxvb2t1cENvdmVyYWdlIiwic2luZ2xlU3Vic3RpdHV0aW9uRm9ybWF0MSIsInNpbmdsZVN1YnN0aXR1dGlvbkZvcm1hdDIiLCJzdWJzdGl0dXRlSW5kZXgiLCJsb29rdXBDb3ZlcmFnZUxpc3QiLCJjb3ZlcmFnZUxpc3QiLCJjb250ZXh0UGFyYW1zIiwibG9va3VwTGlzdCIsImxvb2t1cEluZGV4IiwiY2hhaW5pbmdTdWJzdGl0dXRpb25Gb3JtYXQzIiwibG9va3Vwc0NvdW50IiwiaW5wdXRMb29rdXBzIiwibG9va2FoZWFkT2Zmc2V0IiwibG9va2FoZWFkQ29udGV4dCIsImxvb2thaGVhZFBhcmFtcyIsImxvb2thaGVhZExvb2t1cHMiLCJiYWNrdHJhY2tDb250ZXh0IiwicmV2ZXJzZSIsImJhY2t0cmFja1BhcmFtcyIsImJhY2t0cmFja0xvb2t1cHMiLCJnZXRMb29rdXBCeUluZGV4Iiwic3VidGFibGUkMSIsImdldExvb2t1cE1ldGhvZCIsImdldFN1YnN0aXR1dGlvblR5cGUiLCJsaWdhdHVyZVN1YnN0aXR1dGlvbkZvcm1hdDEiLCJsaWdTZXRJbmRleCIsImRlY29tcG9zaXRpb25TdWJzdGl0dXRpb25Gb3JtYXQxIiwicHJlcFN0YXRlIiwiZnBnbVN0YXRlIiwiZnBnbSIsImZ1bmNzIiwicHJlcCIsIm9DdnQiLCJjZyIsImd6IiwiY2MiLCJnTGVuIiwiaW5oaWJpdEdyaWRGaXQiLCJiaW5kIiwicGEwaSIsInBhMWkiLCJwYjBpIiwicGIxaSIsInBhMCIsInBhMSIsInBiMCIsInBiMSIsIngzIiwieTMiLCJ4NCIsInk0IiwiZjEiLCJmMiIsImNpcCIsImNwcm9nIiwiaXBCZWdpbiIsInJwMWkiLCJycDJpIiwic3RvcmUiLCJlMiIsImUxIiwic2VsIiwiaWdub3JlQ3Z0Iiwic2V0U3RhdGUiLCJnZXRTdGF0ZSIsInN0YXRlSWQiLCJpbmJvdW5kSW5kZXgiLCJjb21wb3NlUlVEIiwiUlVEcyIsIlJVRCIsImhhc0ZBSUxPYmplY3QiLCJvYmoiLCJldmVyeSIsIkZBSUwiLCJyZXBvcnQiLCJmaWx0ZXIiLCJkaXNwYXRjaCIsInJlcGxhY2VSYW5nZSIsInNpbGVudCIsImlzVG9rZW5UeXBlIiwidG9rZW4iLCJyZXBsYWNlZCIsInJlcGxhY2VUb2tlbiIsInJlbW92ZVJhbmdlIiwicmVtb3ZlVG9rZW4iLCJpbnNlcnRUb2tlbiIsInJlZ2lzdGVyTW9kaWZpZXIiLCJtb2RpZmllcklkIiwiY29uZGl0aW9uIiwibW9kaWZpZXIiLCJuZXdUb2tlbiIsImNvbmRpdGlvblBhcmFtcyIsIm1vZGlmaWVyUGFyYW1zIiwibmV3U3RhdGVWYWx1ZSIsImV2ZW50SGFuZGxlciIsInVuc3Vic2NyaWJlIiwic3Vic0lkIiwic2V0Q3VycmVudEluZGV4IiwicmFuZ2VUb1RleHQiLCJnZXRSYW5nZVRva2VucyIsImpvaW4iLCJnZXRUZXh0IiwiZ2V0Q29udGV4dCIsIm9uIiwiZXZlbnROYW1lIiwiYXJncyIsInN1YnNjcmliZXIiLCJyZWdpc3RlckNvbnRleHRDaGVja2VyIiwiY29udGV4dFN0YXJ0Q2hlY2siLCJjb250ZXh0RW5kQ2hlY2siLCJlbmRJbmRleCIsImdldENvbnRleHRSYW5nZXMiLCJyZXNldENvbnRleHRzUmFuZ2VzIiwicnVuQ29udGV4dENoZWNrIiwic2V0RW5kT2Zmc2V0IiwicmFuZ2VJZCIsImNvbnRleHRDaGVja2VyIiwidG9rZW5pemUiLCJmcm9tIiwiZ2V0RGVmYXVsdFNjcmlwdEZlYXR1cmVzSW5kZXhlcyIsImdldFNjcmlwdEZlYXR1cmVzSW5kZXhlcyIsInNjcmlwdFRhZyIsIm1hcFRhZ3NUb0ZlYXR1cmVzIiwiZ2V0U2NyaXB0RmVhdHVyZXMiLCJmZWF0dXJlc0luZGV4ZXMiLCJsb29rdXBGZWF0dXJlIiwicXVlcnkiLCJnZXRGZWF0dXJlTG9va3VwcyIsImdldExvb2t1cFN1YnRhYmxlcyIsInN1YnN0VHlwZSIsInN1cHBvcnRzIiwic3VwcG9ydGVkU2NyaXB0Iiwic3VwcG9ydGVkRmVhdHVyZSIsInNvbWUiLCJzY3JpcHRGZWF0dXJlcyIsImFyYWJpY1dvcmRDaGVjayIsInN0YXJ0Q2hlY2siLCJwcmV2Q2hhciIsImVuZENoZWNrIiwibmV4dENoYXIiLCJhcmFiaWNTZW50ZW5jZUNoZWNrIiwibmV4dElzV2hpdGVzcGFjZSIsIlNVQlNUSVRVVElPTlMiLCJzdWJzdCIsImNvbXBzQ291bnQiLCJhcHBseVN1YnN0aXR1dGlvbiIsImFyYWJpY1ByZXNlbnRhdGlvbkZvcm1zIiwiZmVhdHVyZXNUYWdzIiwidG9rZW5pemVyIiwiY2hhckNvbnRleHRQYXJhbXMiLCJDT05ORUNUIiwiaXNvbGF0ZWQiLCJ0YXNoa2VlbCIsIndpbGxDb25uZWN0UHJldiIsIndpbGxDb25uZWN0TmV4dCIsImluZm8iLCJnZXRDb250ZXh0UGFyYW1zIiwiYXJhYmljUmVxdWlyZWRMaWdhdHVyZXMiLCJsYXRpbldvcmRDaGVjayIsImdldENvbnRleHRQYXJhbXMkMSIsImxhdGluTGlnYXR1cmUiLCJCaWRpIiwiYmFzZURpciIsImNoZWNrSWQiLCJjb250ZXh0Q2hlY2tzIiwidG9rZW5pemVUZXh0IiwicmV2ZXJzZUFyYWJpY1NlbnRlbmNlcyIsInJhbmdlVG9rZW5zIiwiY2hlY2tHbHlwaEluZGV4U3RhdHVzIiwiYXBwbHlBcmFiaWNQcmVzZW50YXRpb25Gb3JtcyIsImFwcGx5QXJhYmljUmVxdWlyZUxpZ2F0dXJlcyIsImFwcGx5TGF0aW5MaWdhdHVyZXMiLCJGb250IiwiZW1wdHkiLCJzdHlsZU5hbWUiLCJkZXNpZ25lciIsImRlc2lnbmVyVVJMIiwibWFudWZhY3R1cmVyIiwibWFudWZhY3R1cmVyVVJMIiwibGljZW5zZSIsImxpY2Vuc2VVUkwiLCJjb3B5cmlnaHQiLCJ0cmFkZW1hcmsiLCJ3ZWlnaHRDbGFzcyIsInVzV2VpZ2h0Q2xhc3NlcyIsIk1FRElVTSIsIndpZHRoQ2xhc3MiLCJ1c1dpZHRoQ2xhc3NlcyIsImZzU2VsZWN0aW9uVmFsdWVzIiwiUkVHVUxBUiIsInN1cHBvcnRlZCIsIl9oaW50aW5nIiwib3V0bGluZXNGb3JtYXQiLCJhZGROYW1lIiwibmFtZVN0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJuYW1lS2V5IiwibWFrZUZ2YXJBeGlzIiwibWluVmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJtYXhWYWx1ZSIsInBhcnNlRnZhckF4aXMiLCJtYWtlRnZhckluc3RhbmNlIiwiaW5zdCIsImF4ZXMiLCJheGlzVGFnIiwiY29vcmRpbmF0ZXMiLCJwYXJzZUZ2YXJJbnN0YW5jZSIsInNldFRleHQiLCJyZWdpc3RlckZlYXR1cmVzIiwic3VwcG9ydGVkVGFncyIsImFwcGx5RmVhdHVyZXMiLCJjaGVja0NvbnRleHRSZWFkeSIsImNvbnRleHRJZCIsImFwcGx5RmVhdHVyZXNUb0NvbnRleHRzIiwicHJvY2Vzc1RleHQiLCJnZXRCaWRpVGV4dCIsImdldFRleHRHbHlwaHMiLCJpbmRleGVzIiwiZGVsZXRlZCIsImNoYXJUb0dseXBoIiwidXBkYXRlRmVhdHVyZXMiLCJkZWZhdWx0UmVuZGVyT3B0aW9ucyIsInN0cmluZ1RvR2x5cGhzIiwiYmlkaSIsIm5vdGRlZiIsIm5hbWVUb0dseXBoIiwibGVmdEdseXBoIiwicmlnaHRHbHlwaCIsImdwb3NLZXJuaW5nIiwia2VybmluZ1BhaXJzIiwia2VybmluZyIsImZvckVhY2hHbHlwaCIsImNhbGxiYWNrIiwibGV0dGVyU3BhY2luZyIsInRyYWNraW5nIiwiZnVsbFBhdGgiLCJnWCIsImdZIiwiZ0ZvbnRTaXplIiwiZ2x5cGhQYXRoIiwiZ2V0UGF0aHMiLCJnbHlwaFBhdGhzIiwiZ2V0QWR2YW5jZVdpZHRoIiwidmFsaWRhdGUiLCJfdGhpcyIsImFzc2VydE5hbWVQcmVzZW50IiwiZW5nbGlzaE5hbWUiLCJ0cmltIiwidG9UYWJsZXMiLCJ0b0J1ZmZlciIsInRvQXJyYXlCdWZmZXIiLCJpbnRBcnJheSIsImRvd25sb2FkIiwiZmlsZU5hbWUiLCJhcnJheUJ1ZmZlciIsIndpbmRvdyIsIlVSTCIsIndlYmtpdFVSTCIsImJsb2IiLCJCbG9iIiwibGluayIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwiY3JlYXRlT2JqZWN0VVJMIiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZnMiLCJCdWZmZXIiLCJhcnJheUJ1ZmZlclRvTm9kZUJ1ZmZlciIsIndyaXRlRmlsZVN5bmMiLCJJVEFMSUMiLCJVTkRFUlNDT1JFIiwiTkVHQVRJVkUiLCJPVVRMSU5FRCIsIlNUUklLRU9VVCIsIkJPTEQiLCJVU0VSX1RZUE9fTUVUUklDUyIsIldXUyIsIk9CTElRVUUiLCJVTFRSQV9DT05ERU5TRUQiLCJFWFRSQV9DT05ERU5TRUQiLCJDT05ERU5TRUQiLCJTRU1JX0NPTkRFTlNFRCIsIlNFTUlfRVhQQU5ERUQiLCJFWFBBTkRFRCIsIkVYVFJBX0VYUEFOREVEIiwiVUxUUkFfRVhQQU5ERUQiLCJUSElOIiwiRVhUUkFfTElHSFQiLCJMSUdIVCIsIk5PUk1BTCIsIlNFTUlfQk9MRCIsIkVYVFJBX0JPTEQiLCJCTEFDSyIsImZ2YXIiLCJpbnN0YW5jZXMiLCJvZmZzZXRUb0RhdGEiLCJheGlzQ291bnQiLCJheGlzU2l6ZSIsImluc3RhbmNlQ291bnQiLCJpbnN0YW5jZVNpemUiLCJpbnN0YW5jZVN0YXJ0IiwiYXR0YWNoTGlzdCIsImF0dGFjaFBvaW50cyIsImNhcmV0VmFsdWUiLCJjb29yZGluYXRlIiwicG9pbnRpbmRleCIsImxpZ0NhcmV0TGlzdCIsImxpZ0dseXBocyIsIm1hcmtHbHlwaFNldHMiLCJnZGVmIiwibWFya0F0dGFjaENsYXNzRGVmIiwic3VidGFibGVQYXJzZXJzJDEiLCJwb3Nmb3JtYXQiLCJ2YWx1ZUZvcm1hdDEiLCJ2YWx1ZUZvcm1hdDIiLCJ2YWx1ZTIiLCJjbGFzczFDb3VudCIsImNsYXNzMkNvdW50Iiwic3VidGFibGVNYWtlcnMkMSIsImtlcm4iLCJwYWlycyIsInN1YnRhYmxlVmVyc2lvbiIsIm5QYWlycyIsInBhcnNlV2luZG93c0tlcm5UYWJsZSIsInBhcnNlTWFjS2VyblRhYmxlIiwic2hvcnRWZXJzaW9uIiwicGFyc2VGbiIsImdseXBoT2Zmc2V0cyIsImdseXBoT2Zmc2V0IiwibG9hZEZyb21GaWxlIiwicmVhZEZpbGUiLCJlcnIiLCJsb2FkRnJvbVVybCIsInVybCIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsInJlc3BvbnNlVHlwZSIsIm9ubG9hZCIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsIm9uZXJyb3IiLCJzZW5kIiwicGFyc2VPcGVuVHlwZVRhYmxlRW50cmllcyIsInRhYmxlRW50cmllcyIsImNoZWNrc3VtIiwiY29tcHJlc3Npb24iLCJ1bmNvbXByZXNzVGFibGUiLCJ0YWJsZUVudHJ5IiwiaW5CdWZmZXIiLCJjb21wcmVzc2VkTGVuZ3RoIiwib3V0QnVmZmVyIiwicGFyc2VCdWZmZXIiLCJjZmZUYWJsZUVudHJ5IiwiZnZhclRhYmxlRW50cnkiLCJnbHlmVGFibGVFbnRyeSIsImdkZWZUYWJsZUVudHJ5IiwiZ3Bvc1RhYmxlRW50cnkiLCJnc3ViVGFibGVFbnRyeSIsImhtdHhUYWJsZUVudHJ5Iiwia2VyblRhYmxlRW50cnkiLCJsb2NhVGFibGVFbnRyeSIsIm5hbWVUYWJsZUVudHJ5IiwibWV0YVRhYmxlRW50cnkiLCJzaWduYXR1cmUiLCJmbGF2b3IiLCJjb21wTGVuZ3RoIiwib3JpZ0xlbmd0aCIsInBhcnNlV09GRlRhYmxlRW50cmllcyIsImxvY2FUYWJsZSIsImxvY2FPZmZzZXRzIiwiZ2x5ZlRhYmxlIiwiY2hhckNvZGVzIiwiYWRkR2x5cGhOYW1lc1RvVW5pY29kZU1hcCIsImFkZEdseXBoTmFtZXNBbGwiLCJhZGRHbHlwaE5hbWVzIiwia2VyblRhYmxlIiwiZ2RlZlRhYmxlIiwiZ3Bvc1RhYmxlIiwiZ3N1YlRhYmxlIiwiZnZhclRhYmxlIiwibG9hZCIsImxvYWRGbiIsImlzVXJsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJsb2FkU3luYyIsInJlYWRGaWxlU3luYyIsIl9fcHJvdG9fXyIsIl9wYXJzZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJPIiwiY2h1bmtJZHMiLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsImZ1bGZpbGxlZCIsImRlZmluaXRpb24iLCJwcm9wIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpbnN0YWxsZWRDaHVua3MiLCJjaHVua0lkIiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sInNvdXJjZVJvb3QiOiIifQ==