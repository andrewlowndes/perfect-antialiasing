/*! For license information please see shared.js.LICENSE.txt */
(()=>{var e,t={187:e=>{"use strict";function t(e,t,o){o=o||2;var s,i,u,p,h,d,v,g=t&&t.length,m=g?t[0]*o:e.length,y=r(e,0,m,o,!0),b=[];if(!y||y.next===y.prev)return b;if(g&&(y=function(e,t,a,o){var s,i,u,p=[];for(s=0,i=t.length;s<i;s++)(u=r(e,t[s]*o,s<i-1?t[s+1]*o:e.length,o,!1))===u.next&&(u.steiner=!0),p.push(f(u));for(p.sort(l),s=0;s<p.length;s++)a=n(a=c(p[s],a),a.next);return a}(e,t,y,o)),e.length>80*o){s=u=e[0],i=p=e[1];for(var x=o;x<m;x+=o)(h=e[x])<s&&(s=h),(d=e[x+1])<i&&(i=d),h>u&&(u=h),d>p&&(p=d);v=0!==(v=Math.max(u-s,p-i))?1/v:0}return a(y,b,o,s,i,v),b}function r(e,t,r,n,a){var o,s;if(a===O(e,t,r,n)>0)for(o=t;o<r;o+=n)s=T(o,e[o],e[o+1],s);else for(o=r-n;o>=t;o-=n)s=T(o,e[o],e[o+1],s);return s&&m(s,s.next)&&(U(s),s=s.next),s}function n(e,t){if(!e)return e;t||(t=e);var r,n=e;do{if(r=!1,n.steiner||!m(n,n.next)&&0!==g(n.prev,n,n.next))n=n.next;else{if(U(n),(n=t=n.prev)===n.next)break;r=!0}}while(r||n!==t);return t}function a(e,t,r,l,c,p,f){if(e){!f&&p&&function(e,t,r,n){var a=e;do{null===a.z&&(a.z=h(a.x,a.y,t,r,n)),a.prevZ=a.prev,a.nextZ=a.next,a=a.next}while(a!==e);a.prevZ.nextZ=null,a.prevZ=null,function(e){var t,r,n,a,o,s,i,u,l=1;do{for(r=e,e=null,o=null,s=0;r;){for(s++,n=r,i=0,t=0;t<l&&(i++,n=n.nextZ);t++);for(u=l;i>0||u>0&&n;)0!==i&&(0===u||!n||r.z<=n.z)?(a=r,r=r.nextZ,i--):(a=n,n=n.nextZ,u--),o?o.nextZ=a:e=a,a.prevZ=o,o=a;r=n}o.nextZ=null,l*=2}while(s>1)}(a)}(e,l,c,p);for(var d,v,g=e;e.prev!==e.next;)if(d=e.prev,v=e.next,p?s(e,l,c,p):o(e))t.push(d.i/r),t.push(e.i/r),t.push(v.i/r),U(e),e=v.next,g=v.next;else if((e=v)===g){f?1===f?a(e=i(n(e),t,r),t,r,l,c,p,2):2===f&&u(e,t,r,l,c,p):a(n(e),t,r,l,c,p,1);break}}}function o(e){var t=e.prev,r=e,n=e.next;if(g(t,r,n)>=0)return!1;for(var a=e.next.next;a!==e.prev;){if(d(t.x,t.y,r.x,r.y,n.x,n.y,a.x,a.y)&&g(a.prev,a,a.next)>=0)return!1;a=a.next}return!0}function s(e,t,r,n){var a=e.prev,o=e,s=e.next;if(g(a,o,s)>=0)return!1;for(var i=a.x<o.x?a.x<s.x?a.x:s.x:o.x<s.x?o.x:s.x,u=a.y<o.y?a.y<s.y?a.y:s.y:o.y<s.y?o.y:s.y,l=a.x>o.x?a.x>s.x?a.x:s.x:o.x>s.x?o.x:s.x,c=a.y>o.y?a.y>s.y?a.y:s.y:o.y>s.y?o.y:s.y,p=h(i,u,t,r,n),f=h(l,c,t,r,n),v=e.prevZ,m=e.nextZ;v&&v.z>=p&&m&&m.z<=f;){if(v!==e.prev&&v!==e.next&&d(a.x,a.y,o.x,o.y,s.x,s.y,v.x,v.y)&&g(v.prev,v,v.next)>=0)return!1;if(v=v.prevZ,m!==e.prev&&m!==e.next&&d(a.x,a.y,o.x,o.y,s.x,s.y,m.x,m.y)&&g(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;v&&v.z>=p;){if(v!==e.prev&&v!==e.next&&d(a.x,a.y,o.x,o.y,s.x,s.y,v.x,v.y)&&g(v.prev,v,v.next)>=0)return!1;v=v.prevZ}for(;m&&m.z<=f;){if(m!==e.prev&&m!==e.next&&d(a.x,a.y,o.x,o.y,s.x,s.y,m.x,m.y)&&g(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function i(e,t,r){var a=e;do{var o=a.prev,s=a.next.next;!m(o,s)&&y(o,a,a.next,s)&&S(o,s)&&S(s,o)&&(t.push(o.i/r),t.push(a.i/r),t.push(s.i/r),U(a),U(a.next),a=e=s),a=a.next}while(a!==e);return n(a)}function u(e,t,r,o,s,i){var u=e;do{for(var l=u.next.next;l!==u.prev;){if(u.i!==l.i&&v(u,l)){var c=M(u,l);return u=n(u,u.next),c=n(c,c.next),a(u,t,r,o,s,i),void a(c,t,r,o,s,i)}l=l.next}u=u.next}while(u!==e)}function l(e,t){return e.x-t.x}function c(e,t){var r=function(e,t){var r,n=t,a=e.x,o=e.y,s=-1/0;do{if(o<=n.y&&o>=n.next.y&&n.next.y!==n.y){var i=n.x+(o-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(i<=a&&i>s){if(s=i,i===a){if(o===n.y)return n;if(o===n.next.y)return n.next}r=n.x<n.next.x?n:n.next}}n=n.next}while(n!==t);if(!r)return null;if(a===s)return r;var u,l=r,c=r.x,h=r.y,f=1/0;n=r;do{a>=n.x&&n.x>=c&&a!==n.x&&d(o<h?a:s,o,c,h,o<h?s:a,o,n.x,n.y)&&(u=Math.abs(o-n.y)/(a-n.x),S(n,e)&&(u<f||u===f&&(n.x>r.x||n.x===r.x&&p(r,n)))&&(r=n,f=u)),n=n.next}while(n!==l);return r}(e,t);if(!r)return t;var a=M(r,e),o=n(r,r.next);return n(a,a.next),t===r?o:t}function p(e,t){return g(e.prev,e,t.prev)<0&&g(t.next,e,e.next)<0}function h(e,t,r,n,a){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-r)*a)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*a)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function f(e){var t=e,r=e;do{(t.x<r.x||t.x===r.x&&t.y<r.y)&&(r=t),t=t.next}while(t!==e);return r}function d(e,t,r,n,a,o,s,i){return(a-s)*(t-i)-(e-s)*(o-i)>=0&&(e-s)*(n-i)-(r-s)*(t-i)>=0&&(r-s)*(o-i)-(a-s)*(n-i)>=0}function v(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var r=e;do{if(r.i!==e.i&&r.next.i!==e.i&&r.i!==t.i&&r.next.i!==t.i&&y(r,r.next,e,t))return!0;r=r.next}while(r!==e);return!1}(e,t)&&(S(e,t)&&S(t,e)&&function(e,t){var r=e,n=!1,a=(e.x+t.x)/2,o=(e.y+t.y)/2;do{r.y>o!=r.next.y>o&&r.next.y!==r.y&&a<(r.next.x-r.x)*(o-r.y)/(r.next.y-r.y)+r.x&&(n=!n),r=r.next}while(r!==e);return n}(e,t)&&(g(e.prev,e,t.prev)||g(e,t.prev,t))||m(e,t)&&g(e.prev,e,e.next)>0&&g(t.prev,t,t.next)>0)}function g(e,t,r){return(t.y-e.y)*(r.x-t.x)-(t.x-e.x)*(r.y-t.y)}function m(e,t){return e.x===t.x&&e.y===t.y}function y(e,t,r,n){var a=x(g(e,t,r)),o=x(g(e,t,n)),s=x(g(r,n,e)),i=x(g(r,n,t));return a!==o&&s!==i||!(0!==a||!b(e,r,t))||!(0!==o||!b(e,n,t))||!(0!==s||!b(r,e,n))||!(0!==i||!b(r,t,n))}function b(e,t,r){return t.x<=Math.max(e.x,r.x)&&t.x>=Math.min(e.x,r.x)&&t.y<=Math.max(e.y,r.y)&&t.y>=Math.min(e.y,r.y)}function x(e){return e>0?1:e<0?-1:0}function S(e,t){return g(e.prev,e,e.next)<0?g(e,t,e.next)>=0&&g(e,e.prev,t)>=0:g(e,t,e.prev)<0||g(e,e.next,t)<0}function M(e,t){var r=new k(e.i,e.x,e.y),n=new k(t.i,t.x,t.y),a=e.next,o=t.prev;return e.next=t,t.prev=e,r.next=a,a.prev=r,n.next=r,r.prev=n,o.next=n,n.prev=o,n}function T(e,t,r,n){var a=new k(e,t,r);return n?(a.next=n.next,a.prev=n,n.next.prev=a,n.next=a):(a.prev=a,a.next=a),a}function U(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function k(e,t,r){this.i=e,this.x=t,this.y=r,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function O(e,t,r,n){for(var a=0,o=t,s=r-n;o<r;o+=n)a+=(e[s]-e[o])*(e[o+1]+e[s+1]),s=o;return a}e.exports=t,e.exports.default=t,t.deviation=function(e,t,r,n){var a=t&&t.length,o=a?t[0]*r:e.length,s=Math.abs(O(e,0,o,r));if(a)for(var i=0,u=t.length;i<u;i++){var l=t[i]*r,c=i<u-1?t[i+1]*r:e.length;s-=Math.abs(O(e,l,c,r))}var p=0;for(i=0;i<n.length;i+=3){var h=n[i]*r,f=n[i+1]*r,d=n[i+2]*r;p+=Math.abs((e[h]-e[d])*(e[f+1]-e[h+1])-(e[h]-e[f])*(e[d+1]-e[h+1]))}return 0===s&&0===p?0:Math.abs((p-s)/s)},t.flatten=function(e){for(var t=e[0][0].length,r={vertices:[],holes:[],dimensions:t},n=0,a=0;a<e.length;a++){for(var o=0;o<e[a].length;o++)for(var s=0;s<t;s++)r.vertices.push(e[a][o][s]);a>0&&(n+=e[a-1].length,r.holes.push(n))}return r}},887:(e,t,r)=>{"use strict";r.r(t),r.d(t,{glMatrix:()=>n,mat2:()=>a,mat2d:()=>o,mat3:()=>s,mat4:()=>i,quat:()=>c,quat2:()=>p,vec2:()=>h,vec3:()=>u,vec4:()=>l});var n={};r.r(n),r.d(n,{ARRAY_TYPE:()=>d,EPSILON:()=>f,RANDOM:()=>v,equals:()=>b,setMatrixArrayType:()=>g,toRadian:()=>y});var a={};r.r(a),r.d(a,{LDU:()=>G,add:()=>F,adjoint:()=>w,clone:()=>S,copy:()=>M,create:()=>x,determinant:()=>R,equals:()=>z,exactEquals:()=>H,frob:()=>P,fromRotation:()=>I,fromScaling:()=>A,fromValues:()=>U,identity:()=>T,invert:()=>E,mul:()=>_,multiply:()=>L,multiplyScalar:()=>q,multiplyScalarAndAdd:()=>W,rotate:()=>C,scale:()=>D,set:()=>k,str:()=>B,sub:()=>X,subtract:()=>N,transpose:()=>O});var o={};r.r(o),r.d(o,{add:()=>le,clone:()=>Z,copy:()=>j,create:()=>V,determinant:()=>$,equals:()=>de,exactEquals:()=>fe,frob:()=>ue,fromRotation:()=>ae,fromScaling:()=>oe,fromTranslation:()=>se,fromValues:()=>Q,identity:()=>Y,invert:()=>J,mul:()=>ve,multiply:()=>ee,multiplyScalar:()=>pe,multiplyScalarAndAdd:()=>he,rotate:()=>te,scale:()=>re,set:()=>K,str:()=>ie,sub:()=>ge,subtract:()=>ce,translate:()=>ne});var s={};r.r(s),r.d(s,{add:()=>ze,adjoint:()=>Oe,clone:()=>be,copy:()=>xe,create:()=>me,determinant:()=>Ee,equals:()=>Ve,exactEquals:()=>Xe,frob:()=>He,fromMat2d:()=>Be,fromMat4:()=>ye,fromQuat:()=>Pe,fromRotation:()=>Ie,fromScaling:()=>Ae,fromTranslation:()=>De,fromValues:()=>Se,identity:()=>Te,invert:()=>ke,mul:()=>Ze,multiply:()=>we,multiplyScalar:()=>We,multiplyScalarAndAdd:()=>_e,normalFromMat4:()=>Ge,projection:()=>Fe,rotate:()=>Le,scale:()=>Ce,set:()=>Me,str:()=>Ne,sub:()=>je,subtract:()=>qe,translate:()=>Re,transpose:()=>Ue});var i={};r.r(i),r.d(i,{add:()=>At,adjoint:()=>nt,clone:()=>Qe,copy:()=>Ke,create:()=>Ye,determinant:()=>at,equals:()=>Nt,exactEquals:()=>Ft,frob:()=>It,fromQuat:()=>kt,fromQuat2:()=>bt,fromRotation:()=>dt,fromRotationTranslation:()=>yt,fromRotationTranslationScale:()=>Tt,fromRotationTranslationScaleOrigin:()=>Ut,fromScaling:()=>ft,fromTranslation:()=>ht,fromValues:()=>Je,fromXRotation:()=>vt,fromYRotation:()=>gt,fromZRotation:()=>mt,frustum:()=>Ot,getRotation:()=>Mt,getScaling:()=>St,getTranslation:()=>xt,identity:()=>et,invert:()=>rt,lookAt:()=>Lt,mul:()=>Ht,multiply:()=>ot,multiplyScalar:()=>Pt,multiplyScalarAndAdd:()=>Gt,ortho:()=>Rt,perspective:()=>Et,perspectiveFromFieldOfView:()=>wt,rotate:()=>ut,rotateX:()=>lt,rotateY:()=>ct,rotateZ:()=>pt,scale:()=>it,set:()=>$e,str:()=>Dt,sub:()=>zt,subtract:()=>Bt,targetTo:()=>Ct,translate:()=>st,transpose:()=>tt});var u={};r.r(u),r.d(u,{add:()=>jt,angle:()=>Tr,bezier:()=>vr,ceil:()=>Jt,clone:()=>Wt,copy:()=>Vt,create:()=>qt,cross:()=>hr,dist:()=>Dr,distance:()=>or,div:()=>Cr,divide:()=>Kt,dot:()=>pr,equals:()=>Er,exactEquals:()=>Or,floor:()=>$t,forEach:()=>Pr,fromValues:()=>Xt,hermite:()=>dr,inverse:()=>lr,len:()=>Ar,length:()=>_t,lerp:()=>fr,max:()=>tr,min:()=>er,mul:()=>Lr,multiply:()=>Qt,negate:()=>ur,normalize:()=>cr,random:()=>gr,rotateX:()=>xr,rotateY:()=>Sr,rotateZ:()=>Mr,round:()=>rr,scale:()=>nr,scaleAndAdd:()=>ar,set:()=>Zt,sqrDist:()=>Ir,sqrLen:()=>Br,squaredDistance:()=>sr,squaredLength:()=>ir,str:()=>kr,sub:()=>Rr,subtract:()=>Yt,transformMat3:()=>yr,transformMat4:()=>mr,transformQuat:()=>br,zero:()=>Ur});var l={};r.r(l),r.d(l,{add:()=>qr,ceil:()=>Vr,clone:()=>Fr,copy:()=>Hr,create:()=>Gr,cross:()=>un,dist:()=>xn,distance:()=>$r,div:()=>bn,divide:()=>Xr,dot:()=>sn,equals:()=>gn,exactEquals:()=>vn,floor:()=>Zr,forEach:()=>Un,fromValues:()=>Nr,inverse:()=>an,len:()=>Mn,length:()=>tn,lerp:()=>ln,max:()=>Yr,min:()=>jr,mul:()=>yn,multiply:()=>_r,negate:()=>nn,normalize:()=>on,random:()=>cn,round:()=>Qr,scale:()=>Kr,scaleAndAdd:()=>Jr,set:()=>zr,sqrDist:()=>Sn,sqrLen:()=>Tn,squaredDistance:()=>en,squaredLength:()=>rn,str:()=>dn,sub:()=>mn,subtract:()=>Wr,transformMat4:()=>pn,transformQuat:()=>hn,zero:()=>fn});var c={};r.r(c),r.d(c,{add:()=>ta,calculateW:()=>An,clone:()=>Kn,conjugate:()=>zn,copy:()=>$n,create:()=>kn,dot:()=>aa,equals:()=>ha,exactEquals:()=>pa,exp:()=>Bn,fromEuler:()=>Wn,fromMat3:()=>qn,fromValues:()=>Jn,getAngle:()=>Rn,getAxisAngle:()=>wn,identity:()=>On,invert:()=>Hn,len:()=>ia,length:()=>sa,lerp:()=>oa,ln:()=>Pn,mul:()=>ra,multiply:()=>Ln,normalize:()=>ca,pow:()=>Gn,random:()=>Nn,rotateX:()=>Cn,rotateY:()=>Dn,rotateZ:()=>In,rotationTo:()=>fa,scale:()=>na,set:()=>ea,setAxes:()=>va,setAxisAngle:()=>En,slerp:()=>Fn,sqlerp:()=>da,sqrLen:()=>la,squaredLength:()=>ua,str:()=>_n});var p={};r.r(p),r.d(p,{add:()=>Na,clone:()=>ma,conjugate:()=>Va,copy:()=>Ua,create:()=>ga,dot:()=>Wa,equals:()=>eo,exactEquals:()=>$a,fromMat4:()=>Ta,fromRotation:()=>Ma,fromRotationTranslation:()=>xa,fromRotationTranslationValues:()=>ba,fromTranslation:()=>Sa,fromValues:()=>ya,getDual:()=>wa,getReal:()=>Ea,getTranslation:()=>Ca,identity:()=>ka,invert:()=>Xa,len:()=>ja,length:()=>Za,lerp:()=>_a,mul:()=>za,multiply:()=>Ha,normalize:()=>Ka,rotateAroundAxis:()=>Fa,rotateByQuatAppend:()=>Pa,rotateByQuatPrepend:()=>Ga,rotateX:()=>Ia,rotateY:()=>Aa,rotateZ:()=>Ba,scale:()=>qa,set:()=>Oa,setDual:()=>La,setReal:()=>Ra,sqrLen:()=>Qa,squaredLength:()=>Ya,str:()=>Ja,translate:()=>Da});var h={};r.r(h),r.d(h,{add:()=>so,angle:()=>Ao,ceil:()=>co,clone:()=>ro,copy:()=>ao,create:()=>to,cross:()=>Oo,dist:()=>Wo,distance:()=>yo,div:()=>qo,divide:()=>lo,dot:()=>ko,equals:()=>Fo,exactEquals:()=>Go,floor:()=>po,forEach:()=>Vo,fromValues:()=>no,inverse:()=>To,len:()=>No,length:()=>xo,lerp:()=>Eo,max:()=>fo,min:()=>ho,mul:()=>zo,multiply:()=>uo,negate:()=>Mo,normalize:()=>Uo,random:()=>wo,rotate:()=>Io,round:()=>vo,scale:()=>go,scaleAndAdd:()=>mo,set:()=>oo,sqrDist:()=>_o,sqrLen:()=>Xo,squaredDistance:()=>bo,squaredLength:()=>So,str:()=>Po,sub:()=>Ho,subtract:()=>io,transformMat2:()=>Ro,transformMat2d:()=>Lo,transformMat3:()=>Co,transformMat4:()=>Do,zero:()=>Bo});var f=1e-6,d="undefined"!=typeof Float32Array?Float32Array:Array,v=Math.random;function g(e){d=e}var m=Math.PI/180;function y(e){return e*m}function b(e,t){return Math.abs(e-t)<=f*Math.max(1,Math.abs(e),Math.abs(t))}function x(){var e=new d(4);return d!=Float32Array&&(e[1]=0,e[2]=0),e[0]=1,e[3]=1,e}function S(e){var t=new d(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function M(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function T(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e}function U(e,t,r,n){var a=new d(4);return a[0]=e,a[1]=t,a[2]=r,a[3]=n,a}function k(e,t,r,n,a){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e}function O(e,t){if(e===t){var r=t[1];e[1]=t[2],e[2]=r}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e}function E(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=r*o-a*n;return s?(s=1/s,e[0]=o*s,e[1]=-n*s,e[2]=-a*s,e[3]=r*s,e):null}function w(e,t){var r=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=r,e}function R(e){return e[0]*e[3]-e[2]*e[1]}function L(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=r[0],u=r[1],l=r[2],c=r[3];return e[0]=n*i+o*u,e[1]=a*i+s*u,e[2]=n*l+o*c,e[3]=a*l+s*c,e}function C(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=Math.sin(r),u=Math.cos(r);return e[0]=n*u+o*i,e[1]=a*u+s*i,e[2]=n*-i+o*u,e[3]=a*-i+s*u,e}function D(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=r[0],u=r[1];return e[0]=n*i,e[1]=a*i,e[2]=o*u,e[3]=s*u,e}function I(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=n,e[1]=r,e[2]=-r,e[3]=n,e}function A(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e}function B(e){return"mat2("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}function P(e){return Math.hypot(e[0],e[1],e[2],e[3])}function G(e,t,r,n){return e[2]=n[2]/n[0],r[0]=n[0],r[1]=n[1],r[3]=n[3]-e[2]*r[1],[e,t,r]}function F(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function N(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e}function H(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}function z(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=t[0],i=t[1],u=t[2],l=t[3];return Math.abs(r-s)<=f*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(n-i)<=f*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(a-u)<=f*Math.max(1,Math.abs(a),Math.abs(u))&&Math.abs(o-l)<=f*Math.max(1,Math.abs(o),Math.abs(l))}function q(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function W(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e[3]=t[3]+r[3]*n,e}Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});var _=L,X=N;function V(){var e=new d(6);return d!=Float32Array&&(e[1]=0,e[2]=0,e[4]=0,e[5]=0),e[0]=1,e[3]=1,e}function Z(e){var t=new d(6);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}function j(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}function Y(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e}function Q(e,t,r,n,a,o){var s=new d(6);return s[0]=e,s[1]=t,s[2]=r,s[3]=n,s[4]=a,s[5]=o,s}function K(e,t,r,n,a,o,s){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e[4]=o,e[5]=s,e}function J(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=r*o-n*a;return u?(u=1/u,e[0]=o*u,e[1]=-n*u,e[2]=-a*u,e[3]=r*u,e[4]=(a*i-o*s)*u,e[5]=(n*s-r*i)*u,e):null}function $(e){return e[0]*e[3]-e[1]*e[2]}function ee(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=r[0],c=r[1],p=r[2],h=r[3],f=r[4],d=r[5];return e[0]=n*l+o*c,e[1]=a*l+s*c,e[2]=n*p+o*h,e[3]=a*p+s*h,e[4]=n*f+o*d+i,e[5]=a*f+s*d+u,e}function te(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=Math.sin(r),c=Math.cos(r);return e[0]=n*c+o*l,e[1]=a*c+s*l,e[2]=n*-l+o*c,e[3]=a*-l+s*c,e[4]=i,e[5]=u,e}function re(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=r[0],c=r[1];return e[0]=n*l,e[1]=a*l,e[2]=o*c,e[3]=s*c,e[4]=i,e[5]=u,e}function ne(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=r[0],c=r[1];return e[0]=n,e[1]=a,e[2]=o,e[3]=s,e[4]=n*l+o*c+i,e[5]=a*l+s*c+u,e}function ae(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=n,e[1]=r,e[2]=-r,e[3]=n,e[4]=0,e[5]=0,e}function oe(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=t[1],e[4]=0,e[5]=0,e}function se(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=t[0],e[5]=t[1],e}function ie(e){return"mat2d("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+")"}function ue(e){return Math.hypot(e[0],e[1],e[2],e[3],e[4],e[5],1)}function le(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e}function ce(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e}function pe(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e}function he(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e[3]=t[3]+r[3]*n,e[4]=t[4]+r[4]*n,e[5]=t[5]+r[5]*n,e}function fe(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]}function de(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=e[4],i=e[5],u=t[0],l=t[1],c=t[2],p=t[3],h=t[4],d=t[5];return Math.abs(r-u)<=f*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(n-l)<=f*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(a-c)<=f*Math.max(1,Math.abs(a),Math.abs(c))&&Math.abs(o-p)<=f*Math.max(1,Math.abs(o),Math.abs(p))&&Math.abs(s-h)<=f*Math.max(1,Math.abs(s),Math.abs(h))&&Math.abs(i-d)<=f*Math.max(1,Math.abs(i),Math.abs(d))}var ve=ee,ge=ce;function me(){var e=new d(9);return d!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[5]=0,e[6]=0,e[7]=0),e[0]=1,e[4]=1,e[8]=1,e}function ye(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function be(e){var t=new d(9);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function xe(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function Se(e,t,r,n,a,o,s,i,u){var l=new d(9);return l[0]=e,l[1]=t,l[2]=r,l[3]=n,l[4]=a,l[5]=o,l[6]=s,l[7]=i,l[8]=u,l}function Me(e,t,r,n,a,o,s,i,u,l){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e[4]=o,e[5]=s,e[6]=i,e[7]=u,e[8]=l,e}function Te(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Ue(e,t){if(e===t){var r=t[1],n=t[2],a=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=n,e[7]=a}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function ke(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=t[6],l=t[7],c=t[8],p=c*s-i*l,h=-c*o+i*u,f=l*o-s*u,d=r*p+n*h+a*f;return d?(d=1/d,e[0]=p*d,e[1]=(-c*n+a*l)*d,e[2]=(i*n-a*s)*d,e[3]=h*d,e[4]=(c*r-a*u)*d,e[5]=(-i*r+a*o)*d,e[6]=f*d,e[7]=(-l*r+n*u)*d,e[8]=(s*r-n*o)*d,e):null}function Oe(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=t[6],l=t[7],c=t[8];return e[0]=s*c-i*l,e[1]=a*l-n*c,e[2]=n*i-a*s,e[3]=i*u-o*c,e[4]=r*c-a*u,e[5]=a*o-r*i,e[6]=o*l-s*u,e[7]=n*u-r*l,e[8]=r*s-n*o,e}function Ee(e){var t=e[0],r=e[1],n=e[2],a=e[3],o=e[4],s=e[5],i=e[6],u=e[7],l=e[8];return t*(l*o-s*u)+r*(-l*a+s*i)+n*(u*a-o*i)}function we(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=t[6],c=t[7],p=t[8],h=r[0],f=r[1],d=r[2],v=r[3],g=r[4],m=r[5],y=r[6],b=r[7],x=r[8];return e[0]=h*n+f*s+d*l,e[1]=h*a+f*i+d*c,e[2]=h*o+f*u+d*p,e[3]=v*n+g*s+m*l,e[4]=v*a+g*i+m*c,e[5]=v*o+g*u+m*p,e[6]=y*n+b*s+x*l,e[7]=y*a+b*i+x*c,e[8]=y*o+b*u+x*p,e}function Re(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=t[6],c=t[7],p=t[8],h=r[0],f=r[1];return e[0]=n,e[1]=a,e[2]=o,e[3]=s,e[4]=i,e[5]=u,e[6]=h*n+f*s+l,e[7]=h*a+f*i+c,e[8]=h*o+f*u+p,e}function Le(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=t[6],c=t[7],p=t[8],h=Math.sin(r),f=Math.cos(r);return e[0]=f*n+h*s,e[1]=f*a+h*i,e[2]=f*o+h*u,e[3]=f*s-h*n,e[4]=f*i-h*a,e[5]=f*u-h*o,e[6]=l,e[7]=c,e[8]=p,e}function Ce(e,t,r){var n=r[0],a=r[1];return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=a*t[3],e[4]=a*t[4],e[5]=a*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function De(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=t[0],e[7]=t[1],e[8]=1,e}function Ie(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=n,e[1]=r,e[2]=0,e[3]=-r,e[4]=n,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Ae(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=t[1],e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function Be(e,t){return e[0]=t[0],e[1]=t[1],e[2]=0,e[3]=t[2],e[4]=t[3],e[5]=0,e[6]=t[4],e[7]=t[5],e[8]=1,e}function Pe(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=r+r,i=n+n,u=a+a,l=r*s,c=n*s,p=n*i,h=a*s,f=a*i,d=a*u,v=o*s,g=o*i,m=o*u;return e[0]=1-p-d,e[3]=c-m,e[6]=h+g,e[1]=c+m,e[4]=1-l-d,e[7]=f-v,e[2]=h-g,e[5]=f+v,e[8]=1-l-p,e}function Ge(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=t[6],l=t[7],c=t[8],p=t[9],h=t[10],f=t[11],d=t[12],v=t[13],g=t[14],m=t[15],y=r*i-n*s,b=r*u-a*s,x=r*l-o*s,S=n*u-a*i,M=n*l-o*i,T=a*l-o*u,U=c*v-p*d,k=c*g-h*d,O=c*m-f*d,E=p*g-h*v,w=p*m-f*v,R=h*m-f*g,L=y*R-b*w+x*E+S*O-M*k+T*U;return L?(L=1/L,e[0]=(i*R-u*w+l*E)*L,e[1]=(u*O-s*R-l*k)*L,e[2]=(s*w-i*O+l*U)*L,e[3]=(a*w-n*R-o*E)*L,e[4]=(r*R-a*O+o*k)*L,e[5]=(n*O-r*w-o*U)*L,e[6]=(v*T-g*M+m*S)*L,e[7]=(g*x-d*T-m*b)*L,e[8]=(d*M-v*x+m*y)*L,e):null}function Fe(e,t,r){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/r,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function Ne(e){return"mat3("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+")"}function He(e){return Math.hypot(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8])}function ze(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e}function qe(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e}function We(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e}function _e(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e[3]=t[3]+r[3]*n,e[4]=t[4]+r[4]*n,e[5]=t[5]+r[5]*n,e[6]=t[6]+r[6]*n,e[7]=t[7]+r[7]*n,e[8]=t[8]+r[8]*n,e}function Xe(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]}function Ve(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=e[4],i=e[5],u=e[6],l=e[7],c=e[8],p=t[0],h=t[1],d=t[2],v=t[3],g=t[4],m=t[5],y=t[6],b=t[7],x=t[8];return Math.abs(r-p)<=f*Math.max(1,Math.abs(r),Math.abs(p))&&Math.abs(n-h)<=f*Math.max(1,Math.abs(n),Math.abs(h))&&Math.abs(a-d)<=f*Math.max(1,Math.abs(a),Math.abs(d))&&Math.abs(o-v)<=f*Math.max(1,Math.abs(o),Math.abs(v))&&Math.abs(s-g)<=f*Math.max(1,Math.abs(s),Math.abs(g))&&Math.abs(i-m)<=f*Math.max(1,Math.abs(i),Math.abs(m))&&Math.abs(u-y)<=f*Math.max(1,Math.abs(u),Math.abs(y))&&Math.abs(l-b)<=f*Math.max(1,Math.abs(l),Math.abs(b))&&Math.abs(c-x)<=f*Math.max(1,Math.abs(c),Math.abs(x))}var Ze=we,je=qe;function Ye(){var e=new d(16);return d!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function Qe(e){var t=new d(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Ke(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function Je(e,t,r,n,a,o,s,i,u,l,c,p,h,f,v,g){var m=new d(16);return m[0]=e,m[1]=t,m[2]=r,m[3]=n,m[4]=a,m[5]=o,m[6]=s,m[7]=i,m[8]=u,m[9]=l,m[10]=c,m[11]=p,m[12]=h,m[13]=f,m[14]=v,m[15]=g,m}function $e(e,t,r,n,a,o,s,i,u,l,c,p,h,f,d,v,g){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e[4]=o,e[5]=s,e[6]=i,e[7]=u,e[8]=l,e[9]=c,e[10]=p,e[11]=h,e[12]=f,e[13]=d,e[14]=v,e[15]=g,e}function et(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function tt(e,t){if(e===t){var r=t[1],n=t[2],a=t[3],o=t[6],s=t[7],i=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=n,e[9]=o,e[11]=t[14],e[12]=a,e[13]=s,e[14]=i}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function rt(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=t[6],l=t[7],c=t[8],p=t[9],h=t[10],f=t[11],d=t[12],v=t[13],g=t[14],m=t[15],y=r*i-n*s,b=r*u-a*s,x=r*l-o*s,S=n*u-a*i,M=n*l-o*i,T=a*l-o*u,U=c*v-p*d,k=c*g-h*d,O=c*m-f*d,E=p*g-h*v,w=p*m-f*v,R=h*m-f*g,L=y*R-b*w+x*E+S*O-M*k+T*U;return L?(L=1/L,e[0]=(i*R-u*w+l*E)*L,e[1]=(a*w-n*R-o*E)*L,e[2]=(v*T-g*M+m*S)*L,e[3]=(h*M-p*T-f*S)*L,e[4]=(u*O-s*R-l*k)*L,e[5]=(r*R-a*O+o*k)*L,e[6]=(g*x-d*T-m*b)*L,e[7]=(c*T-h*x+f*b)*L,e[8]=(s*w-i*O+l*U)*L,e[9]=(n*O-r*w-o*U)*L,e[10]=(d*M-v*x+m*y)*L,e[11]=(p*x-c*M-f*y)*L,e[12]=(i*k-s*E-u*U)*L,e[13]=(r*E-n*k+a*U)*L,e[14]=(v*b-d*S-g*y)*L,e[15]=(c*S-p*b+h*y)*L,e):null}function nt(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=t[6],l=t[7],c=t[8],p=t[9],h=t[10],f=t[11],d=t[12],v=t[13],g=t[14],m=t[15];return e[0]=i*(h*m-f*g)-p*(u*m-l*g)+v*(u*f-l*h),e[1]=-(n*(h*m-f*g)-p*(a*m-o*g)+v*(a*f-o*h)),e[2]=n*(u*m-l*g)-i*(a*m-o*g)+v*(a*l-o*u),e[3]=-(n*(u*f-l*h)-i*(a*f-o*h)+p*(a*l-o*u)),e[4]=-(s*(h*m-f*g)-c*(u*m-l*g)+d*(u*f-l*h)),e[5]=r*(h*m-f*g)-c*(a*m-o*g)+d*(a*f-o*h),e[6]=-(r*(u*m-l*g)-s*(a*m-o*g)+d*(a*l-o*u)),e[7]=r*(u*f-l*h)-s*(a*f-o*h)+c*(a*l-o*u),e[8]=s*(p*m-f*v)-c*(i*m-l*v)+d*(i*f-l*p),e[9]=-(r*(p*m-f*v)-c*(n*m-o*v)+d*(n*f-o*p)),e[10]=r*(i*m-l*v)-s*(n*m-o*v)+d*(n*l-o*i),e[11]=-(r*(i*f-l*p)-s*(n*f-o*p)+c*(n*l-o*i)),e[12]=-(s*(p*g-h*v)-c*(i*g-u*v)+d*(i*h-u*p)),e[13]=r*(p*g-h*v)-c*(n*g-a*v)+d*(n*h-a*p),e[14]=-(r*(i*g-u*v)-s*(n*g-a*v)+d*(n*u-a*i)),e[15]=r*(i*h-u*p)-s*(n*h-a*p)+c*(n*u-a*i),e}function at(e){var t=e[0],r=e[1],n=e[2],a=e[3],o=e[4],s=e[5],i=e[6],u=e[7],l=e[8],c=e[9],p=e[10],h=e[11],f=e[12],d=e[13],v=e[14],g=e[15];return(t*s-r*o)*(p*g-h*v)-(t*i-n*o)*(c*g-h*d)+(t*u-a*o)*(c*v-p*d)+(r*i-n*s)*(l*g-h*f)-(r*u-a*s)*(l*v-p*f)+(n*u-a*i)*(l*d-c*f)}function ot(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=t[6],c=t[7],p=t[8],h=t[9],f=t[10],d=t[11],v=t[12],g=t[13],m=t[14],y=t[15],b=r[0],x=r[1],S=r[2],M=r[3];return e[0]=b*n+x*i+S*p+M*v,e[1]=b*a+x*u+S*h+M*g,e[2]=b*o+x*l+S*f+M*m,e[3]=b*s+x*c+S*d+M*y,b=r[4],x=r[5],S=r[6],M=r[7],e[4]=b*n+x*i+S*p+M*v,e[5]=b*a+x*u+S*h+M*g,e[6]=b*o+x*l+S*f+M*m,e[7]=b*s+x*c+S*d+M*y,b=r[8],x=r[9],S=r[10],M=r[11],e[8]=b*n+x*i+S*p+M*v,e[9]=b*a+x*u+S*h+M*g,e[10]=b*o+x*l+S*f+M*m,e[11]=b*s+x*c+S*d+M*y,b=r[12],x=r[13],S=r[14],M=r[15],e[12]=b*n+x*i+S*p+M*v,e[13]=b*a+x*u+S*h+M*g,e[14]=b*o+x*l+S*f+M*m,e[15]=b*s+x*c+S*d+M*y,e}function st(e,t,r){var n,a,o,s,i,u,l,c,p,h,f,d,v=r[0],g=r[1],m=r[2];return t===e?(e[12]=t[0]*v+t[4]*g+t[8]*m+t[12],e[13]=t[1]*v+t[5]*g+t[9]*m+t[13],e[14]=t[2]*v+t[6]*g+t[10]*m+t[14],e[15]=t[3]*v+t[7]*g+t[11]*m+t[15]):(n=t[0],a=t[1],o=t[2],s=t[3],i=t[4],u=t[5],l=t[6],c=t[7],p=t[8],h=t[9],f=t[10],d=t[11],e[0]=n,e[1]=a,e[2]=o,e[3]=s,e[4]=i,e[5]=u,e[6]=l,e[7]=c,e[8]=p,e[9]=h,e[10]=f,e[11]=d,e[12]=n*v+i*g+p*m+t[12],e[13]=a*v+u*g+h*m+t[13],e[14]=o*v+l*g+f*m+t[14],e[15]=s*v+c*g+d*m+t[15]),e}function it(e,t,r){var n=r[0],a=r[1],o=r[2];return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*a,e[5]=t[5]*a,e[6]=t[6]*a,e[7]=t[7]*a,e[8]=t[8]*o,e[9]=t[9]*o,e[10]=t[10]*o,e[11]=t[11]*o,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function ut(e,t,r,n){var a,o,s,i,u,l,c,p,h,d,v,g,m,y,b,x,S,M,T,U,k,O,E,w,R=n[0],L=n[1],C=n[2],D=Math.hypot(R,L,C);return D<f?null:(R*=D=1/D,L*=D,C*=D,a=Math.sin(r),s=1-(o=Math.cos(r)),i=t[0],u=t[1],l=t[2],c=t[3],p=t[4],h=t[5],d=t[6],v=t[7],g=t[8],m=t[9],y=t[10],b=t[11],x=R*R*s+o,S=L*R*s+C*a,M=C*R*s-L*a,T=R*L*s-C*a,U=L*L*s+o,k=C*L*s+R*a,O=R*C*s+L*a,E=L*C*s-R*a,w=C*C*s+o,e[0]=i*x+p*S+g*M,e[1]=u*x+h*S+m*M,e[2]=l*x+d*S+y*M,e[3]=c*x+v*S+b*M,e[4]=i*T+p*U+g*k,e[5]=u*T+h*U+m*k,e[6]=l*T+d*U+y*k,e[7]=c*T+v*U+b*k,e[8]=i*O+p*E+g*w,e[9]=u*O+h*E+m*w,e[10]=l*O+d*E+y*w,e[11]=c*O+v*E+b*w,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function lt(e,t,r){var n=Math.sin(r),a=Math.cos(r),o=t[4],s=t[5],i=t[6],u=t[7],l=t[8],c=t[9],p=t[10],h=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=o*a+l*n,e[5]=s*a+c*n,e[6]=i*a+p*n,e[7]=u*a+h*n,e[8]=l*a-o*n,e[9]=c*a-s*n,e[10]=p*a-i*n,e[11]=h*a-u*n,e}function ct(e,t,r){var n=Math.sin(r),a=Math.cos(r),o=t[0],s=t[1],i=t[2],u=t[3],l=t[8],c=t[9],p=t[10],h=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*a-l*n,e[1]=s*a-c*n,e[2]=i*a-p*n,e[3]=u*a-h*n,e[8]=o*n+l*a,e[9]=s*n+c*a,e[10]=i*n+p*a,e[11]=u*n+h*a,e}function pt(e,t,r){var n=Math.sin(r),a=Math.cos(r),o=t[0],s=t[1],i=t[2],u=t[3],l=t[4],c=t[5],p=t[6],h=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*a+l*n,e[1]=s*a+c*n,e[2]=i*a+p*n,e[3]=u*a+h*n,e[4]=l*a-o*n,e[5]=c*a-s*n,e[6]=p*a-i*n,e[7]=h*a-u*n,e}function ht(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}function ft(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function dt(e,t,r){var n,a,o,s=r[0],i=r[1],u=r[2],l=Math.hypot(s,i,u);return l<f?null:(s*=l=1/l,i*=l,u*=l,n=Math.sin(t),o=1-(a=Math.cos(t)),e[0]=s*s*o+a,e[1]=i*s*o+u*n,e[2]=u*s*o-i*n,e[3]=0,e[4]=s*i*o-u*n,e[5]=i*i*o+a,e[6]=u*i*o+s*n,e[7]=0,e[8]=s*u*o+i*n,e[9]=i*u*o-s*n,e[10]=u*u*o+a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e)}function vt(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=n,e[6]=r,e[7]=0,e[8]=0,e[9]=-r,e[10]=n,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function gt(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=n,e[1]=0,e[2]=-r,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=r,e[9]=0,e[10]=n,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function mt(e,t){var r=Math.sin(t),n=Math.cos(t);return e[0]=n,e[1]=r,e[2]=0,e[3]=0,e[4]=-r,e[5]=n,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function yt(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=n+n,u=a+a,l=o+o,c=n*i,p=n*u,h=n*l,f=a*u,d=a*l,v=o*l,g=s*i,m=s*u,y=s*l;return e[0]=1-(f+v),e[1]=p+y,e[2]=h-m,e[3]=0,e[4]=p-y,e[5]=1-(c+v),e[6]=d+g,e[7]=0,e[8]=h+m,e[9]=d-g,e[10]=1-(c+f),e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function bt(e,t){var r=new d(3),n=-t[0],a=-t[1],o=-t[2],s=t[3],i=t[4],u=t[5],l=t[6],c=t[7],p=n*n+a*a+o*o+s*s;return p>0?(r[0]=2*(i*s+c*n+u*o-l*a)/p,r[1]=2*(u*s+c*a+l*n-i*o)/p,r[2]=2*(l*s+c*o+i*a-u*n)/p):(r[0]=2*(i*s+c*n+u*o-l*a),r[1]=2*(u*s+c*a+l*n-i*o),r[2]=2*(l*s+c*o+i*a-u*n)),yt(e,t,r),e}function xt(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function St(e,t){var r=t[0],n=t[1],a=t[2],o=t[4],s=t[5],i=t[6],u=t[8],l=t[9],c=t[10];return e[0]=Math.hypot(r,n,a),e[1]=Math.hypot(o,s,i),e[2]=Math.hypot(u,l,c),e}function Mt(e,t){var r=new d(3);St(r,t);var n=1/r[0],a=1/r[1],o=1/r[2],s=t[0]*n,i=t[1]*a,u=t[2]*o,l=t[4]*n,c=t[5]*a,p=t[6]*o,h=t[8]*n,f=t[9]*a,v=t[10]*o,g=s+c+v,m=0;return g>0?(m=2*Math.sqrt(g+1),e[3]=.25*m,e[0]=(p-f)/m,e[1]=(h-u)/m,e[2]=(i-l)/m):s>c&&s>v?(m=2*Math.sqrt(1+s-c-v),e[3]=(p-f)/m,e[0]=.25*m,e[1]=(i+l)/m,e[2]=(h+u)/m):c>v?(m=2*Math.sqrt(1+c-s-v),e[3]=(h-u)/m,e[0]=(i+l)/m,e[1]=.25*m,e[2]=(p+f)/m):(m=2*Math.sqrt(1+v-s-c),e[3]=(i-l)/m,e[0]=(h+u)/m,e[1]=(p+f)/m,e[2]=.25*m),e}function Tt(e,t,r,n){var a=t[0],o=t[1],s=t[2],i=t[3],u=a+a,l=o+o,c=s+s,p=a*u,h=a*l,f=a*c,d=o*l,v=o*c,g=s*c,m=i*u,y=i*l,b=i*c,x=n[0],S=n[1],M=n[2];return e[0]=(1-(d+g))*x,e[1]=(h+b)*x,e[2]=(f-y)*x,e[3]=0,e[4]=(h-b)*S,e[5]=(1-(p+g))*S,e[6]=(v+m)*S,e[7]=0,e[8]=(f+y)*M,e[9]=(v-m)*M,e[10]=(1-(p+d))*M,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function Ut(e,t,r,n,a){var o=t[0],s=t[1],i=t[2],u=t[3],l=o+o,c=s+s,p=i+i,h=o*l,f=o*c,d=o*p,v=s*c,g=s*p,m=i*p,y=u*l,b=u*c,x=u*p,S=n[0],M=n[1],T=n[2],U=a[0],k=a[1],O=a[2],E=(1-(v+m))*S,w=(f+x)*S,R=(d-b)*S,L=(f-x)*M,C=(1-(h+m))*M,D=(g+y)*M,I=(d+b)*T,A=(g-y)*T,B=(1-(h+v))*T;return e[0]=E,e[1]=w,e[2]=R,e[3]=0,e[4]=L,e[5]=C,e[6]=D,e[7]=0,e[8]=I,e[9]=A,e[10]=B,e[11]=0,e[12]=r[0]+U-(E*U+L*k+I*O),e[13]=r[1]+k-(w*U+C*k+A*O),e[14]=r[2]+O-(R*U+D*k+B*O),e[15]=1,e}function kt(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=r+r,i=n+n,u=a+a,l=r*s,c=n*s,p=n*i,h=a*s,f=a*i,d=a*u,v=o*s,g=o*i,m=o*u;return e[0]=1-p-d,e[1]=c+m,e[2]=h-g,e[3]=0,e[4]=c-m,e[5]=1-l-d,e[6]=f+v,e[7]=0,e[8]=h+g,e[9]=f-v,e[10]=1-l-p,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Ot(e,t,r,n,a,o,s){var i=1/(r-t),u=1/(a-n),l=1/(o-s);return e[0]=2*o*i,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=2*o*u,e[6]=0,e[7]=0,e[8]=(r+t)*i,e[9]=(a+n)*u,e[10]=(s+o)*l,e[11]=-1,e[12]=0,e[13]=0,e[14]=s*o*2*l,e[15]=0,e}function Et(e,t,r,n,a){var o,s=1/Math.tan(t/2);return e[0]=s/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=a&&a!==1/0?(o=1/(n-a),e[10]=(a+n)*o,e[14]=2*a*n*o):(e[10]=-1,e[14]=-2*n),e}function wt(e,t,r,n){var a=Math.tan(t.upDegrees*Math.PI/180),o=Math.tan(t.downDegrees*Math.PI/180),s=Math.tan(t.leftDegrees*Math.PI/180),i=Math.tan(t.rightDegrees*Math.PI/180),u=2/(s+i),l=2/(a+o);return e[0]=u,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=l,e[6]=0,e[7]=0,e[8]=-(s-i)*u*.5,e[9]=(a-o)*l*.5,e[10]=n/(r-n),e[11]=-1,e[12]=0,e[13]=0,e[14]=n*r/(r-n),e[15]=0,e}function Rt(e,t,r,n,a,o,s){var i=1/(t-r),u=1/(n-a),l=1/(o-s);return e[0]=-2*i,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*u,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*l,e[11]=0,e[12]=(t+r)*i,e[13]=(a+n)*u,e[14]=(s+o)*l,e[15]=1,e}function Lt(e,t,r,n){var a,o,s,i,u,l,c,p,h,d,v=t[0],g=t[1],m=t[2],y=n[0],b=n[1],x=n[2],S=r[0],M=r[1],T=r[2];return Math.abs(v-S)<f&&Math.abs(g-M)<f&&Math.abs(m-T)<f?et(e):(c=v-S,p=g-M,h=m-T,a=b*(h*=d=1/Math.hypot(c,p,h))-x*(p*=d),o=x*(c*=d)-y*h,s=y*p-b*c,(d=Math.hypot(a,o,s))?(a*=d=1/d,o*=d,s*=d):(a=0,o=0,s=0),i=p*s-h*o,u=h*a-c*s,l=c*o-p*a,(d=Math.hypot(i,u,l))?(i*=d=1/d,u*=d,l*=d):(i=0,u=0,l=0),e[0]=a,e[1]=i,e[2]=c,e[3]=0,e[4]=o,e[5]=u,e[6]=p,e[7]=0,e[8]=s,e[9]=l,e[10]=h,e[11]=0,e[12]=-(a*v+o*g+s*m),e[13]=-(i*v+u*g+l*m),e[14]=-(c*v+p*g+h*m),e[15]=1,e)}function Ct(e,t,r,n){var a=t[0],o=t[1],s=t[2],i=n[0],u=n[1],l=n[2],c=a-r[0],p=o-r[1],h=s-r[2],f=c*c+p*p+h*h;f>0&&(c*=f=1/Math.sqrt(f),p*=f,h*=f);var d=u*h-l*p,v=l*c-i*h,g=i*p-u*c;return(f=d*d+v*v+g*g)>0&&(d*=f=1/Math.sqrt(f),v*=f,g*=f),e[0]=d,e[1]=v,e[2]=g,e[3]=0,e[4]=p*g-h*v,e[5]=h*d-c*g,e[6]=c*v-p*d,e[7]=0,e[8]=c,e[9]=p,e[10]=h,e[11]=0,e[12]=a,e[13]=o,e[14]=s,e[15]=1,e}function Dt(e){return"mat4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+", "+e[9]+", "+e[10]+", "+e[11]+", "+e[12]+", "+e[13]+", "+e[14]+", "+e[15]+")"}function It(e){return Math.hypot(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15])}function At(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e}function Bt(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e}function Pt(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e}function Gt(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e[3]=t[3]+r[3]*n,e[4]=t[4]+r[4]*n,e[5]=t[5]+r[5]*n,e[6]=t[6]+r[6]*n,e[7]=t[7]+r[7]*n,e[8]=t[8]+r[8]*n,e[9]=t[9]+r[9]*n,e[10]=t[10]+r[10]*n,e[11]=t[11]+r[11]*n,e[12]=t[12]+r[12]*n,e[13]=t[13]+r[13]*n,e[14]=t[14]+r[14]*n,e[15]=t[15]+r[15]*n,e}function Ft(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]}function Nt(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=e[4],i=e[5],u=e[6],l=e[7],c=e[8],p=e[9],h=e[10],d=e[11],v=e[12],g=e[13],m=e[14],y=e[15],b=t[0],x=t[1],S=t[2],M=t[3],T=t[4],U=t[5],k=t[6],O=t[7],E=t[8],w=t[9],R=t[10],L=t[11],C=t[12],D=t[13],I=t[14],A=t[15];return Math.abs(r-b)<=f*Math.max(1,Math.abs(r),Math.abs(b))&&Math.abs(n-x)<=f*Math.max(1,Math.abs(n),Math.abs(x))&&Math.abs(a-S)<=f*Math.max(1,Math.abs(a),Math.abs(S))&&Math.abs(o-M)<=f*Math.max(1,Math.abs(o),Math.abs(M))&&Math.abs(s-T)<=f*Math.max(1,Math.abs(s),Math.abs(T))&&Math.abs(i-U)<=f*Math.max(1,Math.abs(i),Math.abs(U))&&Math.abs(u-k)<=f*Math.max(1,Math.abs(u),Math.abs(k))&&Math.abs(l-O)<=f*Math.max(1,Math.abs(l),Math.abs(O))&&Math.abs(c-E)<=f*Math.max(1,Math.abs(c),Math.abs(E))&&Math.abs(p-w)<=f*Math.max(1,Math.abs(p),Math.abs(w))&&Math.abs(h-R)<=f*Math.max(1,Math.abs(h),Math.abs(R))&&Math.abs(d-L)<=f*Math.max(1,Math.abs(d),Math.abs(L))&&Math.abs(v-C)<=f*Math.max(1,Math.abs(v),Math.abs(C))&&Math.abs(g-D)<=f*Math.max(1,Math.abs(g),Math.abs(D))&&Math.abs(m-I)<=f*Math.max(1,Math.abs(m),Math.abs(I))&&Math.abs(y-A)<=f*Math.max(1,Math.abs(y),Math.abs(A))}var Ht=ot,zt=Bt;function qt(){var e=new d(3);return d!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function Wt(e){var t=new d(3);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function _t(e){var t=e[0],r=e[1],n=e[2];return Math.hypot(t,r,n)}function Xt(e,t,r){var n=new d(3);return n[0]=e,n[1]=t,n[2]=r,n}function Vt(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function Zt(e,t,r,n){return e[0]=t,e[1]=r,e[2]=n,e}function jt(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e}function Yt(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e}function Qt(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e}function Kt(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e}function Jt(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e}function $t(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e}function er(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e[2]=Math.min(t[2],r[2]),e}function tr(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e[2]=Math.max(t[2],r[2]),e}function rr(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e}function nr(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function ar(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e}function or(e,t){var r=t[0]-e[0],n=t[1]-e[1],a=t[2]-e[2];return Math.hypot(r,n,a)}function sr(e,t){var r=t[0]-e[0],n=t[1]-e[1],a=t[2]-e[2];return r*r+n*n+a*a}function ir(e){var t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n}function ur(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function lr(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function cr(e,t){var r=t[0],n=t[1],a=t[2],o=r*r+n*n+a*a;return o>0&&(o=1/Math.sqrt(o)),e[0]=t[0]*o,e[1]=t[1]*o,e[2]=t[2]*o,e}function pr(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function hr(e,t,r){var n=t[0],a=t[1],o=t[2],s=r[0],i=r[1],u=r[2];return e[0]=a*u-o*i,e[1]=o*s-n*u,e[2]=n*i-a*s,e}function fr(e,t,r,n){var a=t[0],o=t[1],s=t[2];return e[0]=a+n*(r[0]-a),e[1]=o+n*(r[1]-o),e[2]=s+n*(r[2]-s),e}function dr(e,t,r,n,a,o){var s=o*o,i=s*(2*o-3)+1,u=s*(o-2)+o,l=s*(o-1),c=s*(3-2*o);return e[0]=t[0]*i+r[0]*u+n[0]*l+a[0]*c,e[1]=t[1]*i+r[1]*u+n[1]*l+a[1]*c,e[2]=t[2]*i+r[2]*u+n[2]*l+a[2]*c,e}function vr(e,t,r,n,a,o){var s=1-o,i=s*s,u=o*o,l=i*s,c=3*o*i,p=3*u*s,h=u*o;return e[0]=t[0]*l+r[0]*c+n[0]*p+a[0]*h,e[1]=t[1]*l+r[1]*c+n[1]*p+a[1]*h,e[2]=t[2]*l+r[2]*c+n[2]*p+a[2]*h,e}function gr(e,t){t=t||1;var r=2*v()*Math.PI,n=2*v()-1,a=Math.sqrt(1-n*n)*t;return e[0]=Math.cos(r)*a,e[1]=Math.sin(r)*a,e[2]=n*t,e}function mr(e,t,r){var n=t[0],a=t[1],o=t[2],s=r[3]*n+r[7]*a+r[11]*o+r[15];return s=s||1,e[0]=(r[0]*n+r[4]*a+r[8]*o+r[12])/s,e[1]=(r[1]*n+r[5]*a+r[9]*o+r[13])/s,e[2]=(r[2]*n+r[6]*a+r[10]*o+r[14])/s,e}function yr(e,t,r){var n=t[0],a=t[1],o=t[2];return e[0]=n*r[0]+a*r[3]+o*r[6],e[1]=n*r[1]+a*r[4]+o*r[7],e[2]=n*r[2]+a*r[5]+o*r[8],e}function br(e,t,r){var n=r[0],a=r[1],o=r[2],s=r[3],i=t[0],u=t[1],l=t[2],c=a*l-o*u,p=o*i-n*l,h=n*u-a*i,f=a*h-o*p,d=o*c-n*h,v=n*p-a*c,g=2*s;return c*=g,p*=g,h*=g,f*=2,d*=2,v*=2,e[0]=i+c+f,e[1]=u+p+d,e[2]=l+h+v,e}function xr(e,t,r,n){var a=[],o=[];return a[0]=t[0]-r[0],a[1]=t[1]-r[1],a[2]=t[2]-r[2],o[0]=a[0],o[1]=a[1]*Math.cos(n)-a[2]*Math.sin(n),o[2]=a[1]*Math.sin(n)+a[2]*Math.cos(n),e[0]=o[0]+r[0],e[1]=o[1]+r[1],e[2]=o[2]+r[2],e}function Sr(e,t,r,n){var a=[],o=[];return a[0]=t[0]-r[0],a[1]=t[1]-r[1],a[2]=t[2]-r[2],o[0]=a[2]*Math.sin(n)+a[0]*Math.cos(n),o[1]=a[1],o[2]=a[2]*Math.cos(n)-a[0]*Math.sin(n),e[0]=o[0]+r[0],e[1]=o[1]+r[1],e[2]=o[2]+r[2],e}function Mr(e,t,r,n){var a=[],o=[];return a[0]=t[0]-r[0],a[1]=t[1]-r[1],a[2]=t[2]-r[2],o[0]=a[0]*Math.cos(n)-a[1]*Math.sin(n),o[1]=a[0]*Math.sin(n)+a[1]*Math.cos(n),o[2]=a[2],e[0]=o[0]+r[0],e[1]=o[1]+r[1],e[2]=o[2]+r[2],e}function Tr(e,t){var r=e[0],n=e[1],a=e[2],o=t[0],s=t[1],i=t[2],u=Math.sqrt(r*r+n*n+a*a)*Math.sqrt(o*o+s*s+i*i),l=u&&pr(e,t)/u;return Math.acos(Math.min(Math.max(l,-1),1))}function Ur(e){return e[0]=0,e[1]=0,e[2]=0,e}function kr(e){return"vec3("+e[0]+", "+e[1]+", "+e[2]+")"}function Or(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}function Er(e,t){var r=e[0],n=e[1],a=e[2],o=t[0],s=t[1],i=t[2];return Math.abs(r-o)<=f*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(n-s)<=f*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(a-i)<=f*Math.max(1,Math.abs(a),Math.abs(i))}var wr,Rr=Yt,Lr=Qt,Cr=Kt,Dr=or,Ir=sr,Ar=_t,Br=ir,Pr=(wr=qt(),function(e,t,r,n,a,o){var s,i;for(t||(t=3),r||(r=0),i=n?Math.min(n*t+r,e.length):e.length,s=r;s<i;s+=t)wr[0]=e[s],wr[1]=e[s+1],wr[2]=e[s+2],a(wr,wr,o),e[s]=wr[0],e[s+1]=wr[1],e[s+2]=wr[2];return e});function Gr(){var e=new d(4);return d!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e}function Fr(e){var t=new d(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function Nr(e,t,r,n){var a=new d(4);return a[0]=e,a[1]=t,a[2]=r,a[3]=n,a}function Hr(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function zr(e,t,r,n,a){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e}function qr(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function Wr(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e}function _r(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e[3]=t[3]*r[3],e}function Xr(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e[3]=t[3]/r[3],e}function Vr(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e[2]=Math.ceil(t[2]),e[3]=Math.ceil(t[3]),e}function Zr(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e[2]=Math.floor(t[2]),e[3]=Math.floor(t[3]),e}function jr(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e[2]=Math.min(t[2],r[2]),e[3]=Math.min(t[3],r[3]),e}function Yr(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e[2]=Math.max(t[2],r[2]),e[3]=Math.max(t[3],r[3]),e}function Qr(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e[2]=Math.round(t[2]),e[3]=Math.round(t[3]),e}function Kr(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function Jr(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e[3]=t[3]+r[3]*n,e}function $r(e,t){var r=t[0]-e[0],n=t[1]-e[1],a=t[2]-e[2],o=t[3]-e[3];return Math.hypot(r,n,a,o)}function en(e,t){var r=t[0]-e[0],n=t[1]-e[1],a=t[2]-e[2],o=t[3]-e[3];return r*r+n*n+a*a+o*o}function tn(e){var t=e[0],r=e[1],n=e[2],a=e[3];return Math.hypot(t,r,n,a)}function rn(e){var t=e[0],r=e[1],n=e[2],a=e[3];return t*t+r*r+n*n+a*a}function nn(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}function an(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e[3]=1/t[3],e}function on(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=r*r+n*n+a*a+o*o;return s>0&&(s=1/Math.sqrt(s)),e[0]=r*s,e[1]=n*s,e[2]=a*s,e[3]=o*s,e}function sn(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function un(e,t,r,n){var a=r[0]*n[1]-r[1]*n[0],o=r[0]*n[2]-r[2]*n[0],s=r[0]*n[3]-r[3]*n[0],i=r[1]*n[2]-r[2]*n[1],u=r[1]*n[3]-r[3]*n[1],l=r[2]*n[3]-r[3]*n[2],c=t[0],p=t[1],h=t[2],f=t[3];return e[0]=p*l-h*u+f*i,e[1]=-c*l+h*s-f*o,e[2]=c*u-p*s+f*a,e[3]=-c*i+p*o-h*a,e}function ln(e,t,r,n){var a=t[0],o=t[1],s=t[2],i=t[3];return e[0]=a+n*(r[0]-a),e[1]=o+n*(r[1]-o),e[2]=s+n*(r[2]-s),e[3]=i+n*(r[3]-i),e}function cn(e,t){var r,n,a,o,s,i;t=t||1;do{s=(r=2*v()-1)*r+(n=2*v()-1)*n}while(s>=1);do{i=(a=2*v()-1)*a+(o=2*v()-1)*o}while(i>=1);var u=Math.sqrt((1-s)/i);return e[0]=t*r,e[1]=t*n,e[2]=t*a*u,e[3]=t*o*u,e}function pn(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3];return e[0]=r[0]*n+r[4]*a+r[8]*o+r[12]*s,e[1]=r[1]*n+r[5]*a+r[9]*o+r[13]*s,e[2]=r[2]*n+r[6]*a+r[10]*o+r[14]*s,e[3]=r[3]*n+r[7]*a+r[11]*o+r[15]*s,e}function hn(e,t,r){var n=t[0],a=t[1],o=t[2],s=r[0],i=r[1],u=r[2],l=r[3],c=l*n+i*o-u*a,p=l*a+u*n-s*o,h=l*o+s*a-i*n,f=-s*n-i*a-u*o;return e[0]=c*l+f*-s+p*-u-h*-i,e[1]=p*l+f*-i+h*-s-c*-u,e[2]=h*l+f*-u+c*-i-p*-s,e[3]=t[3],e}function fn(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e}function dn(e){return"vec4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}function vn(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}function gn(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=t[0],i=t[1],u=t[2],l=t[3];return Math.abs(r-s)<=f*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(n-i)<=f*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(a-u)<=f*Math.max(1,Math.abs(a),Math.abs(u))&&Math.abs(o-l)<=f*Math.max(1,Math.abs(o),Math.abs(l))}var mn=Wr,yn=_r,bn=Xr,xn=$r,Sn=en,Mn=tn,Tn=rn,Un=function(){var e=Gr();return function(t,r,n,a,o,s){var i,u;for(r||(r=4),n||(n=0),u=a?Math.min(a*r+n,t.length):t.length,i=n;i<u;i+=r)e[0]=t[i],e[1]=t[i+1],e[2]=t[i+2],e[3]=t[i+3],o(e,e,s),t[i]=e[0],t[i+1]=e[1],t[i+2]=e[2],t[i+3]=e[3];return t}}();function kn(){var e=new d(4);return d!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e[3]=1,e}function On(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function En(e,t,r){r*=.5;var n=Math.sin(r);return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=Math.cos(r),e}function wn(e,t){var r=2*Math.acos(t[3]),n=Math.sin(r/2);return n>f?(e[0]=t[0]/n,e[1]=t[1]/n,e[2]=t[2]/n):(e[0]=1,e[1]=0,e[2]=0),r}function Rn(e,t){var r=aa(e,t);return Math.acos(2*r*r-1)}function Ln(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=r[0],u=r[1],l=r[2],c=r[3];return e[0]=n*c+s*i+a*l-o*u,e[1]=a*c+s*u+o*i-n*l,e[2]=o*c+s*l+n*u-a*i,e[3]=s*c-n*i-a*u-o*l,e}function Cn(e,t,r){r*=.5;var n=t[0],a=t[1],o=t[2],s=t[3],i=Math.sin(r),u=Math.cos(r);return e[0]=n*u+s*i,e[1]=a*u+o*i,e[2]=o*u-a*i,e[3]=s*u-n*i,e}function Dn(e,t,r){r*=.5;var n=t[0],a=t[1],o=t[2],s=t[3],i=Math.sin(r),u=Math.cos(r);return e[0]=n*u-o*i,e[1]=a*u+s*i,e[2]=o*u+n*i,e[3]=s*u-a*i,e}function In(e,t,r){r*=.5;var n=t[0],a=t[1],o=t[2],s=t[3],i=Math.sin(r),u=Math.cos(r);return e[0]=n*u+a*i,e[1]=a*u-n*i,e[2]=o*u+s*i,e[3]=s*u-o*i,e}function An(e,t){var r=t[0],n=t[1],a=t[2];return e[0]=r,e[1]=n,e[2]=a,e[3]=Math.sqrt(Math.abs(1-r*r-n*n-a*a)),e}function Bn(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=Math.sqrt(r*r+n*n+a*a),i=Math.exp(o),u=s>0?i*Math.sin(s)/s:0;return e[0]=r*u,e[1]=n*u,e[2]=a*u,e[3]=i*Math.cos(s),e}function Pn(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=Math.sqrt(r*r+n*n+a*a),i=s>0?Math.atan2(s,o)/s:0;return e[0]=r*i,e[1]=n*i,e[2]=a*i,e[3]=.5*Math.log(r*r+n*n+a*a+o*o),e}function Gn(e,t,r){return Pn(e,t),na(e,e,r),Bn(e,e),e}function Fn(e,t,r,n){var a,o,s,i,u,l=t[0],c=t[1],p=t[2],h=t[3],d=r[0],v=r[1],g=r[2],m=r[3];return(o=l*d+c*v+p*g+h*m)<0&&(o=-o,d=-d,v=-v,g=-g,m=-m),1-o>f?(a=Math.acos(o),s=Math.sin(a),i=Math.sin((1-n)*a)/s,u=Math.sin(n*a)/s):(i=1-n,u=n),e[0]=i*l+u*d,e[1]=i*c+u*v,e[2]=i*p+u*g,e[3]=i*h+u*m,e}function Nn(e){var t=v(),r=v(),n=v(),a=Math.sqrt(1-t),o=Math.sqrt(t);return e[0]=a*Math.sin(2*Math.PI*r),e[1]=a*Math.cos(2*Math.PI*r),e[2]=o*Math.sin(2*Math.PI*n),e[3]=o*Math.cos(2*Math.PI*n),e}function Hn(e,t){var r=t[0],n=t[1],a=t[2],o=t[3],s=r*r+n*n+a*a+o*o,i=s?1/s:0;return e[0]=-r*i,e[1]=-n*i,e[2]=-a*i,e[3]=o*i,e}function zn(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function qn(e,t){var r,n=t[0]+t[4]+t[8];if(n>0)r=Math.sqrt(n+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{var a=0;t[4]>t[0]&&(a=1),t[8]>t[3*a+a]&&(a=2);var o=(a+1)%3,s=(a+2)%3;r=Math.sqrt(t[3*a+a]-t[3*o+o]-t[3*s+s]+1),e[a]=.5*r,r=.5/r,e[3]=(t[3*o+s]-t[3*s+o])*r,e[o]=(t[3*o+a]+t[3*a+o])*r,e[s]=(t[3*s+a]+t[3*a+s])*r}return e}function Wn(e,t,r,n){var a=.5*Math.PI/180;t*=a,r*=a,n*=a;var o=Math.sin(t),s=Math.cos(t),i=Math.sin(r),u=Math.cos(r),l=Math.sin(n),c=Math.cos(n);return e[0]=o*u*c-s*i*l,e[1]=s*i*c+o*u*l,e[2]=s*u*l-o*i*c,e[3]=s*u*c+o*i*l,e}function _n(e){return"quat("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"}var Xn,Vn,Zn,jn,Yn,Qn,Kn=Fr,Jn=Nr,$n=Hr,ea=zr,ta=qr,ra=Ln,na=Kr,aa=sn,oa=ln,sa=tn,ia=sa,ua=rn,la=ua,ca=on,pa=vn,ha=gn,fa=(Xn=qt(),Vn=Xt(1,0,0),Zn=Xt(0,1,0),function(e,t,r){var n=pr(t,r);return n<-.999999?(hr(Xn,Vn,t),Ar(Xn)<1e-6&&hr(Xn,Zn,t),cr(Xn,Xn),En(e,Xn,Math.PI),e):n>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(hr(Xn,t,r),e[0]=Xn[0],e[1]=Xn[1],e[2]=Xn[2],e[3]=1+n,ca(e,e))}),da=(jn=kn(),Yn=kn(),function(e,t,r,n,a,o){return Fn(jn,t,a,o),Fn(Yn,r,n,o),Fn(e,jn,Yn,2*o*(1-o)),e}),va=(Qn=me(),function(e,t,r,n){return Qn[0]=r[0],Qn[3]=r[1],Qn[6]=r[2],Qn[1]=n[0],Qn[4]=n[1],Qn[7]=n[2],Qn[2]=-t[0],Qn[5]=-t[1],Qn[8]=-t[2],ca(e,qn(e,Qn))});function ga(){var e=new d(8);return d!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[4]=0,e[5]=0,e[6]=0,e[7]=0),e[3]=1,e}function ma(e){var t=new d(8);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t}function ya(e,t,r,n,a,o,s,i){var u=new d(8);return u[0]=e,u[1]=t,u[2]=r,u[3]=n,u[4]=a,u[5]=o,u[6]=s,u[7]=i,u}function ba(e,t,r,n,a,o,s){var i=new d(8);i[0]=e,i[1]=t,i[2]=r,i[3]=n;var u=.5*a,l=.5*o,c=.5*s;return i[4]=u*n+l*r-c*t,i[5]=l*n+c*e-u*r,i[6]=c*n+u*t-l*e,i[7]=-u*e-l*t-c*r,i}function xa(e,t,r){var n=.5*r[0],a=.5*r[1],o=.5*r[2],s=t[0],i=t[1],u=t[2],l=t[3];return e[0]=s,e[1]=i,e[2]=u,e[3]=l,e[4]=n*l+a*u-o*i,e[5]=a*l+o*s-n*u,e[6]=o*l+n*i-a*s,e[7]=-n*s-a*i-o*u,e}function Sa(e,t){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=.5*t[0],e[5]=.5*t[1],e[6]=.5*t[2],e[7]=0,e}function Ma(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}function Ta(e,t){var r=kn();Mt(r,t);var n=new d(3);return xt(n,t),xa(e,r,n),e}function Ua(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}function ka(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e}function Oa(e,t,r,n,a,o,s,i,u){return e[0]=t,e[1]=r,e[2]=n,e[3]=a,e[4]=o,e[5]=s,e[6]=i,e[7]=u,e}var Ea=$n;function wa(e,t){return e[0]=t[4],e[1]=t[5],e[2]=t[6],e[3]=t[7],e}var Ra=$n;function La(e,t){return e[4]=t[0],e[5]=t[1],e[6]=t[2],e[7]=t[3],e}function Ca(e,t){var r=t[4],n=t[5],a=t[6],o=t[7],s=-t[0],i=-t[1],u=-t[2],l=t[3];return e[0]=2*(r*l+o*s+n*u-a*i),e[1]=2*(n*l+o*i+a*s-r*u),e[2]=2*(a*l+o*u+r*i-n*s),e}function Da(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=.5*r[0],u=.5*r[1],l=.5*r[2],c=t[4],p=t[5],h=t[6],f=t[7];return e[0]=n,e[1]=a,e[2]=o,e[3]=s,e[4]=s*i+a*l-o*u+c,e[5]=s*u+o*i-n*l+p,e[6]=s*l+n*u-a*i+h,e[7]=-n*i-a*u-o*l+f,e}function Ia(e,t,r){var n=-t[0],a=-t[1],o=-t[2],s=t[3],i=t[4],u=t[5],l=t[6],c=t[7],p=i*s+c*n+u*o-l*a,h=u*s+c*a+l*n-i*o,f=l*s+c*o+i*a-u*n,d=c*s-i*n-u*a-l*o;return Cn(e,t,r),n=e[0],a=e[1],o=e[2],s=e[3],e[4]=p*s+d*n+h*o-f*a,e[5]=h*s+d*a+f*n-p*o,e[6]=f*s+d*o+p*a-h*n,e[7]=d*s-p*n-h*a-f*o,e}function Aa(e,t,r){var n=-t[0],a=-t[1],o=-t[2],s=t[3],i=t[4],u=t[5],l=t[6],c=t[7],p=i*s+c*n+u*o-l*a,h=u*s+c*a+l*n-i*o,f=l*s+c*o+i*a-u*n,d=c*s-i*n-u*a-l*o;return Dn(e,t,r),n=e[0],a=e[1],o=e[2],s=e[3],e[4]=p*s+d*n+h*o-f*a,e[5]=h*s+d*a+f*n-p*o,e[6]=f*s+d*o+p*a-h*n,e[7]=d*s-p*n-h*a-f*o,e}function Ba(e,t,r){var n=-t[0],a=-t[1],o=-t[2],s=t[3],i=t[4],u=t[5],l=t[6],c=t[7],p=i*s+c*n+u*o-l*a,h=u*s+c*a+l*n-i*o,f=l*s+c*o+i*a-u*n,d=c*s-i*n-u*a-l*o;return In(e,t,r),n=e[0],a=e[1],o=e[2],s=e[3],e[4]=p*s+d*n+h*o-f*a,e[5]=h*s+d*a+f*n-p*o,e[6]=f*s+d*o+p*a-h*n,e[7]=d*s-p*n-h*a-f*o,e}function Pa(e,t,r){var n=r[0],a=r[1],o=r[2],s=r[3],i=t[0],u=t[1],l=t[2],c=t[3];return e[0]=i*s+c*n+u*o-l*a,e[1]=u*s+c*a+l*n-i*o,e[2]=l*s+c*o+i*a-u*n,e[3]=c*s-i*n-u*a-l*o,i=t[4],u=t[5],l=t[6],c=t[7],e[4]=i*s+c*n+u*o-l*a,e[5]=u*s+c*a+l*n-i*o,e[6]=l*s+c*o+i*a-u*n,e[7]=c*s-i*n-u*a-l*o,e}function Ga(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=r[0],u=r[1],l=r[2],c=r[3];return e[0]=n*c+s*i+a*l-o*u,e[1]=a*c+s*u+o*i-n*l,e[2]=o*c+s*l+n*u-a*i,e[3]=s*c-n*i-a*u-o*l,i=r[4],u=r[5],l=r[6],c=r[7],e[4]=n*c+s*i+a*l-o*u,e[5]=a*c+s*u+o*i-n*l,e[6]=o*c+s*l+n*u-a*i,e[7]=s*c-n*i-a*u-o*l,e}function Fa(e,t,r,n){if(Math.abs(n)<f)return Ua(e,t);var a=Math.hypot(r[0],r[1],r[2]);n*=.5;var o=Math.sin(n),s=o*r[0]/a,i=o*r[1]/a,u=o*r[2]/a,l=Math.cos(n),c=t[0],p=t[1],h=t[2],d=t[3];e[0]=c*l+d*s+p*u-h*i,e[1]=p*l+d*i+h*s-c*u,e[2]=h*l+d*u+c*i-p*s,e[3]=d*l-c*s-p*i-h*u;var v=t[4],g=t[5],m=t[6],y=t[7];return e[4]=v*l+y*s+g*u-m*i,e[5]=g*l+y*i+m*s-v*u,e[6]=m*l+y*u+v*i-g*s,e[7]=y*l-v*s-g*i-m*u,e}function Na(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e}function Ha(e,t,r){var n=t[0],a=t[1],o=t[2],s=t[3],i=r[4],u=r[5],l=r[6],c=r[7],p=t[4],h=t[5],f=t[6],d=t[7],v=r[0],g=r[1],m=r[2],y=r[3];return e[0]=n*y+s*v+a*m-o*g,e[1]=a*y+s*g+o*v-n*m,e[2]=o*y+s*m+n*g-a*v,e[3]=s*y-n*v-a*g-o*m,e[4]=n*c+s*i+a*l-o*u+p*y+d*v+h*m-f*g,e[5]=a*c+s*u+o*i-n*l+h*y+d*g+f*v-p*m,e[6]=o*c+s*l+n*u-a*i+f*y+d*m+p*g-h*v,e[7]=s*c-n*i-a*u-o*l+d*y-p*v-h*g-f*m,e}var za=Ha;function qa(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e}var Wa=aa;function _a(e,t,r,n){var a=1-n;return Wa(t,r)<0&&(n=-n),e[0]=t[0]*a+r[0]*n,e[1]=t[1]*a+r[1]*n,e[2]=t[2]*a+r[2]*n,e[3]=t[3]*a+r[3]*n,e[4]=t[4]*a+r[4]*n,e[5]=t[5]*a+r[5]*n,e[6]=t[6]*a+r[6]*n,e[7]=t[7]*a+r[7]*n,e}function Xa(e,t){var r=Ya(t);return e[0]=-t[0]/r,e[1]=-t[1]/r,e[2]=-t[2]/r,e[3]=t[3]/r,e[4]=-t[4]/r,e[5]=-t[5]/r,e[6]=-t[6]/r,e[7]=t[7]/r,e}function Va(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e[4]=-t[4],e[5]=-t[5],e[6]=-t[6],e[7]=t[7],e}var Za=sa,ja=Za,Ya=ua,Qa=Ya;function Ka(e,t){var r=Ya(t);if(r>0){r=Math.sqrt(r);var n=t[0]/r,a=t[1]/r,o=t[2]/r,s=t[3]/r,i=t[4],u=t[5],l=t[6],c=t[7],p=n*i+a*u+o*l+s*c;e[0]=n,e[1]=a,e[2]=o,e[3]=s,e[4]=(i-n*p)/r,e[5]=(u-a*p)/r,e[6]=(l-o*p)/r,e[7]=(c-s*p)/r}return e}function Ja(e){return"quat2("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+")"}function $a(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]}function eo(e,t){var r=e[0],n=e[1],a=e[2],o=e[3],s=e[4],i=e[5],u=e[6],l=e[7],c=t[0],p=t[1],h=t[2],d=t[3],v=t[4],g=t[5],m=t[6],y=t[7];return Math.abs(r-c)<=f*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(n-p)<=f*Math.max(1,Math.abs(n),Math.abs(p))&&Math.abs(a-h)<=f*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(o-d)<=f*Math.max(1,Math.abs(o),Math.abs(d))&&Math.abs(s-v)<=f*Math.max(1,Math.abs(s),Math.abs(v))&&Math.abs(i-g)<=f*Math.max(1,Math.abs(i),Math.abs(g))&&Math.abs(u-m)<=f*Math.max(1,Math.abs(u),Math.abs(m))&&Math.abs(l-y)<=f*Math.max(1,Math.abs(l),Math.abs(y))}function to(){var e=new d(2);return d!=Float32Array&&(e[0]=0,e[1]=0),e}function ro(e){var t=new d(2);return t[0]=e[0],t[1]=e[1],t}function no(e,t){var r=new d(2);return r[0]=e,r[1]=t,r}function ao(e,t){return e[0]=t[0],e[1]=t[1],e}function oo(e,t,r){return e[0]=t,e[1]=r,e}function so(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e}function io(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e}function uo(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e}function lo(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e}function co(e,t){return e[0]=Math.ceil(t[0]),e[1]=Math.ceil(t[1]),e}function po(e,t){return e[0]=Math.floor(t[0]),e[1]=Math.floor(t[1]),e}function ho(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e}function fo(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e}function vo(e,t){return e[0]=Math.round(t[0]),e[1]=Math.round(t[1]),e}function go(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e}function mo(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e}function yo(e,t){var r=t[0]-e[0],n=t[1]-e[1];return Math.hypot(r,n)}function bo(e,t){var r=t[0]-e[0],n=t[1]-e[1];return r*r+n*n}function xo(e){var t=e[0],r=e[1];return Math.hypot(t,r)}function So(e){var t=e[0],r=e[1];return t*t+r*r}function Mo(e,t){return e[0]=-t[0],e[1]=-t[1],e}function To(e,t){return e[0]=1/t[0],e[1]=1/t[1],e}function Uo(e,t){var r=t[0],n=t[1],a=r*r+n*n;return a>0&&(a=1/Math.sqrt(a)),e[0]=t[0]*a,e[1]=t[1]*a,e}function ko(e,t){return e[0]*t[0]+e[1]*t[1]}function Oo(e,t,r){var n=t[0]*r[1]-t[1]*r[0];return e[0]=e[1]=0,e[2]=n,e}function Eo(e,t,r,n){var a=t[0],o=t[1];return e[0]=a+n*(r[0]-a),e[1]=o+n*(r[1]-o),e}function wo(e,t){t=t||1;var r=2*v()*Math.PI;return e[0]=Math.cos(r)*t,e[1]=Math.sin(r)*t,e}function Ro(e,t,r){var n=t[0],a=t[1];return e[0]=r[0]*n+r[2]*a,e[1]=r[1]*n+r[3]*a,e}function Lo(e,t,r){var n=t[0],a=t[1];return e[0]=r[0]*n+r[2]*a+r[4],e[1]=r[1]*n+r[3]*a+r[5],e}function Co(e,t,r){var n=t[0],a=t[1];return e[0]=r[0]*n+r[3]*a+r[6],e[1]=r[1]*n+r[4]*a+r[7],e}function Do(e,t,r){var n=t[0],a=t[1];return e[0]=r[0]*n+r[4]*a+r[12],e[1]=r[1]*n+r[5]*a+r[13],e}function Io(e,t,r,n){var a=t[0]-r[0],o=t[1]-r[1],s=Math.sin(n),i=Math.cos(n);return e[0]=a*i-o*s+r[0],e[1]=a*s+o*i+r[1],e}function Ao(e,t){var r=e[0],n=e[1],a=t[0],o=t[1],s=Math.sqrt(r*r+n*n)*Math.sqrt(a*a+o*o),i=s&&(r*a+n*o)/s;return Math.acos(Math.min(Math.max(i,-1),1))}function Bo(e){return e[0]=0,e[1]=0,e}function Po(e){return"vec2("+e[0]+", "+e[1]+")"}function Go(e,t){return e[0]===t[0]&&e[1]===t[1]}function Fo(e,t){var r=e[0],n=e[1],a=t[0],o=t[1];return Math.abs(r-a)<=f*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(n-o)<=f*Math.max(1,Math.abs(n),Math.abs(o))}var No=xo,Ho=io,zo=uo,qo=lo,Wo=yo,_o=bo,Xo=So,Vo=function(){var e=to();return function(t,r,n,a,o,s){var i,u;for(r||(r=2),n||(n=0),u=a?Math.min(a*r+n,t.length):t.length,i=n;i<u;i+=r)e[0]=t[i],e[1]=t[i+1],o(e,e,s),t[i]=e[0],t[i+1]=e[1];return t}}()},422:(e,t,r)=>{"use strict";var n,a;function o(){this.table=new Uint16Array(16),this.trans=new Uint16Array(288)}function s(e,t){this.source=e,this.sourceIndex=0,this.tag=0,this.bitcount=0,this.dest=t,this.destLen=0,this.ltree=new o,this.dtree=new o}r.r(t),r.d(t,{default:()=>Nn,BoundingBox:()=>O,Font:()=>Un,Glyph:()=>be,Path:()=>E,_parse:()=>se,load:()=>Gn,loadSync:()=>Fn,parse:()=>Pn}),String.prototype.codePointAt||(a=function(e){if(null==this)throw TypeError();var t=String(this),r=t.length,n=e?Number(e):0;if(n!=n&&(n=0),!(n<0||n>=r)){var a,o=t.charCodeAt(n);return o>=55296&&o<=56319&&r>n+1&&(a=t.charCodeAt(n+1))>=56320&&a<=57343?1024*(o-55296)+a-56320+65536:o}},(n=function(){try{var e={},t=Object.defineProperty,r=t(e,e,e)&&t}catch(e){}return r}())?n(String.prototype,"codePointAt",{value:a,configurable:!0,writable:!0}):String.prototype.codePointAt=a);var i=new o,u=new o,l=new Uint8Array(30),c=new Uint16Array(30),p=new Uint8Array(30),h=new Uint16Array(30),f=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),d=new o,v=new Uint8Array(320);function g(e,t,r,n){var a,o;for(a=0;a<r;++a)e[a]=0;for(a=0;a<30-r;++a)e[a+r]=a/r|0;for(o=n,a=0;a<30;++a)t[a]=o,o+=1<<e[a]}var m=new Uint16Array(16);function y(e,t,r,n){var a,o;for(a=0;a<16;++a)e.table[a]=0;for(a=0;a<n;++a)e.table[t[r+a]]++;for(e.table[0]=0,o=0,a=0;a<16;++a)m[a]=o,o+=e.table[a];for(a=0;a<n;++a)t[r+a]&&(e.trans[m[t[r+a]]++]=a)}function b(e){e.bitcount--||(e.tag=e.source[e.sourceIndex++],e.bitcount=7);var t=1&e.tag;return e.tag>>>=1,t}function x(e,t,r){if(!t)return r;for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;var n=e.tag&65535>>>16-t;return e.tag>>>=t,e.bitcount-=t,n+r}function S(e,t){for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;var r=0,n=0,a=0,o=e.tag;do{n=2*n+(1&o),o>>>=1,++a,r+=t.table[a],n-=t.table[a]}while(n>=0);return e.tag=o,e.bitcount-=a,t.trans[r+n]}function M(e,t,r){var n,a,o,s,i,u;for(n=x(e,5,257),a=x(e,5,1),o=x(e,4,4),s=0;s<19;++s)v[s]=0;for(s=0;s<o;++s){var l=x(e,3,0);v[f[s]]=l}for(y(d,v,0,19),i=0;i<n+a;){var c=S(e,d);switch(c){case 16:var p=v[i-1];for(u=x(e,2,3);u;--u)v[i++]=p;break;case 17:for(u=x(e,3,3);u;--u)v[i++]=0;break;case 18:for(u=x(e,7,11);u;--u)v[i++]=0;break;default:v[i++]=c}}y(t,v,0,n),y(r,v,n,a)}function T(e,t,r){for(;;){var n,a,o,s,i=S(e,t);if(256===i)return 0;if(i<256)e.dest[e.destLen++]=i;else for(n=x(e,l[i-=257],c[i]),a=S(e,r),s=o=e.destLen-x(e,p[a],h[a]);s<o+n;++s)e.dest[e.destLen++]=e.dest[s]}}function U(e){for(var t,r;e.bitcount>8;)e.sourceIndex--,e.bitcount-=8;if((t=256*(t=e.source[e.sourceIndex+1])+e.source[e.sourceIndex])!==(65535&~(256*e.source[e.sourceIndex+3]+e.source[e.sourceIndex+2])))return-3;for(e.sourceIndex+=4,r=t;r;--r)e.dest[e.destLen++]=e.source[e.sourceIndex++];return e.bitcount=0,0}!function(e,t){var r;for(r=0;r<7;++r)e.table[r]=0;for(e.table[7]=24,e.table[8]=152,e.table[9]=112,r=0;r<24;++r)e.trans[r]=256+r;for(r=0;r<144;++r)e.trans[24+r]=r;for(r=0;r<8;++r)e.trans[168+r]=280+r;for(r=0;r<112;++r)e.trans[176+r]=144+r;for(r=0;r<5;++r)t.table[r]=0;for(t.table[5]=32,r=0;r<32;++r)t.trans[r]=r}(i,u),g(l,c,4,3),g(p,h,2,1),l[28]=0,c[28]=258;function k(e,t,r,n,a){return Math.pow(1-a,3)*e+3*Math.pow(1-a,2)*a*t+3*(1-a)*Math.pow(a,2)*r+Math.pow(a,3)*n}function O(){this.x1=Number.NaN,this.y1=Number.NaN,this.x2=Number.NaN,this.y2=Number.NaN}function E(){this.commands=[],this.fill="black",this.stroke=null,this.strokeWidth=1}function w(e){throw new Error(e)}function R(e,t){e||w(t)}O.prototype.isEmpty=function(){return isNaN(this.x1)||isNaN(this.y1)||isNaN(this.x2)||isNaN(this.y2)},O.prototype.addPoint=function(e,t){"number"==typeof e&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=e,this.x2=e),e<this.x1&&(this.x1=e),e>this.x2&&(this.x2=e)),"number"==typeof t&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=t,this.y2=t),t<this.y1&&(this.y1=t),t>this.y2&&(this.y2=t))},O.prototype.addX=function(e){this.addPoint(e,null)},O.prototype.addY=function(e){this.addPoint(null,e)},O.prototype.addBezier=function(e,t,r,n,a,o,s,i){var u=[e,t],l=[r,n],c=[a,o],p=[s,i];this.addPoint(e,t),this.addPoint(s,i);for(var h=0;h<=1;h++){var f=6*u[h]-12*l[h]+6*c[h],d=-3*u[h]+9*l[h]-9*c[h]+3*p[h],v=3*l[h]-3*u[h];if(0!==d){var g=Math.pow(f,2)-4*v*d;if(!(g<0)){var m=(-f+Math.sqrt(g))/(2*d);0<m&&m<1&&(0===h&&this.addX(k(u[h],l[h],c[h],p[h],m)),1===h&&this.addY(k(u[h],l[h],c[h],p[h],m)));var y=(-f-Math.sqrt(g))/(2*d);0<y&&y<1&&(0===h&&this.addX(k(u[h],l[h],c[h],p[h],y)),1===h&&this.addY(k(u[h],l[h],c[h],p[h],y)))}}else{if(0===f)continue;var b=-v/f;0<b&&b<1&&(0===h&&this.addX(k(u[h],l[h],c[h],p[h],b)),1===h&&this.addY(k(u[h],l[h],c[h],p[h],b)))}}},O.prototype.addQuad=function(e,t,r,n,a,o){var s=e+2/3*(r-e),i=t+2/3*(n-t),u=s+1/3*(a-e),l=i+1/3*(o-t);this.addBezier(e,t,s,i,u,l,a,o)},E.prototype.moveTo=function(e,t){this.commands.push({type:"M",x:e,y:t})},E.prototype.lineTo=function(e,t){this.commands.push({type:"L",x:e,y:t})},E.prototype.curveTo=E.prototype.bezierCurveTo=function(e,t,r,n,a,o){this.commands.push({type:"C",x1:e,y1:t,x2:r,y2:n,x:a,y:o})},E.prototype.quadTo=E.prototype.quadraticCurveTo=function(e,t,r,n){this.commands.push({type:"Q",x1:e,y1:t,x:r,y:n})},E.prototype.close=E.prototype.closePath=function(){this.commands.push({type:"Z"})},E.prototype.extend=function(e){if(e.commands)e=e.commands;else if(e instanceof O){var t=e;return this.moveTo(t.x1,t.y1),this.lineTo(t.x2,t.y1),this.lineTo(t.x2,t.y2),this.lineTo(t.x1,t.y2),void this.close()}Array.prototype.push.apply(this.commands,e)},E.prototype.getBoundingBox=function(){for(var e=new O,t=0,r=0,n=0,a=0,o=0;o<this.commands.length;o++){var s=this.commands[o];switch(s.type){case"M":e.addPoint(s.x,s.y),t=n=s.x,r=a=s.y;break;case"L":e.addPoint(s.x,s.y),n=s.x,a=s.y;break;case"Q":e.addQuad(n,a,s.x1,s.y1,s.x,s.y),n=s.x,a=s.y;break;case"C":e.addBezier(n,a,s.x1,s.y1,s.x2,s.y2,s.x,s.y),n=s.x,a=s.y;break;case"Z":n=t,a=r;break;default:throw new Error("Unexpected path command "+s.type)}}return e.isEmpty()&&e.addPoint(0,0),e},E.prototype.draw=function(e){e.beginPath();for(var t=0;t<this.commands.length;t+=1){var r=this.commands[t];"M"===r.type?e.moveTo(r.x,r.y):"L"===r.type?e.lineTo(r.x,r.y):"C"===r.type?e.bezierCurveTo(r.x1,r.y1,r.x2,r.y2,r.x,r.y):"Q"===r.type?e.quadraticCurveTo(r.x1,r.y1,r.x,r.y):"Z"===r.type&&e.closePath()}this.fill&&(e.fillStyle=this.fill,e.fill()),this.stroke&&(e.strokeStyle=this.stroke,e.lineWidth=this.strokeWidth,e.stroke())},E.prototype.toPathData=function(e){function t(t){return Math.round(t)===t?""+Math.round(t):t.toFixed(e)}function r(){for(var e=arguments,r="",n=0;n<arguments.length;n+=1){var a=e[n];a>=0&&n>0&&(r+=" "),r+=t(a)}return r}e=void 0!==e?e:2;for(var n="",a=0;a<this.commands.length;a+=1){var o=this.commands[a];"M"===o.type?n+="M"+r(o.x,o.y):"L"===o.type?n+="L"+r(o.x,o.y):"C"===o.type?n+="C"+r(o.x1,o.y1,o.x2,o.y2,o.x,o.y):"Q"===o.type?n+="Q"+r(o.x1,o.y1,o.x,o.y):"Z"===o.type&&(n+="Z")}return n},E.prototype.toSVG=function(e){var t='<path d="';return t+=this.toPathData(e),t+='"',this.fill&&"black"!==this.fill&&(null===this.fill?t+=' fill="none"':t+=' fill="'+this.fill+'"'),this.stroke&&(t+=' stroke="'+this.stroke+'" stroke-width="'+this.strokeWidth+'"'),t+"/>"},E.prototype.toDOMElement=function(e){var t=this.toPathData(e),r=document.createElementNS("http://www.w3.org/2000/svg","path");return r.setAttribute("d",t),r};var L={fail:w,argument:R,assert:R},C=2147483648,D={},I={},A={};function B(e){return function(){return e}}I.BYTE=function(e){return L.argument(e>=0&&e<=255,"Byte value should be between 0 and 255."),[e]},A.BYTE=B(1),I.CHAR=function(e){return[e.charCodeAt(0)]},A.CHAR=B(1),I.CHARARRAY=function(e){for(var t=[],r=0;r<e.length;r+=1)t[r]=e.charCodeAt(r);return t},A.CHARARRAY=function(e){return e.length},I.USHORT=function(e){return[e>>8&255,255&e]},A.USHORT=B(2),I.SHORT=function(e){return e>=32768&&(e=-(65536-e)),[e>>8&255,255&e]},A.SHORT=B(2),I.UINT24=function(e){return[e>>16&255,e>>8&255,255&e]},A.UINT24=B(3),I.ULONG=function(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]},A.ULONG=B(4),I.LONG=function(e){return e>=C&&(e=-(2*C-e)),[e>>24&255,e>>16&255,e>>8&255,255&e]},A.LONG=B(4),I.FIXED=I.ULONG,A.FIXED=A.ULONG,I.FWORD=I.SHORT,A.FWORD=A.SHORT,I.UFWORD=I.USHORT,A.UFWORD=A.USHORT,I.LONGDATETIME=function(e){return[0,0,0,0,e>>24&255,e>>16&255,e>>8&255,255&e]},A.LONGDATETIME=B(8),I.TAG=function(e){return L.argument(4===e.length,"Tag should be exactly 4 ASCII characters."),[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]},A.TAG=B(4),I.Card8=I.BYTE,A.Card8=A.BYTE,I.Card16=I.USHORT,A.Card16=A.USHORT,I.OffSize=I.BYTE,A.OffSize=A.BYTE,I.SID=I.USHORT,A.SID=A.USHORT,I.NUMBER=function(e){return e>=-107&&e<=107?[e+139]:e>=108&&e<=1131?[247+((e-=108)>>8),255&e]:e>=-1131&&e<=-108?[251+((e=-e-108)>>8),255&e]:e>=-32768&&e<=32767?I.NUMBER16(e):I.NUMBER32(e)},A.NUMBER=function(e){return I.NUMBER(e).length},I.NUMBER16=function(e){return[28,e>>8&255,255&e]},A.NUMBER16=B(3),I.NUMBER32=function(e){return[29,e>>24&255,e>>16&255,e>>8&255,255&e]},A.NUMBER32=B(5),I.REAL=function(e){var t=e.toString(),r=/\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(t);if(r){var n=parseFloat("1e"+((r[2]?+r[2]:0)+r[1].length));t=(Math.round(e*n)/n).toString()}for(var a="",o=0,s=t.length;o<s;o+=1){var i=t[o];a+="e"===i?"-"===t[++o]?"c":"b":"."===i?"a":"-"===i?"e":i}for(var u=[30],l=0,c=(a+=1&a.length?"f":"ff").length;l<c;l+=2)u.push(parseInt(a.substr(l,2),16));return u},A.REAL=function(e){return I.REAL(e).length},I.NAME=I.CHARARRAY,A.NAME=A.CHARARRAY,I.STRING=I.CHARARRAY,A.STRING=A.CHARARRAY,D.UTF8=function(e,t,r){for(var n=[],a=r,o=0;o<a;o++,t+=1)n[o]=e.getUint8(t);return String.fromCharCode.apply(null,n)},D.UTF16=function(e,t,r){for(var n=[],a=r/2,o=0;o<a;o++,t+=2)n[o]=e.getUint16(t);return String.fromCharCode.apply(null,n)},I.UTF16=function(e){for(var t=[],r=0;r<e.length;r+=1){var n=e.charCodeAt(r);t[t.length]=n>>8&255,t[t.length]=255&n}return t},A.UTF16=function(e){return 2*e.length};var P={"x-mac-croatian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ","x-mac-cyrillic":"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю","x-mac-gaelic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ","x-mac-greek":"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­","x-mac-icelandic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-inuit":"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł","x-mac-ce":"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ",macintosh:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-romanian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-turkish":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ"};D.MACSTRING=function(e,t,r,n){var a=P[n];if(void 0!==a){for(var o="",s=0;s<r;s++){var i=e.getUint8(t+s);o+=i<=127?String.fromCharCode(i):a[127&i]}return o}};var G,F="function"==typeof WeakMap&&new WeakMap;function N(e){return e>=-128&&e<=127}function H(e,t,r){for(var n=0,a=e.length;t<a&&n<64&&0===e[t];)++t,++n;return r.push(128|n-1),t}function z(e,t,r){for(var n=0,a=e.length,o=t;o<a&&n<64;){var s=e[o];if(!N(s))break;if(0===s&&o+1<a&&0===e[o+1])break;++o,++n}r.push(n-1);for(var i=t;i<o;++i)r.push(e[i]+256&255);return o}function q(e,t,r){for(var n=0,a=e.length,o=t;o<a&&n<64;){var s=e[o];if(0===s)break;if(N(s)&&o+1<a&&N(e[o+1]))break;++o,++n}r.push(64|n-1);for(var i=t;i<o;++i){var u=e[i];r.push(u+65536>>8&255,u+256&255)}return o}I.MACSTRING=function(e,t){var r=function(e){if(!G)for(var t in G={},P)G[t]=new String(t);var r=G[e];if(void 0!==r){if(F){var n=F.get(r);if(void 0!==n)return n}var a=P[e];if(void 0!==a){for(var o={},s=0;s<a.length;s++)o[a.charCodeAt(s)]=s+128;return F&&F.set(r,o),o}}}(t);if(void 0!==r){for(var n=[],a=0;a<e.length;a++){var o=e.charCodeAt(a);if(o>=128&&void 0===(o=r[o]))return;n[a]=o}return n}},A.MACSTRING=function(e,t){var r=I.MACSTRING(e,t);return void 0!==r?r.length:0},I.VARDELTAS=function(e){for(var t=0,r=[];t<e.length;){var n=e[t];t=0===n?H(e,t,r):n>=-128&&n<=127?z(e,t,r):q(e,t,r)}return r},I.INDEX=function(e){for(var t=1,r=[t],n=[],a=0;a<e.length;a+=1){var o=I.OBJECT(e[a]);Array.prototype.push.apply(n,o),t+=o.length,r.push(t)}if(0===n.length)return[0,0];for(var s=[],i=1+Math.floor(Math.log(t)/Math.log(2))/8|0,u=[void 0,I.BYTE,I.USHORT,I.UINT24,I.ULONG][i],l=0;l<r.length;l+=1){var c=u(r[l]);Array.prototype.push.apply(s,c)}return Array.prototype.concat(I.Card16(e.length),I.OffSize(i),s,n)},A.INDEX=function(e){return I.INDEX(e).length},I.DICT=function(e){for(var t=[],r=Object.keys(e),n=r.length,a=0;a<n;a+=1){var o=parseInt(r[a],0),s=e[o];t=(t=t.concat(I.OPERAND(s.value,s.type))).concat(I.OPERATOR(o))}return t},A.DICT=function(e){return I.DICT(e).length},I.OPERATOR=function(e){return e<1200?[e]:[12,e-1200]},I.OPERAND=function(e,t){var r=[];if(Array.isArray(t))for(var n=0;n<t.length;n+=1)L.argument(e.length===t.length,"Not enough arguments given for type"+t),r=r.concat(I.OPERAND(e[n],t[n]));else if("SID"===t)r=r.concat(I.NUMBER(e));else if("offset"===t)r=r.concat(I.NUMBER32(e));else if("number"===t)r=r.concat(I.NUMBER(e));else{if("real"!==t)throw new Error("Unknown operand type "+t);r=r.concat(I.REAL(e))}return r},I.OP=I.BYTE,A.OP=A.BYTE;var W="function"==typeof WeakMap&&new WeakMap;function _(e,t,r){for(var n=0;n<t.length;n+=1){var a=t[n];this[a.name]=a.value}if(this.tableName=e,this.fields=t,r)for(var o=Object.keys(r),s=0;s<o.length;s+=1){var i=o[s],u=r[i];void 0!==this[i]&&(this[i]=u)}}function X(e,t,r){void 0===r&&(r=t.length);var n=new Array(t.length+1);n[0]={name:e+"Count",type:"USHORT",value:r};for(var a=0;a<t.length;a++)n[a+1]={name:e+a,type:"USHORT",value:t[a]};return n}function V(e,t,r){var n=t.length,a=new Array(n+1);a[0]={name:e+"Count",type:"USHORT",value:n};for(var o=0;o<n;o++)a[o+1]={name:e+o,type:"TABLE",value:r(t[o],o)};return a}function Z(e,t,r){var n=t.length,a=[];a[0]={name:e+"Count",type:"USHORT",value:n};for(var o=0;o<n;o++)a=a.concat(r(t[o],o));return a}function j(e){1===e.format?_.call(this,"coverageTable",[{name:"coverageFormat",type:"USHORT",value:1}].concat(X("glyph",e.glyphs))):L.assert(!1,"Can't create coverage table format 2 yet.")}function Y(e){_.call(this,"scriptListTable",Z("scriptRecord",e,(function(e,t){var r=e.script,n=r.defaultLangSys;return L.assert(!!n,"Unable to write GSUB: script "+e.tag+" has no default language system."),[{name:"scriptTag"+t,type:"TAG",value:e.tag},{name:"script"+t,type:"TABLE",value:new _("scriptTable",[{name:"defaultLangSys",type:"TABLE",value:new _("defaultLangSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:n.reqFeatureIndex}].concat(X("featureIndex",n.featureIndexes)))}].concat(Z("langSys",r.langSysRecords,(function(e,t){var r=e.langSys;return[{name:"langSysTag"+t,type:"TAG",value:e.tag},{name:"langSys"+t,type:"TABLE",value:new _("langSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:r.reqFeatureIndex}].concat(X("featureIndex",r.featureIndexes)))}]}))))}]})))}function Q(e){_.call(this,"featureListTable",Z("featureRecord",e,(function(e,t){var r=e.feature;return[{name:"featureTag"+t,type:"TAG",value:e.tag},{name:"feature"+t,type:"TABLE",value:new _("featureTable",[{name:"featureParams",type:"USHORT",value:r.featureParams}].concat(X("lookupListIndex",r.lookupListIndexes)))}]})))}function K(e,t){_.call(this,"lookupListTable",V("lookup",e,(function(e){var r=t[e.lookupType];return L.assert(!!r,"Unable to write GSUB lookup type "+e.lookupType+" tables."),new _("lookupTable",[{name:"lookupType",type:"USHORT",value:e.lookupType},{name:"lookupFlag",type:"USHORT",value:e.lookupFlag}].concat(V("subtable",e.subtables,r)))})))}I.CHARSTRING=function(e){if(W){var t=W.get(e);if(void 0!==t)return t}for(var r=[],n=e.length,a=0;a<n;a+=1){var o=e[a];r=r.concat(I[o.type](o.value))}return W&&W.set(e,r),r},A.CHARSTRING=function(e){return I.CHARSTRING(e).length},I.OBJECT=function(e){var t=I[e.type];return L.argument(void 0!==t,"No encoding function for type "+e.type),t(e.value)},A.OBJECT=function(e){var t=A[e.type];return L.argument(void 0!==t,"No sizeOf function for type "+e.type),t(e.value)},I.TABLE=function(e){for(var t=[],r=e.fields.length,n=[],a=[],o=0;o<r;o+=1){var s=e.fields[o],i=I[s.type];L.argument(void 0!==i,"No encoding function for field type "+s.type+" ("+s.name+")");var u=e[s.name];void 0===u&&(u=s.value);var l=i(u);"TABLE"===s.type?(a.push(t.length),t=t.concat([0,0]),n.push(l)):t=t.concat(l)}for(var c=0;c<n.length;c+=1){var p=a[c],h=t.length;L.argument(h<65536,"Table "+e.tableName+" too big."),t[p]=h>>8,t[p+1]=255&h,t=t.concat(n[c])}return t},A.TABLE=function(e){for(var t=0,r=e.fields.length,n=0;n<r;n+=1){var a=e.fields[n],o=A[a.type];L.argument(void 0!==o,"No sizeOf function for field type "+a.type+" ("+a.name+")");var s=e[a.name];void 0===s&&(s=a.value),t+=o(s),"TABLE"===a.type&&(t+=2)}return t},I.RECORD=I.TABLE,A.RECORD=A.TABLE,I.LITERAL=function(e){return e},A.LITERAL=function(e){return e.length},_.prototype.encode=function(){return I.TABLE(this)},_.prototype.sizeOf=function(){return A.TABLE(this)},j.prototype=Object.create(_.prototype),j.prototype.constructor=j,Y.prototype=Object.create(_.prototype),Y.prototype.constructor=Y,Q.prototype=Object.create(_.prototype),Q.prototype.constructor=Q,K.prototype=Object.create(_.prototype),K.prototype.constructor=K;var J={Table:_,Record:_,Coverage:j,ScriptList:Y,FeatureList:Q,LookupList:K,ushortList:X,tableList:V,recordList:Z};function $(e,t){return e.getUint8(t)}function ee(e,t){return e.getUint16(t,!1)}function te(e,t){return e.getUint32(t,!1)}function re(e,t){return e.getInt16(t,!1)+e.getUint16(t+2,!1)/65535}var ne={byte:1,uShort:2,short:2,uLong:4,fixed:4,longDateTime:8,tag:4};function ae(e,t){this.data=e,this.offset=t,this.relativeOffset=0}ae.prototype.parseByte=function(){var e=this.data.getUint8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},ae.prototype.parseChar=function(){var e=this.data.getInt8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},ae.prototype.parseCard8=ae.prototype.parseByte,ae.prototype.parseUShort=function(){var e=this.data.getUint16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},ae.prototype.parseCard16=ae.prototype.parseUShort,ae.prototype.parseSID=ae.prototype.parseUShort,ae.prototype.parseOffset16=ae.prototype.parseUShort,ae.prototype.parseShort=function(){var e=this.data.getInt16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},ae.prototype.parseF2Dot14=function(){var e=this.data.getInt16(this.offset+this.relativeOffset)/16384;return this.relativeOffset+=2,e},ae.prototype.parseULong=function(){var e=te(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},ae.prototype.parseOffset32=ae.prototype.parseULong,ae.prototype.parseFixed=function(){var e=re(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},ae.prototype.parseString=function(e){var t=this.data,r=this.offset+this.relativeOffset,n="";this.relativeOffset+=e;for(var a=0;a<e;a++)n+=String.fromCharCode(t.getUint8(r+a));return n},ae.prototype.parseTag=function(){return this.parseString(4)},ae.prototype.parseLongDateTime=function(){var e=te(this.data,this.offset+this.relativeOffset+4);return e-=2082844800,this.relativeOffset+=8,e},ae.prototype.parseVersion=function(e){var t=ee(this.data,this.offset+this.relativeOffset),r=ee(this.data,this.offset+this.relativeOffset+2);return this.relativeOffset+=4,void 0===e&&(e=4096),t+r/e/10},ae.prototype.skip=function(e,t){void 0===t&&(t=1),this.relativeOffset+=ne[e]*t},ae.prototype.parseULongList=function(e){void 0===e&&(e=this.parseULong());for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint32(n),n+=4;return this.relativeOffset+=4*e,t},ae.prototype.parseOffset16List=ae.prototype.parseUShortList=function(e){void 0===e&&(e=this.parseUShort());for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint16(n),n+=2;return this.relativeOffset+=2*e,t},ae.prototype.parseShortList=function(e){for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getInt16(n),n+=2;return this.relativeOffset+=2*e,t},ae.prototype.parseByteList=function(e){for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint8(n++);return this.relativeOffset+=e,t},ae.prototype.parseList=function(e,t){t||(t=e,e=this.parseUShort());for(var r=new Array(e),n=0;n<e;n++)r[n]=t.call(this);return r},ae.prototype.parseList32=function(e,t){t||(t=e,e=this.parseULong());for(var r=new Array(e),n=0;n<e;n++)r[n]=t.call(this);return r},ae.prototype.parseRecordList=function(e,t){t||(t=e,e=this.parseUShort());for(var r=new Array(e),n=Object.keys(t),a=0;a<e;a++){for(var o={},s=0;s<n.length;s++){var i=n[s],u=t[i];o[i]=u.call(this)}r[a]=o}return r},ae.prototype.parseRecordList32=function(e,t){t||(t=e,e=this.parseULong());for(var r=new Array(e),n=Object.keys(t),a=0;a<e;a++){for(var o={},s=0;s<n.length;s++){var i=n[s],u=t[i];o[i]=u.call(this)}r[a]=o}return r},ae.prototype.parseStruct=function(e){if("function"==typeof e)return e.call(this);for(var t=Object.keys(e),r={},n=0;n<t.length;n++){var a=t[n],o=e[a];r[a]=o.call(this)}return r},ae.prototype.parseValueRecord=function(e){if(void 0===e&&(e=this.parseUShort()),0!==e){var t={};return 1&e&&(t.xPlacement=this.parseShort()),2&e&&(t.yPlacement=this.parseShort()),4&e&&(t.xAdvance=this.parseShort()),8&e&&(t.yAdvance=this.parseShort()),16&e&&(t.xPlaDevice=void 0,this.parseShort()),32&e&&(t.yPlaDevice=void 0,this.parseShort()),64&e&&(t.xAdvDevice=void 0,this.parseShort()),128&e&&(t.yAdvDevice=void 0,this.parseShort()),t}},ae.prototype.parseValueRecordList=function(){for(var e=this.parseUShort(),t=this.parseUShort(),r=new Array(t),n=0;n<t;n++)r[n]=this.parseValueRecord(e);return r},ae.prototype.parsePointer=function(e){var t=this.parseOffset16();if(t>0)return new ae(this.data,this.offset+t).parseStruct(e)},ae.prototype.parsePointer32=function(e){var t=this.parseOffset32();if(t>0)return new ae(this.data,this.offset+t).parseStruct(e)},ae.prototype.parseListOfLists=function(e){for(var t=this.parseOffset16List(),r=t.length,n=this.relativeOffset,a=new Array(r),o=0;o<r;o++){var s=t[o];if(0!==s)if(this.relativeOffset=s,e){for(var i=this.parseOffset16List(),u=new Array(i.length),l=0;l<i.length;l++)this.relativeOffset=s+i[l],u[l]=e.call(this);a[o]=u}else a[o]=this.parseUShortList();else a[o]=void 0}return this.relativeOffset=n,a},ae.prototype.parseCoverage=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort(),r=this.parseUShort();if(1===t)return{format:1,glyphs:this.parseUShortList(r)};if(2===t){for(var n=new Array(r),a=0;a<r;a++)n[a]={start:this.parseUShort(),end:this.parseUShort(),index:this.parseUShort()};return{format:2,ranges:n}}throw new Error("0x"+e.toString(16)+": Coverage format must be 1 or 2.")},ae.prototype.parseClassDef=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();if(1===t)return{format:1,startGlyph:this.parseUShort(),classes:this.parseUShortList()};if(2===t)return{format:2,ranges:this.parseRecordList({start:ae.uShort,end:ae.uShort,classId:ae.uShort})};throw new Error("0x"+e.toString(16)+": ClassDef format must be 1 or 2.")},ae.list=function(e,t){return function(){return this.parseList(e,t)}},ae.list32=function(e,t){return function(){return this.parseList32(e,t)}},ae.recordList=function(e,t){return function(){return this.parseRecordList(e,t)}},ae.recordList32=function(e,t){return function(){return this.parseRecordList32(e,t)}},ae.pointer=function(e){return function(){return this.parsePointer(e)}},ae.pointer32=function(e){return function(){return this.parsePointer32(e)}},ae.tag=ae.prototype.parseTag,ae.byte=ae.prototype.parseByte,ae.uShort=ae.offset16=ae.prototype.parseUShort,ae.uShortList=ae.prototype.parseUShortList,ae.uLong=ae.offset32=ae.prototype.parseULong,ae.uLongList=ae.prototype.parseULongList,ae.struct=ae.prototype.parseStruct,ae.coverage=ae.prototype.parseCoverage,ae.classDef=ae.prototype.parseClassDef;var oe={reserved:ae.uShort,reqFeatureIndex:ae.uShort,featureIndexes:ae.uShortList};ae.prototype.parseScriptList=function(){return this.parsePointer(ae.recordList({tag:ae.tag,script:ae.pointer({defaultLangSys:ae.pointer(oe),langSysRecords:ae.recordList({tag:ae.tag,langSys:ae.pointer(oe)})})}))||[]},ae.prototype.parseFeatureList=function(){return this.parsePointer(ae.recordList({tag:ae.tag,feature:ae.pointer({featureParams:ae.offset16,lookupListIndexes:ae.uShortList})}))||[]},ae.prototype.parseLookupList=function(e){return this.parsePointer(ae.list(ae.pointer((function(){var t=this.parseUShort();L.argument(1<=t&&t<=9,"GPOS/GSUB lookup type "+t+" unknown.");var r=this.parseUShort(),n=16&r;return{lookupType:t,lookupFlag:r,subtables:this.parseList(ae.pointer(e[t])),markFilteringSet:n?this.parseUShort():void 0}}))))||[]},ae.prototype.parseFeatureVariationsList=function(){return this.parsePointer32((function(){var e=this.parseUShort(),t=this.parseUShort();return L.argument(1===e&&t<1,"GPOS/GSUB feature variations table unknown."),this.parseRecordList32({conditionSetOffset:ae.offset32,featureTableSubstitutionOffset:ae.offset32})}))||[]};var se={getByte:$,getCard8:$,getUShort:ee,getCard16:ee,getShort:function(e,t){return e.getInt16(t,!1)},getULong:te,getFixed:re,getTag:function(e,t){for(var r="",n=t;n<t+4;n+=1)r+=String.fromCharCode(e.getInt8(n));return r},getOffset:function(e,t,r){for(var n=0,a=0;a<r;a+=1)n<<=8,n+=e.getUint8(t+a);return n},getBytes:function(e,t,r){for(var n=[],a=t;a<r;a+=1)n.push(e.getUint8(a));return n},bytesToString:function(e){for(var t="",r=0;r<e.length;r+=1)t+=String.fromCharCode(e[r]);return t},Parser:ae};function ie(e,t,r){e.segments.push({end:t,start:t,delta:-(t-r),offset:0,glyphIndex:r})}var ue=function(e,t){var r={};r.version=se.getUShort(e,t),L.argument(0===r.version,"cmap table version should be 0."),r.numTables=se.getUShort(e,t+2);for(var n=-1,a=r.numTables-1;a>=0;a-=1){var o=se.getUShort(e,t+4+8*a),s=se.getUShort(e,t+4+8*a+2);if(3===o&&(0===s||1===s||10===s)||0===o&&(0===s||1===s||2===s||3===s||4===s)){n=se.getULong(e,t+4+8*a+4);break}}if(-1===n)throw new Error("No valid cmap sub-tables found.");var i=new se.Parser(e,t+n);if(r.format=i.parseUShort(),12===r.format)!function(e,t){var r;t.parseUShort(),e.length=t.parseULong(),e.language=t.parseULong(),e.groupCount=r=t.parseULong(),e.glyphIndexMap={};for(var n=0;n<r;n+=1)for(var a=t.parseULong(),o=t.parseULong(),s=t.parseULong(),i=a;i<=o;i+=1)e.glyphIndexMap[i]=s,s++}(r,i);else{if(4!==r.format)throw new Error("Only format 4 and 12 cmap tables are supported (found format "+r.format+").");!function(e,t,r,n,a){var o;e.length=t.parseUShort(),e.language=t.parseUShort(),e.segCount=o=t.parseUShort()>>1,t.skip("uShort",3),e.glyphIndexMap={};for(var s=new se.Parser(r,n+a+14),i=new se.Parser(r,n+a+16+2*o),u=new se.Parser(r,n+a+16+4*o),l=new se.Parser(r,n+a+16+6*o),c=n+a+16+8*o,p=0;p<o-1;p+=1)for(var h=void 0,f=s.parseUShort(),d=i.parseUShort(),v=u.parseShort(),g=l.parseUShort(),m=d;m<=f;m+=1)0!==g?(c=l.offset+l.relativeOffset-2,c+=g,c+=2*(m-d),0!==(h=se.getUShort(r,c))&&(h=h+v&65535)):h=m+v&65535,e.glyphIndexMap[m]=h}(r,i,e,t,n)}return r},le=function(e){var t,r=!0;for(t=e.length-1;t>0;t-=1)if(e.get(t).unicode>65535){console.log("Adding CMAP format 12 (needed!)"),r=!1;break}var n=[{name:"version",type:"USHORT",value:0},{name:"numTables",type:"USHORT",value:r?1:2},{name:"platformID",type:"USHORT",value:3},{name:"encodingID",type:"USHORT",value:1},{name:"offset",type:"ULONG",value:r?12:20}];r||(n=n.concat([{name:"cmap12PlatformID",type:"USHORT",value:3},{name:"cmap12EncodingID",type:"USHORT",value:10},{name:"cmap12Offset",type:"ULONG",value:0}])),n=n.concat([{name:"format",type:"USHORT",value:4},{name:"cmap4Length",type:"USHORT",value:0},{name:"language",type:"USHORT",value:0},{name:"segCountX2",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);var a=new J.Table("cmap",n);for(a.segments=[],t=0;t<e.length;t+=1){for(var o=e.get(t),s=0;s<o.unicodes.length;s+=1)ie(a,o.unicodes[s],t);a.segments=a.segments.sort((function(e,t){return e.start-t.start}))}!function(e){e.segments.push({end:65535,start:65535,delta:1,offset:0})}(a);var i=a.segments.length,u=0,l=[],c=[],p=[],h=[],f=[],d=[];for(t=0;t<i;t+=1){var v=a.segments[t];v.end<=65535&&v.start<=65535?(l=l.concat({name:"end_"+t,type:"USHORT",value:v.end}),c=c.concat({name:"start_"+t,type:"USHORT",value:v.start}),p=p.concat({name:"idDelta_"+t,type:"SHORT",value:v.delta}),h=h.concat({name:"idRangeOffset_"+t,type:"USHORT",value:v.offset}),void 0!==v.glyphId&&(f=f.concat({name:"glyph_"+t,type:"USHORT",value:v.glyphId}))):u+=1,r||void 0===v.glyphIndex||(d=(d=(d=d.concat({name:"cmap12Start_"+t,type:"ULONG",value:v.start})).concat({name:"cmap12End_"+t,type:"ULONG",value:v.end})).concat({name:"cmap12Glyph_"+t,type:"ULONG",value:v.glyphIndex}))}if(a.segCountX2=2*(i-u),a.searchRange=2*Math.pow(2,Math.floor(Math.log(i-u)/Math.log(2))),a.entrySelector=Math.log(a.searchRange/2)/Math.log(2),a.rangeShift=a.segCountX2-a.searchRange,a.fields=a.fields.concat(l),a.fields.push({name:"reservedPad",type:"USHORT",value:0}),a.fields=a.fields.concat(c),a.fields=a.fields.concat(p),a.fields=a.fields.concat(h),a.fields=a.fields.concat(f),a.cmap4Length=14+2*l.length+2+2*c.length+2*p.length+2*h.length+2*f.length,!r){var g=16+4*d.length;a.cmap12Offset=20+a.cmap4Length,a.fields=a.fields.concat([{name:"cmap12Format",type:"USHORT",value:12},{name:"cmap12Reserved",type:"USHORT",value:0},{name:"cmap12Length",type:"ULONG",value:g},{name:"cmap12Language",type:"ULONG",value:0},{name:"cmap12nGroups",type:"ULONG",value:d.length/3}]),a.fields=a.fields.concat(d)}return a},ce=[".notdef","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","onesuperior","logicalnot","mu","trademark","Eth","onehalf","plusminus","Thorn","onequarter","divide","brokenbar","degree","thorn","threequarters","twosuperior","registered","minus","eth","multiply","threesuperior","copyright","Aacute","Acircumflex","Adieresis","Agrave","Aring","Atilde","Ccedilla","Eacute","Ecircumflex","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Ntilde","Oacute","Ocircumflex","Odieresis","Ograve","Otilde","Scaron","Uacute","Ucircumflex","Udieresis","Ugrave","Yacute","Ydieresis","Zcaron","aacute","acircumflex","adieresis","agrave","aring","atilde","ccedilla","eacute","ecircumflex","edieresis","egrave","iacute","icircumflex","idieresis","igrave","ntilde","oacute","ocircumflex","odieresis","ograve","otilde","scaron","uacute","ucircumflex","udieresis","ugrave","yacute","ydieresis","zcaron","exclamsmall","Hungarumlautsmall","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","266 ff","onedotenleader","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","commasuperior","threequartersemdash","periodsuperior","questionsmall","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","ffi","ffl","parenleftinferior","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","exclamdownsmall","centoldstyle","Lslashsmall","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","Dotaccentsmall","Macronsmall","figuredash","hypheninferior","Ogoneksmall","Ringsmall","Cedillasmall","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall","001.000","001.001","001.002","001.003","Black","Bold","Book","Light","Medium","Regular","Roman","Semibold"],pe=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","","endash","dagger","daggerdbl","periodcentered","","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","","questiondown","","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","","ring","cedilla","","hungarumlaut","ogonek","caron","emdash","","","","","","","","","","","","","","","","","AE","","ordfeminine","","","","","Lslash","Oslash","OE","ordmasculine","","","","","","ae","","","","dotlessi","","","lslash","oslash","oe","germandbls"],he=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclamsmall","Hungarumlautsmall","","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","commasuperior","threequartersemdash","periodsuperior","questionsmall","","asuperior","bsuperior","centsuperior","dsuperior","esuperior","","","isuperior","","","lsuperior","msuperior","nsuperior","osuperior","","","rsuperior","ssuperior","tsuperior","","ff","fi","fl","ffi","ffl","parenleftinferior","","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdownsmall","centoldstyle","Lslashsmall","","","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","","Dotaccentsmall","","","Macronsmall","","","figuredash","hypheninferior","","","Ogoneksmall","Ringsmall","Cedillasmall","","","","onequarter","onehalf","threequarters","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","","","zerosuperior","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall"],fe=[".notdef",".null","nonmarkingreturn","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quotesingle","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","grave","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","Adieresis","Aring","Ccedilla","Eacute","Ntilde","Odieresis","Udieresis","aacute","agrave","acircumflex","adieresis","atilde","aring","ccedilla","eacute","egrave","ecircumflex","edieresis","iacute","igrave","icircumflex","idieresis","ntilde","oacute","ograve","ocircumflex","odieresis","otilde","uacute","ugrave","ucircumflex","udieresis","dagger","degree","cent","sterling","section","bullet","paragraph","germandbls","registered","copyright","trademark","acute","dieresis","notequal","AE","Oslash","infinity","plusminus","lessequal","greaterequal","yen","mu","partialdiff","summation","product","pi","integral","ordfeminine","ordmasculine","Omega","ae","oslash","questiondown","exclamdown","logicalnot","radical","florin","approxequal","Delta","guillemotleft","guillemotright","ellipsis","nonbreakingspace","Agrave","Atilde","Otilde","OE","oe","endash","emdash","quotedblleft","quotedblright","quoteleft","quoteright","divide","lozenge","ydieresis","Ydieresis","fraction","currency","guilsinglleft","guilsinglright","fi","fl","daggerdbl","periodcentered","quotesinglbase","quotedblbase","perthousand","Acircumflex","Ecircumflex","Aacute","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Oacute","Ocircumflex","apple","Ograve","Uacute","Ucircumflex","Ugrave","dotlessi","circumflex","tilde","macron","breve","dotaccent","ring","cedilla","hungarumlaut","ogonek","caron","Lslash","lslash","Scaron","scaron","Zcaron","zcaron","brokenbar","Eth","eth","Yacute","yacute","Thorn","thorn","minus","multiply","onesuperior","twosuperior","threesuperior","onehalf","onequarter","threequarters","franc","Gbreve","gbreve","Idotaccent","Scedilla","scedilla","Cacute","cacute","Ccaron","ccaron","dcroat"];function de(e){this.font=e}function ve(e){this.cmap=e}function ge(e,t){this.encoding=e,this.charset=t}function me(e){switch(e.version){case 1:this.names=fe.slice();break;case 2:this.names=new Array(e.numberOfGlyphs);for(var t=0;t<e.numberOfGlyphs;t++)e.glyphNameIndex[t]<fe.length?this.names[t]=fe[e.glyphNameIndex[t]]:this.names[t]=e.names[e.glyphNameIndex[t]-fe.length];break;case 2.5:this.names=new Array(e.numberOfGlyphs);for(var r=0;r<e.numberOfGlyphs;r++)this.names[r]=fe[r+e.glyphNameIndex[r]];break;case 3:default:this.names=[]}}de.prototype.charToGlyphIndex=function(e){var t=e.codePointAt(0),r=this.font.glyphs;if(r)for(var n=0;n<r.length;n+=1)for(var a=r.get(n),o=0;o<a.unicodes.length;o+=1)if(a.unicodes[o]===t)return n;return null},ve.prototype.charToGlyphIndex=function(e){return this.cmap.glyphIndexMap[e.codePointAt(0)]||0},ge.prototype.charToGlyphIndex=function(e){var t=e.codePointAt(0),r=this.encoding[t];return this.charset.indexOf(r)},me.prototype.nameToGlyphIndex=function(e){return this.names.indexOf(e)},me.prototype.glyphIndexToName=function(e){return this.names[e]};var ye=function(e,t,r,n,a){e.beginPath(),e.moveTo(t,r),e.lineTo(n,a),e.stroke()};function be(e){this.bindConstructorValues(e)}function xe(e,t,r){Object.defineProperty(e,t,{get:function(){return e.path,e[r]},set:function(t){e[r]=t},enumerable:!0,configurable:!0})}function Se(e,t){if(this.font=e,this.glyphs={},Array.isArray(t))for(var r=0;r<t.length;r++){var n=t[r];n.path.unitsPerEm=e.unitsPerEm,this.glyphs[r]=n}this.length=t&&t.length||0}be.prototype.bindConstructorValues=function(e){var t,r;this.index=e.index||0,this.name=e.name||null,this.unicode=e.unicode||void 0,this.unicodes=e.unicodes||void 0!==e.unicode?[e.unicode]:[],"xMin"in e&&(this.xMin=e.xMin),"yMin"in e&&(this.yMin=e.yMin),"xMax"in e&&(this.xMax=e.xMax),"yMax"in e&&(this.yMax=e.yMax),"advanceWidth"in e&&(this.advanceWidth=e.advanceWidth),Object.defineProperty(this,"path",(t=e.path,r=t||new E,{configurable:!0,get:function(){return"function"==typeof r&&(r=r()),r},set:function(e){r=e}}))},be.prototype.addUnicode=function(e){0===this.unicodes.length&&(this.unicode=e),this.unicodes.push(e)},be.prototype.getBoundingBox=function(){return this.path.getBoundingBox()},be.prototype.getPath=function(e,t,r,n,a){var o,s;e=void 0!==e?e:0,t=void 0!==t?t:0,r=void 0!==r?r:72,n||(n={});var i=n.xScale,u=n.yScale;if(n.hinting&&a&&a.hinting&&(s=this.path&&a.hinting.exec(this,r)),s)o=a.hinting.getCommands(s),e=Math.round(e),t=Math.round(t),i=u=1;else{o=this.path.commands;var l=1/(this.path.unitsPerEm||1e3)*r;void 0===i&&(i=l),void 0===u&&(u=l)}for(var c=new E,p=0;p<o.length;p+=1){var h=o[p];"M"===h.type?c.moveTo(e+h.x*i,t+-h.y*u):"L"===h.type?c.lineTo(e+h.x*i,t+-h.y*u):"Q"===h.type?c.quadraticCurveTo(e+h.x1*i,t+-h.y1*u,e+h.x*i,t+-h.y*u):"C"===h.type?c.curveTo(e+h.x1*i,t+-h.y1*u,e+h.x2*i,t+-h.y2*u,e+h.x*i,t+-h.y*u):"Z"===h.type&&c.closePath()}return c},be.prototype.getContours=function(){if(void 0===this.points)return[];for(var e=[],t=[],r=0;r<this.points.length;r+=1){var n=this.points[r];t.push(n),n.lastPointOfContour&&(e.push(t),t=[])}return L.argument(0===t.length,"There are still points left in the current contour."),e},be.prototype.getMetrics=function(){for(var e=this.path.commands,t=[],r=[],n=0;n<e.length;n+=1){var a=e[n];"Z"!==a.type&&(t.push(a.x),r.push(a.y)),"Q"!==a.type&&"C"!==a.type||(t.push(a.x1),r.push(a.y1)),"C"===a.type&&(t.push(a.x2),r.push(a.y2))}var o={xMin:Math.min.apply(null,t),yMin:Math.min.apply(null,r),xMax:Math.max.apply(null,t),yMax:Math.max.apply(null,r),leftSideBearing:this.leftSideBearing};return isFinite(o.xMin)||(o.xMin=0),isFinite(o.xMax)||(o.xMax=this.advanceWidth),isFinite(o.yMin)||(o.yMin=0),isFinite(o.yMax)||(o.yMax=0),o.rightSideBearing=this.advanceWidth-o.leftSideBearing-(o.xMax-o.xMin),o},be.prototype.draw=function(e,t,r,n,a){this.getPath(t,r,n,a).draw(e)},be.prototype.drawPoints=function(e,t,r,n){function a(t,r,n,a){e.beginPath();for(var o=0;o<t.length;o+=1)e.moveTo(r+t[o].x*a,n+t[o].y*a),e.arc(r+t[o].x*a,n+t[o].y*a,2,0,2*Math.PI,!1);e.closePath(),e.fill()}t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:24;for(var o=1/this.path.unitsPerEm*n,s=[],i=[],u=this.path,l=0;l<u.commands.length;l+=1){var c=u.commands[l];void 0!==c.x&&s.push({x:c.x,y:-c.y}),void 0!==c.x1&&i.push({x:c.x1,y:-c.y1}),void 0!==c.x2&&i.push({x:c.x2,y:-c.y2})}e.fillStyle="blue",a(s,t,r,o),e.fillStyle="red",a(i,t,r,o)},be.prototype.drawMetrics=function(e,t,r,n){var a;t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:24,a=1/this.path.unitsPerEm*n,e.lineWidth=1,e.strokeStyle="black",ye(e,t,-1e4,t,1e4),ye(e,-1e4,r,1e4,r);var o=this.xMin||0,s=this.yMin||0,i=this.xMax||0,u=this.yMax||0,l=this.advanceWidth||0;e.strokeStyle="blue",ye(e,t+o*a,-1e4,t+o*a,1e4),ye(e,t+i*a,-1e4,t+i*a,1e4),ye(e,-1e4,r+-s*a,1e4,r+-s*a),ye(e,-1e4,r+-u*a,1e4,r+-u*a),e.strokeStyle="green",ye(e,t+l*a,-1e4,t+l*a,1e4)},Se.prototype.get=function(e){if(void 0===this.glyphs[e]){this.font._push(e),"function"==typeof this.glyphs[e]&&(this.glyphs[e]=this.glyphs[e]());var t=this.glyphs[e],r=this.font._IndexToUnicodeMap[e];if(r)for(var n=0;n<r.unicodes.length;n++)t.addUnicode(r.unicodes[n]);this.font.cffEncoding?this.font.isCIDFont?t.name="gid"+e:t.name=this.font.cffEncoding.charset[e]:this.font.glyphNames.names&&(t.name=this.font.glyphNames.glyphIndexToName(e)),this.glyphs[e].advanceWidth=this.font._hmtxTableData[e].advanceWidth,this.glyphs[e].leftSideBearing=this.font._hmtxTableData[e].leftSideBearing}else"function"==typeof this.glyphs[e]&&(this.glyphs[e]=this.glyphs[e]());return this.glyphs[e]},Se.prototype.push=function(e,t){this.glyphs[e]=t,this.length++};var Me={GlyphSet:Se,glyphLoader:function(e,t){return new be({index:t,font:e})},ttfGlyphLoader:function(e,t,r,n,a,o){return function(){var s=new be({index:t,font:e});return s.path=function(){r(s,n,a);var t=o(e.glyphs,s);return t.unitsPerEm=e.unitsPerEm,t},xe(s,"xMin","_xMin"),xe(s,"xMax","_xMax"),xe(s,"yMin","_yMin"),xe(s,"yMax","_yMax"),s}},cffGlyphLoader:function(e,t,r,n){return function(){var a=new be({index:t,font:e});return a.path=function(){var t=r(e,a,n);return t.unitsPerEm=e.unitsPerEm,t},a}}};function Te(e,t){if(e===t)return!0;if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r+=1)if(!Te(e[r],t[r]))return!1;return!0}return!1}function Ue(e){return e.length<1240?107:e.length<33900?1131:32768}function ke(e,t,r){var n,a,o=[],s=[],i=se.getCard16(e,t);if(0!==i){var u=se.getByte(e,t+2);n=t+(i+1)*u+2;for(var l=t+3,c=0;c<i+1;c+=1)o.push(se.getOffset(e,l,u)),l+=u;a=n+o[i]}else a=t+2;for(var p=0;p<o.length-1;p+=1){var h=se.getBytes(e,n+o[p],n+o[p+1]);r&&(h=r(h)),s.push(h)}return{objects:s,startOffset:t,endOffset:a}}function Oe(e,t){if(28===t)return e.parseByte()<<8|e.parseByte();if(29===t)return e.parseByte()<<24|e.parseByte()<<16|e.parseByte()<<8|e.parseByte();if(30===t)return function(e){for(var t="",r=["0","1","2","3","4","5","6","7","8","9",".","E","E-",null,"-"];;){var n=e.parseByte(),a=n>>4,o=15&n;if(15===a)break;if(t+=r[a],15===o)break;t+=r[o]}return parseFloat(t)}(e);if(t>=32&&t<=246)return t-139;if(t>=247&&t<=250)return 256*(t-247)+e.parseByte()+108;if(t>=251&&t<=254)return 256*-(t-251)-e.parseByte()-108;throw new Error("Invalid b0 "+t)}function Ee(e,t,r){t=void 0!==t?t:0;var n=new se.Parser(e,t),a=[],o=[];for(r=void 0!==r?r:e.length;n.relativeOffset<r;){var s=n.parseByte();s<=21?(12===s&&(s=1200+n.parseByte()),a.push([s,o]),o=[]):o.push(Oe(n,s))}return function(e){for(var t={},r=0;r<e.length;r+=1){var n,a=e[r][0],o=e[r][1];if(n=1===o.length?o[0]:o,t.hasOwnProperty(a)&&!isNaN(t[a]))throw new Error("Object "+t+" already has key "+a);t[a]=n}return t}(a)}function we(e,t){return t<=390?ce[t]:e[t-391]}function Re(e,t,r){for(var n,a={},o=0;o<t.length;o+=1){var s=t[o];if(Array.isArray(s.type)){var i=[];i.length=s.type.length;for(var u=0;u<s.type.length;u++)void 0===(n=void 0!==e[s.op]?e[s.op][u]:void 0)&&(n=void 0!==s.value&&void 0!==s.value[u]?s.value[u]:null),"SID"===s.type[u]&&(n=we(r,n)),i[u]=n;a[s.name]=i}else void 0===(n=e[s.op])&&(n=void 0!==s.value?s.value:null),"SID"===s.type&&(n=we(r,n)),a[s.name]=n}return a}var Le=[{name:"version",op:0,type:"SID"},{name:"notice",op:1,type:"SID"},{name:"copyright",op:1200,type:"SID"},{name:"fullName",op:2,type:"SID"},{name:"familyName",op:3,type:"SID"},{name:"weight",op:4,type:"SID"},{name:"isFixedPitch",op:1201,type:"number",value:0},{name:"italicAngle",op:1202,type:"number",value:0},{name:"underlinePosition",op:1203,type:"number",value:-100},{name:"underlineThickness",op:1204,type:"number",value:50},{name:"paintType",op:1205,type:"number",value:0},{name:"charstringType",op:1206,type:"number",value:2},{name:"fontMatrix",op:1207,type:["real","real","real","real","real","real"],value:[.001,0,0,.001,0,0]},{name:"uniqueId",op:13,type:"number"},{name:"fontBBox",op:5,type:["number","number","number","number"],value:[0,0,0,0]},{name:"strokeWidth",op:1208,type:"number",value:0},{name:"xuid",op:14,type:[],value:null},{name:"charset",op:15,type:"offset",value:0},{name:"encoding",op:16,type:"offset",value:0},{name:"charStrings",op:17,type:"offset",value:0},{name:"private",op:18,type:["number","offset"],value:[0,0]},{name:"ros",op:1230,type:["SID","SID","number"]},{name:"cidFontVersion",op:1231,type:"number",value:0},{name:"cidFontRevision",op:1232,type:"number",value:0},{name:"cidFontType",op:1233,type:"number",value:0},{name:"cidCount",op:1234,type:"number",value:8720},{name:"uidBase",op:1235,type:"number"},{name:"fdArray",op:1236,type:"offset"},{name:"fdSelect",op:1237,type:"offset"},{name:"fontName",op:1238,type:"SID"}],Ce=[{name:"subrs",op:19,type:"offset",value:0},{name:"defaultWidthX",op:20,type:"number",value:0},{name:"nominalWidthX",op:21,type:"number",value:0}];function De(e,t){return Re(Ee(e,0,e.byteLength),Le,t)}function Ie(e,t,r,n){return Re(Ee(e,t,r),Ce,n)}function Ae(e,t,r,n){for(var a=[],o=0;o<r.length;o+=1){var s=De(new DataView(new Uint8Array(r[o]).buffer),n);s._subrs=[],s._subrsBias=0;var i=s.private[0],u=s.private[1];if(0!==i&&0!==u){var l=Ie(e,u+t,i,n);if(s._defaultWidthX=l.defaultWidthX,s._nominalWidthX=l.nominalWidthX,0!==l.subrs){var c=ke(e,u+l.subrs+t);s._subrs=c.objects,s._subrsBias=Ue(s._subrs)}s._privateDict=l}a.push(s)}return a}function Be(e,t,r){var n,a,o,s,i,u,l,c,p=new E,h=[],f=0,d=!1,v=!1,g=0,m=0;if(e.isCIDFont){var y=e.tables.cff.topDict._fdSelect[t.index],b=e.tables.cff.topDict._fdArray[y];i=b._subrs,u=b._subrsBias,l=b._defaultWidthX,c=b._nominalWidthX}else i=e.tables.cff.topDict._subrs,u=e.tables.cff.topDict._subrsBias,l=e.tables.cff.topDict._defaultWidthX,c=e.tables.cff.topDict._nominalWidthX;var x=l;function S(e,t){v&&p.closePath(),p.moveTo(e,t),v=!0}function M(){h.length%2!=0&&!d&&(x=h.shift()+c),f+=h.length>>1,h.length=0,d=!0}return function r(l){for(var y,b,T,U,k,O,E,w,R,L,C,D,I=0;I<l.length;){var A=l[I];switch(I+=1,A){case 1:case 3:M();break;case 4:h.length>1&&!d&&(x=h.shift()+c,d=!0),m+=h.pop(),S(g,m);break;case 5:for(;h.length>0;)g+=h.shift(),m+=h.shift(),p.lineTo(g,m);break;case 6:for(;h.length>0&&(g+=h.shift(),p.lineTo(g,m),0!==h.length);)m+=h.shift(),p.lineTo(g,m);break;case 7:for(;h.length>0&&(m+=h.shift(),p.lineTo(g,m),0!==h.length);)g+=h.shift(),p.lineTo(g,m);break;case 8:for(;h.length>0;)n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s+h.shift(),p.curveTo(n,a,o,s,g,m);break;case 10:k=h.pop()+u,(O=i[k])&&r(O);break;case 11:return;case 12:switch(A=l[I],I+=1,A){case 35:n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),E=o+h.shift(),w=s+h.shift(),R=E+h.shift(),L=w+h.shift(),C=R+h.shift(),D=L+h.shift(),g=C+h.shift(),m=D+h.shift(),h.shift(),p.curveTo(n,a,o,s,E,w),p.curveTo(R,L,C,D,g,m);break;case 34:n=g+h.shift(),a=m,o=n+h.shift(),s=a+h.shift(),E=o+h.shift(),w=s,R=E+h.shift(),L=s,C=R+h.shift(),D=m,g=C+h.shift(),p.curveTo(n,a,o,s,E,w),p.curveTo(R,L,C,D,g,m);break;case 36:n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),E=o+h.shift(),w=s,R=E+h.shift(),L=s,C=R+h.shift(),D=L+h.shift(),g=C+h.shift(),p.curveTo(n,a,o,s,E,w),p.curveTo(R,L,C,D,g,m);break;case 37:n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),E=o+h.shift(),w=s+h.shift(),R=E+h.shift(),L=w+h.shift(),C=R+h.shift(),D=L+h.shift(),Math.abs(C-g)>Math.abs(D-m)?g=C+h.shift():m=D+h.shift(),p.curveTo(n,a,o,s,E,w),p.curveTo(R,L,C,D,g,m);break;default:console.log("Glyph "+t.index+": unknown operator 1200"+A),h.length=0}break;case 14:h.length>0&&!d&&(x=h.shift()+c,d=!0),v&&(p.closePath(),v=!1);break;case 18:M();break;case 19:case 20:M(),I+=f+7>>3;break;case 21:h.length>2&&!d&&(x=h.shift()+c,d=!0),m+=h.pop(),S(g+=h.pop(),m);break;case 22:h.length>1&&!d&&(x=h.shift()+c,d=!0),S(g+=h.pop(),m);break;case 23:M();break;case 24:for(;h.length>2;)n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s+h.shift(),p.curveTo(n,a,o,s,g,m);g+=h.shift(),m+=h.shift(),p.lineTo(g,m);break;case 25:for(;h.length>6;)g+=h.shift(),m+=h.shift(),p.lineTo(g,m);n=g+h.shift(),a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s+h.shift(),p.curveTo(n,a,o,s,g,m);break;case 26:for(h.length%2&&(g+=h.shift());h.length>0;)n=g,a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o,m=s+h.shift(),p.curveTo(n,a,o,s,g,m);break;case 27:for(h.length%2&&(m+=h.shift());h.length>0;)n=g+h.shift(),a=m,o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s,p.curveTo(n,a,o,s,g,m);break;case 28:y=l[I],b=l[I+1],h.push((y<<24|b<<16)>>16),I+=2;break;case 29:k=h.pop()+e.gsubrsBias,(O=e.gsubrs[k])&&r(O);break;case 30:for(;h.length>0&&(n=g,a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s+(1===h.length?h.shift():0),p.curveTo(n,a,o,s,g,m),0!==h.length);)n=g+h.shift(),a=m,o=n+h.shift(),s=a+h.shift(),m=s+h.shift(),g=o+(1===h.length?h.shift():0),p.curveTo(n,a,o,s,g,m);break;case 31:for(;h.length>0&&(n=g+h.shift(),a=m,o=n+h.shift(),s=a+h.shift(),m=s+h.shift(),g=o+(1===h.length?h.shift():0),p.curveTo(n,a,o,s,g,m),0!==h.length);)n=g,a=m+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),m=s+(1===h.length?h.shift():0),p.curveTo(n,a,o,s,g,m);break;default:A<32?console.log("Glyph "+t.index+": unknown operator "+A):A<247?h.push(A-139):A<251?(y=l[I],I+=1,h.push(256*(A-247)+y+108)):A<255?(y=l[I],I+=1,h.push(256*-(A-251)-y-108)):(y=l[I],b=l[I+1],T=l[I+2],U=l[I+3],I+=4,h.push((y<<24|b<<16|T<<8|U)/65536))}}}(r),t.advanceWidth=x,p}function Pe(e,t){var r,n=ce.indexOf(e);return n>=0&&(r=n),(n=t.indexOf(e))>=0?r=n+ce.length:(r=ce.length+t.length,t.push(e)),r}function Ge(e,t,r){for(var n={},a=0;a<e.length;a+=1){var o=e[a],s=t[o.name];void 0===s||Te(s,o.value)||("SID"===o.type&&(s=Pe(s,r)),n[o.op]={name:o.name,type:o.type,value:s})}return n}function Fe(e,t){var r=new J.Record("Top DICT",[{name:"dict",type:"DICT",value:{}}]);return r.dict=Ge(Le,e,t),r}function Ne(e){var t=new J.Record("Top DICT INDEX",[{name:"topDicts",type:"INDEX",value:[]}]);return t.topDicts=[{name:"topDict_0",type:"TABLE",value:e}],t}function He(e){var t=[],r=e.path;t.push({name:"width",type:"NUMBER",value:e.advanceWidth});for(var n=0,a=0,o=0;o<r.commands.length;o+=1){var s=void 0,i=void 0,u=r.commands[o];if("Q"===u.type){var l=1/3,c=2/3;u={type:"C",x:u.x,y:u.y,x1:l*n+c*u.x1,y1:l*a+c*u.y1,x2:l*u.x+c*u.x1,y2:l*u.y+c*u.y1}}if("M"===u.type)s=Math.round(u.x-n),i=Math.round(u.y-a),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rmoveto",type:"OP",value:21}),n=Math.round(u.x),a=Math.round(u.y);else if("L"===u.type)s=Math.round(u.x-n),i=Math.round(u.y-a),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rlineto",type:"OP",value:5}),n=Math.round(u.x),a=Math.round(u.y);else if("C"===u.type){var p=Math.round(u.x1-n),h=Math.round(u.y1-a),f=Math.round(u.x2-u.x1),d=Math.round(u.y2-u.y1);s=Math.round(u.x-u.x2),i=Math.round(u.y-u.y2),t.push({name:"dx1",type:"NUMBER",value:p}),t.push({name:"dy1",type:"NUMBER",value:h}),t.push({name:"dx2",type:"NUMBER",value:f}),t.push({name:"dy2",type:"NUMBER",value:d}),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rrcurveto",type:"OP",value:8}),n=Math.round(u.x),a=Math.round(u.y)}}return t.push({name:"endchar",type:"OP",value:14}),t}var ze=function(e,t,r,n){r.tables.cff={};var a=function(e,t){var r={};return r.formatMajor=se.getCard8(e,t),r.formatMinor=se.getCard8(e,t+1),r.size=se.getCard8(e,t+2),r.offsetSize=se.getCard8(e,t+3),r.startOffset=t,r.endOffset=t+4,r}(e,t),o=ke(e,a.endOffset,se.bytesToString),s=ke(e,o.endOffset),i=ke(e,s.endOffset,se.bytesToString),u=ke(e,i.endOffset);r.gsubrs=u.objects,r.gsubrsBias=Ue(r.gsubrs);var l=Ae(e,t,s.objects,i.objects);if(1!==l.length)throw new Error("CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = "+l.length);var c=l[0];if(r.tables.cff.topDict=c,c._privateDict&&(r.defaultWidthX=c._privateDict.defaultWidthX,r.nominalWidthX=c._privateDict.nominalWidthX),void 0!==c.ros[0]&&void 0!==c.ros[1]&&(r.isCIDFont=!0),r.isCIDFont){var p=c.fdArray,h=c.fdSelect;if(0===p||0===h)throw new Error("Font is marked as a CID font, but FDArray and/or FDSelect information is missing");var f=ke(e,p+=t),d=Ae(e,t,f.objects,i.objects);c._fdArray=d,h+=t,c._fdSelect=function(e,t,r,n){var a,o=[],s=new se.Parser(e,t),i=s.parseCard8();if(0===i)for(var u=0;u<r;u++){if((a=s.parseCard8())>=n)throw new Error("CFF table CID Font FDSelect has bad FD index value "+a+" (FD count "+n+")");o.push(a)}else{if(3!==i)throw new Error("CFF Table CID Font FDSelect table has unsupported format "+i);var l,c=s.parseCard16(),p=s.parseCard16();if(0!==p)throw new Error("CFF Table CID Font FDSelect format 3 range has bad initial GID "+p);for(var h=0;h<c;h++){if(a=s.parseCard8(),l=s.parseCard16(),a>=n)throw new Error("CFF table CID Font FDSelect has bad FD index value "+a+" (FD count "+n+")");if(l>r)throw new Error("CFF Table CID Font FDSelect format 3 range has bad GID "+l);for(;p<l;p++)o.push(a);p=l}if(l!==r)throw new Error("CFF Table CID Font FDSelect format 3 range has bad final GID "+l)}return o}(e,h,r.numGlyphs,d.length)}var v,g=t+c.private[1],m=Ie(e,g,c.private[0],i.objects);if(r.defaultWidthX=m.defaultWidthX,r.nominalWidthX=m.nominalWidthX,0!==m.subrs){var y=g+m.subrs,b=ke(e,y);r.subrs=b.objects,r.subrsBias=Ue(r.subrs)}else r.subrs=[],r.subrsBias=0;n.lowMemory?(v=function(e,t){var r,n,a=[],o=se.getCard16(e,t);if(0!==o){var s=se.getByte(e,t+2);r=t+(o+1)*s+2;for(var i=t+3,u=0;u<o+1;u+=1)a.push(se.getOffset(e,i,s)),i+=s;n=r+a[o]}else n=t+2;return{offsets:a,startOffset:t,endOffset:n}}(e,t+c.charStrings),r.nGlyphs=v.offsets.length):(v=ke(e,t+c.charStrings),r.nGlyphs=v.objects.length);var x=function(e,t,r,n){var a,o,s=new se.Parser(e,t);r-=1;var i=[".notdef"],u=s.parseCard8();if(0===u)for(var l=0;l<r;l+=1)a=s.parseSID(),i.push(we(n,a));else if(1===u)for(;i.length<=r;){a=s.parseSID(),o=s.parseCard8();for(var c=0;c<=o;c+=1)i.push(we(n,a)),a+=1}else{if(2!==u)throw new Error("Unknown charset format "+u);for(;i.length<=r;){a=s.parseSID(),o=s.parseCard16();for(var p=0;p<=o;p+=1)i.push(we(n,a)),a+=1}}return i}(e,t+c.charset,r.nGlyphs,i.objects);if(0===c.encoding?r.cffEncoding=new ge(pe,x):1===c.encoding?r.cffEncoding=new ge(he,x):r.cffEncoding=function(e,t,r){var n,a={},o=new se.Parser(e,t),s=o.parseCard8();if(0===s)for(var i=o.parseCard8(),u=0;u<i;u+=1)a[n=o.parseCard8()]=u;else{if(1!==s)throw new Error("Unknown encoding format "+s);var l=o.parseCard8();n=1;for(var c=0;c<l;c+=1)for(var p=o.parseCard8(),h=o.parseCard8(),f=p;f<=p+h;f+=1)a[f]=n,n+=1}return new ge(a,r)}(e,t+c.encoding,x),r.encoding=r.encoding||r.cffEncoding,r.glyphs=new Me.GlyphSet(r),n.lowMemory)r._push=function(n){var a=function(e,t,r,n,a){var o=se.getCard16(r,n),s=0;0!==o&&(s=n+(o+1)*se.getByte(r,n+2)+2);var i=se.getBytes(r,s+t[e],s+t[e+1]);return i}(n,v.offsets,e,t+c.charStrings);r.glyphs.push(n,Me.cffGlyphLoader(r,n,Be,a))};else for(var S=0;S<r.nGlyphs;S+=1){var M=v.objects[S];r.glyphs.push(S,Me.cffGlyphLoader(r,S,Be,M))}},qe=function(e,t){for(var r,n=new J.Table("CFF ",[{name:"header",type:"RECORD"},{name:"nameIndex",type:"RECORD"},{name:"topDictIndex",type:"RECORD"},{name:"stringIndex",type:"RECORD"},{name:"globalSubrIndex",type:"RECORD"},{name:"charsets",type:"RECORD"},{name:"charStringsIndex",type:"RECORD"},{name:"privateDict",type:"RECORD"}]),a=1/t.unitsPerEm,o={version:t.version,fullName:t.fullName,familyName:t.familyName,weight:t.weightName,fontBBox:t.fontBBox||[0,0,0,0],fontMatrix:[a,0,0,a,0,0],charset:999,encoding:0,charStrings:999,private:[0,999]},s=[],i=1;i<e.length;i+=1)r=e.get(i),s.push(r.name);var u=[];n.header=new J.Record("Header",[{name:"major",type:"Card8",value:1},{name:"minor",type:"Card8",value:0},{name:"hdrSize",type:"Card8",value:4},{name:"major",type:"Card8",value:1}]),n.nameIndex=function(e){var t=new J.Record("Name INDEX",[{name:"names",type:"INDEX",value:[]}]);t.names=[];for(var r=0;r<e.length;r+=1)t.names.push({name:"name_"+r,type:"NAME",value:e[r]});return t}([t.postScriptName]);var l=Fe(o,u);n.topDictIndex=Ne(l),n.globalSubrIndex=new J.Record("Global Subr INDEX",[{name:"subrs",type:"INDEX",value:[]}]),n.charsets=function(e,t){for(var r=new J.Record("Charsets",[{name:"format",type:"Card8",value:0}]),n=0;n<e.length;n+=1){var a=Pe(e[n],t);r.fields.push({name:"glyph_"+n,type:"SID",value:a})}return r}(s,u),n.charStringsIndex=function(e){for(var t=new J.Record("CharStrings INDEX",[{name:"charStrings",type:"INDEX",value:[]}]),r=0;r<e.length;r+=1){var n=e.get(r),a=He(n);t.charStrings.push({name:n.name,type:"CHARSTRING",value:a})}return t}(e),n.privateDict=function(e,t){var r=new J.Record("Private DICT",[{name:"dict",type:"DICT",value:{}}]);return r.dict=Ge(Ce,{},t),r}(0,u),n.stringIndex=function(e){var t=new J.Record("String INDEX",[{name:"strings",type:"INDEX",value:[]}]);t.strings=[];for(var r=0;r<e.length;r+=1)t.strings.push({name:"string_"+r,type:"STRING",value:e[r]});return t}(u);var c=n.header.sizeOf()+n.nameIndex.sizeOf()+n.topDictIndex.sizeOf()+n.stringIndex.sizeOf()+n.globalSubrIndex.sizeOf();return o.charset=c,o.encoding=0,o.charStrings=o.charset+n.charsets.sizeOf(),o.private[1]=o.charStrings+n.charStringsIndex.sizeOf(),l=Fe(o,u),n.topDictIndex=Ne(l),n},We=function(e,t){var r={},n=new se.Parser(e,t);return r.version=n.parseVersion(),r.fontRevision=Math.round(1e3*n.parseFixed())/1e3,r.checkSumAdjustment=n.parseULong(),r.magicNumber=n.parseULong(),L.argument(1594834165===r.magicNumber,"Font header has wrong magic number."),r.flags=n.parseUShort(),r.unitsPerEm=n.parseUShort(),r.created=n.parseLongDateTime(),r.modified=n.parseLongDateTime(),r.xMin=n.parseShort(),r.yMin=n.parseShort(),r.xMax=n.parseShort(),r.yMax=n.parseShort(),r.macStyle=n.parseUShort(),r.lowestRecPPEM=n.parseUShort(),r.fontDirectionHint=n.parseShort(),r.indexToLocFormat=n.parseShort(),r.glyphDataFormat=n.parseShort(),r},_e=function(e){var t=Math.round((new Date).getTime()/1e3)+2082844800,r=t;return e.createdTimestamp&&(r=e.createdTimestamp+2082844800),new J.Table("head",[{name:"version",type:"FIXED",value:65536},{name:"fontRevision",type:"FIXED",value:65536},{name:"checkSumAdjustment",type:"ULONG",value:0},{name:"magicNumber",type:"ULONG",value:1594834165},{name:"flags",type:"USHORT",value:0},{name:"unitsPerEm",type:"USHORT",value:1e3},{name:"created",type:"LONGDATETIME",value:r},{name:"modified",type:"LONGDATETIME",value:t},{name:"xMin",type:"SHORT",value:0},{name:"yMin",type:"SHORT",value:0},{name:"xMax",type:"SHORT",value:0},{name:"yMax",type:"SHORT",value:0},{name:"macStyle",type:"USHORT",value:0},{name:"lowestRecPPEM",type:"USHORT",value:0},{name:"fontDirectionHint",type:"SHORT",value:2},{name:"indexToLocFormat",type:"SHORT",value:0},{name:"glyphDataFormat",type:"SHORT",value:0}],e)},Xe=function(e,t){var r={},n=new se.Parser(e,t);return r.version=n.parseVersion(),r.ascender=n.parseShort(),r.descender=n.parseShort(),r.lineGap=n.parseShort(),r.advanceWidthMax=n.parseUShort(),r.minLeftSideBearing=n.parseShort(),r.minRightSideBearing=n.parseShort(),r.xMaxExtent=n.parseShort(),r.caretSlopeRise=n.parseShort(),r.caretSlopeRun=n.parseShort(),r.caretOffset=n.parseShort(),n.relativeOffset+=8,r.metricDataFormat=n.parseShort(),r.numberOfHMetrics=n.parseUShort(),r},Ve=function(e){return new J.Table("hhea",[{name:"version",type:"FIXED",value:65536},{name:"ascender",type:"FWORD",value:0},{name:"descender",type:"FWORD",value:0},{name:"lineGap",type:"FWORD",value:0},{name:"advanceWidthMax",type:"UFWORD",value:0},{name:"minLeftSideBearing",type:"FWORD",value:0},{name:"minRightSideBearing",type:"FWORD",value:0},{name:"xMaxExtent",type:"FWORD",value:0},{name:"caretSlopeRise",type:"SHORT",value:1},{name:"caretSlopeRun",type:"SHORT",value:0},{name:"caretOffset",type:"SHORT",value:0},{name:"reserved1",type:"SHORT",value:0},{name:"reserved2",type:"SHORT",value:0},{name:"reserved3",type:"SHORT",value:0},{name:"reserved4",type:"SHORT",value:0},{name:"metricDataFormat",type:"SHORT",value:0},{name:"numberOfHMetrics",type:"USHORT",value:0}],e)},Ze=function(e,t,r,n,a,o,s){s.lowMemory?function(e,t,r,n,a){var o,s;e._hmtxTableData={};for(var i=new se.Parser(t,r),u=0;u<a;u+=1)u<n&&(o=i.parseUShort(),s=i.parseShort()),e._hmtxTableData[u]={advanceWidth:o,leftSideBearing:s}}(e,t,r,n,a):function(e,t,r,n,a){for(var o,s,i=new se.Parser(e,t),u=0;u<n;u+=1){u<r&&(o=i.parseUShort(),s=i.parseShort());var l=a.get(u);l.advanceWidth=o,l.leftSideBearing=s}}(t,r,n,a,o)},je=function(e){for(var t=new J.Table("hmtx",[]),r=0;r<e.length;r+=1){var n=e.get(r),a=n.advanceWidth||0,o=n.leftSideBearing||0;t.fields.push({name:"advanceWidth_"+r,type:"USHORT",value:a}),t.fields.push({name:"leftSideBearing_"+r,type:"SHORT",value:o})}return t},Ye=function(e){for(var t=new J.Table("ltag",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"numTags",type:"ULONG",value:e.length}]),r="",n=12+4*e.length,a=0;a<e.length;++a){var o=r.indexOf(e[a]);o<0&&(o=r.length,r+=e[a]),t.fields.push({name:"offset "+a,type:"USHORT",value:n+o}),t.fields.push({name:"length "+a,type:"USHORT",value:e[a].length})}return t.fields.push({name:"stringPool",type:"CHARARRAY",value:r}),t},Qe=function(e,t){var r=new se.Parser(e,t),n=r.parseULong();L.argument(1===n,"Unsupported ltag table version."),r.skip("uLong",1);for(var a=r.parseULong(),o=[],s=0;s<a;s++){for(var i="",u=t+r.parseUShort(),l=r.parseUShort(),c=u;c<u+l;++c)i+=String.fromCharCode(e.getInt8(c));o.push(i)}return o},Ke=function(e,t){var r={},n=new se.Parser(e,t);return r.version=n.parseVersion(),r.numGlyphs=n.parseUShort(),1===r.version&&(r.maxPoints=n.parseUShort(),r.maxContours=n.parseUShort(),r.maxCompositePoints=n.parseUShort(),r.maxCompositeContours=n.parseUShort(),r.maxZones=n.parseUShort(),r.maxTwilightPoints=n.parseUShort(),r.maxStorage=n.parseUShort(),r.maxFunctionDefs=n.parseUShort(),r.maxInstructionDefs=n.parseUShort(),r.maxStackElements=n.parseUShort(),r.maxSizeOfInstructions=n.parseUShort(),r.maxComponentElements=n.parseUShort(),r.maxComponentDepth=n.parseUShort()),r},Je=function(e){return new J.Table("maxp",[{name:"version",type:"FIXED",value:20480},{name:"numGlyphs",type:"USHORT",value:e}])},$e=["copyright","fontFamily","fontSubfamily","uniqueID","fullName","version","postScriptName","trademark","manufacturer","designer","description","manufacturerURL","designerURL","license","licenseURL","reserved","preferredFamily","preferredSubfamily","compatibleFullName","sampleText","postScriptFindFontName","wwsFamily","wwsSubfamily"],et={0:"en",1:"fr",2:"de",3:"it",4:"nl",5:"sv",6:"es",7:"da",8:"pt",9:"no",10:"he",11:"ja",12:"ar",13:"fi",14:"el",15:"is",16:"mt",17:"tr",18:"hr",19:"zh-Hant",20:"ur",21:"hi",22:"th",23:"ko",24:"lt",25:"pl",26:"hu",27:"es",28:"lv",29:"se",30:"fo",31:"fa",32:"ru",33:"zh",34:"nl-BE",35:"ga",36:"sq",37:"ro",38:"cz",39:"sk",40:"si",41:"yi",42:"sr",43:"mk",44:"bg",45:"uk",46:"be",47:"uz",48:"kk",49:"az-Cyrl",50:"az-Arab",51:"hy",52:"ka",53:"mo",54:"ky",55:"tg",56:"tk",57:"mn-CN",58:"mn",59:"ps",60:"ks",61:"ku",62:"sd",63:"bo",64:"ne",65:"sa",66:"mr",67:"bn",68:"as",69:"gu",70:"pa",71:"or",72:"ml",73:"kn",74:"ta",75:"te",76:"si",77:"my",78:"km",79:"lo",80:"vi",81:"id",82:"tl",83:"ms",84:"ms-Arab",85:"am",86:"ti",87:"om",88:"so",89:"sw",90:"rw",91:"rn",92:"ny",93:"mg",94:"eo",128:"cy",129:"eu",130:"ca",131:"la",132:"qu",133:"gn",134:"ay",135:"tt",136:"ug",137:"dz",138:"jv",139:"su",140:"gl",141:"af",142:"br",143:"iu",144:"gd",145:"gv",146:"ga",147:"to",148:"el-polyton",149:"kl",150:"az",151:"nn"},tt={0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:5,11:1,12:4,13:0,14:6,15:0,16:0,17:0,18:0,19:2,20:4,21:9,22:21,23:3,24:29,25:29,26:29,27:29,28:29,29:0,30:0,31:4,32:7,33:25,34:0,35:0,36:0,37:0,38:29,39:29,40:0,41:5,42:7,43:7,44:7,45:7,46:7,47:7,48:7,49:7,50:4,51:24,52:23,53:7,54:7,55:7,56:7,57:27,58:7,59:4,60:4,61:4,62:4,63:26,64:9,65:9,66:9,67:13,68:13,69:11,70:10,71:12,72:17,73:16,74:14,75:15,76:18,77:19,78:20,79:22,80:30,81:0,82:0,83:0,84:4,85:28,86:28,87:28,88:0,89:0,90:0,91:0,92:0,93:0,94:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:7,136:4,137:26,138:0,139:0,140:0,141:0,142:0,143:28,144:0,145:0,146:0,147:0,148:6,149:0,150:0,151:0},rt={1078:"af",1052:"sq",1156:"gsw",1118:"am",5121:"ar-DZ",15361:"ar-BH",3073:"ar",2049:"ar-IQ",11265:"ar-JO",13313:"ar-KW",12289:"ar-LB",4097:"ar-LY",6145:"ary",8193:"ar-OM",16385:"ar-QA",1025:"ar-SA",10241:"ar-SY",7169:"aeb",14337:"ar-AE",9217:"ar-YE",1067:"hy",1101:"as",2092:"az-Cyrl",1068:"az",1133:"ba",1069:"eu",1059:"be",2117:"bn",1093:"bn-IN",8218:"bs-Cyrl",5146:"bs",1150:"br",1026:"bg",1027:"ca",3076:"zh-HK",5124:"zh-MO",2052:"zh",4100:"zh-SG",1028:"zh-TW",1155:"co",1050:"hr",4122:"hr-BA",1029:"cs",1030:"da",1164:"prs",1125:"dv",2067:"nl-BE",1043:"nl",3081:"en-AU",10249:"en-BZ",4105:"en-CA",9225:"en-029",16393:"en-IN",6153:"en-IE",8201:"en-JM",17417:"en-MY",5129:"en-NZ",13321:"en-PH",18441:"en-SG",7177:"en-ZA",11273:"en-TT",2057:"en-GB",1033:"en",12297:"en-ZW",1061:"et",1080:"fo",1124:"fil",1035:"fi",2060:"fr-BE",3084:"fr-CA",1036:"fr",5132:"fr-LU",6156:"fr-MC",4108:"fr-CH",1122:"fy",1110:"gl",1079:"ka",3079:"de-AT",1031:"de",5127:"de-LI",4103:"de-LU",2055:"de-CH",1032:"el",1135:"kl",1095:"gu",1128:"ha",1037:"he",1081:"hi",1038:"hu",1039:"is",1136:"ig",1057:"id",1117:"iu",2141:"iu-Latn",2108:"ga",1076:"xh",1077:"zu",1040:"it",2064:"it-CH",1041:"ja",1099:"kn",1087:"kk",1107:"km",1158:"quc",1159:"rw",1089:"sw",1111:"kok",1042:"ko",1088:"ky",1108:"lo",1062:"lv",1063:"lt",2094:"dsb",1134:"lb",1071:"mk",2110:"ms-BN",1086:"ms",1100:"ml",1082:"mt",1153:"mi",1146:"arn",1102:"mr",1148:"moh",1104:"mn",2128:"mn-CN",1121:"ne",1044:"nb",2068:"nn",1154:"oc",1096:"or",1123:"ps",1045:"pl",1046:"pt",2070:"pt-PT",1094:"pa",1131:"qu-BO",2155:"qu-EC",3179:"qu",1048:"ro",1047:"rm",1049:"ru",9275:"smn",4155:"smj-NO",5179:"smj",3131:"se-FI",1083:"se",2107:"se-SE",8251:"sms",6203:"sma-NO",7227:"sms",1103:"sa",7194:"sr-Cyrl-BA",3098:"sr",6170:"sr-Latn-BA",2074:"sr-Latn",1132:"nso",1074:"tn",1115:"si",1051:"sk",1060:"sl",11274:"es-AR",16394:"es-BO",13322:"es-CL",9226:"es-CO",5130:"es-CR",7178:"es-DO",12298:"es-EC",17418:"es-SV",4106:"es-GT",18442:"es-HN",2058:"es-MX",19466:"es-NI",6154:"es-PA",15370:"es-PY",10250:"es-PE",20490:"es-PR",3082:"es",1034:"es",21514:"es-US",14346:"es-UY",8202:"es-VE",2077:"sv-FI",1053:"sv",1114:"syr",1064:"tg",2143:"tzm",1097:"ta",1092:"tt",1098:"te",1054:"th",1105:"bo",1055:"tr",1090:"tk",1152:"ug",1058:"uk",1070:"hsb",1056:"ur",2115:"uz-Cyrl",1091:"uz",1066:"vi",1106:"cy",1160:"wo",1157:"sah",1144:"ii",1130:"yo"};function nt(e,t,r){switch(e){case 0:if(65535===t)return"und";if(r)return r[t];break;case 1:return et[t];case 3:return rt[t]}}var at="utf-16",ot={0:"macintosh",1:"x-mac-japanese",2:"x-mac-chinesetrad",3:"x-mac-korean",6:"x-mac-greek",7:"x-mac-cyrillic",9:"x-mac-devanagai",10:"x-mac-gurmukhi",11:"x-mac-gujarati",12:"x-mac-oriya",13:"x-mac-bengali",14:"x-mac-tamil",15:"x-mac-telugu",16:"x-mac-kannada",17:"x-mac-malayalam",18:"x-mac-sinhalese",19:"x-mac-burmese",20:"x-mac-khmer",21:"x-mac-thai",22:"x-mac-lao",23:"x-mac-georgian",24:"x-mac-armenian",25:"x-mac-chinesesimp",26:"x-mac-tibetan",27:"x-mac-mongolian",28:"x-mac-ethiopic",29:"x-mac-ce",30:"x-mac-vietnamese",31:"x-mac-extarabic"},st={15:"x-mac-icelandic",17:"x-mac-turkish",18:"x-mac-croatian",24:"x-mac-ce",25:"x-mac-ce",26:"x-mac-ce",27:"x-mac-ce",28:"x-mac-ce",30:"x-mac-icelandic",37:"x-mac-romanian",38:"x-mac-ce",39:"x-mac-ce",40:"x-mac-ce",143:"x-mac-inuit",146:"x-mac-gaelic"};function it(e,t,r){switch(e){case 0:return at;case 1:return st[r]||ot[t];case 3:if(1===t||10===t)return at}}function ut(e){var t={};for(var r in e)t[e[r]]=parseInt(r);return t}function lt(e,t,r,n,a,o){return new J.Record("NameRecord",[{name:"platformID",type:"USHORT",value:e},{name:"encodingID",type:"USHORT",value:t},{name:"languageID",type:"USHORT",value:r},{name:"nameID",type:"USHORT",value:n},{name:"length",type:"USHORT",value:a},{name:"offset",type:"USHORT",value:o}])}function ct(e,t){var r=function(e,t){var r=e.length,n=t.length-r+1;e:for(var a=0;a<n;a++)for(;a<n;a++){for(var o=0;o<r;o++)if(t[a+o]!==e[o])continue e;return a}return-1}(e,t);if(r<0){r=t.length;for(var n=0,a=e.length;n<a;++n)t.push(e[n])}return r}var pt=function(e,t,r){for(var n={},a=new se.Parser(e,t),o=a.parseUShort(),s=a.parseUShort(),i=a.offset+a.parseUShort(),u=0;u<s;u++){var l=a.parseUShort(),c=a.parseUShort(),p=a.parseUShort(),h=a.parseUShort(),f=$e[h]||h,d=a.parseUShort(),v=a.parseUShort(),g=nt(l,p,r),m=it(l,c,p);if(void 0!==m&&void 0!==g){var y;if(y=m===at?D.UTF16(e,i+v,d):D.MACSTRING(e,i+v,d,m)){var b=n[f];void 0===b&&(b=n[f]={}),b[g]=y}}}return 1===o&&a.parseUShort(),n},ht=function(e,t){var r,n=[],a={},o=ut($e);for(var s in e){var i=o[s];if(void 0===i&&(i=s),r=parseInt(i),isNaN(r))throw new Error('Name table entry "'+s+'" does not exist, see nameTableNames for complete list.');a[r]=e[s],n.push(r)}for(var u=ut(et),l=ut(rt),c=[],p=[],h=0;h<n.length;h++){var f=a[r=n[h]];for(var d in f){var v=f[d],g=1,m=u[d],y=tt[m],b=it(g,y,m),x=I.MACSTRING(v,b);void 0===x&&(g=0,(m=t.indexOf(d))<0&&(m=t.length,t.push(d)),y=4,x=I.UTF16(v));var S=ct(x,p);c.push(lt(g,y,m,r,x.length,S));var M=l[d];if(void 0!==M){var T=I.UTF16(v),U=ct(T,p);c.push(lt(3,1,M,r,T.length,U))}}}c.sort((function(e,t){return e.platformID-t.platformID||e.encodingID-t.encodingID||e.languageID-t.languageID||e.nameID-t.nameID}));for(var k=new J.Table("name",[{name:"format",type:"USHORT",value:0},{name:"count",type:"USHORT",value:c.length},{name:"stringOffset",type:"USHORT",value:6+12*c.length}]),O=0;O<c.length;O++)k.fields.push({name:"record_"+O,type:"RECORD",value:c[O]});return k.fields.push({name:"strings",type:"LITERAL",value:p}),k},ft=[{begin:0,end:127},{begin:128,end:255},{begin:256,end:383},{begin:384,end:591},{begin:592,end:687},{begin:688,end:767},{begin:768,end:879},{begin:880,end:1023},{begin:11392,end:11519},{begin:1024,end:1279},{begin:1328,end:1423},{begin:1424,end:1535},{begin:42240,end:42559},{begin:1536,end:1791},{begin:1984,end:2047},{begin:2304,end:2431},{begin:2432,end:2559},{begin:2560,end:2687},{begin:2688,end:2815},{begin:2816,end:2943},{begin:2944,end:3071},{begin:3072,end:3199},{begin:3200,end:3327},{begin:3328,end:3455},{begin:3584,end:3711},{begin:3712,end:3839},{begin:4256,end:4351},{begin:6912,end:7039},{begin:4352,end:4607},{begin:7680,end:7935},{begin:7936,end:8191},{begin:8192,end:8303},{begin:8304,end:8351},{begin:8352,end:8399},{begin:8400,end:8447},{begin:8448,end:8527},{begin:8528,end:8591},{begin:8592,end:8703},{begin:8704,end:8959},{begin:8960,end:9215},{begin:9216,end:9279},{begin:9280,end:9311},{begin:9312,end:9471},{begin:9472,end:9599},{begin:9600,end:9631},{begin:9632,end:9727},{begin:9728,end:9983},{begin:9984,end:10175},{begin:12288,end:12351},{begin:12352,end:12447},{begin:12448,end:12543},{begin:12544,end:12591},{begin:12592,end:12687},{begin:43072,end:43135},{begin:12800,end:13055},{begin:13056,end:13311},{begin:44032,end:55215},{begin:55296,end:57343},{begin:67840,end:67871},{begin:19968,end:40959},{begin:57344,end:63743},{begin:12736,end:12783},{begin:64256,end:64335},{begin:64336,end:65023},{begin:65056,end:65071},{begin:65040,end:65055},{begin:65104,end:65135},{begin:65136,end:65279},{begin:65280,end:65519},{begin:65520,end:65535},{begin:3840,end:4095},{begin:1792,end:1871},{begin:1920,end:1983},{begin:3456,end:3583},{begin:4096,end:4255},{begin:4608,end:4991},{begin:5024,end:5119},{begin:5120,end:5759},{begin:5760,end:5791},{begin:5792,end:5887},{begin:6016,end:6143},{begin:6144,end:6319},{begin:10240,end:10495},{begin:40960,end:42127},{begin:5888,end:5919},{begin:66304,end:66351},{begin:66352,end:66383},{begin:66560,end:66639},{begin:118784,end:119039},{begin:119808,end:120831},{begin:1044480,end:1048573},{begin:65024,end:65039},{begin:917504,end:917631},{begin:6400,end:6479},{begin:6480,end:6527},{begin:6528,end:6623},{begin:6656,end:6687},{begin:11264,end:11359},{begin:11568,end:11647},{begin:19904,end:19967},{begin:43008,end:43055},{begin:65536,end:65663},{begin:65856,end:65935},{begin:66432,end:66463},{begin:66464,end:66527},{begin:66640,end:66687},{begin:66688,end:66735},{begin:67584,end:67647},{begin:68096,end:68191},{begin:119552,end:119647},{begin:73728,end:74751},{begin:119648,end:119679},{begin:7040,end:7103},{begin:7168,end:7247},{begin:7248,end:7295},{begin:43136,end:43231},{begin:43264,end:43311},{begin:43312,end:43359},{begin:43520,end:43615},{begin:65936,end:65999},{begin:66e3,end:66047},{begin:66208,end:66271},{begin:127024,end:127135}],dt=function(e,t){var r={},n=new se.Parser(e,t);r.version=n.parseUShort(),r.xAvgCharWidth=n.parseShort(),r.usWeightClass=n.parseUShort(),r.usWidthClass=n.parseUShort(),r.fsType=n.parseUShort(),r.ySubscriptXSize=n.parseShort(),r.ySubscriptYSize=n.parseShort(),r.ySubscriptXOffset=n.parseShort(),r.ySubscriptYOffset=n.parseShort(),r.ySuperscriptXSize=n.parseShort(),r.ySuperscriptYSize=n.parseShort(),r.ySuperscriptXOffset=n.parseShort(),r.ySuperscriptYOffset=n.parseShort(),r.yStrikeoutSize=n.parseShort(),r.yStrikeoutPosition=n.parseShort(),r.sFamilyClass=n.parseShort(),r.panose=[];for(var a=0;a<10;a++)r.panose[a]=n.parseByte();return r.ulUnicodeRange1=n.parseULong(),r.ulUnicodeRange2=n.parseULong(),r.ulUnicodeRange3=n.parseULong(),r.ulUnicodeRange4=n.parseULong(),r.achVendID=String.fromCharCode(n.parseByte(),n.parseByte(),n.parseByte(),n.parseByte()),r.fsSelection=n.parseUShort(),r.usFirstCharIndex=n.parseUShort(),r.usLastCharIndex=n.parseUShort(),r.sTypoAscender=n.parseShort(),r.sTypoDescender=n.parseShort(),r.sTypoLineGap=n.parseShort(),r.usWinAscent=n.parseUShort(),r.usWinDescent=n.parseUShort(),r.version>=1&&(r.ulCodePageRange1=n.parseULong(),r.ulCodePageRange2=n.parseULong()),r.version>=2&&(r.sxHeight=n.parseShort(),r.sCapHeight=n.parseShort(),r.usDefaultChar=n.parseUShort(),r.usBreakChar=n.parseUShort(),r.usMaxContent=n.parseUShort()),r},vt=function(e){return new J.Table("OS/2",[{name:"version",type:"USHORT",value:3},{name:"xAvgCharWidth",type:"SHORT",value:0},{name:"usWeightClass",type:"USHORT",value:0},{name:"usWidthClass",type:"USHORT",value:0},{name:"fsType",type:"USHORT",value:0},{name:"ySubscriptXSize",type:"SHORT",value:650},{name:"ySubscriptYSize",type:"SHORT",value:699},{name:"ySubscriptXOffset",type:"SHORT",value:0},{name:"ySubscriptYOffset",type:"SHORT",value:140},{name:"ySuperscriptXSize",type:"SHORT",value:650},{name:"ySuperscriptYSize",type:"SHORT",value:699},{name:"ySuperscriptXOffset",type:"SHORT",value:0},{name:"ySuperscriptYOffset",type:"SHORT",value:479},{name:"yStrikeoutSize",type:"SHORT",value:49},{name:"yStrikeoutPosition",type:"SHORT",value:258},{name:"sFamilyClass",type:"SHORT",value:0},{name:"bFamilyType",type:"BYTE",value:0},{name:"bSerifStyle",type:"BYTE",value:0},{name:"bWeight",type:"BYTE",value:0},{name:"bProportion",type:"BYTE",value:0},{name:"bContrast",type:"BYTE",value:0},{name:"bStrokeVariation",type:"BYTE",value:0},{name:"bArmStyle",type:"BYTE",value:0},{name:"bLetterform",type:"BYTE",value:0},{name:"bMidline",type:"BYTE",value:0},{name:"bXHeight",type:"BYTE",value:0},{name:"ulUnicodeRange1",type:"ULONG",value:0},{name:"ulUnicodeRange2",type:"ULONG",value:0},{name:"ulUnicodeRange3",type:"ULONG",value:0},{name:"ulUnicodeRange4",type:"ULONG",value:0},{name:"achVendID",type:"CHARARRAY",value:"XXXX"},{name:"fsSelection",type:"USHORT",value:0},{name:"usFirstCharIndex",type:"USHORT",value:0},{name:"usLastCharIndex",type:"USHORT",value:0},{name:"sTypoAscender",type:"SHORT",value:0},{name:"sTypoDescender",type:"SHORT",value:0},{name:"sTypoLineGap",type:"SHORT",value:0},{name:"usWinAscent",type:"USHORT",value:0},{name:"usWinDescent",type:"USHORT",value:0},{name:"ulCodePageRange1",type:"ULONG",value:0},{name:"ulCodePageRange2",type:"ULONG",value:0},{name:"sxHeight",type:"SHORT",value:0},{name:"sCapHeight",type:"SHORT",value:0},{name:"usDefaultChar",type:"USHORT",value:0},{name:"usBreakChar",type:"USHORT",value:0},{name:"usMaxContext",type:"USHORT",value:0}],e)},gt=function(e){for(var t=0;t<ft.length;t+=1){var r=ft[t];if(e>=r.begin&&e<r.end)return t}return-1},mt=function(e,t){var r={},n=new se.Parser(e,t);switch(r.version=n.parseVersion(),r.italicAngle=n.parseFixed(),r.underlinePosition=n.parseShort(),r.underlineThickness=n.parseShort(),r.isFixedPitch=n.parseULong(),r.minMemType42=n.parseULong(),r.maxMemType42=n.parseULong(),r.minMemType1=n.parseULong(),r.maxMemType1=n.parseULong(),r.version){case 1:r.names=fe.slice();break;case 2:r.numberOfGlyphs=n.parseUShort(),r.glyphNameIndex=new Array(r.numberOfGlyphs);for(var a=0;a<r.numberOfGlyphs;a++)r.glyphNameIndex[a]=n.parseUShort();r.names=[];for(var o=0;o<r.numberOfGlyphs;o++)if(r.glyphNameIndex[o]>=fe.length){var s=n.parseChar();r.names.push(n.parseString(s))}break;case 2.5:r.numberOfGlyphs=n.parseUShort(),r.offset=new Array(r.numberOfGlyphs);for(var i=0;i<r.numberOfGlyphs;i++)r.offset[i]=n.parseChar()}return r},yt=function(){return new J.Table("post",[{name:"version",type:"FIXED",value:196608},{name:"italicAngle",type:"FIXED",value:0},{name:"underlinePosition",type:"FWORD",value:0},{name:"underlineThickness",type:"FWORD",value:0},{name:"isFixedPitch",type:"ULONG",value:0},{name:"minMemType42",type:"ULONG",value:0},{name:"maxMemType42",type:"ULONG",value:0},{name:"minMemType1",type:"ULONG",value:0},{name:"maxMemType1",type:"ULONG",value:0}])},bt=new Array(9);bt[1]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{substFormat:1,coverage:this.parsePointer(ae.coverage),deltaGlyphId:this.parseUShort()}:2===t?{substFormat:2,coverage:this.parsePointer(ae.coverage),substitute:this.parseOffset16List()}:void L.assert(!1,"0x"+e.toString(16)+": lookup type 1 format must be 1 or 2.")},bt[2]=function(){var e=this.parseUShort();return L.argument(1===e,"GSUB Multiple Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(ae.coverage),sequences:this.parseListOfLists()}},bt[3]=function(){var e=this.parseUShort();return L.argument(1===e,"GSUB Alternate Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(ae.coverage),alternateSets:this.parseListOfLists()}},bt[4]=function(){var e=this.parseUShort();return L.argument(1===e,"GSUB ligature table identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(ae.coverage),ligatureSets:this.parseListOfLists((function(){return{ligGlyph:this.parseUShort(),components:this.parseUShortList(this.parseUShort()-1)}}))}};var xt={sequenceIndex:ae.uShort,lookupListIndex:ae.uShort};bt[5]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();if(1===t)return{substFormat:t,coverage:this.parsePointer(ae.coverage),ruleSets:this.parseListOfLists((function(){var e=this.parseUShort(),t=this.parseUShort();return{input:this.parseUShortList(e-1),lookupRecords:this.parseRecordList(t,xt)}}))};if(2===t)return{substFormat:t,coverage:this.parsePointer(ae.coverage),classDef:this.parsePointer(ae.classDef),classSets:this.parseListOfLists((function(){var e=this.parseUShort(),t=this.parseUShort();return{classes:this.parseUShortList(e-1),lookupRecords:this.parseRecordList(t,xt)}}))};if(3===t){var r=this.parseUShort(),n=this.parseUShort();return{substFormat:t,coverages:this.parseList(r,ae.pointer(ae.coverage)),lookupRecords:this.parseRecordList(n,xt)}}L.assert(!1,"0x"+e.toString(16)+": lookup type 5 format must be 1, 2 or 3.")},bt[6]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{substFormat:1,coverage:this.parsePointer(ae.coverage),chainRuleSets:this.parseListOfLists((function(){return{backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(xt)}}))}:2===t?{substFormat:2,coverage:this.parsePointer(ae.coverage),backtrackClassDef:this.parsePointer(ae.classDef),inputClassDef:this.parsePointer(ae.classDef),lookaheadClassDef:this.parsePointer(ae.classDef),chainClassSet:this.parseListOfLists((function(){return{backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(xt)}}))}:3===t?{substFormat:3,backtrackCoverage:this.parseList(ae.pointer(ae.coverage)),inputCoverage:this.parseList(ae.pointer(ae.coverage)),lookaheadCoverage:this.parseList(ae.pointer(ae.coverage)),lookupRecords:this.parseRecordList(xt)}:void L.assert(!1,"0x"+e.toString(16)+": lookup type 6 format must be 1, 2 or 3.")},bt[7]=function(){var e=this.parseUShort();L.argument(1===e,"GSUB Extension Substitution subtable identifier-format must be 1");var t=this.parseUShort(),r=new ae(this.data,this.offset+this.parseULong());return{substFormat:1,lookupType:t,extension:bt[t].call(r)}},bt[8]=function(){var e=this.parseUShort();return L.argument(1===e,"GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(ae.coverage),backtrackCoverage:this.parseList(ae.pointer(ae.coverage)),lookaheadCoverage:this.parseList(ae.pointer(ae.coverage)),substitutes:this.parseUShortList()}};var St=new Array(9);St[1]=function(e){return 1===e.substFormat?new J.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new J.Coverage(e.coverage)},{name:"deltaGlyphID",type:"USHORT",value:e.deltaGlyphId}]):new J.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:2},{name:"coverage",type:"TABLE",value:new J.Coverage(e.coverage)}].concat(J.ushortList("substitute",e.substitute)))},St[3]=function(e){return L.assert(1===e.substFormat,"Lookup type 3 substFormat must be 1."),new J.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new J.Coverage(e.coverage)}].concat(J.tableList("altSet",e.alternateSets,(function(e){return new J.Table("alternateSetTable",J.ushortList("alternate",e))}))))},St[4]=function(e){return L.assert(1===e.substFormat,"Lookup type 4 substFormat must be 1."),new J.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new J.Coverage(e.coverage)}].concat(J.tableList("ligSet",e.ligatureSets,(function(e){return new J.Table("ligatureSetTable",J.tableList("ligature",e,(function(e){return new J.Table("ligatureTable",[{name:"ligGlyph",type:"USHORT",value:e.ligGlyph}].concat(J.ushortList("component",e.components,e.components.length+1)))})))}))))};var Mt=function(e,t){var r=new ae(e,t=t||0),n=r.parseVersion(1);return L.argument(1===n||1.1===n,"Unsupported GSUB table version."),1===n?{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(bt)}:{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(bt),variations:r.parseFeatureVariationsList()}},Tt=function(e){return new J.Table("GSUB",[{name:"version",type:"ULONG",value:65536},{name:"scripts",type:"TABLE",value:new J.ScriptList(e.scripts)},{name:"features",type:"TABLE",value:new J.FeatureList(e.features)},{name:"lookups",type:"TABLE",value:new J.LookupList(e.lookups,St)}])},Ut=function(e,t){var r=new se.Parser(e,t),n=r.parseULong();L.argument(1===n,"Unsupported META table version."),r.parseULong(),r.parseULong();for(var a=r.parseULong(),o={},s=0;s<a;s++){var i=r.parseTag(),u=r.parseULong(),l=r.parseULong(),c=D.UTF8(e,t+u,l);o[i]=c}return o},kt=function(e){var t=Object.keys(e).length,r="",n=16+12*t,a=new J.Table("meta",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"offset",type:"ULONG",value:n},{name:"numTags",type:"ULONG",value:t}]);for(var o in e){var s=r.length;r+=e[o],a.fields.push({name:"tag "+o,type:"TAG",value:o}),a.fields.push({name:"offset "+o,type:"ULONG",value:n+s}),a.fields.push({name:"length "+o,type:"ULONG",value:e[o].length})}return a.fields.push({name:"stringPool",type:"CHARARRAY",value:r}),a};function Ot(e){return Math.log(e)/Math.log(2)|0}function Et(e){for(;e.length%4!=0;)e.push(0);for(var t=0,r=0;r<e.length;r+=4)t+=(e[r]<<24)+(e[r+1]<<16)+(e[r+2]<<8)+e[r+3];return t%Math.pow(2,32)}function wt(e,t,r,n){return new J.Record("Table Record",[{name:"tag",type:"TAG",value:void 0!==e?e:""},{name:"checkSum",type:"ULONG",value:void 0!==t?t:0},{name:"offset",type:"ULONG",value:void 0!==r?r:0},{name:"length",type:"ULONG",value:void 0!==n?n:0}])}function Rt(e){var t=new J.Table("sfnt",[{name:"version",type:"TAG",value:"OTTO"},{name:"numTables",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);t.tables=e,t.numTables=e.length;var r=Math.pow(2,Ot(t.numTables));t.searchRange=16*r,t.entrySelector=Ot(r),t.rangeShift=16*t.numTables-t.searchRange;for(var n=[],a=[],o=t.sizeOf()+wt().sizeOf()*t.numTables;o%4!=0;)o+=1,a.push({name:"padding",type:"BYTE",value:0});for(var s=0;s<e.length;s+=1){var i=e[s];L.argument(4===i.tableName.length,"Table name"+i.tableName+" is invalid.");var u=i.sizeOf(),l=wt(i.tableName,Et(i.encode()),o,u);for(n.push({name:l.tag+" Table Record",type:"RECORD",value:l}),a.push({name:i.tableName+" table",type:"RECORD",value:i}),o+=u,L.argument(!isNaN(o),"Something went wrong calculating the offset.");o%4!=0;)o+=1,a.push({name:"padding",type:"BYTE",value:0})}return n.sort((function(e,t){return e.value.tag>t.value.tag?1:-1})),t.fields=t.fields.concat(n),t.fields=t.fields.concat(a),t}function Lt(e,t,r){for(var n=0;n<t.length;n+=1){var a=e.charToGlyphIndex(t[n]);if(a>0)return e.glyphs.get(a).getMetrics()}return r}function Ct(e){for(var t=0,r=0;r<e.length;r+=1)t+=e[r];return t/e.length}var Dt=function(e){for(var t,r=[],n=[],a=[],o=[],s=[],i=[],u=[],l=0,c=0,p=0,h=0,f=0,d=0;d<e.glyphs.length;d+=1){var v=e.glyphs.get(d),g=0|v.unicode;if(isNaN(v.advanceWidth))throw new Error("Glyph "+v.name+" ("+d+"): advanceWidth is not a number.");(t>g||void 0===t)&&g>0&&(t=g),l<g&&(l=g);var m=gt(g);if(m<32)c|=1<<m;else if(m<64)p|=1<<m-32;else if(m<96)h|=1<<m-64;else{if(!(m<123))throw new Error("Unicode ranges bits > 123 are reserved for internal usage");f|=1<<m-96}if(".notdef"!==v.name){var y=v.getMetrics();r.push(y.xMin),n.push(y.yMin),a.push(y.xMax),o.push(y.yMax),i.push(y.leftSideBearing),u.push(y.rightSideBearing),s.push(v.advanceWidth)}}var b={xMin:Math.min.apply(null,r),yMin:Math.min.apply(null,n),xMax:Math.max.apply(null,a),yMax:Math.max.apply(null,o),advanceWidthMax:Math.max.apply(null,s),advanceWidthAvg:Ct(s),minLeftSideBearing:Math.min.apply(null,i),maxLeftSideBearing:Math.max.apply(null,i),minRightSideBearing:Math.min.apply(null,u)};b.ascender=e.ascender,b.descender=e.descender;var x=_e({flags:3,unitsPerEm:e.unitsPerEm,xMin:b.xMin,yMin:b.yMin,xMax:b.xMax,yMax:b.yMax,lowestRecPPEM:3,createdTimestamp:e.createdTimestamp}),S=Ve({ascender:b.ascender,descender:b.descender,advanceWidthMax:b.advanceWidthMax,minLeftSideBearing:b.minLeftSideBearing,minRightSideBearing:b.minRightSideBearing,xMaxExtent:b.maxLeftSideBearing+(b.xMax-b.xMin),numberOfHMetrics:e.glyphs.length}),M=Je(e.glyphs.length),T=vt(Object.assign({xAvgCharWidth:Math.round(b.advanceWidthAvg),usFirstCharIndex:t,usLastCharIndex:l,ulUnicodeRange1:c,ulUnicodeRange2:p,ulUnicodeRange3:h,ulUnicodeRange4:f,sTypoAscender:b.ascender,sTypoDescender:b.descender,sTypoLineGap:0,usWinAscent:b.yMax,usWinDescent:Math.abs(b.yMin),ulCodePageRange1:1,sxHeight:Lt(e,"xyvw",{yMax:Math.round(b.ascender/2)}).yMax,sCapHeight:Lt(e,"HIKLEFJMNTZBDPRAGOQSUVWXY",b).yMax,usDefaultChar:e.hasChar(" ")?32:0,usBreakChar:e.hasChar(" ")?32:0},e.tables.os2)),U=je(e.glyphs),k=le(e.glyphs),O=e.getEnglishName("fontFamily"),E=e.getEnglishName("fontSubfamily"),w=O+" "+E,R=e.getEnglishName("postScriptName");R||(R=O.replace(/\s/g,"")+"-"+E);var L={};for(var C in e.names)L[C]=e.names[C];L.uniqueID||(L.uniqueID={en:e.getEnglishName("manufacturer")+":"+w}),L.postScriptName||(L.postScriptName={en:R}),L.preferredFamily||(L.preferredFamily=e.names.fontFamily),L.preferredSubfamily||(L.preferredSubfamily=e.names.fontSubfamily);var D=[],I=ht(L,D),A=D.length>0?Ye(D):void 0,B=yt(),P=qe(e.glyphs,{version:e.getEnglishName("version"),fullName:w,familyName:O,weightName:E,postScriptName:R,unitsPerEm:e.unitsPerEm,fontBBox:[0,b.yMin,b.ascender,b.advanceWidthMax]}),G=e.metas&&Object.keys(e.metas).length>0?kt(e.metas):void 0,F=[x,S,M,T,I,k,B,P,U];A&&F.push(A),e.tables.gsub&&F.push(Tt(e.tables.gsub)),G&&F.push(G);for(var N=Rt(F),H=Et(N.encode()),z=N.fields,q=!1,W=0;W<z.length;W+=1)if("head table"===z[W].name){z[W].value.checkSumAdjustment=2981146554-H,q=!0;break}if(!q)throw new Error("Could not find head table with checkSum to adjust.");return N};function It(e,t){for(var r=0,n=e.length-1;r<=n;){var a=r+n>>>1,o=e[a].tag;if(o===t)return a;o<t?r=a+1:n=a-1}return-r-1}function At(e,t){for(var r=0,n=e.length-1;r<=n;){var a=r+n>>>1,o=e[a];if(o===t)return a;o<t?r=a+1:n=a-1}return-r-1}function Bt(e,t){for(var r,n=0,a=e.length-1;n<=a;){var o=n+a>>>1,s=(r=e[o]).start;if(s===t)return r;s<t?n=o+1:a=o-1}if(n>0)return t>(r=e[n-1]).end?0:r}function Pt(e,t){this.font=e,this.tableName=t}function Gt(e){Pt.call(this,e,"gpos")}function Ft(e){Pt.call(this,e,"gsub")}function Nt(e,t){var r=e.length;if(r!==t.length)return!1;for(var n=0;n<r;n++)if(e[n]!==t[n])return!1;return!0}function Ht(e,t,r){for(var n=e.subtables,a=0;a<n.length;a++){var o=n[a];if(o.substFormat===t)return o}if(r)return n.push(r),r}function zt(e){for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n<e.length;++n)r[n]=e[n];return t}function qt(e,t){if(!e)throw t}function Wt(e,t,r,n,a){var o;return(t&n)>0?(o=e.parseByte(),0==(t&a)&&(o=-o),o=r+o):o=(t&a)>0?r:r+e.parseShort(),o}function _t(e,t,r){var n,a,o=new se.Parser(t,r);if(e.numberOfContours=o.parseShort(),e._xMin=o.parseShort(),e._yMin=o.parseShort(),e._xMax=o.parseShort(),e._yMax=o.parseShort(),e.numberOfContours>0){for(var s=e.endPointIndices=[],i=0;i<e.numberOfContours;i+=1)s.push(o.parseUShort());e.instructionLength=o.parseUShort(),e.instructions=[];for(var u=0;u<e.instructionLength;u+=1)e.instructions.push(o.parseByte());var l=s[s.length-1]+1;n=[];for(var c=0;c<l;c+=1)if(a=o.parseByte(),n.push(a),(8&a)>0)for(var p=o.parseByte(),h=0;h<p;h+=1)n.push(a),c+=1;if(L.argument(n.length===l,"Bad flags."),s.length>0){var f,d=[];if(l>0){for(var v=0;v<l;v+=1)a=n[v],(f={}).onCurve=!!(1&a),f.lastPointOfContour=s.indexOf(v)>=0,d.push(f);for(var g=0,m=0;m<l;m+=1)a=n[m],(f=d[m]).x=Wt(o,a,g,2,16),g=f.x;for(var y=0,b=0;b<l;b+=1)a=n[b],(f=d[b]).y=Wt(o,a,y,4,32),y=f.y}e.points=d}else e.points=[]}else if(0===e.numberOfContours)e.points=[];else{e.isComposite=!0,e.points=[],e.components=[];for(var x=!0;x;){n=o.parseUShort();var S={glyphIndex:o.parseUShort(),xScale:1,scale01:0,scale10:0,yScale:1,dx:0,dy:0};(1&n)>0?(2&n)>0?(S.dx=o.parseShort(),S.dy=o.parseShort()):S.matchedPoints=[o.parseUShort(),o.parseUShort()]:(2&n)>0?(S.dx=o.parseChar(),S.dy=o.parseChar()):S.matchedPoints=[o.parseByte(),o.parseByte()],(8&n)>0?S.xScale=S.yScale=o.parseF2Dot14():(64&n)>0?(S.xScale=o.parseF2Dot14(),S.yScale=o.parseF2Dot14()):(128&n)>0&&(S.xScale=o.parseF2Dot14(),S.scale01=o.parseF2Dot14(),S.scale10=o.parseF2Dot14(),S.yScale=o.parseF2Dot14()),e.components.push(S),x=!!(32&n)}if(256&n){e.instructionLength=o.parseUShort(),e.instructions=[];for(var M=0;M<e.instructionLength;M+=1)e.instructions.push(o.parseByte())}}}function Xt(e,t){for(var r=[],n=0;n<e.length;n+=1){var a=e[n],o={x:t.xScale*a.x+t.scale01*a.y+t.dx,y:t.scale10*a.x+t.yScale*a.y+t.dy,onCurve:a.onCurve,lastPointOfContour:a.lastPointOfContour};r.push(o)}return r}function Vt(e){var t=new E;if(!e)return t;for(var r=function(e){for(var t=[],r=[],n=0;n<e.length;n+=1){var a=e[n];r.push(a),a.lastPointOfContour&&(t.push(r),r=[])}return L.argument(0===r.length,"There are still points left in the current contour."),t}(e),n=0;n<r.length;++n){var a=r[n],o=null,s=a[a.length-1],i=a[0];if(s.onCurve)t.moveTo(s.x,s.y);else if(i.onCurve)t.moveTo(i.x,i.y);else{var u={x:.5*(s.x+i.x),y:.5*(s.y+i.y)};t.moveTo(u.x,u.y)}for(var l=0;l<a.length;++l)if(o=s,s=i,i=a[(l+1)%a.length],s.onCurve)t.lineTo(s.x,s.y);else{var c=i;o.onCurve||(s.x,o.x,s.y,o.y),i.onCurve||(c={x:.5*(s.x+i.x),y:.5*(s.y+i.y)}),t.quadraticCurveTo(s.x,s.y,c.x,c.y)}t.closePath()}return t}function Zt(e,t){if(t.isComposite)for(var r=0;r<t.components.length;r+=1){var n=t.components[r],a=e.get(n.glyphIndex);if(a.getPath(),a.points){var o=void 0;if(void 0===n.matchedPoints)o=Xt(a.points,n);else{if(n.matchedPoints[0]>t.points.length-1||n.matchedPoints[1]>a.points.length-1)throw Error("Matched points out of range in "+t.name);var s=t.points[n.matchedPoints[0]],i=a.points[n.matchedPoints[1]],u={xScale:n.xScale,scale01:n.scale01,scale10:n.scale10,yScale:n.yScale,dx:0,dy:0};i=Xt([i],u)[0],u.dx=s.x-i.x,u.dy=s.y-i.y,o=Xt(a.points,u)}t.points=t.points.concat(o)}}return Vt(t.points)}Pt.prototype={searchTag:It,binSearch:At,getTable:function(e){var t=this.font.tables[this.tableName];return!t&&e&&(t=this.font.tables[this.tableName]=this.createDefaultTable()),t},getScriptNames:function(){var e=this.getTable();return e?e.scripts.map((function(e){return e.tag})):[]},getDefaultScriptName:function(){var e=this.getTable();if(e){for(var t=!1,r=0;r<e.scripts.length;r++){var n=e.scripts[r].tag;if("DFLT"===n)return n;"latn"===n&&(t=!0)}return t?"latn":void 0}},getScriptTable:function(e,t){var r=this.getTable(t);if(r){e=e||"DFLT";var n=r.scripts,a=It(r.scripts,e);if(a>=0)return n[a].script;if(t){var o={tag:e,script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}};return n.splice(-1-a,0,o),o.script}}},getLangSysTable:function(e,t,r){var n=this.getScriptTable(e,r);if(n){if(!t||"dflt"===t||"DFLT"===t)return n.defaultLangSys;var a=It(n.langSysRecords,t);if(a>=0)return n.langSysRecords[a].langSys;if(r){var o={tag:t,langSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]}};return n.langSysRecords.splice(-1-a,0,o),o.langSys}}},getFeatureTable:function(e,t,r,n){var a=this.getLangSysTable(e,t,n);if(a){for(var o,s=a.featureIndexes,i=this.font.tables[this.tableName].features,u=0;u<s.length;u++)if((o=i[s[u]]).tag===r)return o.feature;if(n){var l=i.length;return L.assert(0===l||r>=i[l-1].tag,"Features must be added in alphabetical order."),o={tag:r,feature:{params:0,lookupListIndexes:[]}},i.push(o),s.push(l),o.feature}}},getLookupTables:function(e,t,r,n,a){var o=this.getFeatureTable(e,t,r,a),s=[];if(o){for(var i,u=o.lookupListIndexes,l=this.font.tables[this.tableName].lookups,c=0;c<u.length;c++)(i=l[u[c]]).lookupType===n&&s.push(i);if(0===s.length&&a){i={lookupType:n,lookupFlag:0,subtables:[],markFilteringSet:void 0};var p=l.length;return l.push(i),u.push(p),[i]}}return s},getGlyphClass:function(e,t){switch(e.format){case 1:return e.startGlyph<=t&&t<e.startGlyph+e.classes.length?e.classes[t-e.startGlyph]:0;case 2:var r=Bt(e.ranges,t);return r?r.classId:0}},getCoverageIndex:function(e,t){switch(e.format){case 1:var r=At(e.glyphs,t);return r>=0?r:-1;case 2:var n=Bt(e.ranges,t);return n?n.index+t-n.start:-1}},expandCoverage:function(e){if(1===e.format)return e.glyphs;for(var t=[],r=e.ranges,n=0;n<r.length;n++)for(var a=r[n],o=a.start,s=a.end,i=o;i<=s;i++)t.push(i);return t}},Gt.prototype=Pt.prototype,Gt.prototype.init=function(){var e=this.getDefaultScriptName();this.defaultKerningTables=this.getKerningTables(e)},Gt.prototype.getKerningValue=function(e,t,r){for(var n=0;n<e.length;n++)for(var a=e[n].subtables,o=0;o<a.length;o++){var s=a[o],i=this.getCoverageIndex(s.coverage,t);if(!(i<0))switch(s.posFormat){case 1:for(var u=s.pairSets[i],l=0;l<u.length;l++){var c=u[l];if(c.secondGlyph===r)return c.value1&&c.value1.xAdvance||0}break;case 2:var p=this.getGlyphClass(s.classDef1,t),h=this.getGlyphClass(s.classDef2,r),f=s.classRecords[p][h];return f.value1&&f.value1.xAdvance||0}}return 0},Gt.prototype.getKerningTables=function(e,t){if(this.font.tables.gpos)return this.getLookupTables(e,t,"kern",2)},Ft.prototype=Pt.prototype,Ft.prototype.createDefaultTable=function(){return{version:1,scripts:[{tag:"DFLT",script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}}],features:[],lookups:[]}},Ft.prototype.getSingle=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,1),o=0;o<a.length;o++)for(var s=a[o].subtables,i=0;i<s.length;i++){var u=s[i],l=this.expandCoverage(u.coverage),c=void 0;if(1===u.substFormat){var p=u.deltaGlyphId;for(c=0;c<l.length;c++){var h=l[c];n.push({sub:h,by:h+p})}}else{var f=u.substitute;for(c=0;c<l.length;c++)n.push({sub:l[c],by:f[c]})}}return n},Ft.prototype.getAlternates=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,3),o=0;o<a.length;o++)for(var s=a[o].subtables,i=0;i<s.length;i++)for(var u=s[i],l=this.expandCoverage(u.coverage),c=u.alternateSets,p=0;p<l.length;p++)n.push({sub:l[p],by:c[p]});return n},Ft.prototype.getLigatures=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,4),o=0;o<a.length;o++)for(var s=a[o].subtables,i=0;i<s.length;i++)for(var u=s[i],l=this.expandCoverage(u.coverage),c=u.ligatureSets,p=0;p<l.length;p++)for(var h=l[p],f=c[p],d=0;d<f.length;d++){var v=f[d];n.push({sub:[h].concat(v.components),by:v.ligGlyph})}return n},Ft.prototype.addSingle=function(e,t,r,n){var a=Ht(this.getLookupTables(r,n,e,1,!0)[0],2,{substFormat:2,coverage:{format:1,glyphs:[]},substitute:[]});L.assert(1===a.coverage.format,"Ligature: unable to modify coverage table format "+a.coverage.format);var o=t.sub,s=this.binSearch(a.coverage.glyphs,o);s<0&&(s=-1-s,a.coverage.glyphs.splice(s,0,o),a.substitute.splice(s,0,0)),a.substitute[s]=t.by},Ft.prototype.addAlternate=function(e,t,r,n){var a=Ht(this.getLookupTables(r,n,e,3,!0)[0],1,{substFormat:1,coverage:{format:1,glyphs:[]},alternateSets:[]});L.assert(1===a.coverage.format,"Ligature: unable to modify coverage table format "+a.coverage.format);var o=t.sub,s=this.binSearch(a.coverage.glyphs,o);s<0&&(s=-1-s,a.coverage.glyphs.splice(s,0,o),a.alternateSets.splice(s,0,0)),a.alternateSets[s]=t.by},Ft.prototype.addLigature=function(e,t,r,n){var a=this.getLookupTables(r,n,e,4,!0)[0],o=a.subtables[0];o||(o={substFormat:1,coverage:{format:1,glyphs:[]},ligatureSets:[]},a.subtables[0]=o),L.assert(1===o.coverage.format,"Ligature: unable to modify coverage table format "+o.coverage.format);var s=t.sub[0],i=t.sub.slice(1),u={ligGlyph:t.by,components:i},l=this.binSearch(o.coverage.glyphs,s);if(l>=0){for(var c=o.ligatureSets[l],p=0;p<c.length;p++)if(Nt(c[p].components,i))return;c.push(u)}else l=-1-l,o.coverage.glyphs.splice(l,0,s),o.ligatureSets.splice(l,0,[u])},Ft.prototype.getFeature=function(e,t,r){if(/ss\d\d/.test(e))return this.getSingle(e,t,r);switch(e){case"aalt":case"salt":return this.getSingle(e,t,r).concat(this.getAlternates(e,t,r));case"dlig":case"liga":case"rlig":return this.getLigatures(e,t,r)}},Ft.prototype.add=function(e,t,r,n){if(/ss\d\d/.test(e))return this.addSingle(e,t,r,n);switch(e){case"aalt":case"salt":return"number"==typeof t.by?this.addSingle(e,t,r,n):this.addAlternate(e,t,r,n);case"dlig":case"liga":case"rlig":return this.addLigature(e,t,r,n)}};var jt,Yt,Qt,Kt,Jt={getPath:Vt,parse:function(e,t,r,n,a){return a.lowMemory?function(e,t,r,n){var a=new Me.GlyphSet(n);return n._push=function(o){var s=r[o];s!==r[o+1]?a.push(o,Me.ttfGlyphLoader(n,o,_t,e,t+s,Zt)):a.push(o,Me.glyphLoader(n,o))},a}(e,t,r,n):function(e,t,r,n){for(var a=new Me.GlyphSet(n),o=0;o<r.length-1;o+=1){var s=r[o];s!==r[o+1]?a.push(o,Me.ttfGlyphLoader(n,o,_t,e,t+s,Zt)):a.push(o,Me.glyphLoader(n,o))}return a}(e,t,r,n)}};function $t(e){this.font=e,this.getCommands=function(e){return Jt.getPath(e).commands},this._fpgmState=this._prepState=void 0,this._errorState=0}function er(e){return e}function tr(e){return Math.sign(e)*Math.round(Math.abs(e))}function rr(e){return Math.sign(e)*Math.round(Math.abs(2*e))/2}function nr(e){return Math.sign(e)*(Math.round(Math.abs(e)+.5)-.5)}function ar(e){return Math.sign(e)*Math.ceil(Math.abs(e))}function or(e){return Math.sign(e)*Math.floor(Math.abs(e))}var sr=function(e){var t=this.srPeriod,r=this.srPhase,n=1;return e<0&&(e=-e,n=-1),e+=this.srThreshold-r,e=Math.trunc(e/t)*t,(e+=r)<0?r*n:e*n},ir={x:1,y:0,axis:"x",distance:function(e,t,r,n){return(r?e.xo:e.x)-(n?t.xo:t.x)},interpolate:function(e,t,r,n){var a,o,s,i,u,l,c;if(!n||n===this)return a=e.xo-t.xo,o=e.xo-r.xo,u=t.x-t.xo,l=r.x-r.xo,0===(c=(s=Math.abs(a))+(i=Math.abs(o)))?void(e.x=e.xo+(u+l)/2):void(e.x=e.xo+(u*i+l*s)/c);a=n.distance(e,t,!0,!0),o=n.distance(e,r,!0,!0),u=n.distance(t,t,!1,!0),l=n.distance(r,r,!1,!0),0!==(c=(s=Math.abs(a))+(i=Math.abs(o)))?ir.setRelative(e,e,(u*i+l*s)/c,n,!0):ir.setRelative(e,e,(u+l)/2,n,!0)},normalSlope:Number.NEGATIVE_INFINITY,setRelative:function(e,t,r,n,a){if(n&&n!==this){var o=a?t.xo:t.x,s=a?t.yo:t.y,i=o+r*n.x,u=s+r*n.y;e.x=i+(e.y-u)/n.normalSlope}else e.x=(a?t.xo:t.x)+r},slope:0,touch:function(e){e.xTouched=!0},touched:function(e){return e.xTouched},untouch:function(e){e.xTouched=!1}},ur={x:0,y:1,axis:"y",distance:function(e,t,r,n){return(r?e.yo:e.y)-(n?t.yo:t.y)},interpolate:function(e,t,r,n){var a,o,s,i,u,l,c;if(!n||n===this)return a=e.yo-t.yo,o=e.yo-r.yo,u=t.y-t.yo,l=r.y-r.yo,0===(c=(s=Math.abs(a))+(i=Math.abs(o)))?void(e.y=e.yo+(u+l)/2):void(e.y=e.yo+(u*i+l*s)/c);a=n.distance(e,t,!0,!0),o=n.distance(e,r,!0,!0),u=n.distance(t,t,!1,!0),l=n.distance(r,r,!1,!0),0!==(c=(s=Math.abs(a))+(i=Math.abs(o)))?ur.setRelative(e,e,(u*i+l*s)/c,n,!0):ur.setRelative(e,e,(u+l)/2,n,!0)},normalSlope:0,setRelative:function(e,t,r,n,a){if(n&&n!==this){var o=a?t.xo:t.x,s=a?t.yo:t.y,i=o+r*n.x,u=s+r*n.y;e.y=u+n.normalSlope*(e.x-i)}else e.y=(a?t.yo:t.y)+r},slope:Number.POSITIVE_INFINITY,touch:function(e){e.yTouched=!0},touched:function(e){return e.yTouched},untouch:function(e){e.yTouched=!1}};function lr(e,t){this.x=e,this.y=t,this.axis=void 0,this.slope=t/e,this.normalSlope=-e/t,Object.freeze(this)}function cr(e,t){var r=Math.sqrt(e*e+t*t);return t/=r,1==(e/=r)&&0===t?ir:0===e&&1===t?ur:new lr(e,t)}function pr(e,t,r,n){this.x=this.xo=Math.round(64*e)/64,this.y=this.yo=Math.round(64*t)/64,this.lastPointOfContour=r,this.onCurve=n,this.prevPointOnContour=void 0,this.nextPointOnContour=void 0,this.xTouched=!1,this.yTouched=!1,Object.preventExtensions(this)}Object.freeze(ir),Object.freeze(ur),lr.prototype.distance=function(e,t,r,n){return this.x*ir.distance(e,t,r,n)+this.y*ur.distance(e,t,r,n)},lr.prototype.interpolate=function(e,t,r,n){var a,o,s,i,u,l,c;s=n.distance(e,t,!0,!0),i=n.distance(e,r,!0,!0),a=n.distance(t,t,!1,!0),o=n.distance(r,r,!1,!0),0!==(c=(u=Math.abs(s))+(l=Math.abs(i)))?this.setRelative(e,e,(a*l+o*u)/c,n,!0):this.setRelative(e,e,(a+o)/2,n,!0)},lr.prototype.setRelative=function(e,t,r,n,a){n=n||this;var o=a?t.xo:t.x,s=a?t.yo:t.y,i=o+r*n.x,u=s+r*n.y,l=n.normalSlope,c=this.slope,p=e.x,h=e.y;e.x=(c*p-l*i+u-h)/(c-l),e.y=c*(e.x-p)+h},lr.prototype.touch=function(e){e.xTouched=!0,e.yTouched=!0},pr.prototype.nextTouched=function(e){for(var t=this.nextPointOnContour;!e.touched(t)&&t!==this;)t=t.nextPointOnContour;return t},pr.prototype.prevTouched=function(e){for(var t=this.prevPointOnContour;!e.touched(t)&&t!==this;)t=t.prevPointOnContour;return t};var hr=Object.freeze(new pr(0,0)),fr={cvCutIn:17/16,deltaBase:9,deltaShift:.125,loop:1,minDis:1,autoFlip:!0};function dr(e,t){switch(this.env=e,this.stack=[],this.prog=t,e){case"glyf":this.zp0=this.zp1=this.zp2=1,this.rp0=this.rp1=this.rp2=0;case"prep":this.fv=this.pv=this.dpv=ir,this.round=tr}}function vr(e){for(var t=e.tZone=new Array(e.gZone.length),r=0;r<t.length;r++)t[r]=new pr(0,0)}function gr(e,t){var r,n=e.prog,a=e.ip,o=1;do{if(88===(r=n[++a]))o++;else if(89===r)o--;else if(64===r)a+=n[a+1]+1;else if(65===r)a+=2*n[a+1]+1;else if(r>=176&&r<=183)a+=r-176+1;else if(r>=184&&r<=191)a+=2*(r-184+1);else if(t&&1===o&&27===r)break}while(o>0);e.ip=a}function mr(e,t){exports.DEBUG&&console.log(t.step,"SVTCA["+e.axis+"]"),t.fv=t.pv=t.dpv=e}function yr(e,t){exports.DEBUG&&console.log(t.step,"SPVTCA["+e.axis+"]"),t.pv=t.dpv=e}function br(e,t){exports.DEBUG&&console.log(t.step,"SFVTCA["+e.axis+"]"),t.fv=e}function xr(e,t){var r,n,a=t.stack,o=a.pop(),s=a.pop(),i=t.z2[o],u=t.z1[s];exports.DEBUG&&console.log("SPVTL["+e+"]",o,s),e?(r=i.y-u.y,n=u.x-i.x):(r=u.x-i.x,n=u.y-i.y),t.pv=t.dpv=cr(r,n)}function Sr(e,t){var r,n,a=t.stack,o=a.pop(),s=a.pop(),i=t.z2[o],u=t.z1[s];exports.DEBUG&&console.log("SFVTL["+e+"]",o,s),e?(r=i.y-u.y,n=u.x-i.x):(r=u.x-i.x,n=u.y-i.y),t.fv=cr(r,n)}function Mr(e){exports.DEBUG&&console.log(e.step,"POP[]"),e.stack.pop()}function Tr(e,t){var r=t.stack.pop(),n=t.z0[r],a=t.fv,o=t.pv;exports.DEBUG&&console.log(t.step,"MDAP["+e+"]",r);var s=o.distance(n,hr);e&&(s=t.round(s)),a.setRelative(n,hr,s,o),a.touch(n),t.rp0=t.rp1=r}function Ur(e,t){var r,n,a,o=t.z2,s=o.length-2;exports.DEBUG&&console.log(t.step,"IUP["+e.axis+"]");for(var i=0;i<s;i++)r=o[i],e.touched(r)||(n=r.prevTouched(e))!==r&&(n===(a=r.nextTouched(e))&&e.setRelative(r,r,e.distance(n,n,!1,!0),e,!0),e.interpolate(r,n,a,e))}function kr(e,t){for(var r=t.stack,n=e?t.rp1:t.rp2,a=(e?t.z0:t.z1)[n],o=t.fv,s=t.pv,i=t.loop,u=t.z2;i--;){var l=r.pop(),c=u[l],p=s.distance(a,a,!1,!0);o.setRelative(c,c,p,s),o.touch(c),exports.DEBUG&&console.log(t.step,(t.loop>1?"loop "+(t.loop-i)+": ":"")+"SHP["+(e?"rp1":"rp2")+"]",l)}t.loop=1}function Or(e,t){var r=t.stack,n=e?t.rp1:t.rp2,a=(e?t.z0:t.z1)[n],o=t.fv,s=t.pv,i=r.pop(),u=t.z2[t.contours[i]],l=u;exports.DEBUG&&console.log(t.step,"SHC["+e+"]",i);var c=s.distance(a,a,!1,!0);do{l!==a&&o.setRelative(l,l,c,s),l=l.nextPointOnContour}while(l!==u)}function Er(e,t){var r,n,a=t.stack,o=e?t.rp1:t.rp2,s=(e?t.z0:t.z1)[o],i=t.fv,u=t.pv,l=a.pop();switch(exports.DEBUG&&console.log(t.step,"SHZ["+e+"]",l),l){case 0:r=t.tZone;break;case 1:r=t.gZone;break;default:throw new Error("Invalid zone")}for(var c=u.distance(s,s,!1,!0),p=r.length-2,h=0;h<p;h++)n=r[h],i.setRelative(n,n,c,u)}function wr(e,t){var r=t.stack,n=r.pop()/64,a=r.pop(),o=t.z1[a],s=t.z0[t.rp0],i=t.fv,u=t.pv;i.setRelative(o,s,n,u),i.touch(o),exports.DEBUG&&console.log(t.step,"MSIRP["+e+"]",n,a),t.rp1=t.rp0,t.rp2=a,e&&(t.rp0=a)}function Rr(e,t){var r=t.stack,n=r.pop(),a=r.pop(),o=t.z0[a],s=t.fv,i=t.pv,u=t.cvt[n];exports.DEBUG&&console.log(t.step,"MIAP["+e+"]",n,"(",u,")",a);var l=i.distance(o,hr);e&&(Math.abs(l-u)<t.cvCutIn&&(l=u),l=t.round(l)),s.setRelative(o,hr,l,i),0===t.zp0&&(o.xo=o.x,o.yo=o.y),s.touch(o),t.rp0=t.rp1=a}function Lr(e,t){var r=t.stack,n=r.pop(),a=t.z2[n];exports.DEBUG&&console.log(t.step,"GC["+e+"]",n),r.push(64*t.dpv.distance(a,hr,e,!1))}function Cr(e,t){var r=t.stack,n=r.pop(),a=r.pop(),o=t.z1[n],s=t.z0[a],i=t.dpv.distance(s,o,e,e);exports.DEBUG&&console.log(t.step,"MD["+e+"]",n,a,"->",i),t.stack.push(Math.round(64*i))}function Dr(e,t){var r=t.stack,n=r.pop(),a=t.fv,o=t.pv,s=t.ppem,i=t.deltaBase+16*(e-1),u=t.deltaShift,l=t.z0;exports.DEBUG&&console.log(t.step,"DELTAP["+e+"]",n,r);for(var c=0;c<n;c++){var p=r.pop(),h=r.pop();if(i+((240&h)>>4)===s){var f=(15&h)-8;f>=0&&f++,exports.DEBUG&&console.log(t.step,"DELTAPFIX",p,"by",f*u);var d=l[p];a.setRelative(d,d,f*u,o)}}}function Ir(e,t){var r=t.stack,n=r.pop();exports.DEBUG&&console.log(t.step,"ROUND[]"),r.push(64*t.round(n/64))}function Ar(e,t){var r=t.stack,n=r.pop(),a=t.ppem,o=t.deltaBase+16*(e-1),s=t.deltaShift;exports.DEBUG&&console.log(t.step,"DELTAC["+e+"]",n,r);for(var i=0;i<n;i++){var u=r.pop(),l=r.pop();if(o+((240&l)>>4)===a){var c=(15&l)-8;c>=0&&c++;var p=c*s;exports.DEBUG&&console.log(t.step,"DELTACFIX",u,"by",p),t.cvt[u]+=p}}}function Br(e,t){var r,n,a=t.stack,o=a.pop(),s=a.pop(),i=t.z2[o],u=t.z1[s];exports.DEBUG&&console.log(t.step,"SDPVTL["+e+"]",o,s),e?(r=i.y-u.y,n=u.x-i.x):(r=u.x-i.x,n=u.y-i.y),t.dpv=cr(r,n)}function Pr(e,t){var r=t.stack,n=t.prog,a=t.ip;exports.DEBUG&&console.log(t.step,"PUSHB["+e+"]");for(var o=0;o<e;o++)r.push(n[++a]);t.ip=a}function Gr(e,t){var r=t.ip,n=t.prog,a=t.stack;exports.DEBUG&&console.log(t.ip,"PUSHW["+e+"]");for(var o=0;o<e;o++){var s=n[++r]<<8|n[++r];32768&s&&(s=-(1+(65535^s))),a.push(s)}t.ip=r}function Fr(e,t,r,n,a,o){var s,i,u,l,c=o.stack,p=e&&c.pop(),h=c.pop(),f=o.rp0,d=o.z0[f],v=o.z1[h],g=o.minDis,m=o.fv,y=o.dpv;u=(i=s=y.distance(v,d,!0,!0))>=0?1:-1,i=Math.abs(i),e&&(l=o.cvt[p],n&&Math.abs(i-l)<o.cvCutIn&&(i=l)),r&&i<g&&(i=g),n&&(i=o.round(i)),m.setRelative(v,d,u*i,y),m.touch(v),exports.DEBUG&&console.log(o.step,(e?"MIRP[":"MDRP[")+(t?"M":"m")+(r?">":"_")+(n?"R":"_")+(0===a?"Gr":1===a?"Bl":2===a?"Wh":"")+"]",e?p+"("+o.cvt[p]+","+l+")":"",h,"(d =",s,"->",u*i,")"),o.rp1=o.rp0,o.rp2=h,t&&(o.rp0=h)}function Nr(e){this.char=e,this.state={},this.activeState=null}function Hr(e,t,r){this.contextName=r,this.startIndex=e,this.endOffset=t}function zr(e,t,r){this.contextName=e,this.openRange=null,this.ranges=[],this.checkStart=t,this.checkEnd=r}function qr(e,t){this.context=e,this.index=t,this.length=e.length,this.current=e[t],this.backtrack=e.slice(0,t),this.lookahead=e.slice(t+1)}function Wr(e){this.eventId=e,this.subscribers=[]}function _r(e){var t=this,r=["start","end","next","newToken","contextStart","contextEnd","insertToken","removeToken","removeRange","replaceToken","replaceRange","composeRUD","updateContextsRanges"];r.forEach((function(e){Object.defineProperty(t.events,e,{value:new Wr(e)})})),e&&r.forEach((function(r){var n=e[r];"function"==typeof n&&t.events[r].subscribe(n)})),["insertToken","removeToken","removeRange","replaceToken","replaceRange","composeRUD"].forEach((function(e){t.events[e].subscribe(t.updateContextsRanges)}))}function Xr(e){this.tokens=[],this.registeredContexts={},this.contextCheckers=[],this.events={},this.registeredModifiers=[],_r.call(this,e)}function Vr(e){return/[\u0600-\u065F\u066A-\u06D2\u06FA-\u06FF]/.test(e)}function Zr(e){return/[\u0630\u0690\u0621\u0631\u0661\u0671\u0622\u0632\u0672\u0692\u06C2\u0623\u0673\u0693\u06C3\u0624\u0694\u06C4\u0625\u0675\u0695\u06C5\u06E5\u0676\u0696\u06C6\u0627\u0677\u0697\u06C7\u0648\u0688\u0698\u06C8\u0689\u0699\u06C9\u068A\u06CA\u066B\u068B\u06CB\u068C\u068D\u06CD\u06FD\u068E\u06EE\u06FE\u062F\u068F\u06CF\u06EF]/.test(e)}function jr(e){return/[\u0600-\u0605\u060C-\u060E\u0610-\u061B\u061E\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED]/.test(e)}function Yr(e){return/[A-z]/.test(e)}function Qr(e){this.font=e,this.features={}}function Kr(e){this.id=e.id,this.tag=e.tag,this.substitution=e.substitution}function Jr(e,t){if(!e)return-1;switch(t.format){case 1:return t.glyphs.indexOf(e);case 2:for(var r=t.ranges,n=0;n<r.length;n++){var a=r[n];if(e>=a.start&&e<=a.end){var o=e-a.start;return a.index+o}}break;default:return-1}return-1}function $r(e,t){return-1===Jr(e,t.coverage)?null:e+t.deltaGlyphId}function en(e,t){var r=Jr(e,t.coverage);return-1===r?null:t.substitute[r]}function tn(e,t){for(var r=[],n=0;n<e.length;n++){var a=e[n],o=t.current,s=Jr(o=Array.isArray(o)?o[0]:o,a);-1!==s&&r.push(s)}return r.length!==e.length?-1:r}function rn(e,t){var r=t.inputCoverage.length+t.lookaheadCoverage.length+t.backtrackCoverage.length;if(e.context.length<r)return[];var n=tn(t.inputCoverage,e);if(-1===n)return[];var a=t.inputCoverage.length-1;if(e.lookahead.length<t.lookaheadCoverage.length)return[];for(var o=e.lookahead.slice(a);o.length&&jr(o[0].char);)o.shift();var s=new qr(o,0),i=tn(t.lookaheadCoverage,s),u=[].concat(e.backtrack);for(u.reverse();u.length&&jr(u[0].char);)u.shift();if(u.length<t.backtrackCoverage.length)return[];var l=new qr(u,0),c=tn(t.backtrackCoverage,l),p=[];if(n.length===t.inputCoverage.length&&i.length===t.lookaheadCoverage.length&&c.length===t.backtrackCoverage.length)for(var h=0;h<t.lookupRecords.length;h++)for(var f=t.lookupRecords[h].lookupListIndex,d=this.getLookupByIndex(f),v=0;v<d.subtables.length;v++){var g=d.subtables[v],m=this.getLookupMethod(d,g);if("12"===this.getSubstitutionType(d,g))for(var y=0;y<n.length;y++){var b=m(e.get(y));b&&p.push(b)}}return p}function nn(e,t){var r,n=Jr(e.current,t.coverage);if(-1===n)return null;for(var a=t.ligatureSets[n],o=0;o<a.length;o++){r=a[o];for(var s=0;s<r.components.length&&e.lookahead[s]===r.components[s];s++)if(s===r.components.length-1)return r}return null}function an(e,t){var r=Jr(e,t.coverage);return-1===r?null:t.sequences[r]}$t.prototype.exec=function(e,t){if("number"!=typeof t)throw new Error("Point size is not a number!");if(!(this._errorState>2)){var r=this.font,n=this._prepState;if(!n||n.ppem!==t){var a=this._fpgmState;if(!a){dr.prototype=fr,(a=this._fpgmState=new dr("fpgm",r.tables.fpgm)).funcs=[],a.font=r,exports.DEBUG&&(console.log("---EXEC FPGM---"),a.step=-1);try{Yt(a)}catch(e){return console.log("Hinting error in FPGM:"+e),void(this._errorState=3)}}dr.prototype=a,(n=this._prepState=new dr("prep",r.tables.prep)).ppem=t;var o=r.tables.cvt;if(o)for(var s=n.cvt=new Array(o.length),i=t/r.unitsPerEm,u=0;u<o.length;u++)s[u]=o[u]*i;else n.cvt=[];exports.DEBUG&&(console.log("---EXEC PREP---"),n.step=-1);try{Yt(n)}catch(e){this._errorState<2&&console.log("Hinting error in PREP:"+e),this._errorState=2}}if(!(this._errorState>1))try{return Qt(e,n)}catch(e){return this._errorState<1&&(console.log("Hinting error:"+e),console.log("Note: further hinting errors are silenced")),void(this._errorState=1)}}},Qt=function(e,t){var r,n,a,o=t.ppem/t.font.unitsPerEm,s=o,i=e.components;if(dr.prototype=t,i){var u=t.font;n=[],r=[];for(var l=0;l<i.length;l++){var c=i[l],p=u.glyphs.get(c.glyphIndex);a=new dr("glyf",p.instructions),exports.DEBUG&&(console.log("---EXEC COMP "+l+"---"),a.step=-1),Kt(p,a,o,s);for(var h=Math.round(c.dx*o),f=Math.round(c.dy*s),d=a.gZone,v=a.contours,g=0;g<d.length;g++){var m=d[g];m.xTouched=m.yTouched=!1,m.xo=m.x=m.x+h,m.yo=m.y=m.y+f}var y=n.length;n.push.apply(n,d);for(var b=0;b<v.length;b++)r.push(v[b]+y)}e.instructions&&!a.inhibitGridFit&&((a=new dr("glyf",e.instructions)).gZone=a.z0=a.z1=a.z2=n,a.contours=r,n.push(new pr(0,0),new pr(Math.round(e.advanceWidth*o),0)),exports.DEBUG&&(console.log("---EXEC COMPOSITE---"),a.step=-1),Yt(a),n.length-=2)}else a=new dr("glyf",e.instructions),exports.DEBUG&&(console.log("---EXEC GLYPH---"),a.step=-1),Kt(e,a,o,s),n=a.gZone;return n},Kt=function(e,t,r,n){for(var a,o,s,i=e.points||[],u=i.length,l=t.gZone=t.z0=t.z1=t.z2=[],c=t.contours=[],p=0;p<u;p++)a=i[p],l[p]=new pr(a.x*r,a.y*n,a.lastPointOfContour,a.onCurve);for(var h=0;h<u;h++)a=l[h],o||(o=a,c.push(h)),a.lastPointOfContour?(a.nextPointOnContour=o,o.prevPointOnContour=a,o=void 0):(s=l[h+1],a.nextPointOnContour=s,s.prevPointOnContour=a);if(!t.inhibitGridFit){if(exports.DEBUG){console.log("PROCESSING GLYPH",t.stack);for(var f=0;f<u;f++)console.log(f,l[f].x,l[f].y)}if(l.push(new pr(0,0),new pr(Math.round(e.advanceWidth*r),0)),Yt(t),l.length-=2,exports.DEBUG){console.log("FINISHED GLYPH",t.stack);for(var d=0;d<u;d++)console.log(d,l[d].x,l[d].y)}}},Yt=function(e){var t=e.prog;if(t){var r,n=t.length;for(e.ip=0;e.ip<n;e.ip++){if(exports.DEBUG&&e.step++,!(r=jt[t[e.ip]]))throw new Error("unknown instruction: 0x"+Number(t[e.ip]).toString(16));r(e)}}},jt=[mr.bind(void 0,ur),mr.bind(void 0,ir),yr.bind(void 0,ur),yr.bind(void 0,ir),br.bind(void 0,ur),br.bind(void 0,ir),xr.bind(void 0,0),xr.bind(void 0,1),Sr.bind(void 0,0),Sr.bind(void 0,1),function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SPVFS[]",r,n),e.pv=e.dpv=cr(n,r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SPVFS[]",r,n),e.fv=cr(n,r)},function(e){var t=e.stack,r=e.pv;exports.DEBUG&&console.log(e.step,"GPV[]"),t.push(16384*r.x),t.push(16384*r.y)},function(e){var t=e.stack,r=e.fv;exports.DEBUG&&console.log(e.step,"GFV[]"),t.push(16384*r.x),t.push(16384*r.y)},function(e){e.fv=e.pv,exports.DEBUG&&console.log(e.step,"SFVTPV[]")},function(e){var t=e.stack,r=t.pop(),n=t.pop(),a=t.pop(),o=t.pop(),s=t.pop(),i=e.z0,u=e.z1,l=i[r],c=i[n],p=u[a],h=u[o],f=e.z2[s];exports.DEBUG&&console.log("ISECT[], ",r,n,a,o,s);var d=l.x,v=l.y,g=c.x,m=c.y,y=p.x,b=p.y,x=h.x,S=h.y,M=(d-g)*(b-S)-(v-m)*(y-x),T=d*m-v*g,U=y*S-b*x;f.x=(T*(y-x)-U*(d-g))/M,f.y=(T*(b-S)-U*(v-m))/M},function(e){e.rp0=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SRP0[]",e.rp0)},function(e){e.rp1=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SRP1[]",e.rp1)},function(e){e.rp2=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SRP2[]",e.rp2)},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZP0[]",t),e.zp0=t,t){case 0:e.tZone||vr(e),e.z0=e.tZone;break;case 1:e.z0=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZP1[]",t),e.zp1=t,t){case 0:e.tZone||vr(e),e.z1=e.tZone;break;case 1:e.z1=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZP2[]",t),e.zp2=t,t){case 0:e.tZone||vr(e),e.z2=e.tZone;break;case 1:e.z2=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZPS[]",t),e.zp0=e.zp1=e.zp2=t,t){case 0:e.tZone||vr(e),e.z0=e.z1=e.z2=e.tZone;break;case 1:e.z0=e.z1=e.z2=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){e.loop=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SLOOP[]",e.loop)},function(e){exports.DEBUG&&console.log(e.step,"RTG[]"),e.round=tr},function(e){exports.DEBUG&&console.log(e.step,"RTHG[]"),e.round=nr},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SMD[]",t),e.minDis=t/64},function(e){exports.DEBUG&&console.log(e.step,"ELSE[]"),gr(e,!1)},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"JMPR[]",t),e.ip+=t-1},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SCVTCI[]",t),e.cvCutIn=t/64},void 0,void 0,function(e){var t=e.stack;exports.DEBUG&&console.log(e.step,"DUP[]"),t.push(t[t.length-1])},Mr,function(e){exports.DEBUG&&console.log(e.step,"CLEAR[]"),e.stack.length=0},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SWAP[]"),t.push(r),t.push(n)},function(e){var t=e.stack;exports.DEBUG&&console.log(e.step,"DEPTH[]"),t.push(t.length)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"CINDEX[]",r),t.push(t[t.length-r])},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"MINDEX[]",r),t.push(t.splice(t.length-r,1)[0])},void 0,void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"LOOPCALL[]",r,n);var a=e.ip,o=e.prog;e.prog=e.funcs[r];for(var s=0;s<n;s++)Yt(e),exports.DEBUG&&console.log(++e.step,s+1<n?"next loopcall":"done loopcall",s);e.ip=a,e.prog=o},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"CALL[]",t);var r=e.ip,n=e.prog;e.prog=e.funcs[t],Yt(e),e.ip=r,e.prog=n,exports.DEBUG&&console.log(++e.step,"returning from",t)},function(e){if("fpgm"!==e.env)throw new Error("FDEF not allowed here");var t=e.stack,r=e.prog,n=e.ip,a=t.pop(),o=n;for(exports.DEBUG&&console.log(e.step,"FDEF[]",a);45!==r[++n];);e.ip=n,e.funcs[a]=r.slice(o+1,n)},void 0,Tr.bind(void 0,0),Tr.bind(void 0,1),Ur.bind(void 0,ur),Ur.bind(void 0,ir),kr.bind(void 0,0),kr.bind(void 0,1),Or.bind(void 0,0),Or.bind(void 0,1),Er.bind(void 0,0),Er.bind(void 0,1),function(e){for(var t=e.stack,r=e.loop,n=e.fv,a=t.pop()/64,o=e.z2;r--;){var s=t.pop(),i=o[s];exports.DEBUG&&console.log(e.step,(e.loop>1?"loop "+(e.loop-r)+": ":"")+"SHPIX[]",s,a),n.setRelative(i,i,a),n.touch(i)}e.loop=1},function(e){for(var t=e.stack,r=e.rp1,n=e.rp2,a=e.loop,o=e.z0[r],s=e.z1[n],i=e.fv,u=e.dpv,l=e.z2;a--;){var c=t.pop(),p=l[c];exports.DEBUG&&console.log(e.step,(e.loop>1?"loop "+(e.loop-a)+": ":"")+"IP[]",c,r,"<->",n),i.interpolate(p,o,s,u),i.touch(p)}e.loop=1},wr.bind(void 0,0),wr.bind(void 0,1),function(e){for(var t=e.stack,r=e.rp0,n=e.z0[r],a=e.loop,o=e.fv,s=e.pv,i=e.z1;a--;){var u=t.pop(),l=i[u];exports.DEBUG&&console.log(e.step,(e.loop>1?"loop "+(e.loop-a)+": ":"")+"ALIGNRP[]",u),o.setRelative(l,n,0,s),o.touch(l)}e.loop=1},function(e){exports.DEBUG&&console.log(e.step,"RTDG[]"),e.round=rr},Rr.bind(void 0,0),Rr.bind(void 0,1),function(e){var t=e.prog,r=e.ip,n=e.stack,a=t[++r];exports.DEBUG&&console.log(e.step,"NPUSHB[]",a);for(var o=0;o<a;o++)n.push(t[++r]);e.ip=r},function(e){var t=e.ip,r=e.prog,n=e.stack,a=r[++t];exports.DEBUG&&console.log(e.step,"NPUSHW[]",a);for(var o=0;o<a;o++){var s=r[++t]<<8|r[++t];32768&s&&(s=-(1+(65535^s))),n.push(s)}e.ip=t},function(e){var t=e.stack,r=e.store;r||(r=e.store=[]);var n=t.pop(),a=t.pop();exports.DEBUG&&console.log(e.step,"WS",n,a),r[a]=n},function(e){var t=e.stack,r=e.store,n=t.pop();exports.DEBUG&&console.log(e.step,"RS",n);var a=r&&r[n]||0;t.push(a)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"WCVTP",r,n),e.cvt[n]=r/64},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"RCVT",r),t.push(64*e.cvt[r])},Lr.bind(void 0,0),Lr.bind(void 0,1),void 0,Cr.bind(void 0,0),Cr.bind(void 0,1),function(e){exports.DEBUG&&console.log(e.step,"MPPEM[]"),e.stack.push(e.ppem)},void 0,function(e){exports.DEBUG&&console.log(e.step,"FLIPON[]"),e.autoFlip=!0},void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"LT[]",r,n),t.push(n<r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"LTEQ[]",r,n),t.push(n<=r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"GT[]",r,n),t.push(n>r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"GTEQ[]",r,n),t.push(n>=r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"EQ[]",r,n),t.push(r===n?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"NEQ[]",r,n),t.push(r!==n?1:0)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"ODD[]",r),t.push(Math.trunc(r)%2?1:0)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"EVEN[]",r),t.push(Math.trunc(r)%2?0:1)},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"IF[]",t),t||(gr(e,!0),exports.DEBUG&&console.log(e.step,"EIF[]"))},function(e){exports.DEBUG&&console.log(e.step,"EIF[]")},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"AND[]",r,n),t.push(r&&n?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"OR[]",r,n),t.push(r||n?1:0)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"NOT[]",r),t.push(r?0:1)},Dr.bind(void 0,1),function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SDB[]",t),e.deltaBase=t},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SDS[]",t),e.deltaShift=Math.pow(.5,t)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"ADD[]",r,n),t.push(n+r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SUB[]",r,n),t.push(n-r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"DIV[]",r,n),t.push(64*n/r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"MUL[]",r,n),t.push(n*r/64)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"ABS[]",r),t.push(Math.abs(r))},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"NEG[]",r),t.push(-r)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"FLOOR[]",r),t.push(64*Math.floor(r/64))},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"CEILING[]",r),t.push(64*Math.ceil(r/64))},Ir.bind(void 0,0),Ir.bind(void 0,1),Ir.bind(void 0,2),Ir.bind(void 0,3),void 0,void 0,void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"WCVTF[]",r,n),e.cvt[n]=r*e.ppem/e.font.unitsPerEm},Dr.bind(void 0,2),Dr.bind(void 0,3),Ar.bind(void 0,1),Ar.bind(void 0,2),Ar.bind(void 0,3),function(e){var t,r=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SROUND[]",r),e.round=sr,192&r){case 0:t=.5;break;case 64:t=1;break;case 128:t=2;break;default:throw new Error("invalid SROUND value")}switch(e.srPeriod=t,48&r){case 0:e.srPhase=0;break;case 16:e.srPhase=.25*t;break;case 32:e.srPhase=.5*t;break;case 48:e.srPhase=.75*t;break;default:throw new Error("invalid SROUND value")}r&=15,e.srThreshold=0===r?0:(r/8-.5)*t},function(e){var t,r=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"S45ROUND[]",r),e.round=sr,192&r){case 0:t=Math.sqrt(2)/2;break;case 64:t=Math.sqrt(2);break;case 128:t=2*Math.sqrt(2);break;default:throw new Error("invalid S45ROUND value")}switch(e.srPeriod=t,48&r){case 0:e.srPhase=0;break;case 16:e.srPhase=.25*t;break;case 32:e.srPhase=.5*t;break;case 48:e.srPhase=.75*t;break;default:throw new Error("invalid S45ROUND value")}r&=15,e.srThreshold=0===r?0:(r/8-.5)*t},void 0,void 0,function(e){exports.DEBUG&&console.log(e.step,"ROFF[]"),e.round=er},void 0,function(e){exports.DEBUG&&console.log(e.step,"RUTG[]"),e.round=ar},function(e){exports.DEBUG&&console.log(e.step,"RDTG[]"),e.round=or},Mr,Mr,void 0,void 0,void 0,void 0,void 0,function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SCANCTRL[]",t)},Br.bind(void 0,0),Br.bind(void 0,1),function(e){var t=e.stack,r=t.pop(),n=0;exports.DEBUG&&console.log(e.step,"GETINFO[]",r),1&r&&(n=35),32&r&&(n|=4096),t.push(n)},void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop(),a=t.pop();exports.DEBUG&&console.log(e.step,"ROLL[]"),t.push(n),t.push(r),t.push(a)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"MAX[]",r,n),t.push(Math.max(n,r))},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"MIN[]",r,n),t.push(Math.min(n,r))},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SCANTYPE[]",t)},function(e){var t=e.stack.pop(),r=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"INSTCTRL[]",t,r),t){case 1:return void(e.inhibitGridFit=!!r);case 2:return void(e.ignoreCvt=!!r);default:throw new Error("invalid INSTCTRL[] selector")}},void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,Pr.bind(void 0,1),Pr.bind(void 0,2),Pr.bind(void 0,3),Pr.bind(void 0,4),Pr.bind(void 0,5),Pr.bind(void 0,6),Pr.bind(void 0,7),Pr.bind(void 0,8),Gr.bind(void 0,1),Gr.bind(void 0,2),Gr.bind(void 0,3),Gr.bind(void 0,4),Gr.bind(void 0,5),Gr.bind(void 0,6),Gr.bind(void 0,7),Gr.bind(void 0,8),Fr.bind(void 0,0,0,0,0,0),Fr.bind(void 0,0,0,0,0,1),Fr.bind(void 0,0,0,0,0,2),Fr.bind(void 0,0,0,0,0,3),Fr.bind(void 0,0,0,0,1,0),Fr.bind(void 0,0,0,0,1,1),Fr.bind(void 0,0,0,0,1,2),Fr.bind(void 0,0,0,0,1,3),Fr.bind(void 0,0,0,1,0,0),Fr.bind(void 0,0,0,1,0,1),Fr.bind(void 0,0,0,1,0,2),Fr.bind(void 0,0,0,1,0,3),Fr.bind(void 0,0,0,1,1,0),Fr.bind(void 0,0,0,1,1,1),Fr.bind(void 0,0,0,1,1,2),Fr.bind(void 0,0,0,1,1,3),Fr.bind(void 0,0,1,0,0,0),Fr.bind(void 0,0,1,0,0,1),Fr.bind(void 0,0,1,0,0,2),Fr.bind(void 0,0,1,0,0,3),Fr.bind(void 0,0,1,0,1,0),Fr.bind(void 0,0,1,0,1,1),Fr.bind(void 0,0,1,0,1,2),Fr.bind(void 0,0,1,0,1,3),Fr.bind(void 0,0,1,1,0,0),Fr.bind(void 0,0,1,1,0,1),Fr.bind(void 0,0,1,1,0,2),Fr.bind(void 0,0,1,1,0,3),Fr.bind(void 0,0,1,1,1,0),Fr.bind(void 0,0,1,1,1,1),Fr.bind(void 0,0,1,1,1,2),Fr.bind(void 0,0,1,1,1,3),Fr.bind(void 0,1,0,0,0,0),Fr.bind(void 0,1,0,0,0,1),Fr.bind(void 0,1,0,0,0,2),Fr.bind(void 0,1,0,0,0,3),Fr.bind(void 0,1,0,0,1,0),Fr.bind(void 0,1,0,0,1,1),Fr.bind(void 0,1,0,0,1,2),Fr.bind(void 0,1,0,0,1,3),Fr.bind(void 0,1,0,1,0,0),Fr.bind(void 0,1,0,1,0,1),Fr.bind(void 0,1,0,1,0,2),Fr.bind(void 0,1,0,1,0,3),Fr.bind(void 0,1,0,1,1,0),Fr.bind(void 0,1,0,1,1,1),Fr.bind(void 0,1,0,1,1,2),Fr.bind(void 0,1,0,1,1,3),Fr.bind(void 0,1,1,0,0,0),Fr.bind(void 0,1,1,0,0,1),Fr.bind(void 0,1,1,0,0,2),Fr.bind(void 0,1,1,0,0,3),Fr.bind(void 0,1,1,0,1,0),Fr.bind(void 0,1,1,0,1,1),Fr.bind(void 0,1,1,0,1,2),Fr.bind(void 0,1,1,0,1,3),Fr.bind(void 0,1,1,1,0,0),Fr.bind(void 0,1,1,1,0,1),Fr.bind(void 0,1,1,1,0,2),Fr.bind(void 0,1,1,1,0,3),Fr.bind(void 0,1,1,1,1,0),Fr.bind(void 0,1,1,1,1,1),Fr.bind(void 0,1,1,1,1,2),Fr.bind(void 0,1,1,1,1,3)],Nr.prototype.setState=function(e,t){return this.state[e]=t,this.activeState={key:e,value:this.state[e]},this.activeState},Nr.prototype.getState=function(e){return this.state[e]||null},Xr.prototype.inboundIndex=function(e){return e>=0&&e<this.tokens.length},Xr.prototype.composeRUD=function(e){var t=this,r=e.map((function(e){return t[e[0]].apply(t,e.slice(1).concat(!0))})),n=function(e){return"object"==typeof e&&e.hasOwnProperty("FAIL")};if(r.every(n))return{FAIL:"composeRUD: one or more operations hasn't completed successfully",report:r.filter(n)};this.dispatch("composeRUD",[r.filter((function(e){return!n(e)}))])},Xr.prototype.replaceRange=function(e,t,r,n){t=null!==t?t:this.tokens.length;var a=r.every((function(e){return e instanceof Nr}));if(!isNaN(e)&&this.inboundIndex(e)&&a){var o=this.tokens.splice.apply(this.tokens,[e,t].concat(r));return n||this.dispatch("replaceToken",[e,t,r]),[o,r]}return{FAIL:"replaceRange: invalid tokens or startIndex."}},Xr.prototype.replaceToken=function(e,t,r){if(!isNaN(e)&&this.inboundIndex(e)&&t instanceof Nr){var n=this.tokens.splice(e,1,t);return r||this.dispatch("replaceToken",[e,t]),[n[0],t]}return{FAIL:"replaceToken: invalid token or index."}},Xr.prototype.removeRange=function(e,t,r){t=isNaN(t)?this.tokens.length:t;var n=this.tokens.splice(e,t);return r||this.dispatch("removeRange",[n,e,t]),n},Xr.prototype.removeToken=function(e,t){if(!isNaN(e)&&this.inboundIndex(e)){var r=this.tokens.splice(e,1);return t||this.dispatch("removeToken",[r,e]),r}return{FAIL:"removeToken: invalid token index."}},Xr.prototype.insertToken=function(e,t,r){return e.every((function(e){return e instanceof Nr}))?(this.tokens.splice.apply(this.tokens,[t,0].concat(e)),r||this.dispatch("insertToken",[e,t]),e):{FAIL:"insertToken: invalid token(s)."}},Xr.prototype.registerModifier=function(e,t,r){this.events.newToken.subscribe((function(n,a){var o=[n,a],s=[n,a];if(null===t||!0===t.apply(this,o)){var i=r.apply(this,s);n.setState(e,i)}})),this.registeredModifiers.push(e)},Wr.prototype.subscribe=function(e){return"function"==typeof e?this.subscribers.push(e)-1:{FAIL:"invalid '"+this.eventId+"' event handler"}},Wr.prototype.unsubscribe=function(e){this.subscribers.splice(e,1)},qr.prototype.setCurrentIndex=function(e){this.index=e,this.current=this.context[e],this.backtrack=this.context.slice(0,e),this.lookahead=this.context.slice(e+1)},qr.prototype.get=function(e){switch(!0){case 0===e:return this.current;case e<0&&Math.abs(e)<=this.backtrack.length:return this.backtrack.slice(e)[0];case e>0&&e<=this.lookahead.length:return this.lookahead[e-1];default:return null}},Xr.prototype.rangeToText=function(e){if(e instanceof Hr)return this.getRangeTokens(e).map((function(e){return e.char})).join("")},Xr.prototype.getText=function(){return this.tokens.map((function(e){return e.char})).join("")},Xr.prototype.getContext=function(e){return this.registeredContexts[e]||null},Xr.prototype.on=function(e,t){var r=this.events[e];return r?r.subscribe(t):null},Xr.prototype.dispatch=function(e,t){var r=this,n=this.events[e];n instanceof Wr&&n.subscribers.forEach((function(e){e.apply(r,t||[])}))},Xr.prototype.registerContextChecker=function(e,t,r){if(this.getContext(e))return{FAIL:"context name '"+e+"' is already registered."};if("function"!=typeof t)return{FAIL:"missing context start check."};if("function"!=typeof r)return{FAIL:"missing context end check."};var n=new zr(e,t,r);return this.registeredContexts[e]=n,this.contextCheckers.push(n),n},Xr.prototype.getRangeTokens=function(e){var t=e.startIndex+e.endOffset;return[].concat(this.tokens.slice(e.startIndex,t))},Xr.prototype.getContextRanges=function(e){var t=this.getContext(e);return t?t.ranges:{FAIL:"context checker '"+e+"' is not registered."}},Xr.prototype.resetContextsRanges=function(){var e=this.registeredContexts;for(var t in e)e.hasOwnProperty(t)&&(e[t].ranges=[])},Xr.prototype.updateContextsRanges=function(){this.resetContextsRanges();for(var e=this.tokens.map((function(e){return e.char})),t=0;t<e.length;t++){var r=new qr(e,t);this.runContextCheck(r)}this.dispatch("updateContextsRanges",[this.registeredContexts])},Xr.prototype.setEndOffset=function(e,t){var r=new Hr(this.getContext(t).openRange.startIndex,e,t),n=this.getContext(t).ranges;return r.rangeId=t+"."+n.length,n.push(r),this.getContext(t).openRange=null,r},Xr.prototype.runContextCheck=function(e){var t=this,r=e.index;this.contextCheckers.forEach((function(n){var a=n.contextName,o=t.getContext(a).openRange;if(!o&&n.checkStart(e)&&(o=new Hr(r,null,a),t.getContext(a).openRange=o,t.dispatch("contextStart",[a,r])),o&&n.checkEnd(e)){var s=r-o.startIndex+1,i=t.setEndOffset(s,a);t.dispatch("contextEnd",[a,i])}}))},Xr.prototype.tokenize=function(e){this.tokens=[],this.resetContextsRanges();var t=Array.from(e);this.dispatch("start");for(var r=0;r<t.length;r++){var n=t[r],a=new qr(t,r);this.dispatch("next",[a]),this.runContextCheck(a);var o=new Nr(n);this.tokens.push(o),this.dispatch("newToken",[o,a])}return this.dispatch("end",[this.tokens]),this.tokens},Qr.prototype.getDefaultScriptFeaturesIndexes=function(){for(var e=this.font.tables.gsub.scripts,t=0;t<e.length;t++){var r=e[t];if("DFLT"===r.tag)return r.script.defaultLangSys.featureIndexes}return[]},Qr.prototype.getScriptFeaturesIndexes=function(e){if(!this.font.tables.gsub)return[];if(!e)return this.getDefaultScriptFeaturesIndexes();for(var t=this.font.tables.gsub.scripts,r=0;r<t.length;r++){var n=t[r];if(n.tag===e&&n.script.defaultLangSys)return n.script.defaultLangSys.featureIndexes;var a=n.langSysRecords;if(a)for(var o=0;o<a.length;o++){var s=a[o];if(s.tag===e)return s.langSys.featureIndexes}}return this.getDefaultScriptFeaturesIndexes()},Qr.prototype.mapTagsToFeatures=function(e,t){for(var r={},n=0;n<e.length;n++){var a=e[n].tag,o=e[n].feature;r[a]=o}this.features[t].tags=r},Qr.prototype.getScriptFeatures=function(e){var t=this.features[e];if(this.features.hasOwnProperty(e))return t;var r=this.getScriptFeaturesIndexes(e);if(!r)return null;var n=this.font.tables.gsub;return t=r.map((function(e){return n.features[e]})),this.features[e]=t,this.mapTagsToFeatures(t,e),t},Qr.prototype.getSubstitutionType=function(e,t){return e.lookupType.toString()+t.substFormat.toString()},Qr.prototype.getLookupMethod=function(e,t){var r=this;switch(this.getSubstitutionType(e,t)){case"11":return function(e){return $r.apply(r,[e,t])};case"12":return function(e){return en.apply(r,[e,t])};case"63":return function(e){return rn.apply(r,[e,t])};case"41":return function(e){return nn.apply(r,[e,t])};case"21":return function(e){return an.apply(r,[e,t])};default:throw new Error("lookupType: "+e.lookupType+" - substFormat: "+t.substFormat+" is not yet supported")}},Qr.prototype.lookupFeature=function(e){var t=e.contextParams,r=t.index,n=this.getFeature({tag:e.tag,script:e.script});if(!n)return new Error("font '"+this.font.names.fullName.en+"' doesn't support feature '"+e.tag+"' for script '"+e.script+"'.");for(var a=this.getFeatureLookups(n),o=[].concat(t.context),s=0;s<a.length;s++)for(var i=a[s],u=this.getLookupSubtables(i),l=0;l<u.length;l++){var c=u[l],p=this.getSubstitutionType(i,c),h=this.getLookupMethod(i,c),f=void 0;switch(p){case"11":(f=h(t.current))&&o.splice(r,1,new Kr({id:11,tag:e.tag,substitution:f}));break;case"12":(f=h(t.current))&&o.splice(r,1,new Kr({id:12,tag:e.tag,substitution:f}));break;case"63":f=h(t),Array.isArray(f)&&f.length&&o.splice(r,1,new Kr({id:63,tag:e.tag,substitution:f}));break;case"41":(f=h(t))&&o.splice(r,1,new Kr({id:41,tag:e.tag,substitution:f}));break;case"21":(f=h(t.current))&&o.splice(r,1,new Kr({id:21,tag:e.tag,substitution:f}))}t=new qr(o,r),Array.isArray(f)&&!f.length||(f=null)}return o.length?o:null},Qr.prototype.supports=function(e){if(!e.script)return!1;this.getScriptFeatures(e.script);var t=this.features.hasOwnProperty(e.script);if(!e.tag)return t;var r=this.features[e.script].some((function(t){return t.tag===e.tag}));return t&&r},Qr.prototype.getLookupSubtables=function(e){return e.subtables||null},Qr.prototype.getLookupByIndex=function(e){return this.font.tables.gsub.lookups[e]||null},Qr.prototype.getFeatureLookups=function(e){return e.lookupListIndexes.map(this.getLookupByIndex.bind(this))},Qr.prototype.getFeature=function(e){if(!this.font)return{FAIL:"No font was found"};this.features.hasOwnProperty(e.script)||this.getScriptFeatures(e.script);var t=this.features[e.script];return t?t.tags[e.tag]?this.features[e.script].tags[e.tag]:null:{FAIL:"No feature for script "+e.script}};var on={startCheck:function(e){var t=e.current,r=e.get(-1);return null===r&&Vr(t)||!Vr(r)&&Vr(t)},endCheck:function(e){var t=e.get(1);return null===t||!Vr(t)}},sn={startCheck:function(e){var t=e.current,r=e.get(-1);return(Vr(t)||jr(t))&&!Vr(r)},endCheck:function(e){var t=e.get(1);switch(!0){case null===t:return!0;case!Vr(t)&&!jr(t):var r=/\s/.test(t);if(!r)return!0;if(r&&!e.lookahead.some((function(e){return Vr(e)||jr(e)})))return!0;break;default:return!1}}},un={11:function(e,t,r){t[r].setState(e.tag,e.substitution)},12:function(e,t,r){t[r].setState(e.tag,e.substitution)},63:function(e,t,r){e.substitution.forEach((function(n,a){t[r+a].setState(e.tag,n)}))},41:function(e,t,r){var n=t[r];n.setState(e.tag,e.substitution.ligGlyph);for(var a=e.substitution.components.length,o=0;o<a;o++)(n=t[r+o+1]).setState("deleted",!0)}};function ln(e,t,r){e instanceof Kr&&un[e.id]&&un[e.id](e,t,r)}function cn(e){var t=this,r=this.featuresTags.arab,n=this.tokenizer.getRangeTokens(e);if(1!==n.length){var a=new qr(n.map((function(e){return e.getState("glyphIndex")})),0),o=new qr(n.map((function(e){return e.char})),0);n.forEach((function(e,s){if(!jr(e.char)){a.setCurrentIndex(s),o.setCurrentIndex(s);var i,u=0;switch(function(e){for(var t=[].concat(e.backtrack),r=t.length-1;r>=0;r--){var n=t[r],a=Zr(n),o=jr(n);if(!a&&!o)return!0;if(a)return!1}return!1}(o)&&(u|=1),function(e){if(Zr(e.current))return!1;for(var t=0;t<e.lookahead.length;t++)if(!jr(e.lookahead[t]))return!0;return!1}(o)&&(u|=2),u){case 1:i="fina";break;case 2:i="init";break;case 3:i="medi"}if(-1!==r.indexOf(i)){var l=t.query.lookupFeature({tag:i,script:"arab",contextParams:a});if(l instanceof Error)return console.info(l.message);l.forEach((function(e,t){e instanceof Kr&&(ln(e,n,t),a.context[t]=e.substitution)}))}}}))}}function pn(e,t){return new qr(e.map((function(e){return e.activeState.value})),t||0)}function hn(e){var t=this,r=this.tokenizer.getRangeTokens(e),n=pn(r);n.context.forEach((function(e,a){n.setCurrentIndex(a);var o=t.query.lookupFeature({tag:"rlig",script:"arab",contextParams:n});o.length&&(o.forEach((function(e){return ln(e,r,a)})),n=pn(r))}))}var fn={startCheck:function(e){var t=e.current,r=e.get(-1);return null===r&&Yr(t)||!Yr(r)&&Yr(t)},endCheck:function(e){var t=e.get(1);return null===t||!Yr(t)}};function dn(e,t){return new qr(e.map((function(e){return e.activeState.value})),t||0)}function vn(e){var t=this,r=this.tokenizer.getRangeTokens(e),n=dn(r);n.context.forEach((function(e,a){n.setCurrentIndex(a);var o=t.query.lookupFeature({tag:"liga",script:"latn",contextParams:n});o.length&&(o.forEach((function(e){return ln(e,r,a)})),n=dn(r))}))}function gn(e){this.baseDir=e||"ltr",this.tokenizer=new Xr,this.featuresTags={}}function mn(e){var t=this.contextChecks[e+"Check"];return this.tokenizer.registerContextChecker(e,t.startCheck,t.endCheck)}function yn(){return mn.call(this,"latinWord"),mn.call(this,"arabicWord"),mn.call(this,"arabicSentence"),this.tokenizer.tokenize(this.text)}function bn(){var e=this;this.tokenizer.getContextRanges("arabicSentence").forEach((function(t){var r=e.tokenizer.getRangeTokens(t);e.tokenizer.replaceRange(t.startIndex,t.endOffset,r.reverse())}))}function xn(){if(-1===this.tokenizer.registeredModifiers.indexOf("glyphIndex"))throw new Error("glyphIndex modifier is required to apply arabic presentation features.")}function Sn(){var e=this;this.featuresTags.hasOwnProperty("arab")&&(xn.call(this),this.tokenizer.getContextRanges("arabicWord").forEach((function(t){cn.call(e,t)})))}function Mn(){var e=this;this.featuresTags.hasOwnProperty("arab")&&-1!==this.featuresTags.arab.indexOf("rlig")&&(xn.call(this),this.tokenizer.getContextRanges("arabicWord").forEach((function(t){hn.call(e,t)})))}function Tn(){var e=this;this.featuresTags.hasOwnProperty("latn")&&-1!==this.featuresTags.latn.indexOf("liga")&&(xn.call(this),this.tokenizer.getContextRanges("latinWord").forEach((function(t){vn.call(e,t)})))}function Un(e){(e=e||{}).tables=e.tables||{},e.empty||(qt(e.familyName,"When creating a new Font object, familyName is required."),qt(e.styleName,"When creating a new Font object, styleName is required."),qt(e.unitsPerEm,"When creating a new Font object, unitsPerEm is required."),qt(e.ascender,"When creating a new Font object, ascender is required."),qt(e.descender<=0,"When creating a new Font object, negative descender value is required."),this.names={fontFamily:{en:e.familyName||" "},fontSubfamily:{en:e.styleName||" "},fullName:{en:e.fullName||e.familyName+" "+e.styleName},postScriptName:{en:e.postScriptName||(e.familyName+e.styleName).replace(/\s/g,"")},designer:{en:e.designer||" "},designerURL:{en:e.designerURL||" "},manufacturer:{en:e.manufacturer||" "},manufacturerURL:{en:e.manufacturerURL||" "},license:{en:e.license||" "},licenseURL:{en:e.licenseURL||" "},version:{en:e.version||"Version 0.1"},description:{en:e.description||" "},copyright:{en:e.copyright||" "},trademark:{en:e.trademark||" "}},this.unitsPerEm=e.unitsPerEm||1e3,this.ascender=e.ascender,this.descender=e.descender,this.createdTimestamp=e.createdTimestamp,this.tables=Object.assign(e.tables,{os2:Object.assign({usWeightClass:e.weightClass||this.usWeightClasses.MEDIUM,usWidthClass:e.widthClass||this.usWidthClasses.MEDIUM,fsSelection:e.fsSelection||this.fsSelectionValues.REGULAR},e.tables.os2)})),this.supported=!0,this.glyphs=new Me.GlyphSet(this,e.glyphs||[]),this.encoding=new de(this),this.position=new Gt(this),this.substitution=new Ft(this),this.tables=this.tables||{},this._push=null,this._hmtxTableData={},Object.defineProperty(this,"hinting",{get:function(){return this._hinting?this._hinting:"truetype"===this.outlinesFormat?this._hinting=new $t(this):void 0}})}function kn(e,t,r){var n={},a=new se.Parser(e,t);return n.tag=a.parseTag(),n.minValue=a.parseFixed(),n.defaultValue=a.parseFixed(),n.maxValue=a.parseFixed(),a.skip("uShort",1),n.name=r[a.parseUShort()]||{},n}function On(e,t,r,n){var a={},o=new se.Parser(e,t);a.name=n[o.parseUShort()]||{},o.skip("uShort",1),a.coordinates={};for(var s=0;s<r.length;++s)a.coordinates[r[s].tag]=o.parseFixed();return a}gn.prototype.setText=function(e){this.text=e},gn.prototype.contextChecks={latinWordCheck:fn,arabicWordCheck:on,arabicSentenceCheck:sn},gn.prototype.registerFeatures=function(e,t){var r=this,n=t.filter((function(t){return r.query.supports({script:e,tag:t})}));this.featuresTags.hasOwnProperty(e)?this.featuresTags[e]=this.featuresTags[e].concat(n):this.featuresTags[e]=n},gn.prototype.applyFeatures=function(e,t){if(!e)throw new Error("No valid font was provided to apply features");this.query||(this.query=new Qr(e));for(var r=0;r<t.length;r++){var n=t[r];this.query.supports({script:n.script})&&this.registerFeatures(n.script,n.tags)}},gn.prototype.registerModifier=function(e,t,r){this.tokenizer.registerModifier(e,t,r)},gn.prototype.checkContextReady=function(e){return!!this.tokenizer.getContext(e)},gn.prototype.applyFeaturesToContexts=function(){this.checkContextReady("arabicWord")&&(Sn.call(this),Mn.call(this)),this.checkContextReady("latinWord")&&Tn.call(this),this.checkContextReady("arabicSentence")&&bn.call(this)},gn.prototype.processText=function(e){this.text&&this.text===e||(this.setText(e),yn.call(this),this.applyFeaturesToContexts())},gn.prototype.getBidiText=function(e){return this.processText(e),this.tokenizer.getText()},gn.prototype.getTextGlyphs=function(e){this.processText(e);for(var t=[],r=0;r<this.tokenizer.tokens.length;r++){var n=this.tokenizer.tokens[r];if(!n.state.deleted){var a=n.activeState.value;t.push(Array.isArray(a)?a[0]:a)}}return t},Un.prototype.hasChar=function(e){return null!==this.encoding.charToGlyphIndex(e)},Un.prototype.charToGlyphIndex=function(e){return this.encoding.charToGlyphIndex(e)},Un.prototype.charToGlyph=function(e){var t=this.charToGlyphIndex(e),r=this.glyphs.get(t);return r||(r=this.glyphs.get(0)),r},Un.prototype.updateFeatures=function(e){return this.defaultRenderOptions.features.map((function(t){return"latn"===t.script?{script:"latn",tags:t.tags.filter((function(t){return e[t]}))}:t}))},Un.prototype.stringToGlyphs=function(e,t){var r=this,n=new gn;n.registerModifier("glyphIndex",null,(function(e){return r.charToGlyphIndex(e.char)}));var a=t?this.updateFeatures(t.features):this.defaultRenderOptions.features;n.applyFeatures(this,a);for(var o=n.getTextGlyphs(e),s=o.length,i=new Array(s),u=this.glyphs.get(0),l=0;l<s;l+=1)i[l]=this.glyphs.get(o[l])||u;return i},Un.prototype.nameToGlyphIndex=function(e){return this.glyphNames.nameToGlyphIndex(e)},Un.prototype.nameToGlyph=function(e){var t=this.nameToGlyphIndex(e),r=this.glyphs.get(t);return r||(r=this.glyphs.get(0)),r},Un.prototype.glyphIndexToName=function(e){return this.glyphNames.glyphIndexToName?this.glyphNames.glyphIndexToName(e):""},Un.prototype.getKerningValue=function(e,t){e=e.index||e,t=t.index||t;var r=this.position.defaultKerningTables;return r?this.position.getKerningValue(r,e,t):this.kerningPairs[e+","+t]||0},Un.prototype.defaultRenderOptions={kerning:!0,features:[{script:"arab",tags:["init","medi","fina","rlig"]},{script:"latn",tags:["liga","rlig"]}]},Un.prototype.forEachGlyph=function(e,t,r,n,a,o){t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:72,a=Object.assign({},this.defaultRenderOptions,a);var s,i=1/this.unitsPerEm*n,u=this.stringToGlyphs(e,a);if(a.kerning){var l=a.script||this.position.getDefaultScriptName();s=this.position.getKerningTables(l,a.language)}for(var c=0;c<u.length;c+=1){var p=u[c];o.call(this,p,t,r,n,a),p.advanceWidth&&(t+=p.advanceWidth*i),a.kerning&&c<u.length-1&&(t+=(s?this.position.getKerningValue(s,p.index,u[c+1].index):this.getKerningValue(p,u[c+1]))*i),a.letterSpacing?t+=a.letterSpacing*n:a.tracking&&(t+=a.tracking/1e3*n)}return t},Un.prototype.getPath=function(e,t,r,n,a){var o=new E;return this.forEachGlyph(e,t,r,n,a,(function(e,t,r,n){var s=e.getPath(t,r,n,a,this);o.extend(s)})),o},Un.prototype.getPaths=function(e,t,r,n,a){var o=[];return this.forEachGlyph(e,t,r,n,a,(function(e,t,r,n){var s=e.getPath(t,r,n,a,this);o.push(s)})),o},Un.prototype.getAdvanceWidth=function(e,t,r){return this.forEachGlyph(e,0,0,t,r,(function(){}))},Un.prototype.draw=function(e,t,r,n,a,o){this.getPath(t,r,n,a,o).draw(e)},Un.prototype.drawPoints=function(e,t,r,n,a,o){this.forEachGlyph(t,r,n,a,o,(function(t,r,n,a){t.drawPoints(e,r,n,a)}))},Un.prototype.drawMetrics=function(e,t,r,n,a,o){this.forEachGlyph(t,r,n,a,o,(function(t,r,n,a){t.drawMetrics(e,r,n,a)}))},Un.prototype.getEnglishName=function(e){var t=this.names[e];if(t)return t.en},Un.prototype.validate=function(){var e=this;function t(t){var r=e.getEnglishName(t);r&&r.trim().length}t("fontFamily"),t("weightName"),t("manufacturer"),t("copyright"),t("version"),this.unitsPerEm},Un.prototype.toTables=function(){return Dt(this)},Un.prototype.toBuffer=function(){return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."),this.toArrayBuffer()},Un.prototype.toArrayBuffer=function(){for(var e=this.toTables().encode(),t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n<e.length;n++)r[n]=e[n];return t},Un.prototype.download=function(e){var t=this.getEnglishName("fontFamily"),n=this.getEnglishName("fontSubfamily");e=e||t.replace(/\s/g,"")+"-"+n+".otf";var a=this.toArrayBuffer();if("undefined"!=typeof window)if(window.URL=window.URL||window.webkitURL,window.URL){var o=new DataView(a),s=new Blob([o],{type:"font/opentype"}),i=document.createElement("a");i.href=window.URL.createObjectURL(s),i.download=e;var u=document.createEvent("MouseEvents");u.initEvent("click",!0,!1),i.dispatchEvent(u)}else console.warn("Font file could not be downloaded. Try using a different browser.");else{var l=r(102),c=function(e){for(var t=new Buffer(e.byteLength),r=new Uint8Array(e),n=0;n<t.length;++n)t[n]=r[n];return t}(a);l.writeFileSync(e,c)}},Un.prototype.fsSelectionValues={ITALIC:1,UNDERSCORE:2,NEGATIVE:4,OUTLINED:8,STRIKEOUT:16,BOLD:32,REGULAR:64,USER_TYPO_METRICS:128,WWS:256,OBLIQUE:512},Un.prototype.usWidthClasses={ULTRA_CONDENSED:1,EXTRA_CONDENSED:2,CONDENSED:3,SEMI_CONDENSED:4,MEDIUM:5,SEMI_EXPANDED:6,EXPANDED:7,EXTRA_EXPANDED:8,ULTRA_EXPANDED:9},Un.prototype.usWeightClasses={THIN:100,EXTRA_LIGHT:200,LIGHT:300,NORMAL:400,MEDIUM:500,SEMI_BOLD:600,BOLD:700,EXTRA_BOLD:800,BLACK:900};var En=function(e,t,r){var n=new se.Parser(e,t),a=n.parseULong();L.argument(65536===a,"Unsupported fvar table version.");var o=n.parseOffset16();n.skip("uShort",1);for(var s=n.parseUShort(),i=n.parseUShort(),u=n.parseUShort(),l=n.parseUShort(),c=[],p=0;p<s;p++)c.push(kn(e,t+o+p*i,r));for(var h=[],f=t+o+s*i,d=0;d<u;d++)h.push(On(e,f+d*l,c,r));return{axes:c,instances:h}},wn=new Array(10);wn[1]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{posFormat:1,coverage:this.parsePointer(ae.coverage),value:this.parseValueRecord()}:2===t?{posFormat:2,coverage:this.parsePointer(ae.coverage),values:this.parseValueRecordList()}:void L.assert(!1,"0x"+e.toString(16)+": GPOS lookup type 1 format must be 1 or 2.")},wn[2]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();L.assert(1===t||2===t,"0x"+e.toString(16)+": GPOS lookup type 2 format must be 1 or 2.");var r=this.parsePointer(ae.coverage),n=this.parseUShort(),a=this.parseUShort();if(1===t)return{posFormat:t,coverage:r,valueFormat1:n,valueFormat2:a,pairSets:this.parseList(ae.pointer(ae.list((function(){return{secondGlyph:this.parseUShort(),value1:this.parseValueRecord(n),value2:this.parseValueRecord(a)}}))))};if(2===t){var o=this.parsePointer(ae.classDef),s=this.parsePointer(ae.classDef),i=this.parseUShort(),u=this.parseUShort();return{posFormat:t,coverage:r,valueFormat1:n,valueFormat2:a,classDef1:o,classDef2:s,class1Count:i,class2Count:u,classRecords:this.parseList(i,ae.list(u,(function(){return{value1:this.parseValueRecord(n),value2:this.parseValueRecord(a)}})))}}},wn[3]=function(){return{error:"GPOS Lookup 3 not supported"}},wn[4]=function(){return{error:"GPOS Lookup 4 not supported"}},wn[5]=function(){return{error:"GPOS Lookup 5 not supported"}},wn[6]=function(){return{error:"GPOS Lookup 6 not supported"}},wn[7]=function(){return{error:"GPOS Lookup 7 not supported"}},wn[8]=function(){return{error:"GPOS Lookup 8 not supported"}},wn[9]=function(){return{error:"GPOS Lookup 9 not supported"}};new Array(10);var Rn=function(e,t){var r=new ae(e,t=t||0),n=r.parseVersion(1);return L.argument(1===n||1.1===n,"Unsupported GPOS table version "+n),1===n?{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(wn)}:{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(wn),variations:r.parseFeatureVariationsList()}},Ln=function(e,t){var r=new se.Parser(e,t),n=r.parseUShort();if(0===n)return function(e){var t={};e.skip("uShort");var r=e.parseUShort();L.argument(0===r,"Unsupported kern sub-table version."),e.skip("uShort",2);var n=e.parseUShort();e.skip("uShort",3);for(var a=0;a<n;a+=1){var o=e.parseUShort(),s=e.parseUShort(),i=e.parseShort();t[o+","+s]=i}return t}(r);if(1===n)return function(e){var t={};e.skip("uShort"),e.parseULong()>1&&console.warn("Only the first kern subtable is supported."),e.skip("uLong");var r=255&e.parseUShort();if(e.skip("uShort"),0===r){var n=e.parseUShort();e.skip("uShort",3);for(var a=0;a<n;a+=1){var o=e.parseUShort(),s=e.parseUShort(),i=e.parseShort();t[o+","+s]=i}}return t}(r);throw new Error("Unsupported kern table version ("+n+").")},Cn=function(e,t,r,n){for(var a=new se.Parser(e,t),o=n?a.parseUShort:a.parseULong,s=[],i=0;i<r+1;i+=1){var u=o.call(a);n&&(u*=2),s.push(u)}return s};function Dn(e,t){r(102).readFile(e,(function(e,r){if(e)return t(e.message);t(null,zt(r))}))}function In(e,t){var r=new XMLHttpRequest;r.open("get",e,!0),r.responseType="arraybuffer",r.onload=function(){return r.response?t(null,r.response):t("Font could not be loaded: "+r.statusText)},r.onerror=function(){t("Font could not be loaded")},r.send()}function An(e,t){for(var r=[],n=12,a=0;a<t;a+=1){var o=se.getTag(e,n),s=se.getULong(e,n+4),i=se.getULong(e,n+8),u=se.getULong(e,n+12);r.push({tag:o,checksum:s,offset:i,length:u,compression:!1}),n+=16}return r}function Bn(e,t){if("WOFF"===t.compression){var r=new Uint8Array(e.buffer,t.offset+2,t.compressedLength-2),n=new Uint8Array(t.length);if(function(e,t){var r,n,a=new s(e,t);do{switch(r=b(a),x(a,2,0)){case 0:n=U(a);break;case 1:n=T(a,i,u);break;case 2:M(a,a.ltree,a.dtree),n=T(a,a.ltree,a.dtree);break;default:n=-3}if(0!==n)throw new Error("Data error")}while(!r);a.destLen<a.dest.length?"function"==typeof a.dest.slice?a.dest.slice(0,a.destLen):a.dest.subarray(0,a.destLen):a.dest}(r,n),n.byteLength!==t.length)throw new Error("Decompression error: "+t.tag+" decompressed length doesn't match recorded length");return{data:new DataView(n.buffer,0),offset:0}}return{data:e,offset:t.offset}}function Pn(e,t){var r,n;t=null==t?{}:t;var a,o,s,i,u,l,c,p,h,f,d,v,g=new Un({empty:!0}),m=new DataView(e,0),y=[],b=se.getTag(m,0);if(b===String.fromCharCode(0,1,0,0)||"true"===b||"typ1"===b)g.outlinesFormat="truetype",y=An(m,a=se.getUShort(m,4));else if("OTTO"===b)g.outlinesFormat="cff",y=An(m,a=se.getUShort(m,4));else{if("wOFF"!==b)throw new Error("Unsupported OpenType signature "+b);var x=se.getTag(m,4);if(x===String.fromCharCode(0,1,0,0))g.outlinesFormat="truetype";else{if("OTTO"!==x)throw new Error("Unsupported OpenType flavor "+b);g.outlinesFormat="cff"}y=function(e,t){for(var r=[],n=44,a=0;a<t;a+=1){var o,s=se.getTag(e,n),i=se.getULong(e,n+4),u=se.getULong(e,n+8),l=se.getULong(e,n+12);o=u<l&&"WOFF",r.push({tag:s,offset:i,compression:o,compressedLength:u,length:l}),n+=20}return r}(m,a=se.getUShort(m,12))}for(var S=0;S<a;S+=1){var M=y[S],T=void 0;switch(M.tag){case"cmap":T=Bn(m,M),g.tables.cmap=ue(T.data,T.offset),g.encoding=new ve(g.tables.cmap);break;case"cvt ":T=Bn(m,M),v=new se.Parser(T.data,T.offset),g.tables.cvt=v.parseShortList(M.length/2);break;case"fvar":s=M;break;case"fpgm":T=Bn(m,M),v=new se.Parser(T.data,T.offset),g.tables.fpgm=v.parseByteList(M.length);break;case"head":T=Bn(m,M),g.tables.head=We(T.data,T.offset),g.unitsPerEm=g.tables.head.unitsPerEm,r=g.tables.head.indexToLocFormat;break;case"hhea":T=Bn(m,M),g.tables.hhea=Xe(T.data,T.offset),g.ascender=g.tables.hhea.ascender,g.descender=g.tables.hhea.descender,g.numberOfHMetrics=g.tables.hhea.numberOfHMetrics;break;case"hmtx":c=M;break;case"ltag":T=Bn(m,M),n=Qe(T.data,T.offset);break;case"maxp":T=Bn(m,M),g.tables.maxp=Ke(T.data,T.offset),g.numGlyphs=g.tables.maxp.numGlyphs;break;case"name":f=M;break;case"OS/2":T=Bn(m,M),g.tables.os2=dt(T.data,T.offset);break;case"post":T=Bn(m,M),g.tables.post=mt(T.data,T.offset),g.glyphNames=new me(g.tables.post);break;case"prep":T=Bn(m,M),v=new se.Parser(T.data,T.offset),g.tables.prep=v.parseByteList(M.length);break;case"glyf":i=M;break;case"loca":h=M;break;case"CFF ":o=M;break;case"kern":p=M;break;case"GPOS":u=M;break;case"GSUB":l=M;break;case"meta":d=M}}var U=Bn(m,f);if(g.tables.name=pt(U.data,U.offset,n),g.names=g.tables.name,i&&h){var k=0===r,O=Bn(m,h),E=Cn(O.data,O.offset,g.numGlyphs,k),w=Bn(m,i);g.glyphs=Jt.parse(w.data,w.offset,E,g,t)}else{if(!o)throw new Error("Font doesn't contain TrueType or CFF outlines.");var R=Bn(m,o);ze(R.data,R.offset,g,t)}var L=Bn(m,c);if(Ze(g,L.data,L.offset,g.numberOfHMetrics,g.numGlyphs,g.glyphs,t),function(e,t){t.lowMemory?function(e){e._IndexToUnicodeMap={};for(var t=e.tables.cmap.glyphIndexMap,r=Object.keys(t),n=0;n<r.length;n+=1){var a=r[n],o=t[a];void 0===e._IndexToUnicodeMap[o]?e._IndexToUnicodeMap[o]={unicodes:[parseInt(a)]}:e._IndexToUnicodeMap[o].unicodes.push(parseInt(a))}}(e):function(e){for(var t,r=e.tables.cmap.glyphIndexMap,n=Object.keys(r),a=0;a<n.length;a+=1){var o=n[a],s=r[o];(t=e.glyphs.get(s)).addUnicode(parseInt(o))}for(var i=0;i<e.glyphs.length;i+=1)t=e.glyphs.get(i),e.cffEncoding?e.isCIDFont?t.name="gid"+i:t.name=e.cffEncoding.charset[i]:e.glyphNames.names&&(t.name=e.glyphNames.glyphIndexToName(i))}(e)}(g,t),p){var C=Bn(m,p);g.kerningPairs=Ln(C.data,C.offset)}else g.kerningPairs={};if(u){var D=Bn(m,u);g.tables.gpos=Rn(D.data,D.offset),g.position.init()}if(l){var I=Bn(m,l);g.tables.gsub=Mt(I.data,I.offset)}if(s){var A=Bn(m,s);g.tables.fvar=En(A.data,A.offset,g.names)}if(d){var B=Bn(m,d);g.tables.meta=Ut(B.data,B.offset),g.metas=g.tables.meta}return g}function Gn(e,t,r){var n="undefined"==typeof window?Dn:In;return new Promise((function(a,o){n(e,(function(e,n){if(e){if(t)return t(e);o(e)}var s;try{s=Pn(n,r)}catch(e){if(t)return t(e,null);o(e)}if(t)return t(null,s);a(s)}))}))}function Fn(e,t){return Pn(zt(r(102).readFileSync(e)),t)}const Nn=Object.freeze({__proto__:null,Font:Un,Glyph:be,Path:E,BoundingBox:O,_parse:se,parse:Pn,load:Gn,loadSync:Fn})},102:()=>{}},r={};function n(e){var a=r[e];if(void 0!==a)return a.exports;var o=r[e]={exports:{}};return t[e].call(o.exports,o,o.exports,n),o.exports}n.m=t,e=[],n.O=(t,r,a,o)=>{if(!r){var s=1/0;for(c=0;c<e.length;c++){for(var[r,a,o]=e[c],i=!0,u=0;u<r.length;u++)(!1&o||s>=o)&&Object.keys(n.O).every((e=>n.O[e](r[u])))?r.splice(u--,1):(i=!1,o<s&&(s=o));if(i){e.splice(c--,1);var l=a();void 0!==l&&(t=l)}}return t}o=o||0;for(var c=e.length;c>0&&e[c-1][2]>o;c--)e[c]=e[c-1];e[c]=[r,a,o]},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={712:0};n.O.j=t=>0===e[t];var t=(t,r)=>{var a,o,[s,i,u]=r,l=0;for(a in i)n.o(i,a)&&(n.m[a]=i[a]);if(u)var c=u(n);for(t&&t(r);l<s.length;l++)o=s[l],n.o(e,o)&&e[o]&&e[o][0](),e[s[l]]=0;return n.O(c)},r=self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),n(187),n(422);var a=n(887);a=n.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,