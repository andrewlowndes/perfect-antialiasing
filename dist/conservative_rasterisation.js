"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[327],{876:function(e,r,t){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});const n=t(887),a=o(t(5)),i=o(t(938)),s=new Float32Array([-.75,-.75,0,.75,.75,-.75]),f=Float32Array.of(...s.slice(2),...s.slice(0,2)),l=Float32Array.of(...s.slice(s.length-2),...s.slice(0,s.length-2)),c=new Float32Array([1,0,0,0,1,0,0,0,1]),h=new Uint16Array([0,1,2]),u=document.getElementById("canvas1"),A=document.getElementById("canvas2"),g=A.getContext("2d");if(!g)throw new Error("Could not initialise graphics :(");const b=2*Math.PI,d=A.width/u.width,R=e=>Math.floor((s[2*h[e]]/2+.5)*A.width),v=e=>Math.floor(A.height-(s[2*h[e]+1]/2+.5)*A.height),F=u.getContext("webgl",{antialias:!1});if(!F)throw new Error("Could not initialise WebGL :(");const _=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,_),F.bufferData(F.ARRAY_BUFFER,s,F.DYNAMIC_DRAW);const m=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,m),F.bufferData(F.ARRAY_BUFFER,f,F.DYNAMIC_DRAW);const E=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,E),F.bufferData(F.ARRAY_BUFFER,l,F.DYNAMIC_DRAW);const B=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,B),F.bufferData(F.ARRAY_BUFFER,c,F.STATIC_DRAW);const S=F.createBuffer();F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,S),F.bufferData(F.ELEMENT_ARRAY_BUFFER,h,F.STATIC_DRAW);const w=F.createShader(F.VERTEX_SHADER);if(F.shaderSource(w,a.default),F.compileShader(w),""!==String(F.getShaderInfoLog(w)).trim())throw new Error(String(F.getShaderInfoLog(w)));const p=F.createShader(F.FRAGMENT_SHADER);if(F.shaderSource(p,i.default),F.compileShader(p),""!==String(F.getShaderInfoLog(p)).trim())throw new Error(String(F.getShaderInfoLog(p)));const P=F.createProgram();if(F.attachShader(P,w),F.attachShader(P,p),F.linkProgram(P),""!==String(F.getProgramInfoLog(P)).trim())throw new Error(String(F.getProgramInfoLog(P)));F.useProgram(P);const U=F.getAttribLocation(P,"pos");F.bindBuffer(F.ARRAY_BUFFER,_),F.vertexAttribPointer(U,2,F.FLOAT,!1,0,0),F.enableVertexAttribArray(U);const x=F.getAttribLocation(P,"prevPos");F.bindBuffer(F.ARRAY_BUFFER,E),F.vertexAttribPointer(x,2,F.FLOAT,!1,0,0),F.enableVertexAttribArray(x);const D=F.getAttribLocation(P,"nextPos");F.bindBuffer(F.ARRAY_BUFFER,m),F.vertexAttribPointer(D,2,F.FLOAT,!1,0,0),F.enableVertexAttribArray(D);const T=F.getAttribLocation(P,"uv");F.bindBuffer(F.ARRAY_BUFFER,B),F.vertexAttribPointer(T,3,F.FLOAT,!1,0,0),F.enableVertexAttribArray(T);const y=F.getUniformLocation(P,"offset");F.uniform1f(y,Math.sqrt(2)/u.width);const Y=F.getUniformLocation(P,"screenSize");F.uniform2fv(Y,[u.width,u.height]),F.clearColor(1,1,1,1),F.viewport(0,0,u.width,u.height),F.enable(F.DEPTH_TEST);const M=(e,r)=>{const t=2*e;s[t]=r[0],s[t+1]=r[1];const o=(t+2)%l.length;l[o]=r[0],l[o+1]=r[1];const n=(t-2+f.length)%f.length;f[n]=r[0],f[n+1]=r[1]},L=n.vec2.fromValues(1,1),C=n.vec2.fromValues(-1,-1),I=n.vec2.fromValues(-1,-1),V=n.vec2.fromValues(s[0],s[1]),k=n.vec2.fromValues(s[2],s[3]),N=n.vec2.fromValues(s[4],s[5]),O=.001,z=()=>{V[0]+=O*L[0],V[1]+=O*L[1],Math.abs(V[0])>1&&(L[0]*=-1),Math.abs(V[1])>1&&(L[1]*=-1),M(0,V),k[0]+=O*C[0],k[1]+=O*C[1],Math.abs(k[0])>1&&(C[0]*=-1),Math.abs(k[1])>1&&(C[1]*=-1),M(1,k),N[0]+=O*I[0],N[1]+=O*I[1],Math.abs(N[0])>1&&(I[0]*=-1),Math.abs(N[1])>1&&(I[1]*=-1),M(2,N),(()=>{g.clearRect(0,0,A.width,A.height),g.strokeStyle="#DDDDDD";for(let e=0;e<A.width;e+=d)g.beginPath(),g.moveTo(Math.floor(e),0),g.lineTo(Math.floor(e),A.height),g.stroke();for(let e=0;e<A.height;e+=d)g.beginPath(),g.moveTo(0,Math.floor(e)),g.lineTo(A.width,Math.floor(e)),g.stroke();const e=n.vec2.fromValues(R(0),v(0)),r=n.vec2.fromValues(R(1),v(1)),t=n.vec2.fromValues(R(2),v(2));g.strokeStyle="white",g.beginPath(),g.moveTo(e[0],e[1]),g.lineTo(r[0],r[1]),g.lineTo(t[0],t[1]),g.closePath(),g.stroke(),g.fillStyle="#AAA";for(let e=d/2;e<A.width;e+=d)for(let r=d/2;r<A.height;r+=d)g.beginPath(),g.arc(e,r,1,0,b),g.fill();g.fillStyle="blue";const o=[e,r,t];for(const e of o)g.beginPath(),g.arc(e[0],e[1],1,0,b),g.fill()})(),F.clear(F.COLOR_BUFFER_BIT),F.bindBuffer(F.ARRAY_BUFFER,_),F.bufferSubData(F.ARRAY_BUFFER,0,s),F.bindBuffer(F.ARRAY_BUFFER,m),F.bufferSubData(F.ARRAY_BUFFER,0,f),F.bindBuffer(F.ARRAY_BUFFER,E),F.bufferSubData(F.ARRAY_BUFFER,0,l),F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,S),F.drawElements(F.TRIANGLES,h.length,F.UNSIGNED_SHORT,0),requestAnimationFrame(z)};z()},938:e=>{e.exports="precision highp float;\r\n\r\nvarying vec3 vUv;\r\nvarying vec4 bounds;\r\n\r\nvoid main(void) {\r\n  if (gl_FragCoord.x < bounds.x || gl_FragCoord.y < bounds.y || gl_FragCoord.x > bounds.z || gl_FragCoord.y > bounds.w) {\r\n    discard;\r\n  }\r\n\r\n  gl_FragColor = vec4(vUv, 1.0);\r\n}"},5:e=>{e.exports="uniform vec2 screenSize;\r\nuniform float offset;\r\n\r\nattribute vec2 pos;\r\nattribute vec2 prevPos;\r\nattribute vec2 nextPos;\r\nattribute vec3 uv;\r\n\r\nvarying vec3 vUv;\r\nvarying vec4 bounds;\r\n\r\nvoid main(void) {\r\n    // determine a new vertex position such that it covers the neighbour pixel centers\r\n    vec2 a = normalize(pos - prevPos);\r\n    vec2 b = normalize(pos - nextPos);\r\n    float angle = sqrt((1.0 - dot(a, b)) / 2.0);\r\n\r\n    vec2 vecPos = pos + normalize(a + b) * (offset / angle);\r\n\r\n    // compute a bounding box and pass to the fragment shader so we don't render outside the inflated triangle bounds\r\n    bounds = screenSize.xyxy * (vec4(min(min(pos, prevPos), nextPos), max(max(pos, prevPos), nextPos)) / 2.0 + 0.5) + vec4(-0.5, -0.5, 0.5, 0.5);\r\n\r\n    // TODO: offset the uv so it is still inline with the original triangle position?\r\n    vUv = uv;\r\n\r\n    gl_Position = vec4(vecPos, 0.0, 1.0);\r\n}"}},e=>{e(e.s=876)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,