"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[327],{876:function(e,r,n){var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});const o=n(887),i=t(n(5)),a=t(n(938)),s=new Float32Array([-.75,-.75,0,.75,.75,-.75]),c=Float32Array.of(...s.slice(2),...s.slice(0,2)),l=Float32Array.of(...s.slice(s.length-2),...s.slice(0,s.length-2)),f=new Float32Array([1,0,0,0,1,0,0,0,1]),h=new Uint16Array([0,1,2]),u=document.getElementById("canvas1"),A=document.getElementById("canvas2"),v=A.getContext("2d");if(!v)throw new Error("Could not initialise graphics :(");const g=2*Math.PI,b=A.width/u.width,d=e=>Math.floor((s[2*h[e]]/2+.5)*A.width),R=e=>Math.floor(A.height-(s[2*h[e]+1]/2+.5)*A.height),F=u.getContext("webgl2",{antialias:!1});if(!F)throw new Error("Could not initialise WebGL :(");const P=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,P),F.bufferData(F.ARRAY_BUFFER,s,F.DYNAMIC_DRAW);const S=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,S),F.bufferData(F.ARRAY_BUFFER,c,F.DYNAMIC_DRAW);const p=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,p),F.bufferData(F.ARRAY_BUFFER,l,F.DYNAMIC_DRAW);const m=F.createBuffer();F.bindBuffer(F.ARRAY_BUFFER,m),F.bufferData(F.ARRAY_BUFFER,f,F.STATIC_DRAW);const _=F.createShader(F.VERTEX_SHADER);if(F.shaderSource(_,i.default),F.compileShader(_),""!==String(F.getShaderInfoLog(_)).trim())throw new Error(String(F.getShaderInfoLog(_)));const B=F.createShader(F.FRAGMENT_SHADER);if(F.shaderSource(B,a.default),F.compileShader(B),""!==String(F.getShaderInfoLog(B)).trim())throw new Error(String(F.getShaderInfoLog(B)));const E=F.createProgram();if(F.attachShader(E,_),F.attachShader(E,B),F.linkProgram(E),""!==String(F.getProgramInfoLog(E)).trim())throw new Error(String(F.getProgramInfoLog(E)));F.useProgram(E);const w=F.getAttribLocation(E,"pos");F.bindBuffer(F.ARRAY_BUFFER,P),F.vertexAttribPointer(w,2,F.FLOAT,!1,0,0),F.enableVertexAttribArray(w);const x=F.getAttribLocation(E,"prevPos");F.bindBuffer(F.ARRAY_BUFFER,p),F.vertexAttribPointer(x,2,F.FLOAT,!1,0,0),F.enableVertexAttribArray(x);const T=F.getAttribLocation(E,"nextPos");F.bindBuffer(F.ARRAY_BUFFER,S),F.vertexAttribPointer(T,2,F.FLOAT,!1,0,0),F.enableVertexAttribArray(T);const D=F.getAttribLocation(E,"uv");F.bindBuffer(F.ARRAY_BUFFER,m),F.vertexAttribPointer(D,3,F.FLOAT,!1,0,0),F.enableVertexAttribArray(D);const U=F.getUniformLocation(E,"screenSize");F.uniform2fv(U,[u.width,u.height]),F.clearColor(1,1,1,1),F.viewport(0,0,u.width,u.height),F.enable(F.DEPTH_TEST);const y=(e,r)=>{const n=2*e;s[n]=r[0],s[n+1]=r[1];const t=(n+2)%l.length;l[t]=r[0],l[t+1]=r[1];const o=(n-2+c.length)%c.length;c[o]=r[0],c[o+1]=r[1]},Y=o.vec2.fromValues(1,1),C=o.vec2.fromValues(-1,-1),L=o.vec2.fromValues(-1,-1),M=o.vec2.fromValues(s[0],s[1]),I=o.vec2.fromValues(s[2],s[3]),V=o.vec2.fromValues(s[4],s[5]),O=.001,N=()=>{M[0]+=O*Y[0],M[1]+=O*Y[1],Math.abs(M[0])>1&&(Y[0]*=-1),Math.abs(M[1])>1&&(Y[1]*=-1),y(0,M),I[0]+=O*C[0],I[1]+=O*C[1],Math.abs(I[0])>1&&(C[0]*=-1),Math.abs(I[1])>1&&(C[1]*=-1),y(1,I),V[0]+=O*L[0],V[1]+=O*L[1],Math.abs(V[0])>1&&(L[0]*=-1),Math.abs(V[1])>1&&(L[1]*=-1),y(2,V),(()=>{v.clearRect(0,0,A.width,A.height),v.strokeStyle="#DDDDDD";for(let e=0;e<A.width;e+=b)v.beginPath(),v.moveTo(Math.floor(e),0),v.lineTo(Math.floor(e),A.height),v.stroke();for(let e=0;e<A.height;e+=b)v.beginPath(),v.moveTo(0,Math.floor(e)),v.lineTo(A.width,Math.floor(e)),v.stroke();const e=o.vec2.fromValues(d(0),R(0)),r=o.vec2.fromValues(d(1),R(1)),n=o.vec2.fromValues(d(2),R(2));v.strokeStyle="white",v.beginPath(),v.moveTo(e[0],e[1]),v.lineTo(r[0],r[1]),v.lineTo(n[0],n[1]),v.closePath(),v.stroke(),v.fillStyle="#AAA";for(let e=b/2;e<A.width;e+=b)for(let r=b/2;r<A.height;r+=b)v.beginPath(),v.arc(e,r,1,0,g),v.fill();v.fillStyle="blue";const t=[e,r,n];for(const e of t)v.beginPath(),v.arc(e[0],e[1],1,0,g),v.fill()})(),F.clear(F.COLOR_BUFFER_BIT),F.bindBuffer(F.ARRAY_BUFFER,P),F.bufferSubData(F.ARRAY_BUFFER,0,s),F.bindBuffer(F.ARRAY_BUFFER,S),F.bufferSubData(F.ARRAY_BUFFER,0,c),F.bindBuffer(F.ARRAY_BUFFER,p),F.bufferSubData(F.ARRAY_BUFFER,0,l),F.drawArrays(F.TRIANGLES,0,3),requestAnimationFrame(N)};N()},938:e=>{e.exports="#version 300 es\r\n\r\nprecision highp float;\r\n\r\nin vec3 vUv;\r\nflat in vec4 bounds;\r\n\r\nout vec4 outColour;\r\n\r\nvoid main(void) {\r\n  if (gl_FragCoord.x < bounds.x || gl_FragCoord.y < bounds.y || gl_FragCoord.x > bounds.z || gl_FragCoord.y > bounds.w) {\r\n    discard;\r\n  }\r\n\r\n  outColour = vec4(vUv, 1.0);\r\n}\r\n"},5:e=>{e.exports="#version 300 es\r\n\r\nuniform vec2 screenSize;\r\n\r\nin vec3 uv;\r\nin vec2 pos;\r\nin vec2 prevPos;\r\nin vec2 nextPos;\r\n\r\nout vec3 vUv;\r\nflat out vec4 bounds;\r\n\r\nconst float EPSILON = 0.0000001;\r\n\r\nvec2 clipToScreenSpace(vec2 pos) {\r\n    return screenSize.xy * (pos / 2.0 + 0.5);\r\n}\r\n\r\nvec2 screenSpaceToClipSpace(vec2 pos) {\r\n    return ((pos / screenSize.xy) - 0.5) * 2.0;\r\n}\r\n\r\nconst float diagonalOffset = sqrt(2.0) / 2.0;\r\n\r\nvoid main(void) {\r\n    vec2 screenPos = clipToScreenSpace(pos);\r\n    vec2 screenNextPos = clipToScreenSpace(nextPos);\r\n    vec2 screenPrevPos = clipToScreenSpace(prevPos);\r\n    \r\n    // determine a new vertex position such that it covers the neighbour pixel centers\r\n    vec2 a = normalize(screenPrevPos - screenPos);\r\n    vec2 b = normalize(screenNextPos - screenPos);\r\n    float angle = sqrt((1.0 - dot(a, b)) / 2.0);\r\n    \r\n    vec2 vecPos;\r\n    if (abs(angle) > EPSILON) {\r\n        vecPos = screenSpaceToClipSpace(screenPos - normalize(a + b) * diagonalOffset / angle);\r\n    } else {\r\n        vecPos = pos;\r\n    }\r\n\r\n    bounds = vec4(\r\n        min(min(screenPos, screenNextPos), screenPrevPos) - 0.5,\r\n        max(max(screenPos, screenNextPos), screenPrevPos) + 0.5\r\n    );\r\n\r\n    // TODO: offset the uv so it is still inline with the original triangle position?\r\n    vUv = uv;\r\n\r\n    gl_Position = vec4(vecPos, 0.0, 1.0);\r\n}\r\n"}},e=>{e(e.s=876)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,