(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[327],{876:function(e,t,r){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),r(669);const n=o(r(787)),a=o(r(457)),i=r(887),c=new Float32Array([-.75,-.75,0,.75,.75,-.75]),s=Float32Array.of(...c.slice(2),...c.slice(0,2)),l=Float32Array.of(...c.slice(c.length-2),...c.slice(0,c.length-2)),f=new Float32Array([1,0,0,0,1,0,0,0,1]),u=new Uint16Array([0,1,2]),v=document.getElementById("canvas1"),d=document.getElementById("canvas2"),h=d.getContext("2d");if(!h)throw new Error("Could not initialise graphics :(");const g=2*Math.PI,b=d.width/v.width,A=e=>Math.floor((c[2*u[e]]/2+.5)*d.width),R=e=>Math.floor(d.height-(c[2*u[e]+1]/2+.5)*d.height),m=v.getContext("webgl",{antialias:!1});if(!m)throw new Error("Could not initialise WebGL :(");const F=m.createBuffer();m.bindBuffer(m.ARRAY_BUFFER,F),m.bufferData(m.ARRAY_BUFFER,c,m.DYNAMIC_DRAW);const E=m.createBuffer();m.bindBuffer(m.ARRAY_BUFFER,E),m.bufferData(m.ARRAY_BUFFER,s,m.DYNAMIC_DRAW);const _=m.createBuffer();m.bindBuffer(m.ARRAY_BUFFER,_),m.bufferData(m.ARRAY_BUFFER,l,m.DYNAMIC_DRAW);const p=m.createBuffer();m.bindBuffer(m.ARRAY_BUFFER,p),m.bufferData(m.ARRAY_BUFFER,f,m.STATIC_DRAW);const B=m.createBuffer();m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,B),m.bufferData(m.ELEMENT_ARRAY_BUFFER,u,m.STATIC_DRAW);const P=m.createShader(m.VERTEX_SHADER);if(m.shaderSource(P,n.default),m.compileShader(P),""!==String(m.getShaderInfoLog(P)).trim())throw new Error(String(m.getShaderInfoLog(P)));const S=m.createShader(m.FRAGMENT_SHADER);if(m.shaderSource(S,a.default),m.compileShader(S),""!==String(m.getShaderInfoLog(S)).trim())throw new Error(String(m.getShaderInfoLog(S)));const w=m.createProgram();if(m.attachShader(w,P),m.attachShader(w,S),m.linkProgram(w),""!==String(m.getProgramInfoLog(w)).trim())throw new Error(String(m.getProgramInfoLog(w)));m.useProgram(w);const x=m.getAttribLocation(w,"pos");m.bindBuffer(m.ARRAY_BUFFER,F),m.vertexAttribPointer(x,2,m.FLOAT,!1,0,0),m.enableVertexAttribArray(x);const U=m.getAttribLocation(w,"prevPos");m.bindBuffer(m.ARRAY_BUFFER,_),m.vertexAttribPointer(U,2,m.FLOAT,!1,0,0),m.enableVertexAttribArray(U);const D=m.getAttribLocation(w,"nextPos");m.bindBuffer(m.ARRAY_BUFFER,E),m.vertexAttribPointer(D,2,m.FLOAT,!1,0,0),m.enableVertexAttribArray(D);const M=m.getAttribLocation(w,"uv");m.bindBuffer(m.ARRAY_BUFFER,p),m.vertexAttribPointer(M,3,m.FLOAT,!1,0,0),m.enableVertexAttribArray(M);const T=m.getUniformLocation(w,"offset");m.uniform1f(T,Math.sqrt(2)/v.width);const y=m.getUniformLocation(w,"screenSize");m.uniform2fv(y,[v.width,v.height]),m.clearColor(1,1,1,1),m.viewport(0,0,v.width,v.height),m.enable(m.DEPTH_TEST);const Y=(e,t)=>{const r=2*e;c[r]=t[0],c[r+1]=t[1];const o=(r+2)%l.length;l[o]=t[0],l[o+1]=t[1];const n=(r-2+s.length)%s.length;s[n]=t[0],s[n+1]=t[1]},L=i.vec2.fromValues(1,1),C=i.vec2.fromValues(-1,-1),I=i.vec2.fromValues(-1,-1),V=i.vec2.fromValues(c[0],c[1]),O=i.vec2.fromValues(c[2],c[3]),k=i.vec2.fromValues(c[4],c[5]),N=.001,z=()=>{V[0]+=N*L[0],V[1]+=N*L[1],Math.abs(V[0])>1&&(L[0]*=-1),Math.abs(V[1])>1&&(L[1]*=-1),Y(0,V),O[0]+=N*C[0],O[1]+=N*C[1],Math.abs(O[0])>1&&(C[0]*=-1),Math.abs(O[1])>1&&(C[1]*=-1),Y(1,O),k[0]+=N*I[0],k[1]+=N*I[1],Math.abs(k[0])>1&&(I[0]*=-1),Math.abs(k[1])>1&&(I[1]*=-1),Y(2,k),(()=>{h.clearRect(0,0,d.width,d.height),h.strokeStyle="#DDDDDD";for(let e=0;e<d.width;e+=b)h.beginPath(),h.moveTo(Math.floor(e),0),h.lineTo(Math.floor(e),d.height),h.stroke();for(let e=0;e<d.height;e+=b)h.beginPath(),h.moveTo(0,Math.floor(e)),h.lineTo(d.width,Math.floor(e)),h.stroke();const e=i.vec2.fromValues(A(0),R(0)),t=i.vec2.fromValues(A(1),R(1)),r=i.vec2.fromValues(A(2),R(2));h.strokeStyle="white",h.beginPath(),h.moveTo(e[0],e[1]),h.lineTo(t[0],t[1]),h.lineTo(r[0],r[1]),h.closePath(),h.stroke(),h.fillStyle="#AAA";for(let e=b/2;e<d.width;e+=b)for(let t=b/2;t<d.height;t+=b)h.beginPath(),h.arc(e,t,1,0,g),h.fill();h.fillStyle="blue";const o=[e,t,r];for(const e of o)h.beginPath(),h.arc(e[0],e[1],1,0,g),h.fill()})(),m.clear(m.COLOR_BUFFER_BIT),m.bindBuffer(m.ARRAY_BUFFER,F),m.bufferSubData(m.ARRAY_BUFFER,0,c),m.bindBuffer(m.ARRAY_BUFFER,E),m.bufferSubData(m.ARRAY_BUFFER,0,s),m.bindBuffer(m.ARRAY_BUFFER,_),m.bufferSubData(m.ARRAY_BUFFER,0,l),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,B),m.drawElements(m.TRIANGLES,u.length,m.UNSIGNED_SHORT,0),requestAnimationFrame(z)};z()},669:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=r(887);t.clamp2=(e,t,r)=>{const n=o.vec2.clone(e);return o.vec2.min(n,n,r),o.vec2.max(n,n,t),n},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=o.vec2.equals,t.scale=(e,t)=>o.vec2.scale(o.vec2.create(),e,t),t.multiply=(e,t)=>o.vec2.multiply(o.vec2.create(),e,t),t.divide=(e,t)=>o.vec2.divide(o.vec2.create(),e,t),t.add=(e,t)=>o.vec2.add(o.vec2.create(),e,t),t.adds=(e,t)=>o.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>o.vec2.sub(o.vec2.create(),e,t),t.floor=e=>o.vec2.floor(o.vec2.create(),e),t.ceil=e=>o.vec2.ceil(o.vec2.create(),e),t.abs=e=>o.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>o.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>o.vec2.dot(e,t),t.length=e=>o.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,r)=>o.vec2.lerp(o.vec2.create(),e,t,r),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...r]=e,n=o.vec2.clone(t);return r.forEach((e=>{o.vec2.min(n,n,e)})),n},t.max2=(...e)=>{const[t,...r]=e,n=o.vec2.clone(t);return r.forEach((e=>{o.vec2.max(n,n,e)})),n},t.avg=(...e)=>{const t=o.vec2.create();return e.length&&(e.forEach((e=>{o.vec2.add(t,t,e)})),o.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,r)=>!(e[0]>r[0]||e[0]<t[0]||e[1]>r[1]||e[1]<t[1])},457:e=>{"use strict";e.exports="precision highp float;\r\n\r\nvarying vec3 vUv;\r\nvarying vec4 bounds;\r\n\r\nvoid main(void) {\r\n  if (gl_FragCoord[0] < bounds[0] || gl_FragCoord[1] < bounds[1] || gl_FragCoord[0] > bounds.z || gl_FragCoord[1] > bounds.w) {\r\n    discard;\r\n  }\r\n\r\n  gl_FragColor = vec4(vUv, 1.0);\r\n}"},787:e=>{"use strict";e.exports="uniform vec2 screenSize;\r\nuniform float offset;\r\n\r\nattribute vec2 pos;\r\nattribute vec2 prevPos;\r\nattribute vec2 nextPos;\r\nattribute vec3 uv;\r\n\r\nvarying vec3 vUv;\r\nvarying vec4 bounds;\r\n\r\nvoid main(void) {\r\n    // determine a new vertex position such that it covers the neighbour pixel centers\r\n    vec2 a = normalize(pos - prevPos);\r\n    vec2 b = normalize(pos - nextPos);\r\n    float angle = sqrt((1.0 - dot(a, b)) / 2.0);\r\n\r\n    vec2 vecPos = pos + normalize(a + b) * (offset / angle);\r\n\r\n    // compute a bounding box and pass to the fragment shader so we don't render outside the inflated triangle bounds\r\n    bounds = screenSize.xyxy * (vec4(min(min(pos, prevPos), nextPos), max(max(pos, prevPos), nextPos)) / 2.0 + 0.5) + vec4(-0.5, -0.5, 0.5, 0.5);\r\n\r\n    // TODO: offset the uv so it is still inline with the original triangle position?\r\n    vUv = uv;\r\n\r\n    gl_Position = vec4(vecPos, 0.0, 1.0);\r\n}"}},e=>{"use strict";e(e.s=876)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,