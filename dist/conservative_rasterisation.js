(()=>{"use strict";var e={876:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),r(669);const n=o(r(787)),a=o(r(457)),i=new Float32Array([-.75,-.75,0,.75,.75,-.75]),s=Float32Array.of(...i.slice(2),...i.slice(0,2)),l=Float32Array.of(...i.slice(i.length-2),...i.slice(0,i.length-2)),x=new Float32Array([1,0,0,0,1,0,0,0,1]),f=new Uint16Array([0,1,2]),c=document.getElementById("canvas1"),y=document.getElementById("canvas2"),h=y.getContext("2d");if(!h)throw new Error("Could not initialise graphics :(");const d=2*Math.PI,g=y.width/c.width,u=e=>Math.floor((i[2*f[e]]/2+.5)*y.width),A=e=>Math.floor(y.height-(i[2*f[e]+1]/2+.5)*y.height),b=c.getContext("webgl",{antialias:!1});if(!b)throw new Error("Could not initialise WebGL :(");const R=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,R),b.bufferData(b.ARRAY_BUFFER,i,b.DYNAMIC_DRAW);const v=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,v),b.bufferData(b.ARRAY_BUFFER,s,b.DYNAMIC_DRAW);const m=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,m),b.bufferData(b.ARRAY_BUFFER,l,b.DYNAMIC_DRAW);const F=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,F),b.bufferData(b.ARRAY_BUFFER,x,b.STATIC_DRAW);const E=b.createBuffer();b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,E),b.bufferData(b.ELEMENT_ARRAY_BUFFER,f,b.STATIC_DRAW);const p=b.createShader(b.VERTEX_SHADER);if(b.shaderSource(p,n.default),b.compileShader(p),""!==String(b.getShaderInfoLog(p)).trim())throw new Error(String(b.getShaderInfoLog(p)));const _=b.createShader(b.FRAGMENT_SHADER);if(b.shaderSource(_,a.default),b.compileShader(_),""!==String(b.getShaderInfoLog(_)).trim())throw new Error(String(b.getShaderInfoLog(_)));const B=b.createProgram();if(b.attachShader(B,p),b.attachShader(B,_),b.linkProgram(B),""!==String(b.getProgramInfoLog(B)).trim())throw new Error(String(b.getProgramInfoLog(B)));b.useProgram(B);const M=b.getAttribLocation(B,"pos");b.bindBuffer(b.ARRAY_BUFFER,R),b.vertexAttribPointer(M,2,b.FLOAT,!1,0,0),b.enableVertexAttribArray(M);const P=b.getAttribLocation(B,"prevPos");b.bindBuffer(b.ARRAY_BUFFER,m),b.vertexAttribPointer(P,2,b.FLOAT,!1,0,0),b.enableVertexAttribArray(P);const S=b.getAttribLocation(B,"nextPos");b.bindBuffer(b.ARRAY_BUFFER,v),b.vertexAttribPointer(S,2,b.FLOAT,!1,0,0),b.enableVertexAttribArray(S);const w=b.getAttribLocation(B,"uv");b.bindBuffer(b.ARRAY_BUFFER,F),b.vertexAttribPointer(w,3,b.FLOAT,!1,0,0),b.enableVertexAttribArray(w);const U=b.getUniformLocation(B,"offset");b.uniform1f(U,Math.sqrt(2)/c.width);const D=b.getUniformLocation(B,"screenSize");b.uniform2fv(D,[c.width,c.height]),b.clearColor(1,1,1,1),b.viewport(0,0,c.width,c.height),b.enable(b.DEPTH_TEST);const T=(e,t)=>{const r=2*e;i[r]=t.x,i[r+1]=t.y;const o=(r+2)%l.length;l[o]=t.x,l[o+1]=t.y;const n=(r-2+s.length)%s.length;s[n]=t.x,s[n+1]=t.y},L={x:1,y:1},Y={x:-1,y:-1},I={x:-1,y:-1},C={x:i[0],y:i[1]},O={x:i[2],y:i[3]},N={x:i[4],y:i[5]},z=.001,q=()=>{C.x+=z*L.x,C.y+=z*L.y,Math.abs(C.x)>1&&(L.x*=-1),Math.abs(C.y)>1&&(L.y*=-1),T(0,C),O.x+=z*Y.x,O.y+=z*Y.y,Math.abs(O.x)>1&&(Y.x*=-1),Math.abs(O.y)>1&&(Y.y*=-1),T(1,O),N.x+=z*I.x,N.y+=z*I.y,Math.abs(N.x)>1&&(I.x*=-1),Math.abs(N.y)>1&&(I.y*=-1),T(2,N),(()=>{h.clearRect(0,0,y.width,y.height),h.strokeStyle="#DDDDDD";for(let e=0;e<y.width;e+=g)h.beginPath(),h.moveTo(Math.floor(e),0),h.lineTo(Math.floor(e),y.height),h.stroke();for(let e=0;e<y.height;e+=g)h.beginPath(),h.moveTo(0,Math.floor(e)),h.lineTo(y.width,Math.floor(e)),h.stroke();const e={x:u(0),y:A(0)},t={x:u(1),y:A(1)},r={x:u(2),y:A(2)};h.strokeStyle="white",h.beginPath(),h.moveTo(e.x,e.y),h.lineTo(t.x,t.y),h.lineTo(r.x,r.y),h.closePath(),h.stroke(),h.fillStyle="#AAA";for(let e=g/2;e<y.width;e+=g)for(let t=g/2;t<y.height;t+=g)h.beginPath(),h.arc(e,t,1,0,d),h.fill();h.fillStyle="blue";const o=[e,t,r];for(const e of o)h.beginPath(),h.arc(e.x,e.y,1,0,d),h.fill()})(),b.clear(b.COLOR_BUFFER_BIT),b.bindBuffer(b.ARRAY_BUFFER,R),b.bufferSubData(b.ARRAY_BUFFER,0,i),b.bindBuffer(b.ARRAY_BUFFER,v),b.bufferSubData(b.ARRAY_BUFFER,0,s),b.bindBuffer(b.ARRAY_BUFFER,m),b.bufferSubData(b.ARRAY_BUFFER,0,l),b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,E),b.drawElements(b.TRIANGLES,f.length,b.UNSIGNED_SHORT,0),requestAnimationFrame(q)};q()},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,r)=>Math.max(Math.min(e,r),t),t.timeAtPos=(e,r,o)=>r?t.clamp((o-e)/r,0,1):0,t.lerp=(e,t,r)=>e*(1-r)+t*r},669:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=r(345);t.clamp2=(e,t,r)=>({x:o.clamp(e.x,t.x,r.x),y:o.clamp(e.y,t.y,r.y)}),t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,r)=>({x:o.lerp(e.x,t.x,r),y:o.lerp(e.y,t.y,r)}),t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const r={x:e.x,y:e.y};return t.forEach((e=>{r.x=Math.min(r.x,e.x),r.y=Math.min(r.y,e.y)})),r},t.max2=(e,...t)=>{const r={x:e.x,y:e.y};return t.forEach((e=>{r.x=Math.max(r.x,e.x),r.y=Math.max(r.y,e.y)})),r},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,r)=>!(e.x>r.x||e.x<t.x||e.y>r.y||e.y<t.y)},457:e=>{e.exports="precision highp float;\r\n\r\nvarying vec3 vUv;\r\nvarying vec4 bounds;\r\n\r\nvoid main(void) {\r\n  if (gl_FragCoord.x < bounds.x || gl_FragCoord.y < bounds.y || gl_FragCoord.x > bounds.z || gl_FragCoord.y > bounds.w) {\r\n    discard;\r\n  }\r\n\r\n  gl_FragColor = vec4(vUv, 1.0);\r\n}"},787:e=>{e.exports="uniform vec2 screenSize;\r\nuniform float offset;\r\n\r\nattribute vec2 pos;\r\nattribute vec2 prevPos;\r\nattribute vec2 nextPos;\r\nattribute vec3 uv;\r\n\r\nvarying vec3 vUv;\r\nvarying vec4 bounds;\r\n\r\nvoid main(void) {\r\n    // determine a new vertex position such that it covers the neighbour pixel centers\r\n    vec2 a = normalize(pos - prevPos);\r\n    vec2 b = normalize(pos - nextPos);\r\n    float angle = sqrt((1.0 - dot(a, b)) / 2.0);\r\n\r\n    vec2 vecPos = pos + normalize(a + b) * (offset / angle);\r\n\r\n    // compute a bounding box and pass to the fragment shader so we don't render outside the inflated triangle bounds\r\n    bounds = screenSize.xyxy * (vec4(min(min(pos, prevPos), nextPos), max(max(pos, prevPos), nextPos)) / 2.0 + 0.5) + vec4(-0.5, -0.5, 0.5, 0.5);\r\n\r\n    // TODO: offset the uv so it is still inline with the original triangle position?\r\n    vUv = uv;\r\n\r\n    gl_Position = vec4(vecPos, 0.0, 1.0);\r\n}"}},t={};!function r(o){var n=t[o];if(void 0!==n)return n.exports;var a=t[o]={exports:{}};return e[o].call(a.exports,a,a.exports,r),a.exports}(876)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,