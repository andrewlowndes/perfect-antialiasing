(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[231],{3:(e,t,c)=>{"use strict";const r=c(887),o=c(856),a=c(717),n=document.getElementById("game"),s=n.getContext("2d");if(!s)throw new Error("Could not get canvas");const l=r.vec2.fromValues(40,40),i=r.vec2.fromValues(100,240),v=r.vec2.fromValues(300,80),p=r.vec2.fromValues(260,380),u={p1:l,p2:i,p3:v,p4:p,points:[l,i,v,p]},d=o.cubicBezierToPoints(u,-.99),m=()=>{s.clearRect(0,0,n.width,n.height),s.strokeStyle="blue",s.beginPath(),a.plotLines(s,u.points),s.stroke(),s.strokeStyle="green",s.beginPath(),a.plotLines(s,d),s.stroke(),requestAnimationFrame(m)};requestAnimationFrame(m)},856:(e,t,c)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const r=c(887),o=c(345),a=c(669);t.cubicBezierToPoints=(e,t)=>{const c=[r.vec2.clone(e.p1),r.vec2.clone(e.p4)],n=(e,r,s,l,i=!1)=>{const v=o.lerp(r,s,.5),p=a.lerp2(e.p2,e.p3,v),u=a.lerp2(a.lerp2(a.lerp2(e.p1,e.p2,v),p,v),a.lerp2(p,a.lerp2(e.p3,e.p4,v),v),v),d=c[l-1],m=c[l];c.splice(l,0,u),(a.dot(a.normalize(a.sub(d,u)),a.normalize(a.sub(m,u)))>t||i)&&(n(e,v,s,l+1),n(e,r,v,l))};return n(e,0,1,1,!0),c}},345:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,c)=>Math.max(Math.min(e,c),t),t.timeAtPos=(e,c,r)=>c?t.clamp((r-e)/c,0,1):0,t.lerp=(e,t,c)=>e*(1-c)+t*c},669:(e,t,c)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const r=c(887);t.clamp2=(e,t,c)=>{const o=r.vec2.clone(e);return r.vec2.min(o,o,c),r.vec2.max(o,o,t),o},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=r.vec2.equals,t.scale=(e,t)=>r.vec2.scale(r.vec2.create(),e,t),t.multiply=(e,t)=>r.vec2.multiply(r.vec2.create(),e,t),t.divide=(e,t)=>r.vec2.divide(r.vec2.create(),e,t),t.add=(e,t)=>r.vec2.add(r.vec2.create(),e,t),t.adds=(e,t)=>r.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>r.vec2.sub(r.vec2.create(),e,t),t.floor=e=>r.vec2.floor(r.vec2.create(),e),t.ceil=e=>r.vec2.ceil(r.vec2.create(),e),t.abs=e=>r.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>r.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>r.vec2.dot(e,t),t.length=e=>r.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,c)=>r.vec2.lerp(r.vec2.create(),e,t,c),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...c]=e,o=r.vec2.clone(t);return c.forEach((e=>{r.vec2.min(o,o,e)})),o},t.max2=(...e)=>{const[t,...c]=e,o=r.vec2.clone(t);return c.forEach((e=>{r.vec2.max(o,o,e)})),o},t.avg=(...e)=>{const t=r.vec2.create();return e.length&&(e.forEach((e=>{r.vec2.add(t,t,e)})),r.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,c)=>!(e[0]>c[0]||e[0]<t[0]||e[1]>c[1]||e[1]<t[1])},717:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.plotLines=void 0,t.plotLines=(e,t)=>{const c=t[0];e.moveTo(c[0],e.canvas.height-c[1]);for(let c=0;c<t.length;c++){const r=t[c];e.lineTo(r[0],e.canvas.height-r[1])}}}},e=>{"use strict";e(e.s=3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,