"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[231],{3:(e,t,c)=>{const o=c(887),n=c(856),r=c(717),a=document.getElementById("game"),l=a.getContext("2d");if(!l)throw new Error("Could not get canvas");const i=o.vec2.fromValues(40,40),s=o.vec2.fromValues(100,240),v=o.vec2.fromValues(300,80),p=o.vec2.fromValues(260,380),u={p1:i,p2:s,p3:v,p4:p,points:[i,s,v,p]},d=n.cubicBezierToPoints(u,-.99),m=()=>{l.clearRect(0,0,a.width,a.height),l.strokeStyle="blue",l.beginPath(),r.plotLines(l,u.points),l.stroke(),l.strokeStyle="green",l.beginPath(),r.plotLines(l,d),l.stroke(),requestAnimationFrame(m)};requestAnimationFrame(m)},856:(e,t,c)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const o=c(887),n=c(345),r=c(669);t.cubicBezierToPoints=(e,t)=>{const c=[o.vec2.clone(e.p1),o.vec2.clone(e.p4)],a=(e,o,l,i,s=!1)=>{const v=n.lerp(o,l,.5),p=r.lerp2(e.p2,e.p3,v),u=r.lerp2(r.lerp2(r.lerp2(e.p1,e.p2,v),p,v),r.lerp2(p,r.lerp2(e.p3,e.p4,v),v),v),d=c[i-1],m=c[i];c.splice(i,0,u),(r.dot(r.normalize(r.sub(d,u)),r.normalize(r.sub(m,u)))>t||s)&&(a(e,v,l,i+1),a(e,o,v,i))};return a(e,0,1,1,!0),c}},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,c)=>Math.max(Math.min(e,c),t),t.timeAtPos=(e,c,o)=>c?t.clamp((o-e)/c,0,1):0,t.lerp=(e,t,c)=>e*(1-c)+t*c},669:(e,t,c)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inside=t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=c(887),n=c(345);t.clamp2=(e,t,c)=>{const n=o.vec2.clone(e);return o.vec2.min(n,n,c),o.vec2.max(n,n,t),n},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=o.vec2.equals,t.scale=(e,t)=>o.vec2.scale(o.vec2.create(),e,t),t.multiply=(e,t)=>o.vec2.multiply(o.vec2.create(),e,t),t.divide=(e,t)=>o.vec2.divide(o.vec2.create(),e,t),t.add=(e,t)=>o.vec2.add(o.vec2.create(),e,t),t.adds=(e,t)=>o.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>o.vec2.sub(o.vec2.create(),e,t),t.floor=e=>o.vec2.floor(o.vec2.create(),e),t.ceil=e=>o.vec2.ceil(o.vec2.create(),e),t.abs=e=>o.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>o.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>o.vec2.dot(e,t),t.length=e=>o.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,c)=>o.vec2.lerp(o.vec2.create(),e,t,c),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...c]=e,n=o.vec2.clone(t);return c.forEach((e=>{o.vec2.min(n,n,e)})),n},t.max2=(...e)=>{const[t,...c]=e,n=o.vec2.clone(t);return c.forEach((e=>{o.vec2.max(n,n,e)})),n},t.avg=(...e)=>{const t=o.vec2.create();return e.length&&(e.forEach((e=>{o.vec2.add(t,t,e)})),o.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,c)=>!(e[0]>c[0]||e[0]<t[0]||e[1]>c[1]||e[1]<t[1]),t.inside=(e,t)=>{let c=0,o=e[e.length-1];return e.forEach((e=>{const r=o[1]<e[1]?o:e,a=o[1]<e[1]?e:o;r[1]<t[1]+n.EPSILON&&a[1]>t[1]+n.EPSILON&&(a[0]-r[0])*(t[1]-r[1])>(t[0]-r[0])*(a[1]-r[1])&&(c+=1),o=e})),c%2!=0}},717:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.plotLines=void 0,t.plotLines=(e,t)=>{const c=t[0];e.moveTo(c[0],e.canvas.height-c[1]);for(let c=0;c<t.length;c++){const o=t[c];e.lineTo(o[0],e.canvas.height-o[1])}}}},e=>{e(e.s=3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,