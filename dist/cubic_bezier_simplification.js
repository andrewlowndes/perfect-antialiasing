(()=>{"use strict";var e={856:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const a=o(345),r=o(669);t.cubicBezierToPoints=(e,t)=>{const o=[{x:e.p1.x,y:e.p1.y},{x:e.p4.x,y:e.p4.y}],n=(e,x,y,i,l=!1)=>{const s=a.lerp(x,y,.5),c=r.lerp2(e.p2,e.p3,s),p=r.lerp2(r.lerp2(r.lerp2(e.p1,e.p2,s),c,s),r.lerp2(c,r.lerp2(e.p3,e.p4,s),s),s),d=o[i-1],h=o[i];o.splice(i,0,p),(r.dot(r.normalize(r.sub(d,p)),r.normalize(r.sub(h,p)))>t||l)&&(n(e,s,y,i+1),n(e,x,s,i))};return n(e,0,1,1,!0),o}},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,o)=>Math.max(Math.min(e,o),t),t.timeAtPos=(e,o,a)=>o?t.clamp((a-e)/o,0,1):0,t.lerp=(e,t,o)=>e*(1-o)+t*o},669:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const a=o(345);t.clamp2=(e,t,o)=>({x:a.clamp(e.x,t.x,o.x),y:a.clamp(e.y,t.y,o.y)}),t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,o)=>({x:a.lerp(e.x,t.x,o),y:a.lerp(e.y,t.y,o)}),t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const o={x:e.x,y:e.y};return t.forEach((e=>{o.x=Math.min(o.x,e.x),o.y=Math.min(o.y,e.y)})),o},t.max2=(e,...t)=>{const o={x:e.x,y:e.y};return t.forEach((e=>{o.x=Math.max(o.x,e.x),o.y=Math.max(o.y,e.y)})),o},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,o)=>!(e.x>o.x||e.x<t.x||e.y>o.y||e.y<t.y)},717:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.plotLines=void 0,t.plotLines=(e,t)=>{const o=t[0];e.moveTo(o.x,e.canvas.height-o.y);for(let o=0;o<t.length;o++){const a=t[o];e.lineTo(a.x,e.canvas.height-a.y)}}}},t={};function o(a){var r=t[a];if(void 0!==r)return r.exports;var n=t[a]={exports:{}};return e[a](n,n.exports,o),n.exports}(()=>{const e=o(856),t=o(717),a=document.getElementById("game"),r=a.getContext("2d");if(!r)throw new Error("Could not get canvas");const n={x:40,y:40},x={x:100,y:240},y={x:300,y:80},i={x:260,y:380},l={p1:n,p2:x,p3:y,p4:i,points:[n,x,y,i]},s=e.cubicBezierToPoints(l,-.99),c=()=>{r.clearRect(0,0,a.width,a.height),r.strokeStyle="blue",r.beginPath(),t.plotLines(r,l.points),r.stroke(),r.strokeStyle="green",r.beginPath(),t.plotLines(r,s),r.stroke(),requestAnimationFrame(c)};requestAnimationFrame(c)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,