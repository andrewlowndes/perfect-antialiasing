(()=>{"use strict";var e={856:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const x=o(345);t.cubicBezierToPoints=(e,t)=>{const o=[{x:e.p1.x,y:e.p1.y},{x:e.p4.x,y:e.p4.y}],y=(e,a,n,r)=>{const i=x.lerp(a,n,.5),l=x.lerp2(e.p2,e.p3,i),s=x.lerp2(x.lerp2(x.lerp2(e.p1,e.p2,i),l,i),x.lerp2(l,x.lerp2(e.p3,e.p4,i),i),i),p=o[r-1],c=o[r];o.splice(r,0,s),x.dot(x.normalize(x.sub(p,s)),x.normalize(x.sub(c,s)))>t&&(y(e,i,n,r+1),y(e,a,i,r))};return y(e,0,1,1),o}},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.lerp=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.timeAtPos=t.clamp2=t.clamp=void 0,t.clamp=(e,t,o)=>Math.max(Math.min(e,o),t),t.clamp2=(e,o,x)=>({x:t.clamp(e.x,o.x,x.x),y:t.clamp(e.y,o.y,x.y)}),t.timeAtPos=(e,o,x)=>o?t.clamp((x-e)/o,0,1):0,t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp=(e,t,o)=>e*(1-o)+t*o,t.lerp2=(e,o,x)=>({x:t.lerp(e.x,o.x,x),y:t.lerp(e.y,o.y,x)}),t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const o={x:e.x,y:e.y};return t.forEach((e=>{o.x=Math.min(o.x,e.x),o.y=Math.min(o.y,e.y)})),o},t.max2=(e,...t)=>{const o={x:e.x,y:e.y};return t.forEach((e=>{o.x=Math.max(o.x,e.x),o.y=Math.max(o.y,e.y)})),o},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,o)=>!(e.x>o.x||e.x<t.x||e.y>o.y||e.y<t.y)},717:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.plotLines=void 0,t.plotLines=(e,t)=>{const o=t[0];e.moveTo(o.x,e.canvas.height-o.y);for(let o=0;o<t.length;o++){const x=t[o];e.lineTo(x.x,e.canvas.height-x.y)}}}},t={};function o(x){var y=t[x];if(void 0!==y)return y.exports;var a=t[x]={exports:{}};return e[x](a,a.exports,o),a.exports}(()=>{const e=o(856),t=o(717),x=document.getElementById("game"),y=x.getContext("2d");if(!y)throw new Error("Could not get canvas");const a={x:40,y:40},n={x:100,y:240},r={x:300,y:80},i={x:260,y:380},l={p1:a,p2:n,p3:r,p4:i,points:[a,n,r,i]},s=e.cubicBezierToPoints(l,-.99),p=()=>{y.clearRect(0,0,x.width,x.height),y.strokeStyle="blue",y.beginPath(),t.plotLines(y,l.points),y.stroke(),y.strokeStyle="green",y.beginPath(),t.plotLines(y,s),y.stroke(),requestAnimationFrame(p)};requestAnimationFrame(p)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,