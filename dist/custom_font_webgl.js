"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[138],{89:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.aabb=void 0;const t=n(669);r.aabb=(...e)=>({min:(0,t.min2)(...e),max:(0,t.max2)(...e)})},943:function(e,r,n){var t=this&&this.__awaiter||function(e,r,n,t){return new(n||(n=Promise))((function(o,i){function a(e){try{c(t.next(e))}catch(e){i(e)}}function s(e){try{c(t.throw(e))}catch(e){i(e)}}function c(e){var r;e.done?o(e.value):(r=e.value,r instanceof n?r:new n((function(e){e(r)}))).then(a,s)}c((t=t.apply(e,r||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(422),a=n(887),s=n(705),c=n(199),l=n(77),p=o(n(911)),v=o(n(618));let d,u,x,P,f,h,m,g,b,y,M;const A=a.vec3.fromValues(0,0,0),S=a.vec3.fromValues(20,20,1),_=a.mat4.create(),E=a.mat4.create(),w=a.mat4.create(),L=a.mat4.create(),T=a.mat4.create(),F=()=>{d.width=d.clientWidth,d.height=d.clientHeight,u.viewport(0,0,d.width,d.height),u.useProgram(m),u.uniform2fv(M,[d.width,d.height])},R=()=>{u.clear(u.COLOR_BUFFER_BIT),a.mat4.identity(_),a.mat4.scale(_,_,[1,-1,1]),a.mat4.translate(_,_,A),a.mat4.scale(_,_,S),a.mat4.translate(_,_,[-10,0,0]);const e=d.width/2,r=d.height/2;a.mat4.ortho(L,-e,e,-r,r,0,1e4),a.mat4.multiply(w,E,_),a.mat4.multiply(T,L,w),u.useProgram(m),u.uniformMatrix4fv(y,!1,T),u.drawArrays(u.TRIANGLES,0,x.length/2),requestAnimationFrame(R)};t(void 0,void 0,void 0,(function*(){const e=(yield(0,i.load)("./media/Timeless.ttf")).stringToGlyphs("Test");let r=0;const n=[],t=[],o=[];for(const i of e){const e=i.getPath(r,0,12),a=(0,s.pathToPoints)(e.toPathData(3),-.99);r+=(i.advanceWidth||0)/1e3*12;const l=(0,c.pointsToPolygons)(a);for(const e of l)for(const{p1:r,p2:i,p3:a}of e)n.push(r[0],r[1],i[0],i[1],a[0],a[1]),t.push(i[0],i[1],a[0],a[1],r[0],r[1]),o.push(a[0],a[1],r[0],r[1],i[0],i[1])}x=new Float32Array(n),P=new Float32Array(t),f=new Float32Array(o),(()=>{d=document.getElementById("canvas1"),u=d.getContext("webgl2",{antialias:!1,premultipliedAlpha:!1}),d.addEventListener("wheel",(e=>{e.preventDefault(),S[0]*=e.deltaY<0?2:.5,S[1]=S[0]})),(0,l.subscribeDrag)({elem:d,ondrag:e=>{A[0]+=e.x,A[1]+=e.y}}),h=u.createBuffer(),u.bindBuffer(u.ARRAY_BUFFER,h),u.bufferData(u.ARRAY_BUFFER,x,u.STATIC_DRAW),g=u.createBuffer(),u.bindBuffer(u.ARRAY_BUFFER,g),u.bufferData(u.ARRAY_BUFFER,P,u.STATIC_DRAW),b=u.createBuffer(),u.bindBuffer(u.ARRAY_BUFFER,b),u.bufferData(u.ARRAY_BUFFER,f,u.STATIC_DRAW);const e=u.createShader(u.VERTEX_SHADER);if(u.shaderSource(e,p.default),u.compileShader(e),""!==String(u.getShaderInfoLog(e)).trim())throw new Error(String(u.getShaderInfoLog(e)));const r=u.createShader(u.FRAGMENT_SHADER);if(u.shaderSource(r,v.default),u.compileShader(r),""!==String(u.getShaderInfoLog(r)).trim())throw new Error(String(u.getShaderInfoLog(r)));if(m=u.createProgram(),u.attachShader(m,e),u.attachShader(m,r),u.linkProgram(m),""!==String(u.getProgramInfoLog(m)).trim())throw new Error(String(u.getProgramInfoLog(m)));u.useProgram(m);const n=u.getAttribLocation(m,"pos");u.bindBuffer(u.ARRAY_BUFFER,h),u.vertexAttribPointer(n,2,u.FLOAT,!1,0,0),u.enableVertexAttribArray(n);const t=u.getAttribLocation(m,"prevPos");u.bindBuffer(u.ARRAY_BUFFER,b),u.vertexAttribPointer(t,2,u.FLOAT,!1,0,0),u.enableVertexAttribArray(t);const o=u.getAttribLocation(m,"nextPos");u.bindBuffer(u.ARRAY_BUFFER,g),u.vertexAttribPointer(o,2,u.FLOAT,!1,0,0),u.enableVertexAttribArray(o),M=u.getUniformLocation(m,"screenSize"),y=u.getUniformLocation(m,"modelViewProjection"),u.clearColor(0,0,0,0),u.enable(u.BLEND),u.blendFunc(u.ONE,u.ONE)})(),window.onresize=F,F(),R()}))},856:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.cubicBezierToPoints=void 0;const t=n(887),o=n(345),i=n(669);r.cubicBezierToPoints=(e,r)=>{const n=[t.vec2.clone(e.p1),t.vec2.clone(e.p4)],a=(e,t,s,c,l=!1)=>{const p=(0,o.lerp)(t,s,.5),v=(0,i.lerp2)(e.p2,e.p3,p),d=(0,i.lerp2)((0,i.lerp2)((0,i.lerp2)(e.p1,e.p2,p),v,p),(0,i.lerp2)(v,(0,i.lerp2)(e.p3,e.p4,p),p),p),u=n[c-1],x=n[c];n.splice(c,0,d),((0,i.dot)((0,i.normalize)((0,i.sub)(u,d)),(0,i.normalize)((0,i.sub)(x,d)))>r||l)&&(a(e,p,s,c+1),a(e,t,p,c))};return a(e,0,1,1,!0),n}},705:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pathToPoints=void 0;const t=n(887),o=n(856),i=n(354),a=/(?=[astvzqmhlc])/gi,s=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;r.pathToPoints=(e,r)=>{const n=e.split(a),c=[];if(n.length){let e=[];const a=t.vec2.create();for(;n.length;){const l=n.shift();if(!(null==l?void 0:l.length))continue;const p=l.substring(1).match(s)||[],v=l[0],d=v.toLowerCase(),u=v===d;switch(d){case"l":case"m":for(;p.length;){const r=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));u&&t.vec2.add(r,r,a),e.push(r),t.vec2.copy(a,r)}break;case"h":for(;p.length;){let r=parseFloat(p.shift());u&&(r+=a[0]),e.push(t.vec2.fromValues(r,a[1])),a[0]=r}break;case"v":for(;p.length;){let r=parseFloat(p.shift());u&&(r+=a[1]),e.push(t.vec2.fromValues(a[0],r)),a[1]=r}break;case"z":{const r=e[0];e.push(t.vec2.clone(r)),c.push(e),e=[],t.vec2.zero(a);break}case"c":for(;p.length;){const n=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),i=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),s=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));u&&(t.vec2.add(n,n,a),t.vec2.add(i,i,a),t.vec2.add(s,s,a)),e.push(...(0,o.cubicBezierToPoints)({p1:a,p2:n,p3:i,p4:s},r)),t.vec2.copy(a,s)}break;case"q":for(;p.length;){const n=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),o=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));u&&(t.vec2.add(n,n,a),t.vec2.add(o,o,a)),e.push(...(0,i.quadraticBezierToPoints)({p1:a,p2:n,p3:o},r)),t.vec2.copy(a,o)}break;case"s":case"t":case"a":console.log(d+" is not implemented")}}e.length&&c.push(e)}return c}},199:function(e,r,n){var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.pointsToPolygons=void 0;const o=t(n(187)),i=n(89),a=n(669),s=n(923);r.pointsToPolygons=e=>{const r=e.map((e=>({points:e,aabb:(0,i.aabb)(...e),area:(0,s.polygonAreaSigned)(e),children:[]})));r.sort(((e,r)=>Math.abs(r.area)-Math.abs(e.area)));const n=[];for(let e=0;e<r.length;++e){let t=null;for(let n=e-1;n>=0;--n)if((0,a.inside)(r[n].points,r[e].points[0])&&r[e].area*r[n].area<0){t=r[n];break}t?t.children.push(r[e]):n.push(r[e])}const t=[];let c=[];const l=e=>{const r=[],n=[],t=[];e.points.forEach((e=>{r.push(...e),t.push(e)})),e.children.forEach((e=>{e.children.forEach(l),n.push(r.length/2),e.points.forEach((e=>{r.push(...e),t.push(e)}))}));const i=(0,o.default)(r,n);for(let e=0;e<i.length;e+=3){const r=t[i[e+0]],n=t[i[e+1]],o=t[i[e+2]];c.push({p1:r,p2:n,p3:o,e1:(0,a.sub)(n,r),e2:(0,a.sub)(o,n),e3:(0,a.sub)(r,o),points:[r,n,o],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}};return n.forEach((e=>{l(e),t.push(c),c=[]})),t}},923:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.polygonArea=r.polygonAreaSigned=void 0;const t=n(669);r.polygonAreaSigned=e=>{if(!e.length)return 0;const r=e.length-1;let n=0;for(let o=0;o<r;o++)n+=(0,t.determinant2)(e[o],e[o+1]);return n+=(0,t.determinant2)(e[r],e[0]),n/2},r.polygonArea=e=>Math.abs((0,r.polygonAreaSigned)(e))},354:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.quadraticBezierToPoints=void 0;const t=n(887),o=n(345),i=n(669);r.quadraticBezierToPoints=(e,r)=>{const n=[t.vec2.clone(e.p1),t.vec2.clone(e.p3)],a=(e,t,s,c)=>{const l=(0,o.lerp)(t,s,.5),p=(0,i.lerp2)((0,i.lerp2)(e.p1,e.p2,l),(0,i.lerp2)(e.p2,e.p3,l),l),v=n[c-1],d=n[c];n.splice(c,0,p),(0,i.dot)((0,i.normalize)((0,i.sub)(v,p)),(0,i.normalize)((0,i.sub)(d,p)))>r&&(a(e,l,s,c+1),a(e,t,l,c))};return a(e,0,1,1),n}},345:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.lerp=r.timeAtPos=r.clamp=r.fract=r.negFract=r.EPSILON=void 0,r.EPSILON=1e-6,r.negFract=e=>1-e+Math.floor(e),r.fract=e=>e-Math.floor(e),r.clamp=(e,r,n)=>Math.max(Math.min(e,n),r),r.timeAtPos=(e,n,t)=>n?(0,r.clamp)((t-e)/n,0,1):0,r.lerp=(e,r,n)=>e*(1-n)+r*n},669:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.inside=r.inRange=r.avg=r.max2=r.min2=r.toPrecision2=r.lerp2=r.normalize=r.length=r.dot=r.sign=r.abs=r.ceil=r.floor=r.sub=r.adds=r.add=r.divide=r.multiply=r.scale=r.equals=r.determinant2=r.clamp2=void 0;const t=n(887),o=n(345);r.clamp2=(e,r,n)=>{const o=t.vec2.clone(e);return t.vec2.min(o,o,n),t.vec2.max(o,o,r),o},r.determinant2=(e,r)=>e[0]*r[1]-e[1]*r[0],r.equals=t.vec2.equals,r.scale=(e,r)=>t.vec2.scale(t.vec2.create(),e,r),r.multiply=(e,r)=>t.vec2.multiply(t.vec2.create(),e,r),r.divide=(e,r)=>t.vec2.divide(t.vec2.create(),e,r),r.add=(e,r)=>t.vec2.add(t.vec2.create(),e,r),r.adds=(e,r)=>t.vec2.fromValues(e[0]+r,e[1]+r),r.sub=(e,r)=>t.vec2.sub(t.vec2.create(),e,r),r.floor=e=>t.vec2.floor(t.vec2.create(),e),r.ceil=e=>t.vec2.ceil(t.vec2.create(),e),r.abs=e=>t.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),r.sign=e=>t.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),r.dot=(e,r)=>t.vec2.dot(e,r),r.length=e=>t.vec2.length(e),r.normalize=e=>(0,r.scale)(e,1/(0,r.length)(e)),r.lerp2=(e,r,n)=>t.vec2.lerp(t.vec2.create(),e,r,n),r.toPrecision2=(e,r)=>(e[0]=parseFloat(e[0].toPrecision(r)),e[1]=parseFloat(e[1].toPrecision(r)),e),r.min2=(...e)=>{const[r,...n]=e,o=t.vec2.clone(r);return n.forEach((e=>{t.vec2.min(o,o,e)})),o},r.max2=(...e)=>{const[r,...n]=e,o=t.vec2.clone(r);return n.forEach((e=>{t.vec2.max(o,o,e)})),o},r.avg=(...e)=>{const r=t.vec2.create();return e.length&&(e.forEach((e=>{t.vec2.add(r,r,e)})),t.vec2.scale(r,r,1/e.length)),r},r.inRange=(e,r,n)=>!(e[0]>n[0]||e[0]<r[0]||e[1]>n[1]||e[1]<r[1]),r.inside=(e,r)=>{let n=0,t=e[e.length-1];return e.forEach((e=>{const i=t[1]<e[1]?t:e,a=t[1]<e[1]?e:t;i[1]<r[1]+o.EPSILON&&a[1]>r[1]+o.EPSILON&&(a[0]-i[0])*(r[1]-i[1])>(r[0]-i[0])*(a[1]-i[1])&&(n+=1),t=e})),n%2!=0}},77:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.subscribeDrag=void 0,r.subscribeDrag=e=>{const r={x:0,y:0},n={x:0,y:0},t=t=>{var o;r.x=t.pageX-n.x,r.y=t.pageY-n.y,null===(o=e.ondrag)||void 0===o||o.call(e,r,t),n.x=t.pageX,n.y=t.pageY},o=r=>{var n;window.removeEventListener("mousemove",t),window.removeEventListener("mouseup",o),window.removeEventListener("mouseleave",o),null===(n=e.ondragend)||void 0===n||n.call(e,r)},i=r=>{var i;n.x=r.pageX,n.y=r.pageY,window.addEventListener("mousemove",t),window.addEventListener("mouseup",o),window.addEventListener("mouseleave",o),null===(i=e.ondragstart)||void 0===i||i.call(e,r)};return e.elem.addEventListener("mousedown",i),()=>{e.elem.removeEventListener("mousedown",i)}}},618:e=>{e.exports="#version 300 es\r\n\r\nprecision highp float;\r\n\r\nflat in vec4 bounds;\r\nflat in vec2 vPrevPos;\r\nflat in vec2 vPos;\r\nflat in vec2 vNextPos;\r\nflat in vec2 e1;\r\nflat in vec2 e2;\r\nflat in vec2 e3;\r\n\r\nout vec4 outColor;\r\n\r\nconst float EPSILON = 0.000001;\r\nconst float PRECISION_SCALE = 1000.0;\r\nconst float TWO_PRECISION_SCALE_SQUARED = 2.0 * PRECISION_SCALE * PRECISION_SCALE;\r\n\r\nvec4 sort(vec4 val) {\r\n    float a = min(val.x, val.y);\r\n    float b = max(val.x, val.y);\r\n    float c = min(val.z, val.w);\r\n    float d = max(val.z, val.w);\r\n\r\n    float h = max(a, min(b, c));\r\n    float i = min(d, max(b, c));\r\n\r\n    return vec4(min(a, c), min(h, i), max(h, i), max(b, d));\r\n}\r\n\r\nint det2(ivec2 p1, ivec2 p2) {\r\n  return (p1.x * p2.y) - (p1.y * p2.x);\r\n}\r\n\r\nivec2 prepPoint(vec2 point, vec2 pixelMin, vec2 pixelMax) {\r\n    //limit the precision by scaling the point to map to an int\r\n    vec2 constrained_point = clamp(point, pixelMin, pixelMax);\r\n    return ivec2(floor(constrained_point * PRECISION_SCALE));\r\n}\r\n\r\nfloat timeAtPos(float startPos, float dir, float newPos) {\r\n    if(abs(dir) < EPSILON) {\r\n        return 0.0;\r\n    }\r\n\r\n    return clamp((newPos - startPos) / dir, 0.0, 1.0);\r\n}\r\n\r\nvoid main(void) {\r\n    vec2 pixelMin = floor(gl_FragCoord.xy);\r\n    vec2 pixelMax = pixelMin + 1.0;\r\n\r\n    if((vPos.x < pixelMin.x && vPrevPos.x < pixelMin.x && vNextPos.x < pixelMin.x) ||\r\n        (vPos.x > pixelMax.x && vPrevPos.x > pixelMax.x && vNextPos.x > pixelMax.x) ||\r\n        (vPos.y < pixelMin.y && vPrevPos.y < pixelMin.y && vNextPos.y < pixelMin.y) ||\r\n        (vPos.y > pixelMax.y && vPrevPos.y > pixelMax.y && vNextPos.y > pixelMax.y)) {\r\n        discard;\r\n    }\r\n\r\n    //remove conservative rasterisation overdraw\r\n    if(pixelMax.x < bounds.x || pixelMax.y < bounds.y || pixelMin.x > bounds.z || pixelMin.y > bounds.w) {\r\n        discard;\r\n    }\r\n\r\n    //intersect the triangle with the pixel bounds\r\n    vec4 firstLineTs = sort(vec4(timeAtPos(vPrevPos.x, e1.x, pixelMin.x), timeAtPos(vPrevPos.x, e1.x, pixelMax.x), timeAtPos(vPrevPos.y, e1.y, pixelMin.y), timeAtPos(vPrevPos.y, e1.y, pixelMax.y)));\r\n\r\n    ivec2 p1 = prepPoint(vPrevPos + e1 * firstLineTs.x, pixelMin, pixelMax);\r\n    ivec2 p2 = prepPoint(vPrevPos + e1 * firstLineTs.y, pixelMin, pixelMax);\r\n    ivec2 p3 = prepPoint(vPrevPos + e1 * firstLineTs.z, pixelMin, pixelMax);\r\n    ivec2 p4 = prepPoint(vPrevPos + e1 * firstLineTs.w, pixelMin, pixelMax);\r\n\r\n    vec4 secondLineTs = sort(vec4(timeAtPos(vPos.x, e2.x, pixelMin.x), timeAtPos(vPos.x, e2.x, pixelMax.x), timeAtPos(vPos.y, e2.y, pixelMin.y), timeAtPos(vPos.y, e2.y, pixelMax.y)));\r\n\r\n    ivec2 p5 = prepPoint(vPos + e2 * secondLineTs.x, pixelMin, pixelMax);\r\n    ivec2 p6 = prepPoint(vPos + e2 * secondLineTs.y, pixelMin, pixelMax);\r\n    ivec2 p7 = prepPoint(vPos + e2 * secondLineTs.z, pixelMin, pixelMax);\r\n    ivec2 p8 = prepPoint(vPos + e2 * secondLineTs.w, pixelMin, pixelMax);\r\n\r\n    vec4 thirdLineTs = sort(vec4(timeAtPos(vNextPos.x, e3.x, pixelMin.x), timeAtPos(vNextPos.x, e3.x, pixelMax.x), timeAtPos(vNextPos.y, e3.y, pixelMin.y), timeAtPos(vNextPos.y, e3.y, pixelMax.y)));\r\n\r\n    ivec2 p9 = prepPoint(vNextPos + e3 * thirdLineTs.x, pixelMin, pixelMax);\r\n    ivec2 p10 = prepPoint(vNextPos + e3 * thirdLineTs.y, pixelMin, pixelMax);\r\n    ivec2 p11 = prepPoint(vNextPos + e3 * thirdLineTs.z, pixelMin, pixelMax);\r\n    ivec2 p12 = prepPoint(vNextPos + e3 * thirdLineTs.w, pixelMin, pixelMax);\r\n\r\n    //compute the area under the formed polygon\r\n    int polygonArea = (det2(p1, p2) + det2(p2, p3) + det2(p3, p4) + det2(p4, p5) +\r\n        det2(p5, p6) + det2(p6, p7) + det2(p7, p8) + det2(p8, p9) +\r\n        det2(p9, p10) + det2(p10, p11) + det2(p11, p12) + det2(p12, p1));\r\n\r\n    float alphaAmount = clamp(float(abs(polygonArea)) / TWO_PRECISION_SCALE_SQUARED, 0.0, 1.0);\r\n    outColor = vec4(1.0, 0.0, 0.0, alphaAmount);\r\n}\r\n"},911:e=>{e.exports="#version 300 es\r\n\r\nuniform vec2 screenSize;\r\nuniform mat4 modelViewProjection;\r\n\r\nin vec2 prevPos;\r\nin vec2 pos;\r\nin vec2 nextPos;\r\n\r\nflat out vec4 bounds;\r\nflat out vec2 vPrevPos;\r\nflat out vec2 vPos;\r\nflat out vec2 vNextPos;\r\nflat out vec2 e1;\r\nflat out vec2 e2;\r\nflat out vec2 e3;\r\n\r\nconst float EPSILON = 0.000001;\r\n\r\nvec2 posToClipSpace(vec2 pos) {\r\n    vec4 proj_pos = modelViewProjection * vec4(pos, 0.0, 1.0);\r\n    return proj_pos.xy / proj_pos.w;\r\n}\r\n\r\nvec2 clipToScreenSpace(vec2 pos) {\r\n    return (screenSize.xy * (pos + 1.0)) / 2.0;\r\n}\r\n\r\nvec2 screenSpaceToClipSpace(vec2 pos) {\r\n    return (pos * 2.0 / screenSize.xy) - 1.0;\r\n}\r\n\r\nconst float diagonalOffset = sqrt(2.0) / 2.0;\r\n\r\nvoid main(void) {\r\n    vec2 clipPos = posToClipSpace(pos);\r\n    vec2 clipNextPos = posToClipSpace(nextPos);\r\n    vec2 clipPrevPos = posToClipSpace(prevPos);\r\n\r\n    vec2 screenPos = clipToScreenSpace(clipPos);\r\n    vec2 screenNextPos = clipToScreenSpace(clipNextPos);\r\n    vec2 screenPrevPos = clipToScreenSpace(clipPrevPos);\r\n\r\n    // determine a new vertex position such that it covers the neighbour pixel centers\r\n    vec2 a = normalize(screenPrevPos - screenPos);\r\n    vec2 b = normalize(screenNextPos - screenPos);\r\n    float angle = sqrt((1.0 - dot(a, b)) / 2.0);\r\n\r\n    vec2 vecPos = clipPos;\r\n    if (abs(angle) > EPSILON) {\r\n        vecPos = screenSpaceToClipSpace(screenPos - normalize(a + b) * diagonalOffset / angle);\r\n    }\r\n\r\n    bounds = vec4(\r\n        min(min(screenPos, screenNextPos), screenPrevPos) - 0.5,\r\n        max(max(screenPos, screenNextPos), screenPrevPos) + 0.5\r\n    );\r\n    \r\n    vPrevPos = screenPrevPos;\r\n    vPos = screenPos;\r\n    vNextPos = screenNextPos;\r\n    e1 = vPos - vPrevPos;\r\n    e2 = vNextPos - vPos;\r\n    e3 = vPrevPos - vNextPos;\r\n    \r\n    gl_Position = vec4(vecPos, 0.0, 1.0);\r\n}\r\n"}},e=>{e(e.s=943)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,