(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[138],{89:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.aabb=void 0,n.aabb=e=>{const n=e[0],t={x:n.x,y:n.y},r={x:n.x,y:n.y};for(let n=1;n<e.length;n++){const o=e[n];t.x=Math.min(t.x,o.x),t.y=Math.min(t.y,o.y),r.x=Math.max(r.x,o.x),r.y=Math.max(r.y,o.y)}return{min:t,max:r}}},462:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.aabbContains=void 0,n.aabbContains=(e,n)=>e.min.x<=n.min.x&&e.min.y<=n.min.y&&e.max.x>=n.max.x&&e.max.y>=n.max.y},922:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.aabbIntersect=void 0,n.aabbIntersect=(e,n)=>n.min.x<=e.max.x&&n.max.x>=e.min.x&&n.min.y<=e.max.y&&n.max.y>=e.min.y},955:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.combineAabbs=void 0;const r=t(669);n.combineAabbs=e=>{if(!e.length)return;const n=e[0],t={min:n.min,max:n.max};for(let n=1;n<e.length;n++){const o=e[n];t.min=r.min2(t.min,o.min),t.max=r.max2(t.max,o.max)}return t}},943:function(e,n,t){"use strict";var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(o,a){function s(e){try{l(r.next(e))}catch(e){a(e)}}function i(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,i)}l((r=r.apply(e,n||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const a=t(422),s=t(705),i=t(199),l=o(t(620)),c=o(t(978));let x,p,y,v,d,u,f,h,m;const P=()=>{x.clear(x.COLOR_BUFFER_BIT),x.drawArrays(x.TRIANGLES,0,p.length/2),requestAnimationFrame(P)};r(void 0,void 0,void 0,(function*(){const e=1/128,n=-.5078125,t=(yield a.load("./media/Timeless.ttf")).stringToGlyphs("Test");let r=0;const o=[],b=[],g=[],A=[];for(const a of t){const t=a.getPath(r,100,128),l=s.pathToPoints(t.toPathData(5),-.99);r+=a.advanceWidth/1e3*128;const c=i.pointsToPolygons(l);for(const t of c)for(const r of t){const t=[r.p1.x*e-1,1-r.p1.y*e+n],a=[r.p2.x*e-1,1-r.p2.y*e+n],s=[r.p3.x*e-1,1-r.p3.y*e+n];o.push(...t,...a,...s),b.push(...a,...s,...t),g.push(...s,...t,...a),A.push(0,1,2)}}p=new Float32Array(o),y=new Float32Array(b),v=new Float32Array(g),d=new Float32Array(A),(()=>{const e=document.getElementById("canvas1");x=e.getContext("webgl",{antialias:!1,premultipliedAlpha:!1});const n=Math.sqrt(2)/e.width;u=x.createBuffer(),x.bindBuffer(x.ARRAY_BUFFER,u),x.bufferData(x.ARRAY_BUFFER,p,x.STATIC_DRAW),f=x.createBuffer(),x.bindBuffer(x.ARRAY_BUFFER,f),x.bufferData(x.ARRAY_BUFFER,y,x.STATIC_DRAW),h=x.createBuffer(),x.bindBuffer(x.ARRAY_BUFFER,h),x.bufferData(x.ARRAY_BUFFER,v,x.STATIC_DRAW),m=x.createBuffer(),x.bindBuffer(x.ARRAY_BUFFER,m),x.bufferData(x.ARRAY_BUFFER,d,x.STATIC_DRAW);const t=x.createShader(x.VERTEX_SHADER);if(x.shaderSource(t,l.default),x.compileShader(t),""!==String(x.getShaderInfoLog(t)).trim())throw new Error(String(x.getShaderInfoLog(t)));const r=x.createShader(x.FRAGMENT_SHADER);if(x.shaderSource(r,c.default),x.compileShader(r),""!==String(x.getShaderInfoLog(r)).trim())throw new Error(String(x.getShaderInfoLog(r)));const o=x.createProgram();if(x.attachShader(o,t),x.attachShader(o,r),x.linkProgram(o),""!==String(x.getProgramInfoLog(o)).trim())throw new Error(String(x.getProgramInfoLog(o)));x.useProgram(o);const a=x.getAttribLocation(o,"pos");x.bindBuffer(x.ARRAY_BUFFER,u),x.vertexAttribPointer(a,2,x.FLOAT,!1,0,0),x.enableVertexAttribArray(a);const s=x.getAttribLocation(o,"prevPos");x.bindBuffer(x.ARRAY_BUFFER,h),x.vertexAttribPointer(s,2,x.FLOAT,!1,0,0),x.enableVertexAttribArray(s);const i=x.getAttribLocation(o,"nextPos");x.bindBuffer(x.ARRAY_BUFFER,f),x.vertexAttribPointer(i,2,x.FLOAT,!1,0,0),x.enableVertexAttribArray(i);const P=x.getAttribLocation(o,"index");x.bindBuffer(x.ARRAY_BUFFER,m),x.vertexAttribPointer(P,1,x.FLOAT,!1,0,0),x.enableVertexAttribArray(P);const b=x.getUniformLocation(o,"offset");x.uniform1f(b,n);const g=x.getUniformLocation(o,"screenSize");x.uniform2fv(g,[e.width,e.height]),x.clearColor(0,0,0,0),x.viewport(0,0,e.width,e.height),x.enable(x.BLEND),x.blendFunc(x.ONE,x.ONE)})(),P()}))},856:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.cubicBezierToPoints=void 0;const r=t(345),o=t(669);n.cubicBezierToPoints=(e,n)=>{const t=[{x:e.p1.x,y:e.p1.y},{x:e.p4.x,y:e.p4.y}],a=(e,s,i,l,c=!1)=>{const x=r.lerp(s,i,.5),p=o.lerp2(e.p2,e.p3,x),y=o.lerp2(o.lerp2(o.lerp2(e.p1,e.p2,x),p,x),o.lerp2(p,o.lerp2(e.p3,e.p4,x),x),x),v=t[l-1],d=t[l];t.splice(l,0,y),(o.dot(o.normalize(o.sub(v,y)),o.normalize(o.sub(d,y)))>n||c)&&(a(e,x,i,l+1),a(e,s,x,l))};return a(e,0,1,1,!0),t}},705:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.pathToPoints=void 0;const r=t(856),o=t(354),a=/(?=[astvzqmhlc])/gi,s=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;n.pathToPoints=(e,n)=>{const t=e.split(a),i=[];if(t.length){let e=[];const a={x:0,y:0};for(;t.length;){const l=t.shift();if(!(null==l?void 0:l.length))continue;const c=l.substring(1).match(s)||[],x=l[0],p=x.toLowerCase(),y=x===p;switch(p){case"l":case"m":for(;c.length;){const n={x:parseFloat(c.shift()),y:parseFloat(c.shift())};y&&(n.x+=a.x,n.y+=a.y),e.push(n),a.x=n.x,a.y=n.y}break;case"h":for(;c.length;){let n=parseFloat(c.shift());y&&(n+=a.x),e.push({x:n,y:a.y}),a.x=n}break;case"v":for(;c.length;){let n=parseFloat(c.shift());y&&(n+=a.y),e.push({x:a.x,y:n}),a.y=n}break;case"z":const t=e[0];e.push({x:t.x,y:t.y}),i.push(e),e=[],a.x=0,a.y=0;break;case"c":for(;c.length;){const t={x:parseFloat(c.shift()),y:parseFloat(c.shift())},o={x:parseFloat(c.shift()),y:parseFloat(c.shift())},s={x:parseFloat(c.shift()),y:parseFloat(c.shift())};y&&(t.x+=a.x,t.y+=a.y,o.x+=a.x,o.y+=a.y,s.x+=a.x,s.y+=a.y),e.push(...r.cubicBezierToPoints({p1:a,p2:t,p3:o,p4:s},n)),a.x=s.x,a.y=s.y}break;case"q":for(;c.length;){const t={x:parseFloat(c.shift()),y:parseFloat(c.shift())},r={x:parseFloat(c.shift()),y:parseFloat(c.shift())};y&&(t.x+=a.x,t.y+=a.y,r.x+=a.x,r.y+=a.y),e.push(...o.quadraticBezierToPoints({p1:a,p2:t,p3:r},n)),a.x=r.x,a.y=r.y}break;case"s":case"t":case"a":console.log(p+" is not implemented")}}e.length&&i.push(e)}return i}},199:function(e,n,t){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.pointsToPolygons=void 0;const o=r(t(187)),a=t(89),s=t(462),i=t(922),l=t(955),c=t(669),x=t(923);n.pointsToPolygons=e=>{let n=[],t=[];if(e.forEach((e=>{const r={points:e,aabb:a.aabb(e)};x.polygonAreaSigned(e)>0?n.push(r):t.push(r)})),n.length){if(t.length){const e=l.combineAabbs(n.map((e=>e.aabb))),r=l.combineAabbs(t.map((e=>e.aabb)));if(s.aabbContains(r,e)){const e=t;t=n,n=e}}}else{const e=t;t=n,n=e}const r=[];return n.length?(n.forEach((e=>{const n=[],a=[],s=[];s.push(...e.points),e.points.map((e=>{n.push(e.x),n.push(e.y)})),t.filter((n=>i.aabbIntersect(n.aabb,e.aabb))).forEach((e=>{s.push(...e.points),a.push(n.length/2),e.points.forEach((e=>{n.push(e.x),n.push(e.y)}))}));const l=o.default(n,a),x=[];for(let e=0;e<l.length;e+=3){let n=s[l[e]];const t=s[l[e+1]];let r=s[l[e+2]];x.push({p1:n,p2:t,p3:r,e1:c.sub(t,n),e2:c.sub(r,t),e3:c.sub(n,r),points:[n,t,r],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}x.length&&r.push(x)})),r):r}},923:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.polygonArea=n.polygonAreaSigned=void 0;const r=t(669);n.polygonAreaSigned=e=>{if(!e.length)return 0;const n=e.length-1;let t=0;for(let o=0;o<n;o++)t+=r.determinant2(e[o],e[o+1]);return t+=r.determinant2(e[n],e[0]),t/2},n.polygonArea=e=>Math.abs(n.polygonAreaSigned(e))},354:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.quadraticBezierToPoints=void 0;const r=t(345),o=t(669);n.quadraticBezierToPoints=(e,n)=>{const t=[{x:e.p1.x,y:e.p1.y},{x:e.p3.x,y:e.p3.y}],a=(e,s,i,l)=>{const c=r.lerp(s,i,.5),x=o.lerp2(o.lerp2(e.p1,e.p2,c),o.lerp2(e.p2,e.p3,c),c),p=t[l-1],y=t[l];t.splice(l,0,x),o.dot(o.normalize(o.sub(p,x)),o.normalize(o.sub(y,x)))>n&&(a(e,c,i,l+1),a(e,s,c,l))};return a(e,0,1,1),t}},345:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.lerp=n.timeAtPos=n.clamp=n.fract=n.negFract=n.EPSILON=void 0,n.EPSILON=1e-6,n.negFract=e=>1-e+Math.floor(e),n.fract=e=>e-Math.floor(e),n.clamp=(e,n,t)=>Math.max(Math.min(e,t),n),n.timeAtPos=(e,t,r)=>t?n.clamp((r-e)/t,0,1):0,n.lerp=(e,n,t)=>e*(1-t)+n*t},669:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.inRange=n.avg=n.max2=n.min2=n.toPrecision2=n.lerp2=n.normalize=n.length=n.equal=n.dot=n.sign=n.abs=n.ceil=n.floor=n.sub=n.adds=n.add=n.divide=n.multiply=n.scale=n.equals=n.determinant2=n.clamp2=void 0;const r=t(345);n.clamp2=(e,n,t)=>({x:r.clamp(e.x,n.x,t.x),y:r.clamp(e.y,n.y,t.y)}),n.determinant2=(e,n)=>e.x*n.y-e.y*n.x,n.equals=(e,n)=>e.x===n.x&&e.y===n.y,n.scale=(e,n)=>({x:n*e.x,y:n*e.y}),n.multiply=(e,n)=>({x:n.x*e.x,y:n.y*e.y}),n.divide=(e,n)=>({x:e.x/n.x,y:e.y/n.y}),n.add=(e,n)=>({x:e.x+n.x,y:e.y+n.y}),n.adds=(e,n)=>({x:e.x+n,y:e.y+n}),n.sub=(e,n)=>({x:e.x-n.x,y:e.y-n.y}),n.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),n.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),n.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),n.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),n.dot=(e,n)=>e.x*n.x+e.y*n.y,n.equal=(e,n)=>e.x==n.x&&e.y==n.y,n.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),n.normalize=e=>n.scale(e,1/n.length(e)),n.lerp2=(e,n,t)=>({x:r.lerp(e.x,n.x,t),y:r.lerp(e.y,n.y,t)}),n.toPrecision2=(e,n)=>(e.x=parseFloat(e.x.toPrecision(n)),e.y=parseFloat(e.y.toPrecision(n)),e),n.min2=(e,...n)=>{const t={x:e.x,y:e.y};return n.forEach((e=>{t.x=Math.min(t.x,e.x),t.y=Math.min(t.y,e.y)})),t},n.max2=(e,...n)=>{const t={x:e.x,y:e.y};return n.forEach((e=>{t.x=Math.max(t.x,e.x),t.y=Math.max(t.y,e.y)})),t},n.avg=e=>{const n=e.reduce(((e,n)=>(e.x+=n.x,e.y+=n.y,e)),{x:0,y:0});return n.x/=e.length,n.y/=e.length,n},n.inRange=(e,n,t)=>!(e.x>t.x||e.x<n.x||e.y>t.y||e.y<n.y)},978:e=>{"use strict";e.exports="precision highp float;\r\n\r\nuniform vec2 screenSize;\r\n\r\n//these should be flat (no interpolation) - not supported in webgl 1.0\r\nvarying vec2 vPrevPos;\r\nvarying vec2 vPos;\r\nvarying vec2 vNextPos;\r\nvarying vec2 e1;\r\nvarying vec2 e2;\r\nvarying vec2 e3;\r\nvarying vec4 bounds;\r\n\r\nconst float delta = 0.000001;\r\n\r\nvec4 sort(vec4 val) {\r\n  float a = min(val.x, val.y);\r\n  float b = max(val.x, val.y);\r\n  float c = min(val.z, val.w);\r\n  float d = max(val.z, val.w);\r\n\r\n  float e = min(b, c);\r\n  float f = max(b, c);\r\n  float h = max(a, e);\r\n  float i = min(f, d);\r\n\r\n  return vec4(min(a, e), min(h, i), max(h, i), max(f, d));\r\n}\r\n\r\nfloat det2(vec2 p1, vec2 p2) {\r\n  return (p1.x * p2.y) - (p1.y * p2.x);\r\n}\r\n\r\nfloat timeAtPos(float startPos, float dir, float newPos) {\r\n  if (abs(dir) < delta) {\r\n      return 0.0;\r\n  }\r\n\r\n  return clamp((newPos - startPos) / dir, 0.0, 1.0);\r\n}\r\n\r\nvoid main(void) {\r\n  //remove conservative rasterisation overdraw\r\n  if (gl_FragCoord.x < bounds.x || gl_FragCoord.y < bounds.y || gl_FragCoord.x > bounds.z || gl_FragCoord.y > bounds.w) {\r\n      discard;\r\n  }\r\n\r\n  //intersect the triangle with the pixel bounds\r\n  vec2 pixelMin = floor(gl_FragCoord.xy);\r\n  vec2 pixelMax = ceil(gl_FragCoord.xy);\r\n\r\n  vec4 firstLineTs = sort(vec4(\r\n      timeAtPos(vPrevPos.x, e1.x, pixelMin.x),\r\n      timeAtPos(vPrevPos.x, e1.x, pixelMax.x),\r\n      timeAtPos(vPrevPos.y, e1.y, pixelMin.y),\r\n      timeAtPos(vPrevPos.y, e1.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p1 = clamp(vPrevPos + e1 * firstLineTs.x, pixelMin, pixelMax);\r\n  vec2 p2 = clamp(vPrevPos + e1 * firstLineTs.y, pixelMin, pixelMax);\r\n  vec2 p3 = clamp(vPrevPos + e1 * firstLineTs.z, pixelMin, pixelMax);\r\n  vec2 p4 = clamp(vPrevPos + e1 * firstLineTs.w, pixelMin, pixelMax);\r\n\r\n  vec4 secondLineTs = sort(vec4(\r\n      timeAtPos(vPos.x, e2.x, pixelMin.x),\r\n      timeAtPos(vPos.x, e2.x, pixelMax.x),\r\n      timeAtPos(vPos.y, e2.y, pixelMin.y),\r\n      timeAtPos(vPos.y, e2.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p5 = clamp(vPos + e2 * secondLineTs.x, pixelMin, pixelMax);\r\n  vec2 p6 = clamp(vPos + e2 * secondLineTs.y, pixelMin, pixelMax);\r\n  vec2 p7 = clamp(vPos + e2 * secondLineTs.z, pixelMin, pixelMax);\r\n  vec2 p8 = clamp(vPos + e2 * secondLineTs.w, pixelMin, pixelMax);\r\n  \r\n  vec4 thirdLineTs = sort(vec4(\r\n      timeAtPos(vNextPos.x, e3.x, pixelMin.x),\r\n      timeAtPos(vNextPos.x, e3.x, pixelMax.x),\r\n      timeAtPos(vNextPos.y, e3.y, pixelMin.y),\r\n      timeAtPos(vNextPos.y, e3.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p9  = clamp(vNextPos + e3 * thirdLineTs.x, pixelMin, pixelMax);\r\n  vec2 p10 = clamp(vNextPos + e3 * thirdLineTs.y, pixelMin, pixelMax);\r\n  vec2 p11 = clamp(vNextPos + e3 * thirdLineTs.z, pixelMin, pixelMax);\r\n  vec2 p12 = clamp(vNextPos + e3 * thirdLineTs.w, pixelMin, pixelMax);\r\n\r\n  //compute the area under the formed polygon\r\n  float polygonArea = (\r\n      det2(p1, p2) + det2(p2, p3) + det2(p3, p4) + det2(p4, p5) +\r\n      det2(p5, p6) + det2(p6, p7) + det2(p7, p8) + det2(p8, p9) + \r\n      det2(p9, p10) + det2(p10, p11) + det2(p11, p12) + det2(p12, p1)\r\n  ) / 2.0;\r\n\r\n  float alphaAmount = clamp(abs(polygonArea), 0.0, 1.0);\r\n\r\n  gl_FragColor = vec4(1.0, 0.0, 0.0, alphaAmount);\r\n}\r\n"},620:e=>{"use strict";e.exports="uniform vec2 screenSize;\r\nuniform float offset;\r\n\r\nattribute float index;\r\nattribute vec2 pos;\r\nattribute vec2 prevPos;\r\nattribute vec2 nextPos;\r\n\r\nvarying vec4 bounds;\r\n\r\nvarying vec2 vPrevPos;\r\nvarying vec2 vPos;\r\nvarying vec2 vNextPos;\r\nvarying vec2 e1;\r\nvarying vec2 e2;\r\nvarying vec2 e3;\r\n\r\nconst float delta = 0.0000001;\r\n\r\nvoid main(void) {\r\n    // determine a new vertex position such that it covers the neighbour pixel centers\r\n    vec2 a = normalize(pos - prevPos);\r\n    vec2 b = normalize(pos - nextPos);\r\n    float angle = sqrt((1.0 - dot(a, b)) / 2.0);\r\n\r\n    vec2 vecPos;\r\n    if (abs(angle) > delta) {\r\n        vecPos = pos + normalize(a + b) * (offset / angle);\r\n    } else {\r\n        vecPos = pos;\r\n    }\r\n\r\n    // compute a bounding box and pass to the fragment shader so we dont render outside the inflated triangle bounds\r\n    bounds = screenSize.xyxy * (vec4(min(min(pos, prevPos), nextPos), max(max(pos, prevPos), nextPos)) / 2.0 + 0.5) + vec4(-0.5, -0.5, 0.5, 0.5);\r\n\r\n    //translate the position into screen space\r\n    vec2 screenPos = screenSize.xy * (pos / 2.0 + 0.5);\r\n    vec2 screenPrevPos = screenSize.xy * (prevPos / 2.0 + 0.5);\r\n    vec2 screenNextPos = screenSize.xy * (nextPos / 2.0 + 0.5);\r\n    \r\n    //prevent interpolation by ensuring the same positions are sent each vertex in the same triangle\r\n    if (int(index) == 0) {\r\n        vPrevPos = screenPos;\r\n        vPos = screenNextPos;\r\n        vNextPos = screenPrevPos;\r\n    } else if (int(index) == 1) {\r\n        vPrevPos = screenPrevPos;\r\n        vPos = screenPos;\r\n        vNextPos = screenNextPos;\r\n    } else {\r\n        vPrevPos = screenNextPos;\r\n        vPos = screenPrevPos;\r\n        vNextPos = screenPos;\r\n    }\r\n    \r\n    e1 = vPos - vPrevPos;\r\n    e2 = vNextPos - vPos;\r\n    e3 = vPrevPos - vNextPos;\r\n\r\n    gl_Position = vec4(vecPos, 0.0, 1.0);\r\n}\r\n"}},e=>{"use strict";e(e.s=943)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvYWFiYi9hYWJiLnRzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9hYWJiL2FhYmJDb250YWlucy50cyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvYWFiYi9hYWJiSW50ZXJzZWN0LnRzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9hYWJiL2NvbWJpbmVBYWJicy50cyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvZGVtb3MvY3VzdG9tRm9udFdlYmdsLnRzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9nZW9tZXRyeS9jdWJpY0JlemllclRvUG9pbnRzLnRzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9nZW9tZXRyeS9wYXRoVG9Qb2ludHMudHMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL2dlb21ldHJ5L3BvaW50c1RvUG9seWdvbi50cyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvZ2VvbWV0cnkvcG9seWdvbkFyZWEudHMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL2dlb21ldHJ5L3F1YWRyYXRpY0JlemllclRvUG9pbnRzLnRzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9tYXRocy9jb21tb24udHMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL21hdGhzL3BvaW50LnRzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYWFiYiIsInBvaW50cyIsImZpcnN0UG9pbnQiLCJtaW4iLCJ4IiwieSIsIm1heCIsImkiLCJsZW5ndGgiLCJwb2ludCIsIk1hdGgiLCJhYWJiQ29udGFpbnMiLCJhYWJiMSIsImFhYmIyIiwiYWFiYkludGVyc2VjdCIsImNvbWJpbmVBYWJicyIsInBvaW50XzEiLCJhYWJicyIsImZpcnN0QWFiYiIsImNvbWJpbmVkIiwibWluMiIsIm1heDIiLCJfX2F3YWl0ZXIiLCJ0aGlzIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwib3BlbnR5cGVfanNfMSIsInBhdGhUb1BvaW50c18xIiwicG9pbnRzVG9Qb2x5Z29uXzEiLCJmb250X3ZlcnRfMSIsImZvbnRfZnJhZ18xIiwiZ2wiLCJ2ZXJ0aWNlcyIsIm5leHRQb3MiLCJwcmV2UG9zIiwiaW5kZXhlcyIsInBvc0J1ZmZlciIsIm5leHRQb3NCdWZmZXIiLCJwcmV2UG9zQnVmZmVyIiwiaW5kZXhCdWZmZXIiLCJkcmF3R0wiLCJjbGVhciIsIkNPTE9SX0JVRkZFUl9CSVQiLCJkcmF3QXJyYXlzIiwiVFJJQU5HTEVTIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2NhbGUiLCJvZmZzZXRZIiwibXlDaGFycyIsImxvYWQiLCJzdHJpbmdUb0dseXBocyIsImNoYXJQb3MiLCJjdXJyVmVydGljZXMiLCJuZXh0VmVydGljZXMiLCJwcmV2VmVydGljZXMiLCJpbmRleGVzUmF3IiwibXlDaGFyIiwiYVBhdGgiLCJnZXRQYXRoIiwicG9pbnRzR3JvdXBzIiwicGF0aFRvUG9pbnRzIiwidG9QYXRoRGF0YSIsImFkdmFuY2VXaWR0aCIsImNoYXJQb2x5Z29ucyIsInBvaW50c1RvUG9seWdvbnMiLCJwb2x5Z29uIiwidHJpYW5nbGUiLCJ2MSIsInAxIiwidjIiLCJwMiIsInYzIiwicDMiLCJwdXNoIiwiRmxvYXQzMkFycmF5IiwiY2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJhbnRpYWxpYXMiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJvZmZzZXQiLCJzcXJ0Iiwid2lkdGgiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyRGF0YSIsIlNUQVRJQ19EUkFXIiwidmVydFNoYWRlciIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJzaGFkZXJTb3VyY2UiLCJkZWZhdWx0IiwiY29tcGlsZVNoYWRlciIsIlN0cmluZyIsImdldFNoYWRlckluZm9Mb2ciLCJ0cmltIiwiRXJyb3IiLCJmcmFnU2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwic2hhZGVyUHJvZ3JhbSIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1JbmZvTG9nIiwidXNlUHJvZ3JhbSIsInBvc0F0dHIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwicHJldlBvc0F0dHIiLCJuZXh0UG9zQXR0ciIsImluZGV4QXR0ciIsIm9mZnNldFVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ1bmlmb3JtMWYiLCJzY3JlZW5TaXplVW5pZm9ybSIsInVuaWZvcm0yZnYiLCJoZWlnaHQiLCJjbGVhckNvbG9yIiwidmlld3BvcnQiLCJlbmFibGUiLCJCTEVORCIsImJsZW5kRnVuYyIsIk9ORSIsImxvYWRHTCIsImN1YmljQmV6aWVyVG9Qb2ludHMiLCJjb21tb25fMSIsImJlemllciIsInNwbGl0VGhyZXNob2xkIiwicDQiLCJjdWJpY0JlemllclNwbGl0IiwiaW5zZXJ0SW5kZXgiLCJmaXJzdCIsInRpbWUiLCJsZXJwIiwibWlkTGVycCIsImxlcnAyIiwicG9pbnRPbkN1cnZlIiwicHJldlBvaW50IiwibmV4dFBvaW50Iiwic3BsaWNlIiwiZG90Iiwibm9ybWFsaXplIiwic3ViIiwiY3ViaWNCZXppZXJUb1BvaW50c18xIiwicXVhZHJhdGljQmV6aWVyVG9Qb2ludHNfMSIsImJsb2NrUmVnZXhwIiwidmFsdWVzUmVnZXhwIiwicGF0aFN0ciIsInNwbGl0Qm91bmRhcnkiLCJwYXRoQmxvY2tzIiwic3BsaXQiLCJjdXJyZW50UG9seWdvbiIsImN1cnJlbnRQb2ludCIsImJsb2NrIiwic2hpZnQiLCJwYXRoUGFydHMiLCJzdWJzdHJpbmciLCJtYXRjaCIsIm5leHRDb21tYW5kIiwibm9ybWFsaXNlZENvbW1hbmQiLCJ0b0xvd2VyQ2FzZSIsImlzUmVsYXRpdmUiLCJwYXJzZUZsb2F0IiwibmV4dFgiLCJuZXh0WSIsInNlY29uZFBvaW50IiwidGhpcmRQb2ludCIsImZvdXJ0aFBvaW50IiwicXVhZHJhdGljQmV6aWVyVG9Qb2ludHMiLCJjb25zb2xlIiwibG9nIiwiZWFyY3V0XzEiLCJhYWJiXzEiLCJhYWJiQ29udGFpbnNfMSIsImFhYmJJbnRlcnNlY3RfMSIsImNvbWJpbmVBYWJic18xIiwicG9seWdvbkFyZWFfMSIsInNvbGlkR3JvdXBzIiwiaG9sZUdyb3VwcyIsImZvckVhY2giLCJwb2ludHNBcnIiLCJncm91cCIsInBvbHlnb25BcmVhU2lnbmVkIiwic29saWRBYWJiIiwibWFwIiwiaG9sZUFhYmIiLCJ0ZW1wIiwicG9seWdvbnMiLCJzb2xpZEdyb3VwIiwidmVydGV4RGF0YSIsImhvbGVJbmRpY2VzIiwiYWxsUG9pbnRzIiwiZmlsdGVyIiwiaG9sZUdyb3VwIiwiaG9sZVBvaW50IiwidHJpYW5nbGVJbmRpY2VzIiwidHJpYW5nbGVzIiwiZTEiLCJlMiIsImUzIiwiY29sb3VyIiwicm91bmQiLCJyYW5kb20iLCJ6IiwicG9seWdvbkFyZWEiLCJsYXN0SW5kZXgiLCJhcmVhIiwiZGV0ZXJtaW5hbnQyIiwiYWJzIiwicXVhZHJhdGljQmV6aWVyU3BsaXQiLCJ0aW1lQXRQb3MiLCJjbGFtcCIsImZyYWN0IiwibmVnRnJhY3QiLCJFUFNJTE9OIiwiZmxvb3IiLCJhIiwic3RhcnRQb3MiLCJkaXIiLCJuZXdQb3MiLCJiIiwidCIsImluUmFuZ2UiLCJhdmciLCJ0b1ByZWNpc2lvbjIiLCJlcXVhbCIsInNpZ24iLCJjZWlsIiwiYWRkcyIsImFkZCIsImRpdmlkZSIsIm11bHRpcGx5IiwiZXF1YWxzIiwiY2xhbXAyIiwiYW1vdW50IiwidG9QcmVjaXNpb24iLCJvYmoiLCJvYmpzIiwiYXJyIiwic3VtIiwicmVkdWNlIiwiYWNjIiwiaXRlbSJdLCJtYXBwaW5ncyI6Im1IQUNBQSxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0REQsRUFBUUUsVUFBTyxFQWNmRixFQUFRRSxLQWJNQyxJQUNWLE1BQU1DLEVBQWFELEVBQU8sR0FDcEJFLEVBQU0sQ0FBRUMsRUFBR0YsRUFBV0UsRUFBR0MsRUFBR0gsRUFBV0csR0FDdkNDLEVBQU0sQ0FBRUYsRUFBR0YsRUFBV0UsRUFBR0MsRUFBR0gsRUFBV0csR0FDN0MsSUFBSyxJQUFJRSxFQUFJLEVBQUdBLEVBQUlOLEVBQU9PLE9BQVFELElBQUssQ0FDcEMsTUFBTUUsRUFBUVIsRUFBT00sR0FDckJKLEVBQUlDLEVBQUlNLEtBQUtQLElBQUlBLEVBQUlDLEVBQUdLLEVBQU1MLEdBQzlCRCxFQUFJRSxFQUFJSyxLQUFLUCxJQUFJQSxFQUFJRSxFQUFHSSxFQUFNSixHQUM5QkMsRUFBSUYsRUFBSU0sS0FBS0osSUFBSUEsRUFBSUYsRUFBR0ssRUFBTUwsR0FDOUJFLEVBQUlELEVBQUlLLEtBQUtKLElBQUlBLEVBQUlELEVBQUdJLEVBQU1KLEdBRWxDLE1BQU8sQ0FBRUYsTUFBS0csUyx5QkNibEJWLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RERCxFQUFRYSxrQkFBZSxFQUl2QmIsRUFBUWEsYUFIYSxDQUFDQyxFQUFPQyxJQUNsQkQsRUFBTVQsSUFBSUMsR0FBS1MsRUFBTVYsSUFBSUMsR0FBS1EsRUFBTVQsSUFBSUUsR0FBS1EsRUFBTVYsSUFBSUUsR0FBS08sRUFBTU4sSUFBSUYsR0FBS1MsRUFBTVAsSUFBSUYsR0FB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QUFLaUYsRUFBR2pGLEVBQUlELEVBQUlDLEdBQUtpRixFQUFHaEYsRUFBSUMsRUFBSUQsR0FBS2dGLEVBQUdoRixFQUFJRixFQUFJRSxJIiwiZmlsZSI6ImN1c3RvbV9mb250X3dlYmdsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hYWJiID0gdm9pZCAwO1xyXG5jb25zdCBhYWJiID0gKHBvaW50cykgPT4ge1xyXG4gICAgY29uc3QgZmlyc3RQb2ludCA9IHBvaW50c1swXTtcclxuICAgIGNvbnN0IG1pbiA9IHsgeDogZmlyc3RQb2ludC54LCB5OiBmaXJzdFBvaW50LnkgfTtcclxuICAgIGNvbnN0IG1heCA9IHsgeDogZmlyc3RQb2ludC54LCB5OiBmaXJzdFBvaW50LnkgfTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XHJcbiAgICAgICAgbWluLnggPSBNYXRoLm1pbihtaW4ueCwgcG9pbnQueCk7XHJcbiAgICAgICAgbWluLnkgPSBNYXRoLm1pbihtaW4ueSwgcG9pbnQueSk7XHJcbiAgICAgICAgbWF4LnggPSBNYXRoLm1heChtYXgueCwgcG9pbnQueCk7XHJcbiAgICAgICAgbWF4LnkgPSBNYXRoLm1heChtYXgueSwgcG9pbnQueSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBtaW4sIG1heCB9O1xyXG59O1xyXG5leHBvcnRzLmFhYmIgPSBhYWJiO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFhYmJDb250YWlucyA9IHZvaWQgMDtcclxuY29uc3QgYWFiYkNvbnRhaW5zID0gKGFhYmIxLCBhYWJiMikgPT4ge1xyXG4gICAgcmV0dXJuIGFhYmIxLm1pbi54IDw9IGFhYmIyLm1pbi54ICYmIGFhYmIxLm1pbi55IDw9IGFhYmIyLm1pbi55ICYmIGFhYmIxLm1heC54ID49IGFhYmIyLm1heC54ICYmIGFhYmIxLm1heC55ID49IGFhYmIyLm1heC55O1xyXG59O1xyXG5leHBvcnRzLmFhYmJDb250YWlucyA9IGFhYmJDb250YWlucztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hYWJiSW50ZXJzZWN0ID0gdm9pZCAwO1xyXG5jb25zdCBhYWJiSW50ZXJzZWN0ID0gKGFhYmIxLCBhYWJiMikgPT4ge1xyXG4gICAgcmV0dXJuIGFhYmIyLm1pbi54IDw9IGFhYmIxLm1heC54ICYmIGFhYmIyLm1heC54ID49IGFhYmIxLm1pbi54ICYmIGFhYmIyLm1pbi55IDw9IGFhYmIxLm1heC55ICYmIGFhYmIyLm1heC55ID49IGFhYmIxLm1pbi55O1xyXG59O1xyXG5leHBvcnRzLmFhYmJJbnRlcnNlY3QgPSBhYWJiSW50ZXJzZWN0O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmNvbWJpbmVBYWJicyA9IHZvaWQgMDtcclxuY29uc3QgcG9pbnRfMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9wb2ludFwiKTtcclxuY29uc3QgY29tYmluZUFhYmJzID0gKGFhYmJzKSA9PiB7XHJcbiAgICBpZiAoIWFhYmJzLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGZpcnN0QWFiYiA9IGFhYmJzWzBdO1xyXG4gICAgY29uc3QgY29tYmluZWQgPSB7XHJcbiAgICAgICAgbWluOiBmaXJzdEFhYmIubWluLFxyXG4gICAgICAgIG1heDogZmlyc3RBYWJiLm1heFxyXG4gICAgfTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYWFiYnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBhYWJiID0gYWFiYnNbaV07XHJcbiAgICAgICAgY29tYmluZWQubWluID0gcG9pbnRfMS5taW4yKGNvbWJpbmVkLm1pbiwgYWFiYi5taW4pO1xyXG4gICAgICAgIGNvbWJpbmVkLm1heCA9IHBvaW50XzEubWF4Mihjb21iaW5lZC5tYXgsIGFhYmIubWF4KTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21iaW5lZDtcclxufTtcclxuZXhwb3J0cy5jb21iaW5lQWFiYnMgPSBjb21iaW5lQWFiYnM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3Qgb3BlbnR5cGVfanNfMSA9IHJlcXVpcmUoXCJvcGVudHlwZS5qc1wiKTtcclxuY29uc3QgcGF0aFRvUG9pbnRzXzEgPSByZXF1aXJlKFwiLi4vZ2VvbWV0cnkvcGF0aFRvUG9pbnRzXCIpO1xyXG5jb25zdCBwb2ludHNUb1BvbHlnb25fMSA9IHJlcXVpcmUoXCIuLi9nZW9tZXRyeS9wb2ludHNUb1BvbHlnb25cIik7XHJcbmNvbnN0IGZvbnRfdmVydF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFkZXJzL2ZvbnQudmVydFwiKSk7XHJcbmNvbnN0IGZvbnRfZnJhZ18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFkZXJzL2ZvbnQuZnJhZ1wiKSk7XHJcbmNvbnN0IHZlcnRleFNpemUgPSAyO1xyXG5sZXQgZ2w7XHJcbmxldCB2ZXJ0aWNlcztcclxubGV0IG5leHRQb3M7XHJcbmxldCBwcmV2UG9zO1xyXG5sZXQgaW5kZXhlcztcclxubGV0IHBvc0J1ZmZlcjtcclxubGV0IG5leHRQb3NCdWZmZXI7XHJcbmxldCBwcmV2UG9zQnVmZmVyO1xyXG5sZXQgaW5kZXhCdWZmZXI7XHJcbmNvbnN0IGxvYWRHTCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMxJyk7XHJcbiAgICBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIHsgYW50aWFsaWFzOiBmYWxzZSwgcHJlbXVsdGlwbGllZEFscGhhOiBmYWxzZSB9KTtcclxuICAgIGNvbnN0IG9mZnNldCA9IE1hdGguc3FydCgyKSAvIGNhbnZhcy53aWR0aDtcclxuICAgIC8vIENyZWF0ZSBhbiBlbXB0eSBidWZmZXIgb2JqZWN0IHRvIHN0b3JlIHZlcnRleCBidWZmZXJcclxuICAgIHBvc0J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHBvc0J1ZmZlcik7XHJcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdmVydGljZXMsIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgIG5leHRQb3NCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBuZXh0UG9zQnVmZmVyKTtcclxuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXh0UG9zLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICBwcmV2UG9zQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcHJldlBvc0J1ZmZlcik7XHJcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgcHJldlBvcywgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgaW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBpbmRleEJ1ZmZlcik7XHJcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgaW5kZXhlcywgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgLy8gQ3JlYXRlIGEgc2hhZGVyIHByb2dyYW1cclxuICAgIGNvbnN0IHZlcnRTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuVkVSVEVYX1NIQURFUik7XHJcbiAgICBnbC5zaGFkZXJTb3VyY2UodmVydFNoYWRlciwgZm9udF92ZXJ0XzEuZGVmYXVsdCk7XHJcbiAgICBnbC5jb21waWxlU2hhZGVyKHZlcnRTaGFkZXIpO1xyXG4gICAgaWYgKFN0cmluZyhnbC5nZXRTaGFkZXJJbmZvTG9nKHZlcnRTaGFkZXIpKS50cmltKCkgIT09ICcnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFN0cmluZyhnbC5nZXRTaGFkZXJJbmZvTG9nKHZlcnRTaGFkZXIpKSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBmcmFnU2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUik7XHJcbiAgICBnbC5zaGFkZXJTb3VyY2UoZnJhZ1NoYWRlciwgZm9udF9mcmFnXzEuZGVmYXVsdCk7XHJcbiAgICBnbC5jb21waWxlU2hhZGVyKGZyYWdTaGFkZXIpO1xyXG4gICAgaWYgKFN0cmluZyhnbC5nZXRTaGFkZXJJbmZvTG9nKGZyYWdTaGFkZXIpKS50cmltKCkgIT09ICcnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFN0cmluZyhnbC5nZXRTaGFkZXJJbmZvTG9nKGZyYWdTaGFkZXIpKSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzaGFkZXJQcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIHZlcnRTaGFkZXIpO1xyXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIGZyYWdTaGFkZXIpO1xyXG4gICAgZ2wubGlua1Byb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XHJcbiAgICBpZiAoU3RyaW5nKGdsLmdldFByb2dyYW1JbmZvTG9nKHNoYWRlclByb2dyYW0pKS50cmltKCkgIT09ICcnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFN0cmluZyhnbC5nZXRQcm9ncmFtSW5mb0xvZyhzaGFkZXJQcm9ncmFtKSkpO1xyXG4gICAgfVxyXG4gICAgLy9iaW5kIHNoYWRlciBwYXJhbXNcclxuICAgIGdsLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XHJcbiAgICBjb25zdCBwb3NBdHRyID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgXCJwb3NcIik7XHJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcG9zQnVmZmVyKTtcclxuICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIocG9zQXR0ciwgdmVydGV4U2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHBvc0F0dHIpO1xyXG4gICAgLy8gbmVlZCB0byBkdXBsaWNhdGUgdGhlIHZlcnRleCBidWZmZXJzIGp1c3QgdG8gYWNjZXNzIHRoZSBvdGhlciB0cmlhbmdsZSBwb3NpdGlvbnMgOihcclxuICAgIGNvbnN0IHByZXZQb3NBdHRyID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgXCJwcmV2UG9zXCIpO1xyXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHByZXZQb3NCdWZmZXIpO1xyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihwcmV2UG9zQXR0ciwgdmVydGV4U2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHByZXZQb3NBdHRyKTtcclxuICAgIGNvbnN0IG5leHRQb3NBdHRyID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgXCJuZXh0UG9zXCIpO1xyXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG5leHRQb3NCdWZmZXIpO1xyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihuZXh0UG9zQXR0ciwgdmVydGV4U2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KG5leHRQb3NBdHRyKTtcclxuICAgIGNvbnN0IGluZGV4QXR0ciA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW0sIFwiaW5kZXhcIik7XHJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgaW5kZXhCdWZmZXIpO1xyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihpbmRleEF0dHIsIDEsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XHJcbiAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShpbmRleEF0dHIpO1xyXG4gICAgY29uc3Qgb2Zmc2V0VW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAnb2Zmc2V0Jyk7XHJcbiAgICBnbC51bmlmb3JtMWYob2Zmc2V0VW5pZm9ybSwgb2Zmc2V0KTtcclxuICAgIGNvbnN0IHNjcmVlblNpemVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW0sICdzY3JlZW5TaXplJyk7XHJcbiAgICBnbC51bmlmb3JtMmZ2KHNjcmVlblNpemVVbmlmb3JtLCBbY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0XSk7XHJcbiAgICAvL2luaXRcclxuICAgIGdsLmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMC4wKTtcclxuICAgIGdsLnZpZXdwb3J0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xyXG4gICAgZ2wuYmxlbmRGdW5jKGdsLk9ORSwgZ2wuT05FKTtcclxufTtcclxuLy8gZHJhd1xyXG5jb25zdCBkcmF3R0wgPSAoKSA9PiB7XHJcbiAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTtcclxuICAgIC8vbWF5IGFzIHdlbGwgdXNlIGRyYXdBcnJheXMgaGVyZSBzaW5jZSB0aGUgdmVydGljZXMgaGFzIGhhZCB0byBiZSBkdXBsaWNhdGVkXHJcbiAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgMCwgdmVydGljZXMubGVuZ3RoIC8gdmVydGV4U2l6ZSk7XHJcbiAgICAvL2dsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIGluZGljZXMubGVuZ3RoLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd0dMKTtcclxufTtcclxuY29uc3Qgc3RhcnQgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgIGNvbnN0IGZvbnQgPSB5aWVsZCBvcGVudHlwZV9qc18xLmxvYWQoJy4vbWVkaWEvVGltZWxlc3MudHRmJyk7XHJcbiAgICBjb25zdCBmb250U2l6ZSA9IDEyODtcclxuICAgIGNvbnN0IHRleHQgPSAnVGVzdCc7XHJcbiAgICBjb25zdCBzY2FsZSA9IDEuMCAvIGZvbnRTaXplO1xyXG4gICAgY29uc3Qgb2Zmc2V0WCA9IC0xLjA7XHJcbiAgICBjb25zdCBvZmZzZXRZID0gLTAuNSAtIHNjYWxlO1xyXG4gICAgY29uc3Qgc3BsaXRCb3VuZGFyeSA9IC0wLjk5O1xyXG4gICAgY29uc3QgZm9udFdpZHRoID0gZm9udFNpemU7IC8vMTg7XHJcbiAgICBjb25zdCBteUNoYXJzID0gZm9udC5zdHJpbmdUb0dseXBocyh0ZXh0KTtcclxuICAgIGxldCBjaGFyUG9zID0gMDtcclxuICAgIGNvbnN0IGN1cnJWZXJ0aWNlcyA9IFtdO1xyXG4gICAgY29uc3QgbmV4dFZlcnRpY2VzID0gW107XHJcbiAgICBjb25zdCBwcmV2VmVydGljZXMgPSBbXTtcclxuICAgIGNvbnN0IGluZGV4ZXNSYXcgPSBbXTtcclxuICAgIGZvciAoY29uc3QgbXlDaGFyIG9mIG15Q2hhcnMpIHtcclxuICAgICAgICBjb25zdCBhUGF0aCA9IG15Q2hhci5nZXRQYXRoKGNoYXJQb3MsIDEwMCwgZm9udFNpemUpO1xyXG4gICAgICAgIGNvbnN0IHBvaW50c0dyb3VwcyA9IHBhdGhUb1BvaW50c18xLnBhdGhUb1BvaW50cyhhUGF0aC50b1BhdGhEYXRhKDUpLCBzcGxpdEJvdW5kYXJ5KTtcclxuICAgICAgICBjaGFyUG9zICs9IG15Q2hhci5hZHZhbmNlV2lkdGggLyAxMDAwICogZm9udFdpZHRoO1xyXG4gICAgICAgIGNvbnN0IGNoYXJQb2x5Z29ucyA9IHBvaW50c1RvUG9seWdvbl8xLnBvaW50c1RvUG9seWdvbnMocG9pbnRzR3JvdXBzKTtcclxuICAgICAgICAvL3VuZm9ydHVuYXRlbHkgd2UgbmVlZCB0byBpbnRlcHJldCBlYWNoIHZlcnRleCBpbmRpdmlkdWFsbHkgaW4gZWFjaCB0cmlhbmdsZSBzbyB3ZSBtdXN0IGR1cGxpY2F0ZSB0aGUgdmVydGljZXNcclxuICAgICAgICBmb3IgKGNvbnN0IHBvbHlnb24gb2YgY2hhclBvbHlnb25zKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdHJpYW5nbGUgb2YgcG9seWdvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBbdHJpYW5nbGUucDEueCAqIHNjYWxlICsgb2Zmc2V0WCwgMS4wIC0gdHJpYW5nbGUucDEueSAqIHNjYWxlICsgb2Zmc2V0WV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2MiA9IFt0cmlhbmdsZS5wMi54ICogc2NhbGUgKyBvZmZzZXRYLCAxLjAgLSB0cmlhbmdsZS5wMi55ICogc2NhbGUgKyBvZmZzZXRZXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHYzID0gW3RyaWFuZ2xlLnAzLnggKiBzY2FsZSArIG9mZnNldFgsIDEuMCAtIHRyaWFuZ2xlLnAzLnkgKiBzY2FsZSArIG9mZnNldFldO1xyXG4gICAgICAgICAgICAgICAgY3VyclZlcnRpY2VzLnB1c2goLi4udjEsIC4uLnYyLCAuLi52Myk7XHJcbiAgICAgICAgICAgICAgICBuZXh0VmVydGljZXMucHVzaCguLi52MiwgLi4udjMsIC4uLnYxKTtcclxuICAgICAgICAgICAgICAgIHByZXZWZXJ0aWNlcy5wdXNoKC4uLnYzLCAuLi52MSwgLi4udjIpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXhlc1Jhdy5wdXNoKDAsIDEsIDIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KGN1cnJWZXJ0aWNlcyk7XHJcbiAgICBuZXh0UG9zID0gbmV3IEZsb2F0MzJBcnJheShuZXh0VmVydGljZXMpO1xyXG4gICAgcHJldlBvcyA9IG5ldyBGbG9hdDMyQXJyYXkocHJldlZlcnRpY2VzKTtcclxuICAgIGluZGV4ZXMgPSBuZXcgRmxvYXQzMkFycmF5KGluZGV4ZXNSYXcpO1xyXG4gICAgbG9hZEdMKCk7XHJcbiAgICBkcmF3R0woKTtcclxufSk7XHJcbnN0YXJ0KCk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY3ViaWNCZXppZXJUb1BvaW50cyA9IHZvaWQgMDtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvY29tbW9uXCIpO1xyXG5jb25zdCBwb2ludF8xID0gcmVxdWlyZShcIi4uL21hdGhzL3BvaW50XCIpO1xyXG5jb25zdCBjdWJpY0JlemllclRvUG9pbnRzID0gKGJlemllciwgc3BsaXRUaHJlc2hvbGQpID0+IHtcclxuICAgIGNvbnN0IHBvaW50cyA9IFt7IHg6IGJlemllci5wMS54LCB5OiBiZXppZXIucDEueSB9LCB7IHg6IGJlemllci5wNC54LCB5OiBiZXppZXIucDQueSB9XTtcclxuICAgIGNvbnN0IGN1YmljQmV6aWVyU3BsaXQgPSAoYmV6aWVyLCBtaW4sIG1heCwgaW5zZXJ0SW5kZXgsIGZpcnN0ID0gZmFsc2UpID0+IHtcclxuICAgICAgICBjb25zdCB0aW1lID0gY29tbW9uXzEubGVycChtaW4sIG1heCwgMC41KTtcclxuICAgICAgICBjb25zdCBtaWRMZXJwID0gcG9pbnRfMS5sZXJwMihiZXppZXIucDIsIGJlemllci5wMywgdGltZSk7XHJcbiAgICAgICAgY29uc3QgcG9pbnRPbkN1cnZlID0gcG9pbnRfMS5sZXJwMihwb2ludF8xLmxlcnAyKHBvaW50XzEubGVycDIoYmV6aWVyLnAxLCBiZXppZXIucDIsIHRpbWUpLCBtaWRMZXJwLCB0aW1lKSwgcG9pbnRfMS5sZXJwMihtaWRMZXJwLCBwb2ludF8xLmxlcnAyKGJlemllci5wMywgYmV6aWVyLnA0LCB0aW1lKSwgdGltZSksIHRpbWUpO1xyXG4gICAgICAgIGNvbnN0IHByZXZQb2ludCA9IHBvaW50c1tpbnNlcnRJbmRleCAtIDFdO1xyXG4gICAgICAgIGNvbnN0IG5leHRQb2ludCA9IHBvaW50c1tpbnNlcnRJbmRleF07XHJcbiAgICAgICAgcG9pbnRzLnNwbGljZShpbnNlcnRJbmRleCwgMCwgcG9pbnRPbkN1cnZlKTtcclxuICAgICAgICBpZiAocG9pbnRfMS5kb3QocG9pbnRfMS5ub3JtYWxpemUocG9pbnRfMS5zdWIocHJldlBvaW50LCBwb2ludE9uQ3VydmUpKSwgcG9pbnRfMS5ub3JtYWxpemUocG9pbnRfMS5zdWIobmV4dFBvaW50LCBwb2ludE9uQ3VydmUpKSkgPiBzcGxpdFRocmVzaG9sZCB8fCBmaXJzdCkge1xyXG4gICAgICAgICAgICBjdWJpY0JlemllclNwbGl0KGJlemllciwgdGltZSwgbWF4LCBpbnNlcnRJbmRleCArIDEpO1xyXG4gICAgICAgICAgICBjdWJpY0JlemllclNwbGl0KGJlemllciwgbWluLCB0aW1lLCBpbnNlcnRJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGN1YmljQmV6aWVyU3BsaXQoYmV6aWVyLCAwLCAxLCAxLCB0cnVlKTtcclxuICAgIHJldHVybiBwb2ludHM7XHJcbn07XHJcbmV4cG9ydHMuY3ViaWNCZXppZXJUb1BvaW50cyA9IGN1YmljQmV6aWVyVG9Qb2ludHM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucGF0aFRvUG9pbnRzID0gdm9pZCAwO1xyXG5jb25zdCBjdWJpY0JlemllclRvUG9pbnRzXzEgPSByZXF1aXJlKFwiLi9jdWJpY0JlemllclRvUG9pbnRzXCIpO1xyXG5jb25zdCBxdWFkcmF0aWNCZXppZXJUb1BvaW50c18xID0gcmVxdWlyZShcIi4vcXVhZHJhdGljQmV6aWVyVG9Qb2ludHNcIik7XHJcbmNvbnN0IGJsb2NrUmVnZXhwID0gLyg/PVthc3R2enFtaGxjXSkvZ2k7XHJcbmNvbnN0IHZhbHVlc1JlZ2V4cCA9IC8oLT9bMC05XSpcXC4/WzAtOV0rKSg/OmVbLStdP1xcZCspPy9pZztcclxuY29uc3QgcGF0aFRvUG9pbnRzID0gKHBhdGhTdHIsIHNwbGl0Qm91bmRhcnkpID0+IHtcclxuICAgIGNvbnN0IHBhdGhCbG9ja3MgPSBwYXRoU3RyLnNwbGl0KGJsb2NrUmVnZXhwKTtcclxuICAgIGNvbnN0IHBvaW50cyA9IFtdO1xyXG4gICAgaWYgKHBhdGhCbG9ja3MubGVuZ3RoKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRQb2x5Z29uID0gW107XHJcbiAgICAgICAgY29uc3QgY3VycmVudFBvaW50ID0geyB4OiAwLCB5OiAwIH07XHJcbiAgICAgICAgd2hpbGUgKHBhdGhCbG9ja3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gcGF0aEJsb2Nrcy5zaGlmdCgpO1xyXG4gICAgICAgICAgICBpZiAoIShibG9jayA9PT0gbnVsbCB8fCBibG9jayA9PT0gdm9pZCAwID8gdm9pZCAwIDogYmxvY2subGVuZ3RoKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcGF0aFBhcnRzID0gYmxvY2suc3Vic3RyaW5nKDEpLm1hdGNoKHZhbHVlc1JlZ2V4cCkgfHwgW107XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRDb21tYW5kID0gYmxvY2tbMF07XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGlzZWRDb21tYW5kID0gbmV4dENvbW1hbmQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgY29uc3QgaXNSZWxhdGl2ZSA9IG5leHRDb21tYW5kID09PSBub3JtYWxpc2VkQ29tbWFuZDtcclxuICAgICAgICAgICAgc3dpdGNoIChub3JtYWxpc2VkQ29tbWFuZCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbCc6IC8vbGluZVRvXHJcbiAgICAgICAgICAgICAgICBjYXNlICdtJzogLy9tb3ZlVG9cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocGF0aFBhcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0UG9pbnQgPSB7IHg6IHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpLCB5OiBwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFBvaW50LnggKz0gY3VycmVudFBvaW50Lng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0UG9pbnQueSArPSBjdXJyZW50UG9pbnQueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9seWdvbi5wdXNoKG5leHRQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2ludC54ID0gbmV4dFBvaW50Lng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2ludC55ID0gbmV4dFBvaW50Lnk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6IC8vaG9yaXpvbnRhbExpbmVUb1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwYXRoUGFydHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXh0WCA9IHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFggKz0gY3VycmVudFBvaW50Lng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvbHlnb24ucHVzaCh7IHg6IG5leHRYLCB5OiBjdXJyZW50UG9pbnQueSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvaW50LnggPSBuZXh0WDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd2JzogLy92ZXJ0aWNhbExpbmVUb1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwYXRoUGFydHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXh0WSA9IHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFkgKz0gY3VycmVudFBvaW50Lnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvbHlnb24ucHVzaCh7IHg6IGN1cnJlbnRQb2ludC54LCB5OiBuZXh0WSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvaW50LnkgPSBuZXh0WTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd6JzogLy9jbG9zZVBhdGhcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFBvaW50ID0gY3VycmVudFBvbHlnb25bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvbHlnb24ucHVzaCh7IHg6IGZpcnN0UG9pbnQueCwgeTogZmlyc3RQb2ludC55IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGN1cnJlbnRQb2x5Z29uKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9seWdvbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2ludC54ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9pbnQueSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjJzogLy9jdWJpYyBiZXppZXJcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocGF0aFBhcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWNvbmRQb2ludCA9IHsgeDogcGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSksIHk6IHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpIH0sIHRoaXJkUG9pbnQgPSB7IHg6IHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpLCB5OiBwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSB9LCBmb3VydGhQb2ludCA9IHsgeDogcGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSksIHk6IHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRQb2ludC54ICs9IGN1cnJlbnRQb2ludC54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kUG9pbnQueSArPSBjdXJyZW50UG9pbnQueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXJkUG9pbnQueCArPSBjdXJyZW50UG9pbnQueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXJkUG9pbnQueSArPSBjdXJyZW50UG9pbnQueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdXJ0aFBvaW50LnggKz0gY3VycmVudFBvaW50Lng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VydGhQb2ludC55ICs9IGN1cnJlbnRQb2ludC55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2x5Z29uLnB1c2goLi4uY3ViaWNCZXppZXJUb1BvaW50c18xLmN1YmljQmV6aWVyVG9Qb2ludHMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDE6IGN1cnJlbnRQb2ludCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyOiBzZWNvbmRQb2ludCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzOiB0aGlyZFBvaW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDQ6IGZvdXJ0aFBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHNwbGl0Qm91bmRhcnkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvaW50LnggPSBmb3VydGhQb2ludC54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9pbnQueSA9IGZvdXJ0aFBvaW50Lnk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncSc6IC8vcXVhZHJhdGljIGJlemllclxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwYXRoUGFydHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlY29uZFBvaW50ID0geyB4OiBwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSwgeTogcGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSkgfSwgdGhpcmRQb2ludCA9IHsgeDogcGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSksIHk6IHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRQb2ludC54ICs9IGN1cnJlbnRQb2ludC54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kUG9pbnQueSArPSBjdXJyZW50UG9pbnQueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXJkUG9pbnQueCArPSBjdXJyZW50UG9pbnQueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXJkUG9pbnQueSArPSBjdXJyZW50UG9pbnQueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9seWdvbi5wdXNoKC4uLnF1YWRyYXRpY0JlemllclRvUG9pbnRzXzEucXVhZHJhdGljQmV6aWVyVG9Qb2ludHMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDE6IGN1cnJlbnRQb2ludCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyOiBzZWNvbmRQb2ludCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzOiB0aGlyZFBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHNwbGl0Qm91bmRhcnkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvaW50LnggPSB0aGlyZFBvaW50Lng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2ludC55ID0gdGhpcmRQb2ludC55O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOiAvL2N1YmljIGJlemllciAoc2hvcnRjdXQpXHJcbiAgICAgICAgICAgICAgICBjYXNlICd0JzogLy9xdWFkcmF0aWMgYmV6aWVyIChzaG9ydGN1dClcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2EnOiAvL2FyYyAoc2tpcClcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhub3JtYWxpc2VkQ29tbWFuZCArICcgaXMgbm90IGltcGxlbWVudGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGN1cnJlbnRQb2x5Z29uLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBwb2ludHMucHVzaChjdXJyZW50UG9seWdvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9jYWxjdWxhdGUgdGhlIGFhYmIgYmFzZWQgb24gdGhlIHBvaW50c1xyXG4gICAgcmV0dXJuIHBvaW50cztcclxufTtcclxuZXhwb3J0cy5wYXRoVG9Qb2ludHMgPSBwYXRoVG9Qb2ludHM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucG9pbnRzVG9Qb2x5Z29ucyA9IHZvaWQgMDtcclxuY29uc3QgZWFyY3V0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImVhcmN1dFwiKSk7XHJcbmNvbnN0IGFhYmJfMSA9IHJlcXVpcmUoXCIuLi9hYWJiL2FhYmJcIik7XHJcbmNvbnN0IGFhYmJDb250YWluc18xID0gcmVxdWlyZShcIi4uL2FhYmIvYWFiYkNvbnRhaW5zXCIpO1xyXG5jb25zdCBhYWJiSW50ZXJzZWN0XzEgPSByZXF1aXJlKFwiLi4vYWFiYi9hYWJiSW50ZXJzZWN0XCIpO1xyXG5jb25zdCBjb21iaW5lQWFiYnNfMSA9IHJlcXVpcmUoXCIuLi9hYWJiL2NvbWJpbmVBYWJic1wiKTtcclxuY29uc3QgcG9pbnRfMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9wb2ludFwiKTtcclxuY29uc3QgcG9seWdvbkFyZWFfMSA9IHJlcXVpcmUoXCIuL3BvbHlnb25BcmVhXCIpO1xyXG5jb25zdCBwb2ludHNUb1BvbHlnb25zID0gKHBvaW50cykgPT4ge1xyXG4gICAgbGV0IHNvbGlkR3JvdXBzID0gW107XHJcbiAgICBsZXQgaG9sZUdyb3VwcyA9IFtdO1xyXG4gICAgcG9pbnRzLmZvckVhY2goKHBvaW50c0FycikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGdyb3VwID0ge1xyXG4gICAgICAgICAgICBwb2ludHM6IHBvaW50c0FycixcclxuICAgICAgICAgICAgYWFiYjogYWFiYl8xLmFhYmIocG9pbnRzQXJyKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHBvbHlnb25BcmVhXzEucG9seWdvbkFyZWFTaWduZWQocG9pbnRzQXJyKSA+IDApIHtcclxuICAgICAgICAgICAgc29saWRHcm91cHMucHVzaChncm91cCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBob2xlR3JvdXBzLnB1c2goZ3JvdXApO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy9zd2FwIHRoZSBncm91cHMgaWYgdGhlcmUgYXJlIG9ubHkgaG9sZXNcclxuICAgIGlmICghc29saWRHcm91cHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcCA9IGhvbGVHcm91cHM7XHJcbiAgICAgICAgaG9sZUdyb3VwcyA9IHNvbGlkR3JvdXBzO1xyXG4gICAgICAgIHNvbGlkR3JvdXBzID0gdGVtcDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGhvbGVHcm91cHMubGVuZ3RoKSB7XHJcbiAgICAgICAgLy9kZXRlcm1pbmUgd2V0aGVyIHRoZSBzb2xpZCBncm91cHMgb3IgdGhlIGhvbGUgZ3JvdXBzIGlzIG9uIHRoZSBvdXRzaWRlIC0gZmxpcCBpZiBuZWVkZWQgdG8gc29saWQgZ3JvdXBzIGFyZSBvbiB0aGUgb3V0c2lkZVxyXG4gICAgICAgIGNvbnN0IHNvbGlkQWFiYiA9IGNvbWJpbmVBYWJic18xLmNvbWJpbmVBYWJicyhzb2xpZEdyb3Vwcy5tYXAoKGdyb3VwKSA9PiBncm91cC5hYWJiKSk7XHJcbiAgICAgICAgY29uc3QgaG9sZUFhYmIgPSBjb21iaW5lQWFiYnNfMS5jb21iaW5lQWFiYnMoaG9sZUdyb3Vwcy5tYXAoKGdyb3VwKSA9PiBncm91cC5hYWJiKSk7XHJcbiAgICAgICAgaWYgKGFhYmJDb250YWluc18xLmFhYmJDb250YWlucyhob2xlQWFiYiwgc29saWRBYWJiKSkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gaG9sZUdyb3VwcztcclxuICAgICAgICAgICAgaG9sZUdyb3VwcyA9IHNvbGlkR3JvdXBzO1xyXG4gICAgICAgICAgICBzb2xpZEdyb3VwcyA9IHRlbXA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9ub3RoaW5nIHRvIHJlbmRlcj8gLSB0aGVuIHdlIGFyZSBkb25lXHJcbiAgICBjb25zdCBwb2x5Z29ucyA9IFtdO1xyXG4gICAgaWYgKCFzb2xpZEdyb3Vwcy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gcG9seWdvbnM7XHJcbiAgICB9XHJcbiAgICAvL3dlIHdpbGwgY3JlYXRlIGEgcG9seWdvbiBmb3IgZWFjaCBvZiB0aGUgc29saWQgZ3JvdXBzIG9mIHBvaW50c1xyXG4gICAgc29saWRHcm91cHMuZm9yRWFjaCgoc29saWRHcm91cCkgPT4ge1xyXG4gICAgICAgIC8vY29udmVydCBpbnRvIGEgZm9ybWF0IHN1aXRhYmxlIGZvciB0cmlhbmd1bGF0aW9uXHJcbiAgICAgICAgY29uc3QgdmVydGV4RGF0YSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGhvbGVJbmRpY2VzID0gW107XHJcbiAgICAgICAgY29uc3QgYWxsUG9pbnRzID0gW107XHJcbiAgICAgICAgYWxsUG9pbnRzLnB1c2goLi4uc29saWRHcm91cC5wb2ludHMpO1xyXG4gICAgICAgIHNvbGlkR3JvdXAucG9pbnRzLm1hcCgocG9pbnQpID0+IHtcclxuICAgICAgICAgICAgdmVydGV4RGF0YS5wdXNoKHBvaW50LngpO1xyXG4gICAgICAgICAgICB2ZXJ0ZXhEYXRhLnB1c2gocG9pbnQueSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaG9sZUdyb3Vwcy5maWx0ZXIoKGhvbGVHcm91cCkgPT4gYWFiYkludGVyc2VjdF8xLmFhYmJJbnRlcnNlY3QoaG9sZUdyb3VwLmFhYmIsIHNvbGlkR3JvdXAuYWFiYikpLmZvckVhY2goKGhvbGVHcm91cCkgPT4ge1xyXG4gICAgICAgICAgICBhbGxQb2ludHMucHVzaCguLi5ob2xlR3JvdXAucG9pbnRzKTtcclxuICAgICAgICAgICAgaG9sZUluZGljZXMucHVzaCh2ZXJ0ZXhEYXRhLmxlbmd0aCAvIDIpO1xyXG4gICAgICAgICAgICBob2xlR3JvdXAucG9pbnRzLmZvckVhY2goKGhvbGVQb2ludCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmVydGV4RGF0YS5wdXNoKGhvbGVQb2ludC54KTtcclxuICAgICAgICAgICAgICAgIHZlcnRleERhdGEucHVzaChob2xlUG9pbnQueSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHRyaWFuZ2xlSW5kaWNlcyA9IGVhcmN1dF8xLmRlZmF1bHQodmVydGV4RGF0YSwgaG9sZUluZGljZXMpO1xyXG4gICAgICAgIGNvbnN0IHRyaWFuZ2xlcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpYW5nbGVJbmRpY2VzLmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgICAgICAgIGxldCBwMSA9IGFsbFBvaW50c1t0cmlhbmdsZUluZGljZXNbaV1dO1xyXG4gICAgICAgICAgICBjb25zdCBwMiA9IGFsbFBvaW50c1t0cmlhbmdsZUluZGljZXNbaSArIDFdXTtcclxuICAgICAgICAgICAgbGV0IHAzID0gYWxsUG9pbnRzW3RyaWFuZ2xlSW5kaWNlc1tpICsgMl1dO1xyXG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBwMSxcclxuICAgICAgICAgICAgICAgIHAyLFxyXG4gICAgICAgICAgICAgICAgcDMsXHJcbiAgICAgICAgICAgICAgICBlMTogcG9pbnRfMS5zdWIocDIsIHAxKSxcclxuICAgICAgICAgICAgICAgIGUyOiBwb2ludF8xLnN1YihwMywgcDIpLFxyXG4gICAgICAgICAgICAgICAgZTM6IHBvaW50XzEuc3ViKHAxLCBwMyksXHJcbiAgICAgICAgICAgICAgICBwb2ludHM6IFtwMSwgcDIsIHAzXSxcclxuICAgICAgICAgICAgICAgIGNvbG91cjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDI1NSksXHJcbiAgICAgICAgICAgICAgICAgICAgeTogTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMjU1KSxcclxuICAgICAgICAgICAgICAgICAgICB6OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAyNTUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHJpYW5nbGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBwb2x5Z29ucy5wdXNoKHRyaWFuZ2xlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcG9seWdvbnM7XHJcbn07XHJcbmV4cG9ydHMucG9pbnRzVG9Qb2x5Z29ucyA9IHBvaW50c1RvUG9seWdvbnM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucG9seWdvbkFyZWEgPSBleHBvcnRzLnBvbHlnb25BcmVhU2lnbmVkID0gdm9pZCAwO1xyXG5jb25zdCBwb2ludF8xID0gcmVxdWlyZShcIi4uL21hdGhzL3BvaW50XCIpO1xyXG5jb25zdCBwb2x5Z29uQXJlYVNpZ25lZCA9IChwb2ludHMpID0+IHtcclxuICAgIGlmICghcG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbGFzdEluZGV4ID0gcG9pbnRzLmxlbmd0aCAtIDE7XHJcbiAgICBsZXQgYXJlYSA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxhc3RJbmRleDsgaSsrKSB7XHJcbiAgICAgICAgYXJlYSArPSBwb2ludF8xLmRldGVybWluYW50Mihwb2ludHNbaV0sIHBvaW50c1tpICsgMV0pO1xyXG4gICAgfVxyXG4gICAgYXJlYSArPSBwb2ludF8xLmRldGVybWluYW50Mihwb2ludHNbbGFzdEluZGV4XSwgcG9pbnRzWzBdKTtcclxuICAgIHJldHVybiBhcmVhIC8gMjtcclxufTtcclxuZXhwb3J0cy5wb2x5Z29uQXJlYVNpZ25lZCA9IHBvbHlnb25BcmVhU2lnbmVkO1xyXG5jb25zdCBwb2x5Z29uQXJlYSA9IChwb2ludHMpID0+IHtcclxuICAgIHJldHVybiBNYXRoLmFicyhleHBvcnRzLnBvbHlnb25BcmVhU2lnbmVkKHBvaW50cykpO1xyXG59O1xyXG5leHBvcnRzLnBvbHlnb25BcmVhID0gcG9seWdvbkFyZWE7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucXVhZHJhdGljQmV6aWVyVG9Qb2ludHMgPSB2b2lkIDA7XHJcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL21hdGhzL2NvbW1vblwiKTtcclxuY29uc3QgcG9pbnRfMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9wb2ludFwiKTtcclxuY29uc3QgcXVhZHJhdGljQmV6aWVyVG9Qb2ludHMgPSAoYmV6aWVyLCBzcGxpdEJvdW5kYXJ5KSA9PiB7XHJcbiAgICBjb25zdCBwb2ludHMgPSBbXHJcbiAgICAgICAgeyB4OiBiZXppZXIucDEueCwgeTogYmV6aWVyLnAxLnkgfSxcclxuICAgICAgICB7IHg6IGJlemllci5wMy54LCB5OiBiZXppZXIucDMueSB9XHJcbiAgICBdO1xyXG4gICAgY29uc3QgcXVhZHJhdGljQmV6aWVyU3BsaXQgPSAoYmV6aWVyLCBtaW4sIG1heCwgaW5zZXJ0SW5kZXgpID0+IHtcclxuICAgICAgICBjb25zdCB0aW1lID0gY29tbW9uXzEubGVycChtaW4sIG1heCwgMC41KTtcclxuICAgICAgICBjb25zdCBwb2ludE9uQ3VydmUgPSBwb2ludF8xLmxlcnAyKHBvaW50XzEubGVycDIoYmV6aWVyLnAxLCBiZXppZXIucDIsIHRpbWUpLCBwb2ludF8xLmxlcnAyKGJlemllci5wMiwgYmV6aWVyLnAzLCB0aW1lKSwgdGltZSk7XHJcbiAgICAgICAgY29uc3QgcHJldlBvaW50ID0gcG9pbnRzW2luc2VydEluZGV4IC0gMV07XHJcbiAgICAgICAgY29uc3QgbmV4dFBvaW50ID0gcG9pbnRzW2luc2VydEluZGV4XTtcclxuICAgICAgICBwb2ludHMuc3BsaWNlKGluc2VydEluZGV4LCAwLCBwb2ludE9uQ3VydmUpO1xyXG4gICAgICAgIGlmIChwb2ludF8xLmRvdChwb2ludF8xLm5vcm1hbGl6ZShwb2ludF8xLnN1YihwcmV2UG9pbnQsIHBvaW50T25DdXJ2ZSkpLCBwb2ludF8xLm5vcm1hbGl6ZShwb2ludF8xLnN1YihuZXh0UG9pbnQsIHBvaW50T25DdXJ2ZSkpKSA+IHNwbGl0Qm91bmRhcnkpIHtcclxuICAgICAgICAgICAgcXVhZHJhdGljQmV6aWVyU3BsaXQoYmV6aWVyLCB0aW1lLCBtYXgsIGluc2VydEluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgIHF1YWRyYXRpY0JlemllclNwbGl0KGJlemllciwgbWluLCB0aW1lLCBpbnNlcnRJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHF1YWRyYXRpY0JlemllclNwbGl0KGJlemllciwgMCwgMSwgMSk7XHJcbiAgICByZXR1cm4gcG9pbnRzO1xyXG59O1xyXG5leHBvcnRzLnF1YWRyYXRpY0JlemllclRvUG9pbnRzID0gcXVhZHJhdGljQmV6aWVyVG9Qb2ludHM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMubGVycCA9IGV4cG9ydHMudGltZUF0UG9zID0gZXhwb3J0cy5jbGFtcCA9IGV4cG9ydHMuZnJhY3QgPSBleHBvcnRzLm5lZ0ZyYWN0ID0gZXhwb3J0cy5FUFNJTE9OID0gdm9pZCAwO1xyXG5leHBvcnRzLkVQU0lMT04gPSAwLjAwMDAwMTtcclxuY29uc3QgbmVnRnJhY3QgPSAoeCkgPT4gMS4wIC0geCArIE1hdGguZmxvb3IoeCk7XHJcbmV4cG9ydHMubmVnRnJhY3QgPSBuZWdGcmFjdDtcclxuY29uc3QgZnJhY3QgPSAoeCkgPT4geCAtIE1hdGguZmxvb3IoeCk7XHJcbmV4cG9ydHMuZnJhY3QgPSBmcmFjdDtcclxuY29uc3QgY2xhbXAgPSAoYSwgbWluLCBtYXgpID0+IE1hdGgubWF4KE1hdGgubWluKGEsIG1heCksIG1pbik7XHJcbmV4cG9ydHMuY2xhbXAgPSBjbGFtcDtcclxuY29uc3QgdGltZUF0UG9zID0gKHN0YXJ0UG9zLCBkaXIsIG5ld1BvcykgPT4gZGlyID8gZXhwb3J0cy5jbGFtcCgobmV3UG9zIC0gc3RhcnRQb3MpIC8gZGlyLCAwLCAxKSA6IDA7XHJcbmV4cG9ydHMudGltZUF0UG9zID0gdGltZUF0UG9zO1xyXG5jb25zdCBsZXJwID0gKGEsIGIsIHQpID0+IGEgKiAoMSAtIHQpICsgYiAqIHQ7XHJcbmV4cG9ydHMubGVycCA9IGxlcnA7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuaW5SYW5nZSA9IGV4cG9ydHMuYXZnID0gZXhwb3J0cy5tYXgyID0gZXhwb3J0cy5taW4yID0gZXhwb3J0cy50b1ByZWNpc2lvbjIgPSBleHBvcnRzLmxlcnAyID0gZXhwb3J0cy5ub3JtYWxpemUgPSBleHBvcnRzLmxlbmd0aCA9IGV4cG9ydHMuZXF1YWwgPSBleHBvcnRzLmRvdCA9IGV4cG9ydHMuc2lnbiA9IGV4cG9ydHMuYWJzID0gZXhwb3J0cy5jZWlsID0gZXhwb3J0cy5mbG9vciA9IGV4cG9ydHMuc3ViID0gZXhwb3J0cy5hZGRzID0gZXhwb3J0cy5hZGQgPSBleHBvcnRzLmRpdmlkZSA9IGV4cG9ydHMubXVsdGlwbHkgPSBleHBvcnRzLnNjYWxlID0gZXhwb3J0cy5lcXVhbHMgPSBleHBvcnRzLmRldGVybWluYW50MiA9IGV4cG9ydHMuY2xhbXAyID0gdm9pZCAwO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcclxuY29uc3QgY2xhbXAyID0gKGEsIG1pbiwgbWF4KSA9PiAoeyB4OiBjb21tb25fMS5jbGFtcChhLngsIG1pbi54LCBtYXgueCksIHk6IGNvbW1vbl8xLmNsYW1wKGEueSwgbWluLnksIG1heC55KSB9KTtcclxuZXhwb3J0cy5jbGFtcDIgPSBjbGFtcDI7XHJcbmNvbnN0IGRldGVybWluYW50MiA9IChwMSwgcDIpID0+IChwMS54ICogcDIueSkgLSAocDEueSAqIHAyLngpO1xyXG5leHBvcnRzLmRldGVybWluYW50MiA9IGRldGVybWluYW50MjtcclxuY29uc3QgZXF1YWxzID0gKGEsIGIpID0+IGEueCA9PT0gYi54ICYmIGEueSA9PT0gYi55O1xyXG5leHBvcnRzLmVxdWFscyA9IGVxdWFscztcclxuY29uc3Qgc2NhbGUgPSAocDEsIGEpID0+ICh7IHg6IGEgKiBwMS54LCB5OiBhICogcDEueSB9KTtcclxuZXhwb3J0cy5zY2FsZSA9IHNjYWxlO1xyXG5jb25zdCBtdWx0aXBseSA9IChwMSwgcDIpID0+ICh7IHg6IHAyLnggKiBwMS54LCB5OiBwMi55ICogcDEueSB9KTtcclxuZXhwb3J0cy5tdWx0aXBseSA9IG11bHRpcGx5O1xyXG5jb25zdCBkaXZpZGUgPSAocDEsIHAyKSA9PiAoeyB4OiBwMS54IC8gcDIueCwgeTogcDEueSAvIHAyLnkgfSk7XHJcbmV4cG9ydHMuZGl2aWRlID0gZGl2aWRlO1xyXG5jb25zdCBhZGQgPSAocDEsIHAyKSA9PiAoeyB4OiBwMS54ICsgcDIueCwgeTogcDEueSArIHAyLnkgfSk7XHJcbmV4cG9ydHMuYWRkID0gYWRkO1xyXG5jb25zdCBhZGRzID0gKHAxLCBhKSA9PiAoeyB4OiBwMS54ICsgYSwgeTogcDEueSArIGEgfSk7XHJcbmV4cG9ydHMuYWRkcyA9IGFkZHM7XHJcbmNvbnN0IHN1YiA9IChwMSwgcDIpID0+ICh7IHg6IHAxLnggLSBwMi54LCB5OiBwMS55IC0gcDIueSB9KTtcclxuZXhwb3J0cy5zdWIgPSBzdWI7XHJcbmNvbnN0IGZsb29yID0gKHAxKSA9PiAoeyB4OiBNYXRoLmZsb29yKHAxLngpLCB5OiBNYXRoLmZsb29yKHAxLnkpIH0pO1xyXG5leHBvcnRzLmZsb29yID0gZmxvb3I7XHJcbmNvbnN0IGNlaWwgPSAocDEpID0+ICh7IHg6IE1hdGguY2VpbChwMS54KSwgeTogTWF0aC5jZWlsKHAxLnkpIH0pO1xyXG5leHBvcnRzLmNlaWwgPSBjZWlsO1xyXG5jb25zdCBhYnMgPSAocDEpID0+ICh7IHg6IE1hdGguYWJzKHAxLngpLCB5OiBNYXRoLmFicyhwMS55KSB9KTtcclxuZXhwb3J0cy5hYnMgPSBhYnM7XHJcbmNvbnN0IHNpZ24gPSAocDEpID0+ICh7IHg6IE1hdGguc2lnbihwMS54KSwgeTogTWF0aC5zaWduKHAxLnkpIH0pO1xyXG5leHBvcnRzLnNpZ24gPSBzaWduO1xyXG5jb25zdCBkb3QgPSAocDEsIHAyKSA9PiBwMS54ICogcDIueCArIHAxLnkgKiBwMi55O1xyXG5leHBvcnRzLmRvdCA9IGRvdDtcclxuY29uc3QgZXF1YWwgPSAocDEsIHAyKSA9PiBwMS54ID09IHAyLnggJiYgcDEueSA9PSBwMi55O1xyXG5leHBvcnRzLmVxdWFsID0gZXF1YWw7XHJcbmNvbnN0IGxlbmd0aCA9IChwMSkgPT4gTWF0aC5zcXJ0KHAxLnggKiBwMS54ICsgcDEueSAqIHAxLnkpO1xyXG5leHBvcnRzLmxlbmd0aCA9IGxlbmd0aDtcclxuY29uc3Qgbm9ybWFsaXplID0gKHAxKSA9PiBleHBvcnRzLnNjYWxlKHAxLCAxIC8gZXhwb3J0cy5sZW5ndGgocDEpKTtcclxuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XHJcbmNvbnN0IGxlcnAyID0gKGEsIGIsIHQpID0+ICh7IHg6IGNvbW1vbl8xLmxlcnAoYS54LCBiLngsIHQpLCB5OiBjb21tb25fMS5sZXJwKGEueSwgYi55LCB0KSB9KTtcclxuZXhwb3J0cy5sZXJwMiA9IGxlcnAyO1xyXG4vL3dhcm5pbmc6IG11dGF0ZXMgYVxyXG5jb25zdCB0b1ByZWNpc2lvbjIgPSAoYSwgYW1vdW50KSA9PiB7XHJcbiAgICBhLnggPSBwYXJzZUZsb2F0KGEueC50b1ByZWNpc2lvbihhbW91bnQpKTtcclxuICAgIGEueSA9IHBhcnNlRmxvYXQoYS55LnRvUHJlY2lzaW9uKGFtb3VudCkpO1xyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbmV4cG9ydHMudG9QcmVjaXNpb24yID0gdG9QcmVjaXNpb24yO1xyXG5jb25zdCBtaW4yID0gKG9iaiwgLi4ub2JqcykgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge1xyXG4gICAgICAgIHg6IG9iai54LFxyXG4gICAgICAgIHk6IG9iai55XHJcbiAgICB9O1xyXG4gICAgb2Jqcy5mb3JFYWNoKChvYmopID0+IHtcclxuICAgICAgICByZXN1bHQueCA9IE1hdGgubWluKHJlc3VsdC54LCBvYmoueCk7XHJcbiAgICAgICAgcmVzdWx0LnkgPSBNYXRoLm1pbihyZXN1bHQueSwgb2JqLnkpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5leHBvcnRzLm1pbjIgPSBtaW4yO1xyXG5jb25zdCBtYXgyID0gKG9iaiwgLi4ub2JqcykgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge1xyXG4gICAgICAgIHg6IG9iai54LFxyXG4gICAgICAgIHk6IG9iai55XHJcbiAgICB9O1xyXG4gICAgb2Jqcy5mb3JFYWNoKChvYmopID0+IHtcclxuICAgICAgICByZXN1bHQueCA9IE1hdGgubWF4KHJlc3VsdC54LCBvYmoueCk7XHJcbiAgICAgICAgcmVzdWx0LnkgPSBNYXRoLm1heChyZXN1bHQueSwgb2JqLnkpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5leHBvcnRzLm1heDIgPSBtYXgyO1xyXG5jb25zdCBhdmcgPSAoYXJyKSA9PiB7XHJcbiAgICBjb25zdCBzdW0gPSBhcnIucmVkdWNlKChhY2MsIGl0ZW0pID0+IHtcclxuICAgICAgICBhY2MueCArPSBpdGVtLng7XHJcbiAgICAgICAgYWNjLnkgKz0gaXRlbS55O1xyXG4gICAgICAgIHJldHVybiBhY2M7XHJcbiAgICB9LCB7IHg6IDAsIHk6IDAgfSk7XHJcbiAgICBzdW0ueCAvPSBhcnIubGVuZ3RoO1xyXG4gICAgc3VtLnkgLz0gYXJyLmxlbmd0aDtcclxuICAgIHJldHVybiBzdW07XHJcbn07XHJcbmV4cG9ydHMuYXZnID0gYXZnO1xyXG5jb25zdCBpblJhbmdlID0gKHAxLCBtaW4sIG1heCkgPT4ge1xyXG4gICAgcmV0dXJuICEocDEueCA+IG1heC54IHx8IHAxLnggPCBtaW4ueCB8fCBwMS55ID4gbWF4LnkgfHwgcDEueSA8IG1pbi55KTtcclxufTtcclxuZXhwb3J0cy5pblJhbmdlID0gaW5SYW5nZTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==