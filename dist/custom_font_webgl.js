"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[138],{89:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.aabb=void 0;const t=n(669);r.aabb=(...e)=>({min:(0,t.min2)(...e),max:(0,t.max2)(...e)})},943:function(e,r,n){var t=this&&this.__awaiter||function(e,r,n,t){return new(n||(n=Promise))((function(o,a){function s(e){try{c(t.next(e))}catch(e){a(e)}}function i(e){try{c(t.throw(e))}catch(e){a(e)}}function c(e){var r;e.done?o(e.value):(r=e.value,r instanceof n?r:new n((function(e){e(r)}))).then(s,i)}c((t=t.apply(e,r||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});const a=n(422),s=n(887),i=n(705),c=n(199),l=n(77),p=o(n(911)),v=o(n(618));let d,u,x,f,m,P,h,g,b,y,M;const A=s.vec3.fromValues(0,0,0),w=s.vec3.fromValues(20,20,1),S=s.mat4.create(),T=s.mat4.create(),_=s.mat4.create(),L=s.mat4.create(),E=s.mat4.create(),F=()=>{d.width=d.clientWidth,d.height=d.clientHeight,u.viewport(0,0,d.width,d.height),u.useProgram(h),u.uniform2fv(M,[d.width,d.height])},R=()=>{u.clear(u.COLOR_BUFFER_BIT),s.mat4.identity(S),s.mat4.scale(S,S,[1,-1,1]),s.mat4.translate(S,S,A),s.mat4.scale(S,S,w),s.mat4.translate(S,S,[-10,0,0]);const e=d.width/2,r=d.height/2;s.mat4.ortho(L,-e,e,-r,r,0,1e4),s.mat4.multiply(_,T,S),s.mat4.multiply(E,L,_),u.useProgram(h),u.uniformMatrix4fv(y,!1,E),u.drawArrays(u.TRIANGLES,0,x.length/2),requestAnimationFrame(R)};t(void 0,void 0,void 0,(function*(){const e=(yield(0,a.load)("./media/Timeless.ttf")).stringToGlyphs("Test");let r=0;const n=[],t=[],o=[];for(const a of e){const e=a.getPath(r,0,12),s=(0,i.pathToPoints)(e.toPathData(3),-.99);r+=a.advanceWidth/1e3*12;const l=(0,c.pointsToPolygons)(s);for(const e of l)for(const{p1:r,p2:a,p3:s}of e)n.push(r[0],r[1],a[0],a[1],s[0],s[1]),t.push(a[0],a[1],s[0],s[1],r[0],r[1]),o.push(s[0],s[1],r[0],r[1],a[0],a[1])}x=new Float32Array(n),f=new Float32Array(t),m=new Float32Array(o),(()=>{d=document.getElementById("canvas1"),u=d.getContext("webgl2",{antialias:!1,premultipliedAlpha:!1}),d.addEventListener("wheel",(e=>{e.preventDefault(),w[0]*=e.deltaY<0?2:.5,w[1]=w[0]})),(0,l.subscribeDrag)({elem:d,ondrag:e=>{A[0]+=e.x,A[1]+=e.y}}),P=u.createBuffer(),u.bindBuffer(u.ARRAY_BUFFER,P),u.bufferData(u.ARRAY_BUFFER,x,u.STATIC_DRAW),g=u.createBuffer(),u.bindBuffer(u.ARRAY_BUFFER,g),u.bufferData(u.ARRAY_BUFFER,f,u.STATIC_DRAW),b=u.createBuffer(),u.bindBuffer(u.ARRAY_BUFFER,b),u.bufferData(u.ARRAY_BUFFER,m,u.STATIC_DRAW);const e=u.createShader(u.VERTEX_SHADER);if(u.shaderSource(e,p.default),u.compileShader(e),""!==String(u.getShaderInfoLog(e)).trim())throw new Error(String(u.getShaderInfoLog(e)));const r=u.createShader(u.FRAGMENT_SHADER);if(u.shaderSource(r,v.default),u.compileShader(r),""!==String(u.getShaderInfoLog(r)).trim())throw new Error(String(u.getShaderInfoLog(r)));if(h=u.createProgram(),u.attachShader(h,e),u.attachShader(h,r),u.linkProgram(h),""!==String(u.getProgramInfoLog(h)).trim())throw new Error(String(u.getProgramInfoLog(h)));u.useProgram(h);const n=u.getAttribLocation(h,"pos");u.bindBuffer(u.ARRAY_BUFFER,P),u.vertexAttribPointer(n,2,u.FLOAT,!1,0,0),u.enableVertexAttribArray(n);const t=u.getAttribLocation(h,"prevPos");u.bindBuffer(u.ARRAY_BUFFER,b),u.vertexAttribPointer(t,2,u.FLOAT,!1,0,0),u.enableVertexAttribArray(t);const o=u.getAttribLocation(h,"nextPos");u.bindBuffer(u.ARRAY_BUFFER,g),u.vertexAttribPointer(o,2,u.FLOAT,!1,0,0),u.enableVertexAttribArray(o),M=u.getUniformLocation(h,"screenSize"),y=u.getUniformLocation(h,"modelViewProjection"),u.clearColor(0,0,0,0),u.enable(u.BLEND),u.blendFunc(u.ONE,u.ONE)})(),window.onresize=F,F(),R()}))},856:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.cubicBezierToPoints=void 0;const t=n(887),o=n(345),a=n(669);r.cubicBezierToPoints=(e,r)=>{const n=[t.vec2.clone(e.p1),t.vec2.clone(e.p4)],s=(e,t,i,c,l=!1)=>{const p=(0,o.lerp)(t,i,.5),v=(0,a.lerp2)(e.p2,e.p3,p),d=(0,a.lerp2)((0,a.lerp2)((0,a.lerp2)(e.p1,e.p2,p),v,p),(0,a.lerp2)(v,(0,a.lerp2)(e.p3,e.p4,p),p),p),u=n[c-1],x=n[c];n.splice(c,0,d),((0,a.dot)((0,a.normalize)((0,a.sub)(u,d)),(0,a.normalize)((0,a.sub)(x,d)))>r||l)&&(s(e,p,i,c+1),s(e,t,p,c))};return s(e,0,1,1,!0),n}},705:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pathToPoints=void 0;const t=n(887),o=n(856),a=n(354),s=/(?=[astvzqmhlc])/gi,i=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;r.pathToPoints=(e,r)=>{const n=e.split(s),c=[];if(n.length){let e=[];const s=t.vec2.create();for(;n.length;){const l=n.shift();if(!(null==l?void 0:l.length))continue;const p=l.substring(1).match(i)||[],v=l[0],d=v.toLowerCase(),u=v===d;switch(d){case"l":case"m":for(;p.length;){const r=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));u&&t.vec2.add(r,r,s),e.push(r),t.vec2.copy(s,r)}break;case"h":for(;p.length;){let r=parseFloat(p.shift());u&&(r+=s[0]),e.push(t.vec2.fromValues(r,s[1])),s[0]=r}break;case"v":for(;p.length;){let r=parseFloat(p.shift());u&&(r+=s[1]),e.push(t.vec2.fromValues(s[0],r)),s[1]=r}break;case"z":{const r=e[0];e.push(t.vec2.clone(r)),c.push(e),e=[],t.vec2.zero(s);break}case"c":for(;p.length;){const n=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),a=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),i=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));u&&(t.vec2.add(n,n,s),t.vec2.add(a,a,s),t.vec2.add(i,i,s)),e.push(...(0,o.cubicBezierToPoints)({p1:s,p2:n,p3:a,p4:i},r)),t.vec2.copy(s,i)}break;case"q":for(;p.length;){const n=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),o=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));u&&(t.vec2.add(n,n,s),t.vec2.add(o,o,s)),e.push(...(0,a.quadraticBezierToPoints)({p1:s,p2:n,p3:o},r)),t.vec2.copy(s,o)}break;case"s":case"t":case"a":console.log(d+" is not implemented")}}e.length&&c.push(e)}return c}},199:function(e,r,n){var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.pointsToPolygons=void 0;const o=t(n(187)),a=n(89),s=n(669),i=n(923);r.pointsToPolygons=e=>{const r=e.map((e=>({points:e,aabb:(0,a.aabb)(...e),area:(0,i.polygonAreaSigned)(e),children:[]})));r.sort(((e,r)=>Math.abs(r.area)-Math.abs(e.area)));const n=[];for(let e=0;e<r.length;++e){let t=null;for(let n=e-1;n>=0;--n)if((0,s.inside)(r[n].points,r[e].points[0])&&r[e].area*r[n].area<0){t=r[n];break}t?t.children.push(r[e]):n.push(r[e])}const t=[];let c=[];const l=e=>{const r=[],n=[],t=[];e.points.forEach((e=>{r.push(...e),t.push(e)})),e.children.forEach((e=>{e.children.forEach(l),n.push(r.length/2),e.points.forEach((e=>{r.push(...e),t.push(e)}))}));const a=(0,o.default)(r,n);for(let e=0;e<a.length;e+=3){const r=t[a[e+0]],n=t[a[e+1]],o=t[a[e+2]];c.push({p1:r,p2:n,p3:o,e1:(0,s.sub)(n,r),e2:(0,s.sub)(o,n),e3:(0,s.sub)(r,o),points:[r,n,o],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}};return n.forEach((e=>{l(e),t.push(c),c=[]})),t}},923:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.polygonArea=r.polygonAreaSigned=void 0;const t=n(669);r.polygonAreaSigned=e=>{if(!e.length)return 0;const r=e.length-1;let n=0;for(let o=0;o<r;o++)n+=(0,t.determinant2)(e[o],e[o+1]);return n+=(0,t.determinant2)(e[r],e[0]),n/2},r.polygonArea=e=>Math.abs((0,r.polygonAreaSigned)(e))},354:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.quadraticBezierToPoints=void 0;const t=n(887),o=n(345),a=n(669);r.quadraticBezierToPoints=(e,r)=>{const n=[t.vec2.clone(e.p1),t.vec2.clone(e.p3)],s=(e,t,i,c)=>{const l=(0,o.lerp)(t,i,.5),p=(0,a.lerp2)((0,a.lerp2)(e.p1,e.p2,l),(0,a.lerp2)(e.p2,e.p3,l),l),v=n[c-1],d=n[c];n.splice(c,0,p),(0,a.dot)((0,a.normalize)((0,a.sub)(v,p)),(0,a.normalize)((0,a.sub)(d,p)))>r&&(s(e,l,i,c+1),s(e,t,l,c))};return s(e,0,1,1),n}},345:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.lerp=r.timeAtPos=r.clamp=r.fract=r.negFract=r.EPSILON=void 0,r.EPSILON=1e-6,r.negFract=e=>1-e+Math.floor(e),r.fract=e=>e-Math.floor(e),r.clamp=(e,r,n)=>Math.max(Math.min(e,n),r),r.timeAtPos=(e,n,t)=>n?(0,r.clamp)((t-e)/n,0,1):0,r.lerp=(e,r,n)=>e*(1-n)+r*n},669:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.inside=r.inRange=r.avg=r.max2=r.min2=r.toPrecision2=r.lerp2=r.normalize=r.length=r.dot=r.sign=r.abs=r.ceil=r.floor=r.sub=r.adds=r.add=r.divide=r.multiply=r.scale=r.equals=r.determinant2=r.clamp2=void 0;const t=n(887),o=n(345);r.clamp2=(e,r,n)=>{const o=t.vec2.clone(e);return t.vec2.min(o,o,n),t.vec2.max(o,o,r),o},r.determinant2=(e,r)=>e[0]*r[1]-e[1]*r[0],r.equals=t.vec2.equals,r.scale=(e,r)=>t.vec2.scale(t.vec2.create(),e,r),r.multiply=(e,r)=>t.vec2.multiply(t.vec2.create(),e,r),r.divide=(e,r)=>t.vec2.divide(t.vec2.create(),e,r),r.add=(e,r)=>t.vec2.add(t.vec2.create(),e,r),r.adds=(e,r)=>t.vec2.fromValues(e[0]+r,e[1]+r),r.sub=(e,r)=>t.vec2.sub(t.vec2.create(),e,r),r.floor=e=>t.vec2.floor(t.vec2.create(),e),r.ceil=e=>t.vec2.ceil(t.vec2.create(),e),r.abs=e=>t.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),r.sign=e=>t.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),r.dot=(e,r)=>t.vec2.dot(e,r),r.length=e=>t.vec2.length(e),r.normalize=e=>(0,r.scale)(e,1/(0,r.length)(e)),r.lerp2=(e,r,n)=>t.vec2.lerp(t.vec2.create(),e,r,n),r.toPrecision2=(e,r)=>(e[0]=parseFloat(e[0].toPrecision(r)),e[1]=parseFloat(e[1].toPrecision(r)),e),r.min2=(...e)=>{const[r,...n]=e,o=t.vec2.clone(r);return n.forEach((e=>{t.vec2.min(o,o,e)})),o},r.max2=(...e)=>{const[r,...n]=e,o=t.vec2.clone(r);return n.forEach((e=>{t.vec2.max(o,o,e)})),o},r.avg=(...e)=>{const r=t.vec2.create();return e.length&&(e.forEach((e=>{t.vec2.add(r,r,e)})),t.vec2.scale(r,r,1/e.length)),r},r.inRange=(e,r,n)=>!(e[0]>n[0]||e[0]<r[0]||e[1]>n[1]||e[1]<r[1]),r.inside=(e,r)=>{let n=0,t=e[e.length-1];return e.forEach((e=>{const a=t[1]<e[1]?t:e,s=t[1]<e[1]?e:t;a[1]<r[1]+o.EPSILON&&s[1]>r[1]+o.EPSILON&&(s[0]-a[0])*(r[1]-a[1])>(r[0]-a[0])*(s[1]-a[1])&&(n+=1),t=e})),n%2!=0}},77:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.subscribeDrag=void 0,r.subscribeDrag=e=>{const r={x:0,y:0},n={x:0,y:0},t=t=>{var o;r.x=t.pageX-n.x,r.y=t.pageY-n.y,null===(o=e.ondrag)||void 0===o||o.call(e,r,t),n.x=t.pageX,n.y=t.pageY},o=r=>{var n;window.removeEventListener("mousemove",t),window.removeEventListener("mouseup",o),window.removeEventListener("mouseleave",o),null===(n=e.ondragend)||void 0===n||n.call(e,r)},a=r=>{var a;n.x=r.pageX,n.y=r.pageY,window.addEventListener("mousemove",t),window.addEventListener("mouseup",o),window.addEventListener("mouseleave",o),null===(a=e.ondragstart)||void 0===a||a.call(e,r)};return e.elem.addEventListener("mousedown",a),()=>{e.elem.removeEventListener("mousedown",a)}}},618:e=>{e.exports="#version 300 es\r\n\r\nprecision highp float;\r\n\r\nflat in vec4 bounds;\r\nflat in vec2 vPrevPos;\r\nflat in vec2 vPos;\r\nflat in vec2 vNextPos;\r\nflat in vec2 e1;\r\nflat in vec2 e2;\r\nflat in vec2 e3;\r\n\r\nout vec4 outColor;\r\n\r\nconst float EPSILON = 0.000001;\r\n\r\nvec4 sort(vec4 val) {\r\n  float a = min(val.x, val.y);\r\n  float b = max(val.x, val.y);\r\n  float c = min(val.z, val.w);\r\n  float d = max(val.z, val.w);\r\n\r\n  float h = max(a, min(b, c));\r\n  float i = min(d, max(b, c));\r\n\r\n  return vec4(min(a, c), min(h, i), max(h, i), max(b, d));\r\n}\r\n\r\nfloat det2(vec2 p1, vec2 p2) {\r\n  return (p1.x * p2.y) - (p1.y * p2.x);\r\n}\r\n\r\nfloat timeAtPos(float startPos, float dir, float newPos) {\r\n  if (abs(dir) < EPSILON) {\r\n      return 0.0;\r\n  }\r\n\r\n  return clamp((newPos - startPos) / dir, 0.0, 1.0);\r\n}\r\n\r\nbool squareContainedInTriangle(vec2 minPos, vec2 maxPos, vec2 p1, vec2 p2, vec2 p3) {\r\n    vec2 a = p2 - p1;\r\n    vec2 b = p3 - p1;\r\n    float denom = det2(a, b);\r\n\r\n    vec2 c = minPos - p1;\r\n    float s = det2(c, b) / denom;   \r\n    float t = -det2(c, a) / denom;\r\n    \r\n    if (s < 0.0 || t < 0.0 || (s+t) > 1.0) {\r\n        return false;\r\n    }\r\n\r\n    c = maxPos - p1;\r\n    s = det2(c, b) / denom;   \r\n    t = -det2(c, a) / denom;\r\n    \r\n    if (s < 0.0 || t < 0.0 || (s+t) > 1.0) {\r\n        return false;\r\n    }\r\n    \r\n    c = vec2(maxPos.x, minPos.y) - p1;\r\n    s = det2(c, b) / denom;   \r\n    t = -det2(c, a) / denom;\r\n    \r\n    if (s < 0.0 || t < 0.0 || (s+t) > 1.0) {\r\n        return false;\r\n    }\r\n\r\n    c = vec2(minPos.x, maxPos.y) - p1;\r\n    s = det2(c, b) / denom;   \r\n    t = -det2(c, a) / denom;\r\n    \r\n    if (s < 0.0 || t < 0.0 || (s+t) > 1.0) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nvoid main(void) {\r\n  vec2 pixelMin = floor(gl_FragCoord.xy);\r\n  vec2 pixelMax = pixelMin + 1.0;\r\n\r\n  if (\r\n      (vPos.x < pixelMin.x && vPrevPos.x < pixelMin.x && vNextPos.x < pixelMin.x) ||\r\n      (vPos.x > pixelMax.x && vPrevPos.x > pixelMax.x && vNextPos.x > pixelMax.x) ||\r\n      (vPos.y < pixelMin.y && vPrevPos.y < pixelMin.y && vNextPos.y < pixelMin.y) ||\r\n      (vPos.y > pixelMax.y && vPrevPos.y > pixelMax.y && vNextPos.y > pixelMax.y)\r\n  ) {\r\n      discard;\r\n  }\r\n\r\n  //remove conservative rasterisation overdraw\r\n  if (pixelMax.x < bounds.x || pixelMax.y < bounds.y || pixelMin.x > bounds.z || pixelMin.y > bounds.w) {\r\n      discard;\r\n  }\r\n\r\n  float alphaAmount = 1.0;\r\n\r\n  //check if the pixel is fully enclosed\r\n  if (!squareContainedInTriangle(pixelMin, pixelMax, vPrevPos, vPos, vNextPos)) {\r\n    //intersect the triangle with the pixel bounds\r\n    vec4 firstLineTs = sort(vec4(\r\n        timeAtPos(vPrevPos.x, e1.x, pixelMin.x),\r\n        timeAtPos(vPrevPos.x, e1.x, pixelMax.x),\r\n        timeAtPos(vPrevPos.y, e1.y, pixelMin.y),\r\n        timeAtPos(vPrevPos.y, e1.y, pixelMax.y)\r\n    ));\r\n\r\n    vec2 p1 = clamp(vPrevPos + e1 * firstLineTs.x, pixelMin, pixelMax);\r\n    vec2 p2 = clamp(vPrevPos + e1 * firstLineTs.y, pixelMin, pixelMax);\r\n    vec2 p3 = clamp(vPrevPos + e1 * firstLineTs.z, pixelMin, pixelMax);\r\n    vec2 p4 = clamp(vPrevPos + e1 * firstLineTs.w, pixelMin, pixelMax);\r\n\r\n    vec4 secondLineTs = sort(vec4(\r\n        timeAtPos(vPos.x, e2.x, pixelMin.x),\r\n        timeAtPos(vPos.x, e2.x, pixelMax.x),\r\n        timeAtPos(vPos.y, e2.y, pixelMin.y),\r\n        timeAtPos(vPos.y, e2.y, pixelMax.y)\r\n    ));\r\n\r\n    vec2 p5 = clamp(vPos + e2 * secondLineTs.x, pixelMin, pixelMax);\r\n    vec2 p6 = clamp(vPos + e2 * secondLineTs.y, pixelMin, pixelMax);\r\n    vec2 p7 = clamp(vPos + e2 * secondLineTs.z, pixelMin, pixelMax);\r\n    vec2 p8 = clamp(vPos + e2 * secondLineTs.w, pixelMin, pixelMax);\r\n    \r\n    vec4 thirdLineTs = sort(vec4(\r\n        timeAtPos(vNextPos.x, e3.x, pixelMin.x),\r\n        timeAtPos(vNextPos.x, e3.x, pixelMax.x),\r\n        timeAtPos(vNextPos.y, e3.y, pixelMin.y),\r\n        timeAtPos(vNextPos.y, e3.y, pixelMax.y)\r\n    ));\r\n\r\n    vec2 p9  = clamp(vNextPos + e3 * thirdLineTs.x, pixelMin, pixelMax);\r\n    vec2 p10 = clamp(vNextPos + e3 * thirdLineTs.y, pixelMin, pixelMax);\r\n    vec2 p11 = clamp(vNextPos + e3 * thirdLineTs.z, pixelMin, pixelMax);\r\n    vec2 p12 = clamp(vNextPos + e3 * thirdLineTs.w, pixelMin, pixelMax);\r\n\r\n\r\n    //compute the area under the formed polygon\r\n    float polygonArea = abs((\r\n        det2(p1, p2) + det2(p2, p3) + det2(p3, p4) + det2(p4, p5) +\r\n        det2(p5, p6) + det2(p6, p7) + det2(p7, p8) + det2(p8, p9) + \r\n        det2(p9, p10) + det2(p10, p11) + det2(p11, p12) + det2(p12, p1)\r\n    ) / 2.0);\r\n\r\n    alphaAmount = clamp(polygonArea, 0.0, 1.0);\r\n  }\r\n\r\n  outColor = vec4(1.0, 0.0, 0.0, alphaAmount);\r\n}\r\n"},911:e=>{e.exports="#version 300 es\r\n\r\nuniform vec2 screenSize;\r\nuniform mat4 modelViewProjection;\r\n\r\nin vec2 pos;\r\nin vec2 prevPos;\r\nin vec2 nextPos;\r\n\r\nflat out vec4 bounds;\r\nflat out vec2 vPrevPos;\r\nflat out vec2 vPos;\r\nflat out vec2 vNextPos;\r\nflat out vec2 e1;\r\nflat out vec2 e2;\r\nflat out vec2 e3;\r\n\r\nconst float EPSILON = 0.000001;\r\n\r\nvec2 posToClipSpace(vec2 pos) {\r\n    vec4 proj_pos = modelViewProjection * vec4(pos, 0.0, 1.0);\r\n    return proj_pos.xy / proj_pos.w;\r\n}\r\n\r\nvec2 clipToScreenSpace(vec2 pos) {\r\n    return (screenSize.xy * (pos + 1.0)) / 2.0;\r\n}\r\n\r\nvec2 screenSpaceToClipSpace(vec2 pos) {\r\n    return (pos * 2.0 / screenSize.xy) - 1.0;\r\n}\r\n\r\nconst float diagonalOffset = sqrt(2.0) / 2.0;\r\n\r\nvoid main(void) {\r\n    vec2 clipPos = posToClipSpace(pos);\r\n    vec2 clipNextPos = posToClipSpace(nextPos);\r\n    vec2 clipPrevPos = posToClipSpace(prevPos);\r\n\r\n    vec2 screenPos = clipToScreenSpace(clipPos);\r\n    vec2 screenNextPos = clipToScreenSpace(clipNextPos);\r\n    vec2 screenPrevPos = clipToScreenSpace(clipPrevPos);\r\n\r\n    // determine a new vertex position such that it covers the neighbour pixel centers\r\n    vec2 a = normalize(screenPrevPos - screenPos);\r\n    vec2 b = normalize(screenNextPos - screenPos);\r\n    float angle = sqrt((1.0 - dot(a, b)) / 2.0);\r\n\r\n    vec2 vecPos = clipPos;\r\n    if (abs(angle) > EPSILON) {\r\n        vecPos = screenSpaceToClipSpace(screenPos - normalize(a + b) * diagonalOffset / angle);\r\n    }\r\n\r\n    bounds = vec4(\r\n        min(min(screenPos, screenNextPos), screenPrevPos) - 0.5,\r\n        max(max(screenPos, screenNextPos), screenPrevPos) + 0.5\r\n    );\r\n    \r\n    vPrevPos = screenPrevPos;\r\n    vPos = screenPos;\r\n    vNextPos = screenNextPos;\r\n    e1 = vPos - vPrevPos;\r\n    e2 = vNextPos - vPos;\r\n    e3 = vPrevPos - vNextPos;\r\n    \r\n    gl_Position = vec4(vecPos, 0.0, 1.0);\r\n}\r\n"}},e=>{e(e.s=943)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,