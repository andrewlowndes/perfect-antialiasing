/*! For license information please see custom_font_webgl.js.LICENSE.txt */
(()=>{var e={187:e=>{"use strict";function t(e,t,o){o=o||2;var s,i,u,c,h,d,v,g=t&&t.length,y=g?t[0]*o:e.length,m=r(e,0,y,o,!0),x=[];if(!m||m.next===m.prev)return x;if(g&&(m=function(e,t,a,o){var s,i,u,c=[];for(s=0,i=t.length;s<i;s++)(u=r(e,t[s]*o,s<i-1?t[s+1]*o:e.length,o,!1))===u.next&&(u.steiner=!0),c.push(f(u));for(c.sort(l),s=0;s<c.length;s++)p(c[s],a),a=n(a,a.next);return a}(e,t,m,o)),e.length>80*o){s=u=e[0],i=c=e[1];for(var b=o;b<y;b+=o)(h=e[b])<s&&(s=h),(d=e[b+1])<i&&(i=d),h>u&&(u=h),d>c&&(c=d);v=0!==(v=Math.max(u-s,c-i))?1/v:0}return a(m,x,o,s,i,v),x}function r(e,t,r,n,a){var o,s;if(a===E(e,t,r,n)>0)for(o=t;o<r;o+=n)s=U(o,e[o],e[o+1],s);else for(o=r-n;o>=t;o-=n)s=U(o,e[o],e[o+1],s);return s&&y(s,s.next)&&(k(s),s=s.next),s}function n(e,t){if(!e)return e;t||(t=e);var r,n=e;do{if(r=!1,n.steiner||!y(n,n.next)&&0!==g(n.prev,n,n.next))n=n.next;else{if(k(n),(n=t=n.prev)===n.next)break;r=!0}}while(r||n!==t);return t}function a(e,t,r,l,p,c,f){if(e){!f&&c&&function(e,t,r,n){var a=e;do{null===a.z&&(a.z=h(a.x,a.y,t,r,n)),a.prevZ=a.prev,a.nextZ=a.next,a=a.next}while(a!==e);a.prevZ.nextZ=null,a.prevZ=null,function(e){var t,r,n,a,o,s,i,u,l=1;do{for(r=e,e=null,o=null,s=0;r;){for(s++,n=r,i=0,t=0;t<l&&(i++,n=n.nextZ);t++);for(u=l;i>0||u>0&&n;)0!==i&&(0===u||!n||r.z<=n.z)?(a=r,r=r.nextZ,i--):(a=n,n=n.nextZ,u--),o?o.nextZ=a:e=a,a.prevZ=o,o=a;r=n}o.nextZ=null,l*=2}while(s>1)}(a)}(e,l,p,c);for(var d,v,g=e;e.prev!==e.next;)if(d=e.prev,v=e.next,c?s(e,l,p,c):o(e))t.push(d.i/r),t.push(e.i/r),t.push(v.i/r),k(e),e=v.next,g=v.next;else if((e=v)===g){f?1===f?a(e=i(n(e),t,r),t,r,l,p,c,2):2===f&&u(e,t,r,l,p,c):a(n(e),t,r,l,p,c,1);break}}}function o(e){var t=e.prev,r=e,n=e.next;if(g(t,r,n)>=0)return!1;for(var a=e.next.next;a!==e.prev;){if(d(t.x,t.y,r.x,r.y,n.x,n.y,a.x,a.y)&&g(a.prev,a,a.next)>=0)return!1;a=a.next}return!0}function s(e,t,r,n){var a=e.prev,o=e,s=e.next;if(g(a,o,s)>=0)return!1;for(var i=a.x<o.x?a.x<s.x?a.x:s.x:o.x<s.x?o.x:s.x,u=a.y<o.y?a.y<s.y?a.y:s.y:o.y<s.y?o.y:s.y,l=a.x>o.x?a.x>s.x?a.x:s.x:o.x>s.x?o.x:s.x,p=a.y>o.y?a.y>s.y?a.y:s.y:o.y>s.y?o.y:s.y,c=h(i,u,t,r,n),f=h(l,p,t,r,n),v=e.prevZ,y=e.nextZ;v&&v.z>=c&&y&&y.z<=f;){if(v!==e.prev&&v!==e.next&&d(a.x,a.y,o.x,o.y,s.x,s.y,v.x,v.y)&&g(v.prev,v,v.next)>=0)return!1;if(v=v.prevZ,y!==e.prev&&y!==e.next&&d(a.x,a.y,o.x,o.y,s.x,s.y,y.x,y.y)&&g(y.prev,y,y.next)>=0)return!1;y=y.nextZ}for(;v&&v.z>=c;){if(v!==e.prev&&v!==e.next&&d(a.x,a.y,o.x,o.y,s.x,s.y,v.x,v.y)&&g(v.prev,v,v.next)>=0)return!1;v=v.prevZ}for(;y&&y.z<=f;){if(y!==e.prev&&y!==e.next&&d(a.x,a.y,o.x,o.y,s.x,s.y,y.x,y.y)&&g(y.prev,y,y.next)>=0)return!1;y=y.nextZ}return!0}function i(e,t,r){var a=e;do{var o=a.prev,s=a.next.next;!y(o,s)&&m(o,a,a.next,s)&&S(o,s)&&S(s,o)&&(t.push(o.i/r),t.push(a.i/r),t.push(s.i/r),k(a),k(a.next),a=e=s),a=a.next}while(a!==e);return n(a)}function u(e,t,r,o,s,i){var u=e;do{for(var l=u.next.next;l!==u.prev;){if(u.i!==l.i&&v(u,l)){var p=T(u,l);return u=n(u,u.next),p=n(p,p.next),a(u,t,r,o,s,i),void a(p,t,r,o,s,i)}l=l.next}u=u.next}while(u!==e)}function l(e,t){return e.x-t.x}function p(e,t){if(t=function(e,t){var r,n=t,a=e.x,o=e.y,s=-1/0;do{if(o<=n.y&&o>=n.next.y&&n.next.y!==n.y){var i=n.x+(o-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(i<=a&&i>s){if(s=i,i===a){if(o===n.y)return n;if(o===n.next.y)return n.next}r=n.x<n.next.x?n:n.next}}n=n.next}while(n!==t);if(!r)return null;if(a===s)return r;var u,l=r,p=r.x,h=r.y,f=1/0;n=r;do{a>=n.x&&n.x>=p&&a!==n.x&&d(o<h?a:s,o,p,h,o<h?s:a,o,n.x,n.y)&&(u=Math.abs(o-n.y)/(a-n.x),S(n,e)&&(u<f||u===f&&(n.x>r.x||n.x===r.x&&c(r,n)))&&(r=n,f=u)),n=n.next}while(n!==l);return r}(e,t)){var r=T(t,e);n(t,t.next),n(r,r.next)}}function c(e,t){return g(e.prev,e,t.prev)<0&&g(t.next,e,e.next)<0}function h(e,t,r,n,a){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-r)*a)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*a)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function f(e){var t=e,r=e;do{(t.x<r.x||t.x===r.x&&t.y<r.y)&&(r=t),t=t.next}while(t!==e);return r}function d(e,t,r,n,a,o,s,i){return(a-s)*(t-i)-(e-s)*(o-i)>=0&&(e-s)*(n-i)-(r-s)*(t-i)>=0&&(r-s)*(o-i)-(a-s)*(n-i)>=0}function v(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var r=e;do{if(r.i!==e.i&&r.next.i!==e.i&&r.i!==t.i&&r.next.i!==t.i&&m(r,r.next,e,t))return!0;r=r.next}while(r!==e);return!1}(e,t)&&(S(e,t)&&S(t,e)&&function(e,t){var r=e,n=!1,a=(e.x+t.x)/2,o=(e.y+t.y)/2;do{r.y>o!=r.next.y>o&&r.next.y!==r.y&&a<(r.next.x-r.x)*(o-r.y)/(r.next.y-r.y)+r.x&&(n=!n),r=r.next}while(r!==e);return n}(e,t)&&(g(e.prev,e,t.prev)||g(e,t.prev,t))||y(e,t)&&g(e.prev,e,e.next)>0&&g(t.prev,t,t.next)>0)}function g(e,t,r){return(t.y-e.y)*(r.x-t.x)-(t.x-e.x)*(r.y-t.y)}function y(e,t){return e.x===t.x&&e.y===t.y}function m(e,t,r,n){var a=b(g(e,t,r)),o=b(g(e,t,n)),s=b(g(r,n,e)),i=b(g(r,n,t));return a!==o&&s!==i||!(0!==a||!x(e,r,t))||!(0!==o||!x(e,n,t))||!(0!==s||!x(r,e,n))||!(0!==i||!x(r,t,n))}function x(e,t,r){return t.x<=Math.max(e.x,r.x)&&t.x>=Math.min(e.x,r.x)&&t.y<=Math.max(e.y,r.y)&&t.y>=Math.min(e.y,r.y)}function b(e){return e>0?1:e<0?-1:0}function S(e,t){return g(e.prev,e,e.next)<0?g(e,t,e.next)>=0&&g(e,e.prev,t)>=0:g(e,t,e.prev)<0||g(e,e.next,t)<0}function T(e,t){var r=new O(e.i,e.x,e.y),n=new O(t.i,t.x,t.y),a=e.next,o=t.prev;return e.next=t,t.prev=e,r.next=a,a.prev=r,n.next=r,r.prev=n,o.next=n,n.prev=o,n}function U(e,t,r,n){var a=new O(e,t,r);return n?(a.next=n.next,a.prev=n,n.next.prev=a,n.next=a):(a.prev=a,a.next=a),a}function k(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function O(e,t,r){this.i=e,this.x=t,this.y=r,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function E(e,t,r,n){for(var a=0,o=t,s=r-n;o<r;o+=n)a+=(e[s]-e[o])*(e[o+1]+e[s+1]),s=o;return a}e.exports=t,e.exports.default=t,t.deviation=function(e,t,r,n){var a=t&&t.length,o=a?t[0]*r:e.length,s=Math.abs(E(e,0,o,r));if(a)for(var i=0,u=t.length;i<u;i++){var l=t[i]*r,p=i<u-1?t[i+1]*r:e.length;s-=Math.abs(E(e,l,p,r))}var c=0;for(i=0;i<n.length;i+=3){var h=n[i]*r,f=n[i+1]*r,d=n[i+2]*r;c+=Math.abs((e[h]-e[d])*(e[f+1]-e[h+1])-(e[h]-e[f])*(e[d+1]-e[h+1]))}return 0===s&&0===c?0:Math.abs((c-s)/s)},t.flatten=function(e){for(var t=e[0][0].length,r={vertices:[],holes:[],dimensions:t},n=0,a=0;a<e.length;a++){for(var o=0;o<e[a].length;o++)for(var s=0;s<t;s++)r.vertices.push(e[a][o][s]);a>0&&(n+=e[a-1].length,r.holes.push(n))}return r}},422:(e,t,r)=>{"use strict";var n,a;function o(){this.table=new Uint16Array(16),this.trans=new Uint16Array(288)}function s(e,t){this.source=e,this.sourceIndex=0,this.tag=0,this.bitcount=0,this.dest=t,this.destLen=0,this.ltree=new o,this.dtree=new o}r.r(t),r.d(t,{default:()=>Gn,BoundingBox:()=>E,Font:()=>kn,Glyph:()=>xe,Path:()=>R,_parse:()=>se,load:()=>Bn,loadSync:()=>Nn,parse:()=>Fn}),String.prototype.codePointAt||(a=function(e){if(null==this)throw TypeError();var t=String(this),r=t.length,n=e?Number(e):0;if(n!=n&&(n=0),!(n<0||n>=r)){var a,o=t.charCodeAt(n);return o>=55296&&o<=56319&&r>n+1&&(a=t.charCodeAt(n+1))>=56320&&a<=57343?1024*(o-55296)+a-56320+65536:o}},(n=function(){try{var e={},t=Object.defineProperty,r=t(e,e,e)&&t}catch(e){}return r}())?n(String.prototype,"codePointAt",{value:a,configurable:!0,writable:!0}):String.prototype.codePointAt=a);var i=new o,u=new o,l=new Uint8Array(30),p=new Uint16Array(30),c=new Uint8Array(30),h=new Uint16Array(30),f=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),d=new o,v=new Uint8Array(320);function g(e,t,r,n){var a,o;for(a=0;a<r;++a)e[a]=0;for(a=0;a<30-r;++a)e[a+r]=a/r|0;for(o=n,a=0;a<30;++a)t[a]=o,o+=1<<e[a]}var y=new Uint16Array(16);function m(e,t,r,n){var a,o;for(a=0;a<16;++a)e.table[a]=0;for(a=0;a<n;++a)e.table[t[r+a]]++;for(e.table[0]=0,o=0,a=0;a<16;++a)y[a]=o,o+=e.table[a];for(a=0;a<n;++a)t[r+a]&&(e.trans[y[t[r+a]]++]=a)}function x(e){e.bitcount--||(e.tag=e.source[e.sourceIndex++],e.bitcount=7);var t=1&e.tag;return e.tag>>>=1,t}function b(e,t,r){if(!t)return r;for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;var n=e.tag&65535>>>16-t;return e.tag>>>=t,e.bitcount-=t,n+r}function S(e,t){for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;var r=0,n=0,a=0,o=e.tag;do{n=2*n+(1&o),o>>>=1,++a,r+=t.table[a],n-=t.table[a]}while(n>=0);return e.tag=o,e.bitcount-=a,t.trans[r+n]}function T(e,t,r){var n,a,o,s,i,u;for(n=b(e,5,257),a=b(e,5,1),o=b(e,4,4),s=0;s<19;++s)v[s]=0;for(s=0;s<o;++s){var l=b(e,3,0);v[f[s]]=l}for(m(d,v,0,19),i=0;i<n+a;){var p=S(e,d);switch(p){case 16:var c=v[i-1];for(u=b(e,2,3);u;--u)v[i++]=c;break;case 17:for(u=b(e,3,3);u;--u)v[i++]=0;break;case 18:for(u=b(e,7,11);u;--u)v[i++]=0;break;default:v[i++]=p}}m(t,v,0,n),m(r,v,n,a)}function U(e,t,r){for(;;){var n,a,o,s,i=S(e,t);if(256===i)return 0;if(i<256)e.dest[e.destLen++]=i;else for(n=b(e,l[i-=257],p[i]),a=S(e,r),s=o=e.destLen-b(e,c[a],h[a]);s<o+n;++s)e.dest[e.destLen++]=e.dest[s]}}function k(e){for(var t,r;e.bitcount>8;)e.sourceIndex--,e.bitcount-=8;if((t=256*(t=e.source[e.sourceIndex+1])+e.source[e.sourceIndex])!==(65535&~(256*e.source[e.sourceIndex+3]+e.source[e.sourceIndex+2])))return-3;for(e.sourceIndex+=4,r=t;r;--r)e.dest[e.destLen++]=e.source[e.sourceIndex++];return e.bitcount=0,0}!function(e,t){var r;for(r=0;r<7;++r)e.table[r]=0;for(e.table[7]=24,e.table[8]=152,e.table[9]=112,r=0;r<24;++r)e.trans[r]=256+r;for(r=0;r<144;++r)e.trans[24+r]=r;for(r=0;r<8;++r)e.trans[168+r]=280+r;for(r=0;r<112;++r)e.trans[176+r]=144+r;for(r=0;r<5;++r)t.table[r]=0;for(t.table[5]=32,r=0;r<32;++r)t.trans[r]=r}(i,u),g(l,p,4,3),g(c,h,2,1),l[28]=0,p[28]=258;function O(e,t,r,n,a){return Math.pow(1-a,3)*e+3*Math.pow(1-a,2)*a*t+3*(1-a)*Math.pow(a,2)*r+Math.pow(a,3)*n}function E(){this.x1=Number.NaN,this.y1=Number.NaN,this.x2=Number.NaN,this.y2=Number.NaN}function R(){this.commands=[],this.fill="black",this.stroke=null,this.strokeWidth=1}function w(e){throw new Error(e)}function L(e,t){e||w(t)}E.prototype.isEmpty=function(){return isNaN(this.x1)||isNaN(this.y1)||isNaN(this.x2)||isNaN(this.y2)},E.prototype.addPoint=function(e,t){"number"==typeof e&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=e,this.x2=e),e<this.x1&&(this.x1=e),e>this.x2&&(this.x2=e)),"number"==typeof t&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=t,this.y2=t),t<this.y1&&(this.y1=t),t>this.y2&&(this.y2=t))},E.prototype.addX=function(e){this.addPoint(e,null)},E.prototype.addY=function(e){this.addPoint(null,e)},E.prototype.addBezier=function(e,t,r,n,a,o,s,i){var u=[e,t],l=[r,n],p=[a,o],c=[s,i];this.addPoint(e,t),this.addPoint(s,i);for(var h=0;h<=1;h++){var f=6*u[h]-12*l[h]+6*p[h],d=-3*u[h]+9*l[h]-9*p[h]+3*c[h],v=3*l[h]-3*u[h];if(0!==d){var g=Math.pow(f,2)-4*v*d;if(!(g<0)){var y=(-f+Math.sqrt(g))/(2*d);0<y&&y<1&&(0===h&&this.addX(O(u[h],l[h],p[h],c[h],y)),1===h&&this.addY(O(u[h],l[h],p[h],c[h],y)));var m=(-f-Math.sqrt(g))/(2*d);0<m&&m<1&&(0===h&&this.addX(O(u[h],l[h],p[h],c[h],m)),1===h&&this.addY(O(u[h],l[h],p[h],c[h],m)))}}else{if(0===f)continue;var x=-v/f;0<x&&x<1&&(0===h&&this.addX(O(u[h],l[h],p[h],c[h],x)),1===h&&this.addY(O(u[h],l[h],p[h],c[h],x)))}}},E.prototype.addQuad=function(e,t,r,n,a,o){var s=e+2/3*(r-e),i=t+2/3*(n-t),u=s+1/3*(a-e),l=i+1/3*(o-t);this.addBezier(e,t,s,i,u,l,a,o)},R.prototype.moveTo=function(e,t){this.commands.push({type:"M",x:e,y:t})},R.prototype.lineTo=function(e,t){this.commands.push({type:"L",x:e,y:t})},R.prototype.curveTo=R.prototype.bezierCurveTo=function(e,t,r,n,a,o){this.commands.push({type:"C",x1:e,y1:t,x2:r,y2:n,x:a,y:o})},R.prototype.quadTo=R.prototype.quadraticCurveTo=function(e,t,r,n){this.commands.push({type:"Q",x1:e,y1:t,x:r,y:n})},R.prototype.close=R.prototype.closePath=function(){this.commands.push({type:"Z"})},R.prototype.extend=function(e){if(e.commands)e=e.commands;else if(e instanceof E){var t=e;return this.moveTo(t.x1,t.y1),this.lineTo(t.x2,t.y1),this.lineTo(t.x2,t.y2),this.lineTo(t.x1,t.y2),void this.close()}Array.prototype.push.apply(this.commands,e)},R.prototype.getBoundingBox=function(){for(var e=new E,t=0,r=0,n=0,a=0,o=0;o<this.commands.length;o++){var s=this.commands[o];switch(s.type){case"M":e.addPoint(s.x,s.y),t=n=s.x,r=a=s.y;break;case"L":e.addPoint(s.x,s.y),n=s.x,a=s.y;break;case"Q":e.addQuad(n,a,s.x1,s.y1,s.x,s.y),n=s.x,a=s.y;break;case"C":e.addBezier(n,a,s.x1,s.y1,s.x2,s.y2,s.x,s.y),n=s.x,a=s.y;break;case"Z":n=t,a=r;break;default:throw new Error("Unexpected path command "+s.type)}}return e.isEmpty()&&e.addPoint(0,0),e},R.prototype.draw=function(e){e.beginPath();for(var t=0;t<this.commands.length;t+=1){var r=this.commands[t];"M"===r.type?e.moveTo(r.x,r.y):"L"===r.type?e.lineTo(r.x,r.y):"C"===r.type?e.bezierCurveTo(r.x1,r.y1,r.x2,r.y2,r.x,r.y):"Q"===r.type?e.quadraticCurveTo(r.x1,r.y1,r.x,r.y):"Z"===r.type&&e.closePath()}this.fill&&(e.fillStyle=this.fill,e.fill()),this.stroke&&(e.strokeStyle=this.stroke,e.lineWidth=this.strokeWidth,e.stroke())},R.prototype.toPathData=function(e){function t(t){return Math.round(t)===t?""+Math.round(t):t.toFixed(e)}function r(){for(var e=arguments,r="",n=0;n<arguments.length;n+=1){var a=e[n];a>=0&&n>0&&(r+=" "),r+=t(a)}return r}e=void 0!==e?e:2;for(var n="",a=0;a<this.commands.length;a+=1){var o=this.commands[a];"M"===o.type?n+="M"+r(o.x,o.y):"L"===o.type?n+="L"+r(o.x,o.y):"C"===o.type?n+="C"+r(o.x1,o.y1,o.x2,o.y2,o.x,o.y):"Q"===o.type?n+="Q"+r(o.x1,o.y1,o.x,o.y):"Z"===o.type&&(n+="Z")}return n},R.prototype.toSVG=function(e){var t='<path d="';return t+=this.toPathData(e),t+='"',this.fill&&"black"!==this.fill&&(null===this.fill?t+=' fill="none"':t+=' fill="'+this.fill+'"'),this.stroke&&(t+=' stroke="'+this.stroke+'" stroke-width="'+this.strokeWidth+'"'),t+"/>"},R.prototype.toDOMElement=function(e){var t=this.toPathData(e),r=document.createElementNS("http://www.w3.org/2000/svg","path");return r.setAttribute("d",t),r};var C={fail:w,argument:L,assert:L},P=2147483648,D={},M={},A={};function I(e){return function(){return e}}M.BYTE=function(e){return C.argument(e>=0&&e<=255,"Byte value should be between 0 and 255."),[e]},A.BYTE=I(1),M.CHAR=function(e){return[e.charCodeAt(0)]},A.CHAR=I(1),M.CHARARRAY=function(e){for(var t=[],r=0;r<e.length;r+=1)t[r]=e.charCodeAt(r);return t},A.CHARARRAY=function(e){return e.length},M.USHORT=function(e){return[e>>8&255,255&e]},A.USHORT=I(2),M.SHORT=function(e){return e>=32768&&(e=-(65536-e)),[e>>8&255,255&e]},A.SHORT=I(2),M.UINT24=function(e){return[e>>16&255,e>>8&255,255&e]},A.UINT24=I(3),M.ULONG=function(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]},A.ULONG=I(4),M.LONG=function(e){return e>=P&&(e=-(2*P-e)),[e>>24&255,e>>16&255,e>>8&255,255&e]},A.LONG=I(4),M.FIXED=M.ULONG,A.FIXED=A.ULONG,M.FWORD=M.SHORT,A.FWORD=A.SHORT,M.UFWORD=M.USHORT,A.UFWORD=A.USHORT,M.LONGDATETIME=function(e){return[0,0,0,0,e>>24&255,e>>16&255,e>>8&255,255&e]},A.LONGDATETIME=I(8),M.TAG=function(e){return C.argument(4===e.length,"Tag should be exactly 4 ASCII characters."),[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]},A.TAG=I(4),M.Card8=M.BYTE,A.Card8=A.BYTE,M.Card16=M.USHORT,A.Card16=A.USHORT,M.OffSize=M.BYTE,A.OffSize=A.BYTE,M.SID=M.USHORT,A.SID=A.USHORT,M.NUMBER=function(e){return e>=-107&&e<=107?[e+139]:e>=108&&e<=1131?[247+((e-=108)>>8),255&e]:e>=-1131&&e<=-108?[251+((e=-e-108)>>8),255&e]:e>=-32768&&e<=32767?M.NUMBER16(e):M.NUMBER32(e)},A.NUMBER=function(e){return M.NUMBER(e).length},M.NUMBER16=function(e){return[28,e>>8&255,255&e]},A.NUMBER16=I(3),M.NUMBER32=function(e){return[29,e>>24&255,e>>16&255,e>>8&255,255&e]},A.NUMBER32=I(5),M.REAL=function(e){var t=e.toString(),r=/\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(t);if(r){var n=parseFloat("1e"+((r[2]?+r[2]:0)+r[1].length));t=(Math.round(e*n)/n).toString()}for(var a="",o=0,s=t.length;o<s;o+=1){var i=t[o];a+="e"===i?"-"===t[++o]?"c":"b":"."===i?"a":"-"===i?"e":i}for(var u=[30],l=0,p=(a+=1&a.length?"f":"ff").length;l<p;l+=2)u.push(parseInt(a.substr(l,2),16));return u},A.REAL=function(e){return M.REAL(e).length},M.NAME=M.CHARARRAY,A.NAME=A.CHARARRAY,M.STRING=M.CHARARRAY,A.STRING=A.CHARARRAY,D.UTF8=function(e,t,r){for(var n=[],a=r,o=0;o<a;o++,t+=1)n[o]=e.getUint8(t);return String.fromCharCode.apply(null,n)},D.UTF16=function(e,t,r){for(var n=[],a=r/2,o=0;o<a;o++,t+=2)n[o]=e.getUint16(t);return String.fromCharCode.apply(null,n)},M.UTF16=function(e){for(var t=[],r=0;r<e.length;r+=1){var n=e.charCodeAt(r);t[t.length]=n>>8&255,t[t.length]=255&n}return t},A.UTF16=function(e){return 2*e.length};var F={"x-mac-croatian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ","x-mac-cyrillic":"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю","x-mac-gaelic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ","x-mac-greek":"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­","x-mac-icelandic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-inuit":"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł","x-mac-ce":"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ",macintosh:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-romanian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-turkish":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ"};D.MACSTRING=function(e,t,r,n){var a=F[n];if(void 0!==a){for(var o="",s=0;s<r;s++){var i=e.getUint8(t+s);o+=i<=127?String.fromCharCode(i):a[127&i]}return o}};var B,N="function"==typeof WeakMap&&new WeakMap;function G(e){return e>=-128&&e<=127}function z(e,t,r){for(var n=0,a=e.length;t<a&&n<64&&0===e[t];)++t,++n;return r.push(128|n-1),t}function H(e,t,r){for(var n=0,a=e.length,o=t;o<a&&n<64;){var s=e[o];if(!G(s))break;if(0===s&&o+1<a&&0===e[o+1])break;++o,++n}r.push(n-1);for(var i=t;i<o;++i)r.push(e[i]+256&255);return o}function _(e,t,r){for(var n=0,a=e.length,o=t;o<a&&n<64;){var s=e[o];if(0===s)break;if(G(s)&&o+1<a&&G(e[o+1]))break;++o,++n}r.push(64|n-1);for(var i=t;i<o;++i){var u=e[i];r.push(u+65536>>8&255,u+256&255)}return o}M.MACSTRING=function(e,t){var r=function(e){if(!B)for(var t in B={},F)B[t]=new String(t);var r=B[e];if(void 0!==r){if(N){var n=N.get(r);if(void 0!==n)return n}var a=F[e];if(void 0!==a){for(var o={},s=0;s<a.length;s++)o[a.charCodeAt(s)]=s+128;return N&&N.set(r,o),o}}}(t);if(void 0!==r){for(var n=[],a=0;a<e.length;a++){var o=e.charCodeAt(a);if(o>=128&&void 0===(o=r[o]))return;n[a]=o}return n}},A.MACSTRING=function(e,t){var r=M.MACSTRING(e,t);return void 0!==r?r.length:0},M.VARDELTAS=function(e){for(var t=0,r=[];t<e.length;){var n=e[t];t=0===n?z(e,t,r):n>=-128&&n<=127?H(e,t,r):_(e,t,r)}return r},M.INDEX=function(e){for(var t=1,r=[t],n=[],a=0;a<e.length;a+=1){var o=M.OBJECT(e[a]);Array.prototype.push.apply(n,o),t+=o.length,r.push(t)}if(0===n.length)return[0,0];for(var s=[],i=1+Math.floor(Math.log(t)/Math.log(2))/8|0,u=[void 0,M.BYTE,M.USHORT,M.UINT24,M.ULONG][i],l=0;l<r.length;l+=1){var p=u(r[l]);Array.prototype.push.apply(s,p)}return Array.prototype.concat(M.Card16(e.length),M.OffSize(i),s,n)},A.INDEX=function(e){return M.INDEX(e).length},M.DICT=function(e){for(var t=[],r=Object.keys(e),n=r.length,a=0;a<n;a+=1){var o=parseInt(r[a],0),s=e[o];t=(t=t.concat(M.OPERAND(s.value,s.type))).concat(M.OPERATOR(o))}return t},A.DICT=function(e){return M.DICT(e).length},M.OPERATOR=function(e){return e<1200?[e]:[12,e-1200]},M.OPERAND=function(e,t){var r=[];if(Array.isArray(t))for(var n=0;n<t.length;n+=1)C.argument(e.length===t.length,"Not enough arguments given for type"+t),r=r.concat(M.OPERAND(e[n],t[n]));else if("SID"===t)r=r.concat(M.NUMBER(e));else if("offset"===t)r=r.concat(M.NUMBER32(e));else if("number"===t)r=r.concat(M.NUMBER(e));else{if("real"!==t)throw new Error("Unknown operand type "+t);r=r.concat(M.REAL(e))}return r},M.OP=M.BYTE,A.OP=A.BYTE;var W="function"==typeof WeakMap&&new WeakMap;function q(e,t,r){for(var n=0;n<t.length;n+=1){var a=t[n];this[a.name]=a.value}if(this.tableName=e,this.fields=t,r)for(var o=Object.keys(r),s=0;s<o.length;s+=1){var i=o[s],u=r[i];void 0!==this[i]&&(this[i]=u)}}function X(e,t,r){void 0===r&&(r=t.length);var n=new Array(t.length+1);n[0]={name:e+"Count",type:"USHORT",value:r};for(var a=0;a<t.length;a++)n[a+1]={name:e+a,type:"USHORT",value:t[a]};return n}function j(e,t,r){var n=t.length,a=new Array(n+1);a[0]={name:e+"Count",type:"USHORT",value:n};for(var o=0;o<n;o++)a[o+1]={name:e+o,type:"TABLE",value:r(t[o],o)};return a}function Y(e,t,r){var n=t.length,a=[];a[0]={name:e+"Count",type:"USHORT",value:n};for(var o=0;o<n;o++)a=a.concat(r(t[o],o));return a}function V(e){1===e.format?q.call(this,"coverageTable",[{name:"coverageFormat",type:"USHORT",value:1}].concat(X("glyph",e.glyphs))):C.assert(!1,"Can't create coverage table format 2 yet.")}function Z(e){q.call(this,"scriptListTable",Y("scriptRecord",e,(function(e,t){var r=e.script,n=r.defaultLangSys;return C.assert(!!n,"Unable to write GSUB: script "+e.tag+" has no default language system."),[{name:"scriptTag"+t,type:"TAG",value:e.tag},{name:"script"+t,type:"TABLE",value:new q("scriptTable",[{name:"defaultLangSys",type:"TABLE",value:new q("defaultLangSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:n.reqFeatureIndex}].concat(X("featureIndex",n.featureIndexes)))}].concat(Y("langSys",r.langSysRecords,(function(e,t){var r=e.langSys;return[{name:"langSysTag"+t,type:"TAG",value:e.tag},{name:"langSys"+t,type:"TABLE",value:new q("langSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:r.reqFeatureIndex}].concat(X("featureIndex",r.featureIndexes)))}]}))))}]})))}function Q(e){q.call(this,"featureListTable",Y("featureRecord",e,(function(e,t){var r=e.feature;return[{name:"featureTag"+t,type:"TAG",value:e.tag},{name:"feature"+t,type:"TABLE",value:new q("featureTable",[{name:"featureParams",type:"USHORT",value:r.featureParams}].concat(X("lookupListIndex",r.lookupListIndexes)))}]})))}function K(e,t){q.call(this,"lookupListTable",j("lookup",e,(function(e){var r=t[e.lookupType];return C.assert(!!r,"Unable to write GSUB lookup type "+e.lookupType+" tables."),new q("lookupTable",[{name:"lookupType",type:"USHORT",value:e.lookupType},{name:"lookupFlag",type:"USHORT",value:e.lookupFlag}].concat(j("subtable",e.subtables,r)))})))}M.CHARSTRING=function(e){if(W){var t=W.get(e);if(void 0!==t)return t}for(var r=[],n=e.length,a=0;a<n;a+=1){var o=e[a];r=r.concat(M[o.type](o.value))}return W&&W.set(e,r),r},A.CHARSTRING=function(e){return M.CHARSTRING(e).length},M.OBJECT=function(e){var t=M[e.type];return C.argument(void 0!==t,"No encoding function for type "+e.type),t(e.value)},A.OBJECT=function(e){var t=A[e.type];return C.argument(void 0!==t,"No sizeOf function for type "+e.type),t(e.value)},M.TABLE=function(e){for(var t=[],r=e.fields.length,n=[],a=[],o=0;o<r;o+=1){var s=e.fields[o],i=M[s.type];C.argument(void 0!==i,"No encoding function for field type "+s.type+" ("+s.name+")");var u=e[s.name];void 0===u&&(u=s.value);var l=i(u);"TABLE"===s.type?(a.push(t.length),t=t.concat([0,0]),n.push(l)):t=t.concat(l)}for(var p=0;p<n.length;p+=1){var c=a[p],h=t.length;C.argument(h<65536,"Table "+e.tableName+" too big."),t[c]=h>>8,t[c+1]=255&h,t=t.concat(n[p])}return t},A.TABLE=function(e){for(var t=0,r=e.fields.length,n=0;n<r;n+=1){var a=e.fields[n],o=A[a.type];C.argument(void 0!==o,"No sizeOf function for field type "+a.type+" ("+a.name+")");var s=e[a.name];void 0===s&&(s=a.value),t+=o(s),"TABLE"===a.type&&(t+=2)}return t},M.RECORD=M.TABLE,A.RECORD=A.TABLE,M.LITERAL=function(e){return e},A.LITERAL=function(e){return e.length},q.prototype.encode=function(){return M.TABLE(this)},q.prototype.sizeOf=function(){return A.TABLE(this)},V.prototype=Object.create(q.prototype),V.prototype.constructor=V,Z.prototype=Object.create(q.prototype),Z.prototype.constructor=Z,Q.prototype=Object.create(q.prototype),Q.prototype.constructor=Q,K.prototype=Object.create(q.prototype),K.prototype.constructor=K;var J={Table:q,Record:q,Coverage:V,ScriptList:Z,FeatureList:Q,LookupList:K,ushortList:X,tableList:j,recordList:Y};function $(e,t){return e.getUint8(t)}function ee(e,t){return e.getUint16(t,!1)}function te(e,t){return e.getUint32(t,!1)}function re(e,t){return e.getInt16(t,!1)+e.getUint16(t+2,!1)/65535}var ne={byte:1,uShort:2,short:2,uLong:4,fixed:4,longDateTime:8,tag:4};function ae(e,t){this.data=e,this.offset=t,this.relativeOffset=0}ae.prototype.parseByte=function(){var e=this.data.getUint8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},ae.prototype.parseChar=function(){var e=this.data.getInt8(this.offset+this.relativeOffset);return this.relativeOffset+=1,e},ae.prototype.parseCard8=ae.prototype.parseByte,ae.prototype.parseUShort=function(){var e=this.data.getUint16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},ae.prototype.parseCard16=ae.prototype.parseUShort,ae.prototype.parseSID=ae.prototype.parseUShort,ae.prototype.parseOffset16=ae.prototype.parseUShort,ae.prototype.parseShort=function(){var e=this.data.getInt16(this.offset+this.relativeOffset);return this.relativeOffset+=2,e},ae.prototype.parseF2Dot14=function(){var e=this.data.getInt16(this.offset+this.relativeOffset)/16384;return this.relativeOffset+=2,e},ae.prototype.parseULong=function(){var e=te(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},ae.prototype.parseOffset32=ae.prototype.parseULong,ae.prototype.parseFixed=function(){var e=re(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,e},ae.prototype.parseString=function(e){var t=this.data,r=this.offset+this.relativeOffset,n="";this.relativeOffset+=e;for(var a=0;a<e;a++)n+=String.fromCharCode(t.getUint8(r+a));return n},ae.prototype.parseTag=function(){return this.parseString(4)},ae.prototype.parseLongDateTime=function(){var e=te(this.data,this.offset+this.relativeOffset+4);return e-=2082844800,this.relativeOffset+=8,e},ae.prototype.parseVersion=function(e){var t=ee(this.data,this.offset+this.relativeOffset),r=ee(this.data,this.offset+this.relativeOffset+2);return this.relativeOffset+=4,void 0===e&&(e=4096),t+r/e/10},ae.prototype.skip=function(e,t){void 0===t&&(t=1),this.relativeOffset+=ne[e]*t},ae.prototype.parseULongList=function(e){void 0===e&&(e=this.parseULong());for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint32(n),n+=4;return this.relativeOffset+=4*e,t},ae.prototype.parseOffset16List=ae.prototype.parseUShortList=function(e){void 0===e&&(e=this.parseUShort());for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint16(n),n+=2;return this.relativeOffset+=2*e,t},ae.prototype.parseShortList=function(e){for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getInt16(n),n+=2;return this.relativeOffset+=2*e,t},ae.prototype.parseByteList=function(e){for(var t=new Array(e),r=this.data,n=this.offset+this.relativeOffset,a=0;a<e;a++)t[a]=r.getUint8(n++);return this.relativeOffset+=e,t},ae.prototype.parseList=function(e,t){t||(t=e,e=this.parseUShort());for(var r=new Array(e),n=0;n<e;n++)r[n]=t.call(this);return r},ae.prototype.parseList32=function(e,t){t||(t=e,e=this.parseULong());for(var r=new Array(e),n=0;n<e;n++)r[n]=t.call(this);return r},ae.prototype.parseRecordList=function(e,t){t||(t=e,e=this.parseUShort());for(var r=new Array(e),n=Object.keys(t),a=0;a<e;a++){for(var o={},s=0;s<n.length;s++){var i=n[s],u=t[i];o[i]=u.call(this)}r[a]=o}return r},ae.prototype.parseRecordList32=function(e,t){t||(t=e,e=this.parseULong());for(var r=new Array(e),n=Object.keys(t),a=0;a<e;a++){for(var o={},s=0;s<n.length;s++){var i=n[s],u=t[i];o[i]=u.call(this)}r[a]=o}return r},ae.prototype.parseStruct=function(e){if("function"==typeof e)return e.call(this);for(var t=Object.keys(e),r={},n=0;n<t.length;n++){var a=t[n],o=e[a];r[a]=o.call(this)}return r},ae.prototype.parseValueRecord=function(e){if(void 0===e&&(e=this.parseUShort()),0!==e){var t={};return 1&e&&(t.xPlacement=this.parseShort()),2&e&&(t.yPlacement=this.parseShort()),4&e&&(t.xAdvance=this.parseShort()),8&e&&(t.yAdvance=this.parseShort()),16&e&&(t.xPlaDevice=void 0,this.parseShort()),32&e&&(t.yPlaDevice=void 0,this.parseShort()),64&e&&(t.xAdvDevice=void 0,this.parseShort()),128&e&&(t.yAdvDevice=void 0,this.parseShort()),t}},ae.prototype.parseValueRecordList=function(){for(var e=this.parseUShort(),t=this.parseUShort(),r=new Array(t),n=0;n<t;n++)r[n]=this.parseValueRecord(e);return r},ae.prototype.parsePointer=function(e){var t=this.parseOffset16();if(t>0)return new ae(this.data,this.offset+t).parseStruct(e)},ae.prototype.parsePointer32=function(e){var t=this.parseOffset32();if(t>0)return new ae(this.data,this.offset+t).parseStruct(e)},ae.prototype.parseListOfLists=function(e){for(var t=this.parseOffset16List(),r=t.length,n=this.relativeOffset,a=new Array(r),o=0;o<r;o++){var s=t[o];if(0!==s)if(this.relativeOffset=s,e){for(var i=this.parseOffset16List(),u=new Array(i.length),l=0;l<i.length;l++)this.relativeOffset=s+i[l],u[l]=e.call(this);a[o]=u}else a[o]=this.parseUShortList();else a[o]=void 0}return this.relativeOffset=n,a},ae.prototype.parseCoverage=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort(),r=this.parseUShort();if(1===t)return{format:1,glyphs:this.parseUShortList(r)};if(2===t){for(var n=new Array(r),a=0;a<r;a++)n[a]={start:this.parseUShort(),end:this.parseUShort(),index:this.parseUShort()};return{format:2,ranges:n}}throw new Error("0x"+e.toString(16)+": Coverage format must be 1 or 2.")},ae.prototype.parseClassDef=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();if(1===t)return{format:1,startGlyph:this.parseUShort(),classes:this.parseUShortList()};if(2===t)return{format:2,ranges:this.parseRecordList({start:ae.uShort,end:ae.uShort,classId:ae.uShort})};throw new Error("0x"+e.toString(16)+": ClassDef format must be 1 or 2.")},ae.list=function(e,t){return function(){return this.parseList(e,t)}},ae.list32=function(e,t){return function(){return this.parseList32(e,t)}},ae.recordList=function(e,t){return function(){return this.parseRecordList(e,t)}},ae.recordList32=function(e,t){return function(){return this.parseRecordList32(e,t)}},ae.pointer=function(e){return function(){return this.parsePointer(e)}},ae.pointer32=function(e){return function(){return this.parsePointer32(e)}},ae.tag=ae.prototype.parseTag,ae.byte=ae.prototype.parseByte,ae.uShort=ae.offset16=ae.prototype.parseUShort,ae.uShortList=ae.prototype.parseUShortList,ae.uLong=ae.offset32=ae.prototype.parseULong,ae.uLongList=ae.prototype.parseULongList,ae.struct=ae.prototype.parseStruct,ae.coverage=ae.prototype.parseCoverage,ae.classDef=ae.prototype.parseClassDef;var oe={reserved:ae.uShort,reqFeatureIndex:ae.uShort,featureIndexes:ae.uShortList};ae.prototype.parseScriptList=function(){return this.parsePointer(ae.recordList({tag:ae.tag,script:ae.pointer({defaultLangSys:ae.pointer(oe),langSysRecords:ae.recordList({tag:ae.tag,langSys:ae.pointer(oe)})})}))||[]},ae.prototype.parseFeatureList=function(){return this.parsePointer(ae.recordList({tag:ae.tag,feature:ae.pointer({featureParams:ae.offset16,lookupListIndexes:ae.uShortList})}))||[]},ae.prototype.parseLookupList=function(e){return this.parsePointer(ae.list(ae.pointer((function(){var t=this.parseUShort();C.argument(1<=t&&t<=9,"GPOS/GSUB lookup type "+t+" unknown.");var r=this.parseUShort(),n=16&r;return{lookupType:t,lookupFlag:r,subtables:this.parseList(ae.pointer(e[t])),markFilteringSet:n?this.parseUShort():void 0}}))))||[]},ae.prototype.parseFeatureVariationsList=function(){return this.parsePointer32((function(){var e=this.parseUShort(),t=this.parseUShort();return C.argument(1===e&&t<1,"GPOS/GSUB feature variations table unknown."),this.parseRecordList32({conditionSetOffset:ae.offset32,featureTableSubstitutionOffset:ae.offset32})}))||[]};var se={getByte:$,getCard8:$,getUShort:ee,getCard16:ee,getShort:function(e,t){return e.getInt16(t,!1)},getULong:te,getFixed:re,getTag:function(e,t){for(var r="",n=t;n<t+4;n+=1)r+=String.fromCharCode(e.getInt8(n));return r},getOffset:function(e,t,r){for(var n=0,a=0;a<r;a+=1)n<<=8,n+=e.getUint8(t+a);return n},getBytes:function(e,t,r){for(var n=[],a=t;a<r;a+=1)n.push(e.getUint8(a));return n},bytesToString:function(e){for(var t="",r=0;r<e.length;r+=1)t+=String.fromCharCode(e[r]);return t},Parser:ae};function ie(e,t,r){e.segments.push({end:t,start:t,delta:-(t-r),offset:0,glyphIndex:r})}var ue=function(e,t){var r={};r.version=se.getUShort(e,t),C.argument(0===r.version,"cmap table version should be 0."),r.numTables=se.getUShort(e,t+2);for(var n=-1,a=r.numTables-1;a>=0;a-=1){var o=se.getUShort(e,t+4+8*a),s=se.getUShort(e,t+4+8*a+2);if(3===o&&(0===s||1===s||10===s)||0===o&&(0===s||1===s||2===s||3===s||4===s)){n=se.getULong(e,t+4+8*a+4);break}}if(-1===n)throw new Error("No valid cmap sub-tables found.");var i=new se.Parser(e,t+n);if(r.format=i.parseUShort(),12===r.format)!function(e,t){var r;t.parseUShort(),e.length=t.parseULong(),e.language=t.parseULong(),e.groupCount=r=t.parseULong(),e.glyphIndexMap={};for(var n=0;n<r;n+=1)for(var a=t.parseULong(),o=t.parseULong(),s=t.parseULong(),i=a;i<=o;i+=1)e.glyphIndexMap[i]=s,s++}(r,i);else{if(4!==r.format)throw new Error("Only format 4 and 12 cmap tables are supported (found format "+r.format+").");!function(e,t,r,n,a){var o;e.length=t.parseUShort(),e.language=t.parseUShort(),e.segCount=o=t.parseUShort()>>1,t.skip("uShort",3),e.glyphIndexMap={};for(var s=new se.Parser(r,n+a+14),i=new se.Parser(r,n+a+16+2*o),u=new se.Parser(r,n+a+16+4*o),l=new se.Parser(r,n+a+16+6*o),p=n+a+16+8*o,c=0;c<o-1;c+=1)for(var h=void 0,f=s.parseUShort(),d=i.parseUShort(),v=u.parseShort(),g=l.parseUShort(),y=d;y<=f;y+=1)0!==g?(p=l.offset+l.relativeOffset-2,p+=g,p+=2*(y-d),0!==(h=se.getUShort(r,p))&&(h=h+v&65535)):h=y+v&65535,e.glyphIndexMap[y]=h}(r,i,e,t,n)}return r},le=function(e){var t,r=!0;for(t=e.length-1;t>0;t-=1)if(e.get(t).unicode>65535){console.log("Adding CMAP format 12 (needed!)"),r=!1;break}var n=[{name:"version",type:"USHORT",value:0},{name:"numTables",type:"USHORT",value:r?1:2},{name:"platformID",type:"USHORT",value:3},{name:"encodingID",type:"USHORT",value:1},{name:"offset",type:"ULONG",value:r?12:20}];r||(n=n.concat([{name:"cmap12PlatformID",type:"USHORT",value:3},{name:"cmap12EncodingID",type:"USHORT",value:10},{name:"cmap12Offset",type:"ULONG",value:0}])),n=n.concat([{name:"format",type:"USHORT",value:4},{name:"cmap4Length",type:"USHORT",value:0},{name:"language",type:"USHORT",value:0},{name:"segCountX2",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);var a=new J.Table("cmap",n);for(a.segments=[],t=0;t<e.length;t+=1){for(var o=e.get(t),s=0;s<o.unicodes.length;s+=1)ie(a,o.unicodes[s],t);a.segments=a.segments.sort((function(e,t){return e.start-t.start}))}!function(e){e.segments.push({end:65535,start:65535,delta:1,offset:0})}(a);var i=a.segments.length,u=0,l=[],p=[],c=[],h=[],f=[],d=[];for(t=0;t<i;t+=1){var v=a.segments[t];v.end<=65535&&v.start<=65535?(l=l.concat({name:"end_"+t,type:"USHORT",value:v.end}),p=p.concat({name:"start_"+t,type:"USHORT",value:v.start}),c=c.concat({name:"idDelta_"+t,type:"SHORT",value:v.delta}),h=h.concat({name:"idRangeOffset_"+t,type:"USHORT",value:v.offset}),void 0!==v.glyphId&&(f=f.concat({name:"glyph_"+t,type:"USHORT",value:v.glyphId}))):u+=1,r||void 0===v.glyphIndex||(d=(d=(d=d.concat({name:"cmap12Start_"+t,type:"ULONG",value:v.start})).concat({name:"cmap12End_"+t,type:"ULONG",value:v.end})).concat({name:"cmap12Glyph_"+t,type:"ULONG",value:v.glyphIndex}))}if(a.segCountX2=2*(i-u),a.searchRange=2*Math.pow(2,Math.floor(Math.log(i-u)/Math.log(2))),a.entrySelector=Math.log(a.searchRange/2)/Math.log(2),a.rangeShift=a.segCountX2-a.searchRange,a.fields=a.fields.concat(l),a.fields.push({name:"reservedPad",type:"USHORT",value:0}),a.fields=a.fields.concat(p),a.fields=a.fields.concat(c),a.fields=a.fields.concat(h),a.fields=a.fields.concat(f),a.cmap4Length=14+2*l.length+2+2*p.length+2*c.length+2*h.length+2*f.length,!r){var g=16+4*d.length;a.cmap12Offset=20+a.cmap4Length,a.fields=a.fields.concat([{name:"cmap12Format",type:"USHORT",value:12},{name:"cmap12Reserved",type:"USHORT",value:0},{name:"cmap12Length",type:"ULONG",value:g},{name:"cmap12Language",type:"ULONG",value:0},{name:"cmap12nGroups",type:"ULONG",value:d.length/3}]),a.fields=a.fields.concat(d)}return a},pe=[".notdef","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","onesuperior","logicalnot","mu","trademark","Eth","onehalf","plusminus","Thorn","onequarter","divide","brokenbar","degree","thorn","threequarters","twosuperior","registered","minus","eth","multiply","threesuperior","copyright","Aacute","Acircumflex","Adieresis","Agrave","Aring","Atilde","Ccedilla","Eacute","Ecircumflex","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Ntilde","Oacute","Ocircumflex","Odieresis","Ograve","Otilde","Scaron","Uacute","Ucircumflex","Udieresis","Ugrave","Yacute","Ydieresis","Zcaron","aacute","acircumflex","adieresis","agrave","aring","atilde","ccedilla","eacute","ecircumflex","edieresis","egrave","iacute","icircumflex","idieresis","igrave","ntilde","oacute","ocircumflex","odieresis","ograve","otilde","scaron","uacute","ucircumflex","udieresis","ugrave","yacute","ydieresis","zcaron","exclamsmall","Hungarumlautsmall","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","266 ff","onedotenleader","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","commasuperior","threequartersemdash","periodsuperior","questionsmall","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","ffi","ffl","parenleftinferior","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","exclamdownsmall","centoldstyle","Lslashsmall","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","Dotaccentsmall","Macronsmall","figuredash","hypheninferior","Ogoneksmall","Ringsmall","Cedillasmall","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall","001.000","001.001","001.002","001.003","Black","Bold","Book","Light","Medium","Regular","Roman","Semibold"],ce=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","","endash","dagger","daggerdbl","periodcentered","","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","","questiondown","","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","","ring","cedilla","","hungarumlaut","ogonek","caron","emdash","","","","","","","","","","","","","","","","","AE","","ordfeminine","","","","","Lslash","Oslash","OE","ordmasculine","","","","","","ae","","","","dotlessi","","","lslash","oslash","oe","germandbls"],he=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclamsmall","Hungarumlautsmall","","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","commasuperior","threequartersemdash","periodsuperior","questionsmall","","asuperior","bsuperior","centsuperior","dsuperior","esuperior","","","isuperior","","","lsuperior","msuperior","nsuperior","osuperior","","","rsuperior","ssuperior","tsuperior","","ff","fi","fl","ffi","ffl","parenleftinferior","","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdownsmall","centoldstyle","Lslashsmall","","","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","","Dotaccentsmall","","","Macronsmall","","","figuredash","hypheninferior","","","Ogoneksmall","Ringsmall","Cedillasmall","","","","onequarter","onehalf","threequarters","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","","","zerosuperior","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall"],fe=[".notdef",".null","nonmarkingreturn","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quotesingle","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","grave","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","Adieresis","Aring","Ccedilla","Eacute","Ntilde","Odieresis","Udieresis","aacute","agrave","acircumflex","adieresis","atilde","aring","ccedilla","eacute","egrave","ecircumflex","edieresis","iacute","igrave","icircumflex","idieresis","ntilde","oacute","ograve","ocircumflex","odieresis","otilde","uacute","ugrave","ucircumflex","udieresis","dagger","degree","cent","sterling","section","bullet","paragraph","germandbls","registered","copyright","trademark","acute","dieresis","notequal","AE","Oslash","infinity","plusminus","lessequal","greaterequal","yen","mu","partialdiff","summation","product","pi","integral","ordfeminine","ordmasculine","Omega","ae","oslash","questiondown","exclamdown","logicalnot","radical","florin","approxequal","Delta","guillemotleft","guillemotright","ellipsis","nonbreakingspace","Agrave","Atilde","Otilde","OE","oe","endash","emdash","quotedblleft","quotedblright","quoteleft","quoteright","divide","lozenge","ydieresis","Ydieresis","fraction","currency","guilsinglleft","guilsinglright","fi","fl","daggerdbl","periodcentered","quotesinglbase","quotedblbase","perthousand","Acircumflex","Ecircumflex","Aacute","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Oacute","Ocircumflex","apple","Ograve","Uacute","Ucircumflex","Ugrave","dotlessi","circumflex","tilde","macron","breve","dotaccent","ring","cedilla","hungarumlaut","ogonek","caron","Lslash","lslash","Scaron","scaron","Zcaron","zcaron","brokenbar","Eth","eth","Yacute","yacute","Thorn","thorn","minus","multiply","onesuperior","twosuperior","threesuperior","onehalf","onequarter","threequarters","franc","Gbreve","gbreve","Idotaccent","Scedilla","scedilla","Cacute","cacute","Ccaron","ccaron","dcroat"];function de(e){this.font=e}function ve(e){this.cmap=e}function ge(e,t){this.encoding=e,this.charset=t}function ye(e){switch(e.version){case 1:this.names=fe.slice();break;case 2:this.names=new Array(e.numberOfGlyphs);for(var t=0;t<e.numberOfGlyphs;t++)e.glyphNameIndex[t]<fe.length?this.names[t]=fe[e.glyphNameIndex[t]]:this.names[t]=e.names[e.glyphNameIndex[t]-fe.length];break;case 2.5:this.names=new Array(e.numberOfGlyphs);for(var r=0;r<e.numberOfGlyphs;r++)this.names[r]=fe[r+e.glyphNameIndex[r]];break;case 3:default:this.names=[]}}de.prototype.charToGlyphIndex=function(e){var t=e.codePointAt(0),r=this.font.glyphs;if(r)for(var n=0;n<r.length;n+=1)for(var a=r.get(n),o=0;o<a.unicodes.length;o+=1)if(a.unicodes[o]===t)return n;return null},ve.prototype.charToGlyphIndex=function(e){return this.cmap.glyphIndexMap[e.codePointAt(0)]||0},ge.prototype.charToGlyphIndex=function(e){var t=e.codePointAt(0),r=this.encoding[t];return this.charset.indexOf(r)},ye.prototype.nameToGlyphIndex=function(e){return this.names.indexOf(e)},ye.prototype.glyphIndexToName=function(e){return this.names[e]};var me=function(e,t,r,n,a){e.beginPath(),e.moveTo(t,r),e.lineTo(n,a),e.stroke()};function xe(e){this.bindConstructorValues(e)}function be(e,t,r){Object.defineProperty(e,t,{get:function(){return e.path,e[r]},set:function(t){e[r]=t},enumerable:!0,configurable:!0})}function Se(e,t){if(this.font=e,this.glyphs={},Array.isArray(t))for(var r=0;r<t.length;r++){var n=t[r];n.path.unitsPerEm=e.unitsPerEm,this.glyphs[r]=n}this.length=t&&t.length||0}xe.prototype.bindConstructorValues=function(e){var t,r;this.index=e.index||0,this.name=e.name||null,this.unicode=e.unicode||void 0,this.unicodes=e.unicodes||void 0!==e.unicode?[e.unicode]:[],"xMin"in e&&(this.xMin=e.xMin),"yMin"in e&&(this.yMin=e.yMin),"xMax"in e&&(this.xMax=e.xMax),"yMax"in e&&(this.yMax=e.yMax),"advanceWidth"in e&&(this.advanceWidth=e.advanceWidth),Object.defineProperty(this,"path",(t=e.path,r=t||new R,{configurable:!0,get:function(){return"function"==typeof r&&(r=r()),r},set:function(e){r=e}}))},xe.prototype.addUnicode=function(e){0===this.unicodes.length&&(this.unicode=e),this.unicodes.push(e)},xe.prototype.getBoundingBox=function(){return this.path.getBoundingBox()},xe.prototype.getPath=function(e,t,r,n,a){var o,s;e=void 0!==e?e:0,t=void 0!==t?t:0,r=void 0!==r?r:72,n||(n={});var i=n.xScale,u=n.yScale;if(n.hinting&&a&&a.hinting&&(s=this.path&&a.hinting.exec(this,r)),s)o=a.hinting.getCommands(s),e=Math.round(e),t=Math.round(t),i=u=1;else{o=this.path.commands;var l=1/(this.path.unitsPerEm||1e3)*r;void 0===i&&(i=l),void 0===u&&(u=l)}for(var p=new R,c=0;c<o.length;c+=1){var h=o[c];"M"===h.type?p.moveTo(e+h.x*i,t+-h.y*u):"L"===h.type?p.lineTo(e+h.x*i,t+-h.y*u):"Q"===h.type?p.quadraticCurveTo(e+h.x1*i,t+-h.y1*u,e+h.x*i,t+-h.y*u):"C"===h.type?p.curveTo(e+h.x1*i,t+-h.y1*u,e+h.x2*i,t+-h.y2*u,e+h.x*i,t+-h.y*u):"Z"===h.type&&p.closePath()}return p},xe.prototype.getContours=function(){if(void 0===this.points)return[];for(var e=[],t=[],r=0;r<this.points.length;r+=1){var n=this.points[r];t.push(n),n.lastPointOfContour&&(e.push(t),t=[])}return C.argument(0===t.length,"There are still points left in the current contour."),e},xe.prototype.getMetrics=function(){for(var e=this.path.commands,t=[],r=[],n=0;n<e.length;n+=1){var a=e[n];"Z"!==a.type&&(t.push(a.x),r.push(a.y)),"Q"!==a.type&&"C"!==a.type||(t.push(a.x1),r.push(a.y1)),"C"===a.type&&(t.push(a.x2),r.push(a.y2))}var o={xMin:Math.min.apply(null,t),yMin:Math.min.apply(null,r),xMax:Math.max.apply(null,t),yMax:Math.max.apply(null,r),leftSideBearing:this.leftSideBearing};return isFinite(o.xMin)||(o.xMin=0),isFinite(o.xMax)||(o.xMax=this.advanceWidth),isFinite(o.yMin)||(o.yMin=0),isFinite(o.yMax)||(o.yMax=0),o.rightSideBearing=this.advanceWidth-o.leftSideBearing-(o.xMax-o.xMin),o},xe.prototype.draw=function(e,t,r,n,a){this.getPath(t,r,n,a).draw(e)},xe.prototype.drawPoints=function(e,t,r,n){function a(t,r,n,a){e.beginPath();for(var o=0;o<t.length;o+=1)e.moveTo(r+t[o].x*a,n+t[o].y*a),e.arc(r+t[o].x*a,n+t[o].y*a,2,0,2*Math.PI,!1);e.closePath(),e.fill()}t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:24;for(var o=1/this.path.unitsPerEm*n,s=[],i=[],u=this.path,l=0;l<u.commands.length;l+=1){var p=u.commands[l];void 0!==p.x&&s.push({x:p.x,y:-p.y}),void 0!==p.x1&&i.push({x:p.x1,y:-p.y1}),void 0!==p.x2&&i.push({x:p.x2,y:-p.y2})}e.fillStyle="blue",a(s,t,r,o),e.fillStyle="red",a(i,t,r,o)},xe.prototype.drawMetrics=function(e,t,r,n){var a;t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:24,a=1/this.path.unitsPerEm*n,e.lineWidth=1,e.strokeStyle="black",me(e,t,-1e4,t,1e4),me(e,-1e4,r,1e4,r);var o=this.xMin||0,s=this.yMin||0,i=this.xMax||0,u=this.yMax||0,l=this.advanceWidth||0;e.strokeStyle="blue",me(e,t+o*a,-1e4,t+o*a,1e4),me(e,t+i*a,-1e4,t+i*a,1e4),me(e,-1e4,r+-s*a,1e4,r+-s*a),me(e,-1e4,r+-u*a,1e4,r+-u*a),e.strokeStyle="green",me(e,t+l*a,-1e4,t+l*a,1e4)},Se.prototype.get=function(e){if(void 0===this.glyphs[e]){this.font._push(e),"function"==typeof this.glyphs[e]&&(this.glyphs[e]=this.glyphs[e]());var t=this.glyphs[e],r=this.font._IndexToUnicodeMap[e];if(r)for(var n=0;n<r.unicodes.length;n++)t.addUnicode(r.unicodes[n]);this.font.cffEncoding?this.font.isCIDFont?t.name="gid"+e:t.name=this.font.cffEncoding.charset[e]:this.font.glyphNames.names&&(t.name=this.font.glyphNames.glyphIndexToName(e)),this.glyphs[e].advanceWidth=this.font._hmtxTableData[e].advanceWidth,this.glyphs[e].leftSideBearing=this.font._hmtxTableData[e].leftSideBearing}else"function"==typeof this.glyphs[e]&&(this.glyphs[e]=this.glyphs[e]());return this.glyphs[e]},Se.prototype.push=function(e,t){this.glyphs[e]=t,this.length++};var Te={GlyphSet:Se,glyphLoader:function(e,t){return new xe({index:t,font:e})},ttfGlyphLoader:function(e,t,r,n,a,o){return function(){var s=new xe({index:t,font:e});return s.path=function(){r(s,n,a);var t=o(e.glyphs,s);return t.unitsPerEm=e.unitsPerEm,t},be(s,"xMin","_xMin"),be(s,"xMax","_xMax"),be(s,"yMin","_yMin"),be(s,"yMax","_yMax"),s}},cffGlyphLoader:function(e,t,r,n){return function(){var a=new xe({index:t,font:e});return a.path=function(){var t=r(e,a,n);return t.unitsPerEm=e.unitsPerEm,t},a}}};function Ue(e,t){if(e===t)return!0;if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r+=1)if(!Ue(e[r],t[r]))return!1;return!0}return!1}function ke(e){return e.length<1240?107:e.length<33900?1131:32768}function Oe(e,t,r){var n,a,o=[],s=[],i=se.getCard16(e,t);if(0!==i){var u=se.getByte(e,t+2);n=t+(i+1)*u+2;for(var l=t+3,p=0;p<i+1;p+=1)o.push(se.getOffset(e,l,u)),l+=u;a=n+o[i]}else a=t+2;for(var c=0;c<o.length-1;c+=1){var h=se.getBytes(e,n+o[c],n+o[c+1]);r&&(h=r(h)),s.push(h)}return{objects:s,startOffset:t,endOffset:a}}function Ee(e,t){if(28===t)return e.parseByte()<<8|e.parseByte();if(29===t)return e.parseByte()<<24|e.parseByte()<<16|e.parseByte()<<8|e.parseByte();if(30===t)return function(e){for(var t="",r=["0","1","2","3","4","5","6","7","8","9",".","E","E-",null,"-"];;){var n=e.parseByte(),a=n>>4,o=15&n;if(15===a)break;if(t+=r[a],15===o)break;t+=r[o]}return parseFloat(t)}(e);if(t>=32&&t<=246)return t-139;if(t>=247&&t<=250)return 256*(t-247)+e.parseByte()+108;if(t>=251&&t<=254)return 256*-(t-251)-e.parseByte()-108;throw new Error("Invalid b0 "+t)}function Re(e,t,r){t=void 0!==t?t:0;var n=new se.Parser(e,t),a=[],o=[];for(r=void 0!==r?r:e.length;n.relativeOffset<r;){var s=n.parseByte();s<=21?(12===s&&(s=1200+n.parseByte()),a.push([s,o]),o=[]):o.push(Ee(n,s))}return function(e){for(var t={},r=0;r<e.length;r+=1){var n,a=e[r][0],o=e[r][1];if(n=1===o.length?o[0]:o,t.hasOwnProperty(a)&&!isNaN(t[a]))throw new Error("Object "+t+" already has key "+a);t[a]=n}return t}(a)}function we(e,t){return t<=390?pe[t]:e[t-391]}function Le(e,t,r){for(var n,a={},o=0;o<t.length;o+=1){var s=t[o];if(Array.isArray(s.type)){var i=[];i.length=s.type.length;for(var u=0;u<s.type.length;u++)void 0===(n=void 0!==e[s.op]?e[s.op][u]:void 0)&&(n=void 0!==s.value&&void 0!==s.value[u]?s.value[u]:null),"SID"===s.type[u]&&(n=we(r,n)),i[u]=n;a[s.name]=i}else void 0===(n=e[s.op])&&(n=void 0!==s.value?s.value:null),"SID"===s.type&&(n=we(r,n)),a[s.name]=n}return a}var Ce=[{name:"version",op:0,type:"SID"},{name:"notice",op:1,type:"SID"},{name:"copyright",op:1200,type:"SID"},{name:"fullName",op:2,type:"SID"},{name:"familyName",op:3,type:"SID"},{name:"weight",op:4,type:"SID"},{name:"isFixedPitch",op:1201,type:"number",value:0},{name:"italicAngle",op:1202,type:"number",value:0},{name:"underlinePosition",op:1203,type:"number",value:-100},{name:"underlineThickness",op:1204,type:"number",value:50},{name:"paintType",op:1205,type:"number",value:0},{name:"charstringType",op:1206,type:"number",value:2},{name:"fontMatrix",op:1207,type:["real","real","real","real","real","real"],value:[.001,0,0,.001,0,0]},{name:"uniqueId",op:13,type:"number"},{name:"fontBBox",op:5,type:["number","number","number","number"],value:[0,0,0,0]},{name:"strokeWidth",op:1208,type:"number",value:0},{name:"xuid",op:14,type:[],value:null},{name:"charset",op:15,type:"offset",value:0},{name:"encoding",op:16,type:"offset",value:0},{name:"charStrings",op:17,type:"offset",value:0},{name:"private",op:18,type:["number","offset"],value:[0,0]},{name:"ros",op:1230,type:["SID","SID","number"]},{name:"cidFontVersion",op:1231,type:"number",value:0},{name:"cidFontRevision",op:1232,type:"number",value:0},{name:"cidFontType",op:1233,type:"number",value:0},{name:"cidCount",op:1234,type:"number",value:8720},{name:"uidBase",op:1235,type:"number"},{name:"fdArray",op:1236,type:"offset"},{name:"fdSelect",op:1237,type:"offset"},{name:"fontName",op:1238,type:"SID"}],Pe=[{name:"subrs",op:19,type:"offset",value:0},{name:"defaultWidthX",op:20,type:"number",value:0},{name:"nominalWidthX",op:21,type:"number",value:0}];function De(e,t){return Le(Re(e,0,e.byteLength),Ce,t)}function Me(e,t,r,n){return Le(Re(e,t,r),Pe,n)}function Ae(e,t,r,n){for(var a=[],o=0;o<r.length;o+=1){var s=De(new DataView(new Uint8Array(r[o]).buffer),n);s._subrs=[],s._subrsBias=0;var i=s.private[0],u=s.private[1];if(0!==i&&0!==u){var l=Me(e,u+t,i,n);if(s._defaultWidthX=l.defaultWidthX,s._nominalWidthX=l.nominalWidthX,0!==l.subrs){var p=Oe(e,u+l.subrs+t);s._subrs=p.objects,s._subrsBias=ke(s._subrs)}s._privateDict=l}a.push(s)}return a}function Ie(e,t,r){var n,a,o,s,i,u,l,p,c=new R,h=[],f=0,d=!1,v=!1,g=0,y=0;if(e.isCIDFont){var m=e.tables.cff.topDict._fdSelect[t.index],x=e.tables.cff.topDict._fdArray[m];i=x._subrs,u=x._subrsBias,l=x._defaultWidthX,p=x._nominalWidthX}else i=e.tables.cff.topDict._subrs,u=e.tables.cff.topDict._subrsBias,l=e.tables.cff.topDict._defaultWidthX,p=e.tables.cff.topDict._nominalWidthX;var b=l;function S(e,t){v&&c.closePath(),c.moveTo(e,t),v=!0}function T(){h.length%2!=0&&!d&&(b=h.shift()+p),f+=h.length>>1,h.length=0,d=!0}return function r(l){for(var m,x,U,k,O,E,R,w,L,C,P,D,M=0;M<l.length;){var A=l[M];switch(M+=1,A){case 1:case 3:T();break;case 4:h.length>1&&!d&&(b=h.shift()+p,d=!0),y+=h.pop(),S(g,y);break;case 5:for(;h.length>0;)g+=h.shift(),y+=h.shift(),c.lineTo(g,y);break;case 6:for(;h.length>0&&(g+=h.shift(),c.lineTo(g,y),0!==h.length);)y+=h.shift(),c.lineTo(g,y);break;case 7:for(;h.length>0&&(y+=h.shift(),c.lineTo(g,y),0!==h.length);)g+=h.shift(),c.lineTo(g,y);break;case 8:for(;h.length>0;)n=g+h.shift(),a=y+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),y=s+h.shift(),c.curveTo(n,a,o,s,g,y);break;case 10:O=h.pop()+u,(E=i[O])&&r(E);break;case 11:return;case 12:switch(A=l[M],M+=1,A){case 35:n=g+h.shift(),a=y+h.shift(),o=n+h.shift(),s=a+h.shift(),R=o+h.shift(),w=s+h.shift(),L=R+h.shift(),C=w+h.shift(),P=L+h.shift(),D=C+h.shift(),g=P+h.shift(),y=D+h.shift(),h.shift(),c.curveTo(n,a,o,s,R,w),c.curveTo(L,C,P,D,g,y);break;case 34:n=g+h.shift(),a=y,o=n+h.shift(),s=a+h.shift(),R=o+h.shift(),w=s,L=R+h.shift(),C=s,P=L+h.shift(),D=y,g=P+h.shift(),c.curveTo(n,a,o,s,R,w),c.curveTo(L,C,P,D,g,y);break;case 36:n=g+h.shift(),a=y+h.shift(),o=n+h.shift(),s=a+h.shift(),R=o+h.shift(),w=s,L=R+h.shift(),C=s,P=L+h.shift(),D=C+h.shift(),g=P+h.shift(),c.curveTo(n,a,o,s,R,w),c.curveTo(L,C,P,D,g,y);break;case 37:n=g+h.shift(),a=y+h.shift(),o=n+h.shift(),s=a+h.shift(),R=o+h.shift(),w=s+h.shift(),L=R+h.shift(),C=w+h.shift(),P=L+h.shift(),D=C+h.shift(),Math.abs(P-g)>Math.abs(D-y)?g=P+h.shift():y=D+h.shift(),c.curveTo(n,a,o,s,R,w),c.curveTo(L,C,P,D,g,y);break;default:console.log("Glyph "+t.index+": unknown operator 1200"+A),h.length=0}break;case 14:h.length>0&&!d&&(b=h.shift()+p,d=!0),v&&(c.closePath(),v=!1);break;case 18:T();break;case 19:case 20:T(),M+=f+7>>3;break;case 21:h.length>2&&!d&&(b=h.shift()+p,d=!0),y+=h.pop(),S(g+=h.pop(),y);break;case 22:h.length>1&&!d&&(b=h.shift()+p,d=!0),S(g+=h.pop(),y);break;case 23:T();break;case 24:for(;h.length>2;)n=g+h.shift(),a=y+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),y=s+h.shift(),c.curveTo(n,a,o,s,g,y);g+=h.shift(),y+=h.shift(),c.lineTo(g,y);break;case 25:for(;h.length>6;)g+=h.shift(),y+=h.shift(),c.lineTo(g,y);n=g+h.shift(),a=y+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),y=s+h.shift(),c.curveTo(n,a,o,s,g,y);break;case 26:for(h.length%2&&(g+=h.shift());h.length>0;)n=g,a=y+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o,y=s+h.shift(),c.curveTo(n,a,o,s,g,y);break;case 27:for(h.length%2&&(y+=h.shift());h.length>0;)n=g+h.shift(),a=y,o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),y=s,c.curveTo(n,a,o,s,g,y);break;case 28:m=l[M],x=l[M+1],h.push((m<<24|x<<16)>>16),M+=2;break;case 29:O=h.pop()+e.gsubrsBias,(E=e.gsubrs[O])&&r(E);break;case 30:for(;h.length>0&&(n=g,a=y+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),y=s+(1===h.length?h.shift():0),c.curveTo(n,a,o,s,g,y),0!==h.length);)n=g+h.shift(),a=y,o=n+h.shift(),s=a+h.shift(),y=s+h.shift(),g=o+(1===h.length?h.shift():0),c.curveTo(n,a,o,s,g,y);break;case 31:for(;h.length>0&&(n=g+h.shift(),a=y,o=n+h.shift(),s=a+h.shift(),y=s+h.shift(),g=o+(1===h.length?h.shift():0),c.curveTo(n,a,o,s,g,y),0!==h.length);)n=g,a=y+h.shift(),o=n+h.shift(),s=a+h.shift(),g=o+h.shift(),y=s+(1===h.length?h.shift():0),c.curveTo(n,a,o,s,g,y);break;default:A<32?console.log("Glyph "+t.index+": unknown operator "+A):A<247?h.push(A-139):A<251?(m=l[M],M+=1,h.push(256*(A-247)+m+108)):A<255?(m=l[M],M+=1,h.push(256*-(A-251)-m-108)):(m=l[M],x=l[M+1],U=l[M+2],k=l[M+3],M+=4,h.push((m<<24|x<<16|U<<8|k)/65536))}}}(r),t.advanceWidth=b,c}function Fe(e,t){var r,n=pe.indexOf(e);return n>=0&&(r=n),(n=t.indexOf(e))>=0?r=n+pe.length:(r=pe.length+t.length,t.push(e)),r}function Be(e,t,r){for(var n={},a=0;a<e.length;a+=1){var o=e[a],s=t[o.name];void 0===s||Ue(s,o.value)||("SID"===o.type&&(s=Fe(s,r)),n[o.op]={name:o.name,type:o.type,value:s})}return n}function Ne(e,t){var r=new J.Record("Top DICT",[{name:"dict",type:"DICT",value:{}}]);return r.dict=Be(Ce,e,t),r}function Ge(e){var t=new J.Record("Top DICT INDEX",[{name:"topDicts",type:"INDEX",value:[]}]);return t.topDicts=[{name:"topDict_0",type:"TABLE",value:e}],t}function ze(e){var t=[],r=e.path;t.push({name:"width",type:"NUMBER",value:e.advanceWidth});for(var n=0,a=0,o=0;o<r.commands.length;o+=1){var s=void 0,i=void 0,u=r.commands[o];if("Q"===u.type){var l=1/3,p=2/3;u={type:"C",x:u.x,y:u.y,x1:l*n+p*u.x1,y1:l*a+p*u.y1,x2:l*u.x+p*u.x1,y2:l*u.y+p*u.y1}}if("M"===u.type)s=Math.round(u.x-n),i=Math.round(u.y-a),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rmoveto",type:"OP",value:21}),n=Math.round(u.x),a=Math.round(u.y);else if("L"===u.type)s=Math.round(u.x-n),i=Math.round(u.y-a),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rlineto",type:"OP",value:5}),n=Math.round(u.x),a=Math.round(u.y);else if("C"===u.type){var c=Math.round(u.x1-n),h=Math.round(u.y1-a),f=Math.round(u.x2-u.x1),d=Math.round(u.y2-u.y1);s=Math.round(u.x-u.x2),i=Math.round(u.y-u.y2),t.push({name:"dx1",type:"NUMBER",value:c}),t.push({name:"dy1",type:"NUMBER",value:h}),t.push({name:"dx2",type:"NUMBER",value:f}),t.push({name:"dy2",type:"NUMBER",value:d}),t.push({name:"dx",type:"NUMBER",value:s}),t.push({name:"dy",type:"NUMBER",value:i}),t.push({name:"rrcurveto",type:"OP",value:8}),n=Math.round(u.x),a=Math.round(u.y)}}return t.push({name:"endchar",type:"OP",value:14}),t}var He=function(e,t,r,n){r.tables.cff={};var a=function(e,t){var r={};return r.formatMajor=se.getCard8(e,t),r.formatMinor=se.getCard8(e,t+1),r.size=se.getCard8(e,t+2),r.offsetSize=se.getCard8(e,t+3),r.startOffset=t,r.endOffset=t+4,r}(e,t),o=Oe(e,a.endOffset,se.bytesToString),s=Oe(e,o.endOffset),i=Oe(e,s.endOffset,se.bytesToString),u=Oe(e,i.endOffset);r.gsubrs=u.objects,r.gsubrsBias=ke(r.gsubrs);var l=Ae(e,t,s.objects,i.objects);if(1!==l.length)throw new Error("CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = "+l.length);var p=l[0];if(r.tables.cff.topDict=p,p._privateDict&&(r.defaultWidthX=p._privateDict.defaultWidthX,r.nominalWidthX=p._privateDict.nominalWidthX),void 0!==p.ros[0]&&void 0!==p.ros[1]&&(r.isCIDFont=!0),r.isCIDFont){var c=p.fdArray,h=p.fdSelect;if(0===c||0===h)throw new Error("Font is marked as a CID font, but FDArray and/or FDSelect information is missing");var f=Oe(e,c+=t),d=Ae(e,t,f.objects,i.objects);p._fdArray=d,h+=t,p._fdSelect=function(e,t,r,n){var a,o=[],s=new se.Parser(e,t),i=s.parseCard8();if(0===i)for(var u=0;u<r;u++){if((a=s.parseCard8())>=n)throw new Error("CFF table CID Font FDSelect has bad FD index value "+a+" (FD count "+n+")");o.push(a)}else{if(3!==i)throw new Error("CFF Table CID Font FDSelect table has unsupported format "+i);var l,p=s.parseCard16(),c=s.parseCard16();if(0!==c)throw new Error("CFF Table CID Font FDSelect format 3 range has bad initial GID "+c);for(var h=0;h<p;h++){if(a=s.parseCard8(),l=s.parseCard16(),a>=n)throw new Error("CFF table CID Font FDSelect has bad FD index value "+a+" (FD count "+n+")");if(l>r)throw new Error("CFF Table CID Font FDSelect format 3 range has bad GID "+l);for(;c<l;c++)o.push(a);c=l}if(l!==r)throw new Error("CFF Table CID Font FDSelect format 3 range has bad final GID "+l)}return o}(e,h,r.numGlyphs,d.length)}var v,g=t+p.private[1],y=Me(e,g,p.private[0],i.objects);if(r.defaultWidthX=y.defaultWidthX,r.nominalWidthX=y.nominalWidthX,0!==y.subrs){var m=g+y.subrs,x=Oe(e,m);r.subrs=x.objects,r.subrsBias=ke(r.subrs)}else r.subrs=[],r.subrsBias=0;n.lowMemory?(v=function(e,t){var r,n,a=[],o=se.getCard16(e,t);if(0!==o){var s=se.getByte(e,t+2);r=t+(o+1)*s+2;for(var i=t+3,u=0;u<o+1;u+=1)a.push(se.getOffset(e,i,s)),i+=s;n=r+a[o]}else n=t+2;return{offsets:a,startOffset:t,endOffset:n}}(e,t+p.charStrings),r.nGlyphs=v.offsets.length):(v=Oe(e,t+p.charStrings),r.nGlyphs=v.objects.length);var b=function(e,t,r,n){var a,o,s=new se.Parser(e,t);r-=1;var i=[".notdef"],u=s.parseCard8();if(0===u)for(var l=0;l<r;l+=1)a=s.parseSID(),i.push(we(n,a));else if(1===u)for(;i.length<=r;){a=s.parseSID(),o=s.parseCard8();for(var p=0;p<=o;p+=1)i.push(we(n,a)),a+=1}else{if(2!==u)throw new Error("Unknown charset format "+u);for(;i.length<=r;){a=s.parseSID(),o=s.parseCard16();for(var c=0;c<=o;c+=1)i.push(we(n,a)),a+=1}}return i}(e,t+p.charset,r.nGlyphs,i.objects);if(0===p.encoding?r.cffEncoding=new ge(ce,b):1===p.encoding?r.cffEncoding=new ge(he,b):r.cffEncoding=function(e,t,r){var n,a={},o=new se.Parser(e,t),s=o.parseCard8();if(0===s)for(var i=o.parseCard8(),u=0;u<i;u+=1)a[n=o.parseCard8()]=u;else{if(1!==s)throw new Error("Unknown encoding format "+s);var l=o.parseCard8();n=1;for(var p=0;p<l;p+=1)for(var c=o.parseCard8(),h=o.parseCard8(),f=c;f<=c+h;f+=1)a[f]=n,n+=1}return new ge(a,r)}(e,t+p.encoding,b),r.encoding=r.encoding||r.cffEncoding,r.glyphs=new Te.GlyphSet(r),n.lowMemory)r._push=function(n){var a=function(e,t,r,n,a){var o=se.getCard16(r,n),s=0;0!==o&&(s=n+(o+1)*se.getByte(r,n+2)+2);var i=se.getBytes(r,s+t[e],s+t[e+1]);return i}(n,v.offsets,e,t+p.charStrings);r.glyphs.push(n,Te.cffGlyphLoader(r,n,Ie,a))};else for(var S=0;S<r.nGlyphs;S+=1){var T=v.objects[S];r.glyphs.push(S,Te.cffGlyphLoader(r,S,Ie,T))}},_e=function(e,t){for(var r,n=new J.Table("CFF ",[{name:"header",type:"RECORD"},{name:"nameIndex",type:"RECORD"},{name:"topDictIndex",type:"RECORD"},{name:"stringIndex",type:"RECORD"},{name:"globalSubrIndex",type:"RECORD"},{name:"charsets",type:"RECORD"},{name:"charStringsIndex",type:"RECORD"},{name:"privateDict",type:"RECORD"}]),a=1/t.unitsPerEm,o={version:t.version,fullName:t.fullName,familyName:t.familyName,weight:t.weightName,fontBBox:t.fontBBox||[0,0,0,0],fontMatrix:[a,0,0,a,0,0],charset:999,encoding:0,charStrings:999,private:[0,999]},s=[],i=1;i<e.length;i+=1)r=e.get(i),s.push(r.name);var u=[];n.header=new J.Record("Header",[{name:"major",type:"Card8",value:1},{name:"minor",type:"Card8",value:0},{name:"hdrSize",type:"Card8",value:4},{name:"major",type:"Card8",value:1}]),n.nameIndex=function(e){var t=new J.Record("Name INDEX",[{name:"names",type:"INDEX",value:[]}]);t.names=[];for(var r=0;r<e.length;r+=1)t.names.push({name:"name_"+r,type:"NAME",value:e[r]});return t}([t.postScriptName]);var l=Ne(o,u);n.topDictIndex=Ge(l),n.globalSubrIndex=new J.Record("Global Subr INDEX",[{name:"subrs",type:"INDEX",value:[]}]),n.charsets=function(e,t){for(var r=new J.Record("Charsets",[{name:"format",type:"Card8",value:0}]),n=0;n<e.length;n+=1){var a=Fe(e[n],t);r.fields.push({name:"glyph_"+n,type:"SID",value:a})}return r}(s,u),n.charStringsIndex=function(e){for(var t=new J.Record("CharStrings INDEX",[{name:"charStrings",type:"INDEX",value:[]}]),r=0;r<e.length;r+=1){var n=e.get(r),a=ze(n);t.charStrings.push({name:n.name,type:"CHARSTRING",value:a})}return t}(e),n.privateDict=function(e,t){var r=new J.Record("Private DICT",[{name:"dict",type:"DICT",value:{}}]);return r.dict=Be(Pe,{},t),r}(0,u),n.stringIndex=function(e){var t=new J.Record("String INDEX",[{name:"strings",type:"INDEX",value:[]}]);t.strings=[];for(var r=0;r<e.length;r+=1)t.strings.push({name:"string_"+r,type:"STRING",value:e[r]});return t}(u);var p=n.header.sizeOf()+n.nameIndex.sizeOf()+n.topDictIndex.sizeOf()+n.stringIndex.sizeOf()+n.globalSubrIndex.sizeOf();return o.charset=p,o.encoding=0,o.charStrings=o.charset+n.charsets.sizeOf(),o.private[1]=o.charStrings+n.charStringsIndex.sizeOf(),l=Ne(o,u),n.topDictIndex=Ge(l),n},We=function(e,t){var r={},n=new se.Parser(e,t);return r.version=n.parseVersion(),r.fontRevision=Math.round(1e3*n.parseFixed())/1e3,r.checkSumAdjustment=n.parseULong(),r.magicNumber=n.parseULong(),C.argument(1594834165===r.magicNumber,"Font header has wrong magic number."),r.flags=n.parseUShort(),r.unitsPerEm=n.parseUShort(),r.created=n.parseLongDateTime(),r.modified=n.parseLongDateTime(),r.xMin=n.parseShort(),r.yMin=n.parseShort(),r.xMax=n.parseShort(),r.yMax=n.parseShort(),r.macStyle=n.parseUShort(),r.lowestRecPPEM=n.parseUShort(),r.fontDirectionHint=n.parseShort(),r.indexToLocFormat=n.parseShort(),r.glyphDataFormat=n.parseShort(),r},qe=function(e){var t=Math.round((new Date).getTime()/1e3)+2082844800,r=t;return e.createdTimestamp&&(r=e.createdTimestamp+2082844800),new J.Table("head",[{name:"version",type:"FIXED",value:65536},{name:"fontRevision",type:"FIXED",value:65536},{name:"checkSumAdjustment",type:"ULONG",value:0},{name:"magicNumber",type:"ULONG",value:1594834165},{name:"flags",type:"USHORT",value:0},{name:"unitsPerEm",type:"USHORT",value:1e3},{name:"created",type:"LONGDATETIME",value:r},{name:"modified",type:"LONGDATETIME",value:t},{name:"xMin",type:"SHORT",value:0},{name:"yMin",type:"SHORT",value:0},{name:"xMax",type:"SHORT",value:0},{name:"yMax",type:"SHORT",value:0},{name:"macStyle",type:"USHORT",value:0},{name:"lowestRecPPEM",type:"USHORT",value:0},{name:"fontDirectionHint",type:"SHORT",value:2},{name:"indexToLocFormat",type:"SHORT",value:0},{name:"glyphDataFormat",type:"SHORT",value:0}],e)},Xe=function(e,t){var r={},n=new se.Parser(e,t);return r.version=n.parseVersion(),r.ascender=n.parseShort(),r.descender=n.parseShort(),r.lineGap=n.parseShort(),r.advanceWidthMax=n.parseUShort(),r.minLeftSideBearing=n.parseShort(),r.minRightSideBearing=n.parseShort(),r.xMaxExtent=n.parseShort(),r.caretSlopeRise=n.parseShort(),r.caretSlopeRun=n.parseShort(),r.caretOffset=n.parseShort(),n.relativeOffset+=8,r.metricDataFormat=n.parseShort(),r.numberOfHMetrics=n.parseUShort(),r},je=function(e){return new J.Table("hhea",[{name:"version",type:"FIXED",value:65536},{name:"ascender",type:"FWORD",value:0},{name:"descender",type:"FWORD",value:0},{name:"lineGap",type:"FWORD",value:0},{name:"advanceWidthMax",type:"UFWORD",value:0},{name:"minLeftSideBearing",type:"FWORD",value:0},{name:"minRightSideBearing",type:"FWORD",value:0},{name:"xMaxExtent",type:"FWORD",value:0},{name:"caretSlopeRise",type:"SHORT",value:1},{name:"caretSlopeRun",type:"SHORT",value:0},{name:"caretOffset",type:"SHORT",value:0},{name:"reserved1",type:"SHORT",value:0},{name:"reserved2",type:"SHORT",value:0},{name:"reserved3",type:"SHORT",value:0},{name:"reserved4",type:"SHORT",value:0},{name:"metricDataFormat",type:"SHORT",value:0},{name:"numberOfHMetrics",type:"USHORT",value:0}],e)},Ye=function(e,t,r,n,a,o,s){s.lowMemory?function(e,t,r,n,a){var o,s;e._hmtxTableData={};for(var i=new se.Parser(t,r),u=0;u<a;u+=1)u<n&&(o=i.parseUShort(),s=i.parseShort()),e._hmtxTableData[u]={advanceWidth:o,leftSideBearing:s}}(e,t,r,n,a):function(e,t,r,n,a){for(var o,s,i=new se.Parser(e,t),u=0;u<n;u+=1){u<r&&(o=i.parseUShort(),s=i.parseShort());var l=a.get(u);l.advanceWidth=o,l.leftSideBearing=s}}(t,r,n,a,o)},Ve=function(e){for(var t=new J.Table("hmtx",[]),r=0;r<e.length;r+=1){var n=e.get(r),a=n.advanceWidth||0,o=n.leftSideBearing||0;t.fields.push({name:"advanceWidth_"+r,type:"USHORT",value:a}),t.fields.push({name:"leftSideBearing_"+r,type:"SHORT",value:o})}return t},Ze=function(e){for(var t=new J.Table("ltag",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"numTags",type:"ULONG",value:e.length}]),r="",n=12+4*e.length,a=0;a<e.length;++a){var o=r.indexOf(e[a]);o<0&&(o=r.length,r+=e[a]),t.fields.push({name:"offset "+a,type:"USHORT",value:n+o}),t.fields.push({name:"length "+a,type:"USHORT",value:e[a].length})}return t.fields.push({name:"stringPool",type:"CHARARRAY",value:r}),t},Qe=function(e,t){var r=new se.Parser(e,t),n=r.parseULong();C.argument(1===n,"Unsupported ltag table version."),r.skip("uLong",1);for(var a=r.parseULong(),o=[],s=0;s<a;s++){for(var i="",u=t+r.parseUShort(),l=r.parseUShort(),p=u;p<u+l;++p)i+=String.fromCharCode(e.getInt8(p));o.push(i)}return o},Ke=function(e,t){var r={},n=new se.Parser(e,t);return r.version=n.parseVersion(),r.numGlyphs=n.parseUShort(),1===r.version&&(r.maxPoints=n.parseUShort(),r.maxContours=n.parseUShort(),r.maxCompositePoints=n.parseUShort(),r.maxCompositeContours=n.parseUShort(),r.maxZones=n.parseUShort(),r.maxTwilightPoints=n.parseUShort(),r.maxStorage=n.parseUShort(),r.maxFunctionDefs=n.parseUShort(),r.maxInstructionDefs=n.parseUShort(),r.maxStackElements=n.parseUShort(),r.maxSizeOfInstructions=n.parseUShort(),r.maxComponentElements=n.parseUShort(),r.maxComponentDepth=n.parseUShort()),r},Je=function(e){return new J.Table("maxp",[{name:"version",type:"FIXED",value:20480},{name:"numGlyphs",type:"USHORT",value:e}])},$e=["copyright","fontFamily","fontSubfamily","uniqueID","fullName","version","postScriptName","trademark","manufacturer","designer","description","manufacturerURL","designerURL","license","licenseURL","reserved","preferredFamily","preferredSubfamily","compatibleFullName","sampleText","postScriptFindFontName","wwsFamily","wwsSubfamily"],et={0:"en",1:"fr",2:"de",3:"it",4:"nl",5:"sv",6:"es",7:"da",8:"pt",9:"no",10:"he",11:"ja",12:"ar",13:"fi",14:"el",15:"is",16:"mt",17:"tr",18:"hr",19:"zh-Hant",20:"ur",21:"hi",22:"th",23:"ko",24:"lt",25:"pl",26:"hu",27:"es",28:"lv",29:"se",30:"fo",31:"fa",32:"ru",33:"zh",34:"nl-BE",35:"ga",36:"sq",37:"ro",38:"cz",39:"sk",40:"si",41:"yi",42:"sr",43:"mk",44:"bg",45:"uk",46:"be",47:"uz",48:"kk",49:"az-Cyrl",50:"az-Arab",51:"hy",52:"ka",53:"mo",54:"ky",55:"tg",56:"tk",57:"mn-CN",58:"mn",59:"ps",60:"ks",61:"ku",62:"sd",63:"bo",64:"ne",65:"sa",66:"mr",67:"bn",68:"as",69:"gu",70:"pa",71:"or",72:"ml",73:"kn",74:"ta",75:"te",76:"si",77:"my",78:"km",79:"lo",80:"vi",81:"id",82:"tl",83:"ms",84:"ms-Arab",85:"am",86:"ti",87:"om",88:"so",89:"sw",90:"rw",91:"rn",92:"ny",93:"mg",94:"eo",128:"cy",129:"eu",130:"ca",131:"la",132:"qu",133:"gn",134:"ay",135:"tt",136:"ug",137:"dz",138:"jv",139:"su",140:"gl",141:"af",142:"br",143:"iu",144:"gd",145:"gv",146:"ga",147:"to",148:"el-polyton",149:"kl",150:"az",151:"nn"},tt={0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:5,11:1,12:4,13:0,14:6,15:0,16:0,17:0,18:0,19:2,20:4,21:9,22:21,23:3,24:29,25:29,26:29,27:29,28:29,29:0,30:0,31:4,32:7,33:25,34:0,35:0,36:0,37:0,38:29,39:29,40:0,41:5,42:7,43:7,44:7,45:7,46:7,47:7,48:7,49:7,50:4,51:24,52:23,53:7,54:7,55:7,56:7,57:27,58:7,59:4,60:4,61:4,62:4,63:26,64:9,65:9,66:9,67:13,68:13,69:11,70:10,71:12,72:17,73:16,74:14,75:15,76:18,77:19,78:20,79:22,80:30,81:0,82:0,83:0,84:4,85:28,86:28,87:28,88:0,89:0,90:0,91:0,92:0,93:0,94:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:7,136:4,137:26,138:0,139:0,140:0,141:0,142:0,143:28,144:0,145:0,146:0,147:0,148:6,149:0,150:0,151:0},rt={1078:"af",1052:"sq",1156:"gsw",1118:"am",5121:"ar-DZ",15361:"ar-BH",3073:"ar",2049:"ar-IQ",11265:"ar-JO",13313:"ar-KW",12289:"ar-LB",4097:"ar-LY",6145:"ary",8193:"ar-OM",16385:"ar-QA",1025:"ar-SA",10241:"ar-SY",7169:"aeb",14337:"ar-AE",9217:"ar-YE",1067:"hy",1101:"as",2092:"az-Cyrl",1068:"az",1133:"ba",1069:"eu",1059:"be",2117:"bn",1093:"bn-IN",8218:"bs-Cyrl",5146:"bs",1150:"br",1026:"bg",1027:"ca",3076:"zh-HK",5124:"zh-MO",2052:"zh",4100:"zh-SG",1028:"zh-TW",1155:"co",1050:"hr",4122:"hr-BA",1029:"cs",1030:"da",1164:"prs",1125:"dv",2067:"nl-BE",1043:"nl",3081:"en-AU",10249:"en-BZ",4105:"en-CA",9225:"en-029",16393:"en-IN",6153:"en-IE",8201:"en-JM",17417:"en-MY",5129:"en-NZ",13321:"en-PH",18441:"en-SG",7177:"en-ZA",11273:"en-TT",2057:"en-GB",1033:"en",12297:"en-ZW",1061:"et",1080:"fo",1124:"fil",1035:"fi",2060:"fr-BE",3084:"fr-CA",1036:"fr",5132:"fr-LU",6156:"fr-MC",4108:"fr-CH",1122:"fy",1110:"gl",1079:"ka",3079:"de-AT",1031:"de",5127:"de-LI",4103:"de-LU",2055:"de-CH",1032:"el",1135:"kl",1095:"gu",1128:"ha",1037:"he",1081:"hi",1038:"hu",1039:"is",1136:"ig",1057:"id",1117:"iu",2141:"iu-Latn",2108:"ga",1076:"xh",1077:"zu",1040:"it",2064:"it-CH",1041:"ja",1099:"kn",1087:"kk",1107:"km",1158:"quc",1159:"rw",1089:"sw",1111:"kok",1042:"ko",1088:"ky",1108:"lo",1062:"lv",1063:"lt",2094:"dsb",1134:"lb",1071:"mk",2110:"ms-BN",1086:"ms",1100:"ml",1082:"mt",1153:"mi",1146:"arn",1102:"mr",1148:"moh",1104:"mn",2128:"mn-CN",1121:"ne",1044:"nb",2068:"nn",1154:"oc",1096:"or",1123:"ps",1045:"pl",1046:"pt",2070:"pt-PT",1094:"pa",1131:"qu-BO",2155:"qu-EC",3179:"qu",1048:"ro",1047:"rm",1049:"ru",9275:"smn",4155:"smj-NO",5179:"smj",3131:"se-FI",1083:"se",2107:"se-SE",8251:"sms",6203:"sma-NO",7227:"sms",1103:"sa",7194:"sr-Cyrl-BA",3098:"sr",6170:"sr-Latn-BA",2074:"sr-Latn",1132:"nso",1074:"tn",1115:"si",1051:"sk",1060:"sl",11274:"es-AR",16394:"es-BO",13322:"es-CL",9226:"es-CO",5130:"es-CR",7178:"es-DO",12298:"es-EC",17418:"es-SV",4106:"es-GT",18442:"es-HN",2058:"es-MX",19466:"es-NI",6154:"es-PA",15370:"es-PY",10250:"es-PE",20490:"es-PR",3082:"es",1034:"es",21514:"es-US",14346:"es-UY",8202:"es-VE",2077:"sv-FI",1053:"sv",1114:"syr",1064:"tg",2143:"tzm",1097:"ta",1092:"tt",1098:"te",1054:"th",1105:"bo",1055:"tr",1090:"tk",1152:"ug",1058:"uk",1070:"hsb",1056:"ur",2115:"uz-Cyrl",1091:"uz",1066:"vi",1106:"cy",1160:"wo",1157:"sah",1144:"ii",1130:"yo"};function nt(e,t,r){switch(e){case 0:if(65535===t)return"und";if(r)return r[t];break;case 1:return et[t];case 3:return rt[t]}}var at="utf-16",ot={0:"macintosh",1:"x-mac-japanese",2:"x-mac-chinesetrad",3:"x-mac-korean",6:"x-mac-greek",7:"x-mac-cyrillic",9:"x-mac-devanagai",10:"x-mac-gurmukhi",11:"x-mac-gujarati",12:"x-mac-oriya",13:"x-mac-bengali",14:"x-mac-tamil",15:"x-mac-telugu",16:"x-mac-kannada",17:"x-mac-malayalam",18:"x-mac-sinhalese",19:"x-mac-burmese",20:"x-mac-khmer",21:"x-mac-thai",22:"x-mac-lao",23:"x-mac-georgian",24:"x-mac-armenian",25:"x-mac-chinesesimp",26:"x-mac-tibetan",27:"x-mac-mongolian",28:"x-mac-ethiopic",29:"x-mac-ce",30:"x-mac-vietnamese",31:"x-mac-extarabic"},st={15:"x-mac-icelandic",17:"x-mac-turkish",18:"x-mac-croatian",24:"x-mac-ce",25:"x-mac-ce",26:"x-mac-ce",27:"x-mac-ce",28:"x-mac-ce",30:"x-mac-icelandic",37:"x-mac-romanian",38:"x-mac-ce",39:"x-mac-ce",40:"x-mac-ce",143:"x-mac-inuit",146:"x-mac-gaelic"};function it(e,t,r){switch(e){case 0:return at;case 1:return st[r]||ot[t];case 3:if(1===t||10===t)return at}}function ut(e){var t={};for(var r in e)t[e[r]]=parseInt(r);return t}function lt(e,t,r,n,a,o){return new J.Record("NameRecord",[{name:"platformID",type:"USHORT",value:e},{name:"encodingID",type:"USHORT",value:t},{name:"languageID",type:"USHORT",value:r},{name:"nameID",type:"USHORT",value:n},{name:"length",type:"USHORT",value:a},{name:"offset",type:"USHORT",value:o}])}function pt(e,t){var r=function(e,t){var r=e.length,n=t.length-r+1;e:for(var a=0;a<n;a++)for(;a<n;a++){for(var o=0;o<r;o++)if(t[a+o]!==e[o])continue e;return a}return-1}(e,t);if(r<0){r=t.length;for(var n=0,a=e.length;n<a;++n)t.push(e[n])}return r}var ct=function(e,t,r){for(var n={},a=new se.Parser(e,t),o=a.parseUShort(),s=a.parseUShort(),i=a.offset+a.parseUShort(),u=0;u<s;u++){var l=a.parseUShort(),p=a.parseUShort(),c=a.parseUShort(),h=a.parseUShort(),f=$e[h]||h,d=a.parseUShort(),v=a.parseUShort(),g=nt(l,c,r),y=it(l,p,c);if(void 0!==y&&void 0!==g){var m;if(m=y===at?D.UTF16(e,i+v,d):D.MACSTRING(e,i+v,d,y)){var x=n[f];void 0===x&&(x=n[f]={}),x[g]=m}}}return 1===o&&a.parseUShort(),n},ht=function(e,t){var r,n=[],a={},o=ut($e);for(var s in e){var i=o[s];if(void 0===i&&(i=s),r=parseInt(i),isNaN(r))throw new Error('Name table entry "'+s+'" does not exist, see nameTableNames for complete list.');a[r]=e[s],n.push(r)}for(var u=ut(et),l=ut(rt),p=[],c=[],h=0;h<n.length;h++){var f=a[r=n[h]];for(var d in f){var v=f[d],g=1,y=u[d],m=tt[y],x=it(g,m,y),b=M.MACSTRING(v,x);void 0===b&&(g=0,(y=t.indexOf(d))<0&&(y=t.length,t.push(d)),m=4,b=M.UTF16(v));var S=pt(b,c);p.push(lt(g,m,y,r,b.length,S));var T=l[d];if(void 0!==T){var U=M.UTF16(v),k=pt(U,c);p.push(lt(3,1,T,r,U.length,k))}}}p.sort((function(e,t){return e.platformID-t.platformID||e.encodingID-t.encodingID||e.languageID-t.languageID||e.nameID-t.nameID}));for(var O=new J.Table("name",[{name:"format",type:"USHORT",value:0},{name:"count",type:"USHORT",value:p.length},{name:"stringOffset",type:"USHORT",value:6+12*p.length}]),E=0;E<p.length;E++)O.fields.push({name:"record_"+E,type:"RECORD",value:p[E]});return O.fields.push({name:"strings",type:"LITERAL",value:c}),O},ft=[{begin:0,end:127},{begin:128,end:255},{begin:256,end:383},{begin:384,end:591},{begin:592,end:687},{begin:688,end:767},{begin:768,end:879},{begin:880,end:1023},{begin:11392,end:11519},{begin:1024,end:1279},{begin:1328,end:1423},{begin:1424,end:1535},{begin:42240,end:42559},{begin:1536,end:1791},{begin:1984,end:2047},{begin:2304,end:2431},{begin:2432,end:2559},{begin:2560,end:2687},{begin:2688,end:2815},{begin:2816,end:2943},{begin:2944,end:3071},{begin:3072,end:3199},{begin:3200,end:3327},{begin:3328,end:3455},{begin:3584,end:3711},{begin:3712,end:3839},{begin:4256,end:4351},{begin:6912,end:7039},{begin:4352,end:4607},{begin:7680,end:7935},{begin:7936,end:8191},{begin:8192,end:8303},{begin:8304,end:8351},{begin:8352,end:8399},{begin:8400,end:8447},{begin:8448,end:8527},{begin:8528,end:8591},{begin:8592,end:8703},{begin:8704,end:8959},{begin:8960,end:9215},{begin:9216,end:9279},{begin:9280,end:9311},{begin:9312,end:9471},{begin:9472,end:9599},{begin:9600,end:9631},{begin:9632,end:9727},{begin:9728,end:9983},{begin:9984,end:10175},{begin:12288,end:12351},{begin:12352,end:12447},{begin:12448,end:12543},{begin:12544,end:12591},{begin:12592,end:12687},{begin:43072,end:43135},{begin:12800,end:13055},{begin:13056,end:13311},{begin:44032,end:55215},{begin:55296,end:57343},{begin:67840,end:67871},{begin:19968,end:40959},{begin:57344,end:63743},{begin:12736,end:12783},{begin:64256,end:64335},{begin:64336,end:65023},{begin:65056,end:65071},{begin:65040,end:65055},{begin:65104,end:65135},{begin:65136,end:65279},{begin:65280,end:65519},{begin:65520,end:65535},{begin:3840,end:4095},{begin:1792,end:1871},{begin:1920,end:1983},{begin:3456,end:3583},{begin:4096,end:4255},{begin:4608,end:4991},{begin:5024,end:5119},{begin:5120,end:5759},{begin:5760,end:5791},{begin:5792,end:5887},{begin:6016,end:6143},{begin:6144,end:6319},{begin:10240,end:10495},{begin:40960,end:42127},{begin:5888,end:5919},{begin:66304,end:66351},{begin:66352,end:66383},{begin:66560,end:66639},{begin:118784,end:119039},{begin:119808,end:120831},{begin:1044480,end:1048573},{begin:65024,end:65039},{begin:917504,end:917631},{begin:6400,end:6479},{begin:6480,end:6527},{begin:6528,end:6623},{begin:6656,end:6687},{begin:11264,end:11359},{begin:11568,end:11647},{begin:19904,end:19967},{begin:43008,end:43055},{begin:65536,end:65663},{begin:65856,end:65935},{begin:66432,end:66463},{begin:66464,end:66527},{begin:66640,end:66687},{begin:66688,end:66735},{begin:67584,end:67647},{begin:68096,end:68191},{begin:119552,end:119647},{begin:73728,end:74751},{begin:119648,end:119679},{begin:7040,end:7103},{begin:7168,end:7247},{begin:7248,end:7295},{begin:43136,end:43231},{begin:43264,end:43311},{begin:43312,end:43359},{begin:43520,end:43615},{begin:65936,end:65999},{begin:66e3,end:66047},{begin:66208,end:66271},{begin:127024,end:127135}],dt=function(e,t){var r={},n=new se.Parser(e,t);r.version=n.parseUShort(),r.xAvgCharWidth=n.parseShort(),r.usWeightClass=n.parseUShort(),r.usWidthClass=n.parseUShort(),r.fsType=n.parseUShort(),r.ySubscriptXSize=n.parseShort(),r.ySubscriptYSize=n.parseShort(),r.ySubscriptXOffset=n.parseShort(),r.ySubscriptYOffset=n.parseShort(),r.ySuperscriptXSize=n.parseShort(),r.ySuperscriptYSize=n.parseShort(),r.ySuperscriptXOffset=n.parseShort(),r.ySuperscriptYOffset=n.parseShort(),r.yStrikeoutSize=n.parseShort(),r.yStrikeoutPosition=n.parseShort(),r.sFamilyClass=n.parseShort(),r.panose=[];for(var a=0;a<10;a++)r.panose[a]=n.parseByte();return r.ulUnicodeRange1=n.parseULong(),r.ulUnicodeRange2=n.parseULong(),r.ulUnicodeRange3=n.parseULong(),r.ulUnicodeRange4=n.parseULong(),r.achVendID=String.fromCharCode(n.parseByte(),n.parseByte(),n.parseByte(),n.parseByte()),r.fsSelection=n.parseUShort(),r.usFirstCharIndex=n.parseUShort(),r.usLastCharIndex=n.parseUShort(),r.sTypoAscender=n.parseShort(),r.sTypoDescender=n.parseShort(),r.sTypoLineGap=n.parseShort(),r.usWinAscent=n.parseUShort(),r.usWinDescent=n.parseUShort(),r.version>=1&&(r.ulCodePageRange1=n.parseULong(),r.ulCodePageRange2=n.parseULong()),r.version>=2&&(r.sxHeight=n.parseShort(),r.sCapHeight=n.parseShort(),r.usDefaultChar=n.parseUShort(),r.usBreakChar=n.parseUShort(),r.usMaxContent=n.parseUShort()),r},vt=function(e){return new J.Table("OS/2",[{name:"version",type:"USHORT",value:3},{name:"xAvgCharWidth",type:"SHORT",value:0},{name:"usWeightClass",type:"USHORT",value:0},{name:"usWidthClass",type:"USHORT",value:0},{name:"fsType",type:"USHORT",value:0},{name:"ySubscriptXSize",type:"SHORT",value:650},{name:"ySubscriptYSize",type:"SHORT",value:699},{name:"ySubscriptXOffset",type:"SHORT",value:0},{name:"ySubscriptYOffset",type:"SHORT",value:140},{name:"ySuperscriptXSize",type:"SHORT",value:650},{name:"ySuperscriptYSize",type:"SHORT",value:699},{name:"ySuperscriptXOffset",type:"SHORT",value:0},{name:"ySuperscriptYOffset",type:"SHORT",value:479},{name:"yStrikeoutSize",type:"SHORT",value:49},{name:"yStrikeoutPosition",type:"SHORT",value:258},{name:"sFamilyClass",type:"SHORT",value:0},{name:"bFamilyType",type:"BYTE",value:0},{name:"bSerifStyle",type:"BYTE",value:0},{name:"bWeight",type:"BYTE",value:0},{name:"bProportion",type:"BYTE",value:0},{name:"bContrast",type:"BYTE",value:0},{name:"bStrokeVariation",type:"BYTE",value:0},{name:"bArmStyle",type:"BYTE",value:0},{name:"bLetterform",type:"BYTE",value:0},{name:"bMidline",type:"BYTE",value:0},{name:"bXHeight",type:"BYTE",value:0},{name:"ulUnicodeRange1",type:"ULONG",value:0},{name:"ulUnicodeRange2",type:"ULONG",value:0},{name:"ulUnicodeRange3",type:"ULONG",value:0},{name:"ulUnicodeRange4",type:"ULONG",value:0},{name:"achVendID",type:"CHARARRAY",value:"XXXX"},{name:"fsSelection",type:"USHORT",value:0},{name:"usFirstCharIndex",type:"USHORT",value:0},{name:"usLastCharIndex",type:"USHORT",value:0},{name:"sTypoAscender",type:"SHORT",value:0},{name:"sTypoDescender",type:"SHORT",value:0},{name:"sTypoLineGap",type:"SHORT",value:0},{name:"usWinAscent",type:"USHORT",value:0},{name:"usWinDescent",type:"USHORT",value:0},{name:"ulCodePageRange1",type:"ULONG",value:0},{name:"ulCodePageRange2",type:"ULONG",value:0},{name:"sxHeight",type:"SHORT",value:0},{name:"sCapHeight",type:"SHORT",value:0},{name:"usDefaultChar",type:"USHORT",value:0},{name:"usBreakChar",type:"USHORT",value:0},{name:"usMaxContext",type:"USHORT",value:0}],e)},gt=function(e){for(var t=0;t<ft.length;t+=1){var r=ft[t];if(e>=r.begin&&e<r.end)return t}return-1},yt=function(e,t){var r={},n=new se.Parser(e,t);switch(r.version=n.parseVersion(),r.italicAngle=n.parseFixed(),r.underlinePosition=n.parseShort(),r.underlineThickness=n.parseShort(),r.isFixedPitch=n.parseULong(),r.minMemType42=n.parseULong(),r.maxMemType42=n.parseULong(),r.minMemType1=n.parseULong(),r.maxMemType1=n.parseULong(),r.version){case 1:r.names=fe.slice();break;case 2:r.numberOfGlyphs=n.parseUShort(),r.glyphNameIndex=new Array(r.numberOfGlyphs);for(var a=0;a<r.numberOfGlyphs;a++)r.glyphNameIndex[a]=n.parseUShort();r.names=[];for(var o=0;o<r.numberOfGlyphs;o++)if(r.glyphNameIndex[o]>=fe.length){var s=n.parseChar();r.names.push(n.parseString(s))}break;case 2.5:r.numberOfGlyphs=n.parseUShort(),r.offset=new Array(r.numberOfGlyphs);for(var i=0;i<r.numberOfGlyphs;i++)r.offset[i]=n.parseChar()}return r},mt=function(){return new J.Table("post",[{name:"version",type:"FIXED",value:196608},{name:"italicAngle",type:"FIXED",value:0},{name:"underlinePosition",type:"FWORD",value:0},{name:"underlineThickness",type:"FWORD",value:0},{name:"isFixedPitch",type:"ULONG",value:0},{name:"minMemType42",type:"ULONG",value:0},{name:"maxMemType42",type:"ULONG",value:0},{name:"minMemType1",type:"ULONG",value:0},{name:"maxMemType1",type:"ULONG",value:0}])},xt=new Array(9);xt[1]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{substFormat:1,coverage:this.parsePointer(ae.coverage),deltaGlyphId:this.parseUShort()}:2===t?{substFormat:2,coverage:this.parsePointer(ae.coverage),substitute:this.parseOffset16List()}:void C.assert(!1,"0x"+e.toString(16)+": lookup type 1 format must be 1 or 2.")},xt[2]=function(){var e=this.parseUShort();return C.argument(1===e,"GSUB Multiple Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(ae.coverage),sequences:this.parseListOfLists()}},xt[3]=function(){var e=this.parseUShort();return C.argument(1===e,"GSUB Alternate Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(ae.coverage),alternateSets:this.parseListOfLists()}},xt[4]=function(){var e=this.parseUShort();return C.argument(1===e,"GSUB ligature table identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(ae.coverage),ligatureSets:this.parseListOfLists((function(){return{ligGlyph:this.parseUShort(),components:this.parseUShortList(this.parseUShort()-1)}}))}};var bt={sequenceIndex:ae.uShort,lookupListIndex:ae.uShort};xt[5]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();if(1===t)return{substFormat:t,coverage:this.parsePointer(ae.coverage),ruleSets:this.parseListOfLists((function(){var e=this.parseUShort(),t=this.parseUShort();return{input:this.parseUShortList(e-1),lookupRecords:this.parseRecordList(t,bt)}}))};if(2===t)return{substFormat:t,coverage:this.parsePointer(ae.coverage),classDef:this.parsePointer(ae.classDef),classSets:this.parseListOfLists((function(){var e=this.parseUShort(),t=this.parseUShort();return{classes:this.parseUShortList(e-1),lookupRecords:this.parseRecordList(t,bt)}}))};if(3===t){var r=this.parseUShort(),n=this.parseUShort();return{substFormat:t,coverages:this.parseList(r,ae.pointer(ae.coverage)),lookupRecords:this.parseRecordList(n,bt)}}C.assert(!1,"0x"+e.toString(16)+": lookup type 5 format must be 1, 2 or 3.")},xt[6]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{substFormat:1,coverage:this.parsePointer(ae.coverage),chainRuleSets:this.parseListOfLists((function(){return{backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(bt)}}))}:2===t?{substFormat:2,coverage:this.parsePointer(ae.coverage),backtrackClassDef:this.parsePointer(ae.classDef),inputClassDef:this.parsePointer(ae.classDef),lookaheadClassDef:this.parsePointer(ae.classDef),chainClassSet:this.parseListOfLists((function(){return{backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(bt)}}))}:3===t?{substFormat:3,backtrackCoverage:this.parseList(ae.pointer(ae.coverage)),inputCoverage:this.parseList(ae.pointer(ae.coverage)),lookaheadCoverage:this.parseList(ae.pointer(ae.coverage)),lookupRecords:this.parseRecordList(bt)}:void C.assert(!1,"0x"+e.toString(16)+": lookup type 6 format must be 1, 2 or 3.")},xt[7]=function(){var e=this.parseUShort();C.argument(1===e,"GSUB Extension Substitution subtable identifier-format must be 1");var t=this.parseUShort(),r=new ae(this.data,this.offset+this.parseULong());return{substFormat:1,lookupType:t,extension:xt[t].call(r)}},xt[8]=function(){var e=this.parseUShort();return C.argument(1===e,"GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"),{substFormat:e,coverage:this.parsePointer(ae.coverage),backtrackCoverage:this.parseList(ae.pointer(ae.coverage)),lookaheadCoverage:this.parseList(ae.pointer(ae.coverage)),substitutes:this.parseUShortList()}};var St=new Array(9);St[1]=function(e){return 1===e.substFormat?new J.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new J.Coverage(e.coverage)},{name:"deltaGlyphID",type:"USHORT",value:e.deltaGlyphId}]):new J.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:2},{name:"coverage",type:"TABLE",value:new J.Coverage(e.coverage)}].concat(J.ushortList("substitute",e.substitute)))},St[3]=function(e){return C.assert(1===e.substFormat,"Lookup type 3 substFormat must be 1."),new J.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new J.Coverage(e.coverage)}].concat(J.tableList("altSet",e.alternateSets,(function(e){return new J.Table("alternateSetTable",J.ushortList("alternate",e))}))))},St[4]=function(e){return C.assert(1===e.substFormat,"Lookup type 4 substFormat must be 1."),new J.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new J.Coverage(e.coverage)}].concat(J.tableList("ligSet",e.ligatureSets,(function(e){return new J.Table("ligatureSetTable",J.tableList("ligature",e,(function(e){return new J.Table("ligatureTable",[{name:"ligGlyph",type:"USHORT",value:e.ligGlyph}].concat(J.ushortList("component",e.components,e.components.length+1)))})))}))))};var Tt=function(e,t){var r=new ae(e,t=t||0),n=r.parseVersion(1);return C.argument(1===n||1.1===n,"Unsupported GSUB table version."),1===n?{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(xt)}:{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(xt),variations:r.parseFeatureVariationsList()}},Ut=function(e){return new J.Table("GSUB",[{name:"version",type:"ULONG",value:65536},{name:"scripts",type:"TABLE",value:new J.ScriptList(e.scripts)},{name:"features",type:"TABLE",value:new J.FeatureList(e.features)},{name:"lookups",type:"TABLE",value:new J.LookupList(e.lookups,St)}])},kt=function(e,t){var r=new se.Parser(e,t),n=r.parseULong();C.argument(1===n,"Unsupported META table version."),r.parseULong(),r.parseULong();for(var a=r.parseULong(),o={},s=0;s<a;s++){var i=r.parseTag(),u=r.parseULong(),l=r.parseULong(),p=D.UTF8(e,t+u,l);o[i]=p}return o},Ot=function(e){var t=Object.keys(e).length,r="",n=16+12*t,a=new J.Table("meta",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"offset",type:"ULONG",value:n},{name:"numTags",type:"ULONG",value:t}]);for(var o in e){var s=r.length;r+=e[o],a.fields.push({name:"tag "+o,type:"TAG",value:o}),a.fields.push({name:"offset "+o,type:"ULONG",value:n+s}),a.fields.push({name:"length "+o,type:"ULONG",value:e[o].length})}return a.fields.push({name:"stringPool",type:"CHARARRAY",value:r}),a};function Et(e){return Math.log(e)/Math.log(2)|0}function Rt(e){for(;e.length%4!=0;)e.push(0);for(var t=0,r=0;r<e.length;r+=4)t+=(e[r]<<24)+(e[r+1]<<16)+(e[r+2]<<8)+e[r+3];return t%Math.pow(2,32)}function wt(e,t,r,n){return new J.Record("Table Record",[{name:"tag",type:"TAG",value:void 0!==e?e:""},{name:"checkSum",type:"ULONG",value:void 0!==t?t:0},{name:"offset",type:"ULONG",value:void 0!==r?r:0},{name:"length",type:"ULONG",value:void 0!==n?n:0}])}function Lt(e){var t=new J.Table("sfnt",[{name:"version",type:"TAG",value:"OTTO"},{name:"numTables",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);t.tables=e,t.numTables=e.length;var r=Math.pow(2,Et(t.numTables));t.searchRange=16*r,t.entrySelector=Et(r),t.rangeShift=16*t.numTables-t.searchRange;for(var n=[],a=[],o=t.sizeOf()+wt().sizeOf()*t.numTables;o%4!=0;)o+=1,a.push({name:"padding",type:"BYTE",value:0});for(var s=0;s<e.length;s+=1){var i=e[s];C.argument(4===i.tableName.length,"Table name"+i.tableName+" is invalid.");var u=i.sizeOf(),l=wt(i.tableName,Rt(i.encode()),o,u);for(n.push({name:l.tag+" Table Record",type:"RECORD",value:l}),a.push({name:i.tableName+" table",type:"RECORD",value:i}),o+=u,C.argument(!isNaN(o),"Something went wrong calculating the offset.");o%4!=0;)o+=1,a.push({name:"padding",type:"BYTE",value:0})}return n.sort((function(e,t){return e.value.tag>t.value.tag?1:-1})),t.fields=t.fields.concat(n),t.fields=t.fields.concat(a),t}function Ct(e,t,r){for(var n=0;n<t.length;n+=1){var a=e.charToGlyphIndex(t[n]);if(a>0)return e.glyphs.get(a).getMetrics()}return r}function Pt(e){for(var t=0,r=0;r<e.length;r+=1)t+=e[r];return t/e.length}var Dt=function(e){for(var t,r=[],n=[],a=[],o=[],s=[],i=[],u=[],l=0,p=0,c=0,h=0,f=0,d=0;d<e.glyphs.length;d+=1){var v=e.glyphs.get(d),g=0|v.unicode;if(isNaN(v.advanceWidth))throw new Error("Glyph "+v.name+" ("+d+"): advanceWidth is not a number.");(t>g||void 0===t)&&g>0&&(t=g),l<g&&(l=g);var y=gt(g);if(y<32)p|=1<<y;else if(y<64)c|=1<<y-32;else if(y<96)h|=1<<y-64;else{if(!(y<123))throw new Error("Unicode ranges bits > 123 are reserved for internal usage");f|=1<<y-96}if(".notdef"!==v.name){var m=v.getMetrics();r.push(m.xMin),n.push(m.yMin),a.push(m.xMax),o.push(m.yMax),i.push(m.leftSideBearing),u.push(m.rightSideBearing),s.push(v.advanceWidth)}}var x={xMin:Math.min.apply(null,r),yMin:Math.min.apply(null,n),xMax:Math.max.apply(null,a),yMax:Math.max.apply(null,o),advanceWidthMax:Math.max.apply(null,s),advanceWidthAvg:Pt(s),minLeftSideBearing:Math.min.apply(null,i),maxLeftSideBearing:Math.max.apply(null,i),minRightSideBearing:Math.min.apply(null,u)};x.ascender=e.ascender,x.descender=e.descender;var b=qe({flags:3,unitsPerEm:e.unitsPerEm,xMin:x.xMin,yMin:x.yMin,xMax:x.xMax,yMax:x.yMax,lowestRecPPEM:3,createdTimestamp:e.createdTimestamp}),S=je({ascender:x.ascender,descender:x.descender,advanceWidthMax:x.advanceWidthMax,minLeftSideBearing:x.minLeftSideBearing,minRightSideBearing:x.minRightSideBearing,xMaxExtent:x.maxLeftSideBearing+(x.xMax-x.xMin),numberOfHMetrics:e.glyphs.length}),T=Je(e.glyphs.length),U=vt(Object.assign({xAvgCharWidth:Math.round(x.advanceWidthAvg),usFirstCharIndex:t,usLastCharIndex:l,ulUnicodeRange1:p,ulUnicodeRange2:c,ulUnicodeRange3:h,ulUnicodeRange4:f,sTypoAscender:x.ascender,sTypoDescender:x.descender,sTypoLineGap:0,usWinAscent:x.yMax,usWinDescent:Math.abs(x.yMin),ulCodePageRange1:1,sxHeight:Ct(e,"xyvw",{yMax:Math.round(x.ascender/2)}).yMax,sCapHeight:Ct(e,"HIKLEFJMNTZBDPRAGOQSUVWXY",x).yMax,usDefaultChar:e.hasChar(" ")?32:0,usBreakChar:e.hasChar(" ")?32:0},e.tables.os2)),k=Ve(e.glyphs),O=le(e.glyphs),E=e.getEnglishName("fontFamily"),R=e.getEnglishName("fontSubfamily"),w=E+" "+R,L=e.getEnglishName("postScriptName");L||(L=E.replace(/\s/g,"")+"-"+R);var C={};for(var P in e.names)C[P]=e.names[P];C.uniqueID||(C.uniqueID={en:e.getEnglishName("manufacturer")+":"+w}),C.postScriptName||(C.postScriptName={en:L}),C.preferredFamily||(C.preferredFamily=e.names.fontFamily),C.preferredSubfamily||(C.preferredSubfamily=e.names.fontSubfamily);var D=[],M=ht(C,D),A=D.length>0?Ze(D):void 0,I=mt(),F=_e(e.glyphs,{version:e.getEnglishName("version"),fullName:w,familyName:E,weightName:R,postScriptName:L,unitsPerEm:e.unitsPerEm,fontBBox:[0,x.yMin,x.ascender,x.advanceWidthMax]}),B=e.metas&&Object.keys(e.metas).length>0?Ot(e.metas):void 0,N=[b,S,T,U,M,O,I,F,k];A&&N.push(A),e.tables.gsub&&N.push(Ut(e.tables.gsub)),B&&N.push(B);for(var G=Lt(N),z=Rt(G.encode()),H=G.fields,_=!1,W=0;W<H.length;W+=1)if("head table"===H[W].name){H[W].value.checkSumAdjustment=2981146554-z,_=!0;break}if(!_)throw new Error("Could not find head table with checkSum to adjust.");return G};function Mt(e,t){for(var r=0,n=e.length-1;r<=n;){var a=r+n>>>1,o=e[a].tag;if(o===t)return a;o<t?r=a+1:n=a-1}return-r-1}function At(e,t){for(var r=0,n=e.length-1;r<=n;){var a=r+n>>>1,o=e[a];if(o===t)return a;o<t?r=a+1:n=a-1}return-r-1}function It(e,t){for(var r,n=0,a=e.length-1;n<=a;){var o=n+a>>>1,s=(r=e[o]).start;if(s===t)return r;s<t?n=o+1:a=o-1}if(n>0)return t>(r=e[n-1]).end?0:r}function Ft(e,t){this.font=e,this.tableName=t}function Bt(e){Ft.call(this,e,"gpos")}function Nt(e){Ft.call(this,e,"gsub")}function Gt(e,t){var r=e.length;if(r!==t.length)return!1;for(var n=0;n<r;n++)if(e[n]!==t[n])return!1;return!0}function zt(e,t,r){for(var n=e.subtables,a=0;a<n.length;a++){var o=n[a];if(o.substFormat===t)return o}if(r)return n.push(r),r}function Ht(e){for(var t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n<e.length;++n)r[n]=e[n];return t}function _t(e,t){if(!e)throw t}function Wt(e,t,r,n,a){var o;return(t&n)>0?(o=e.parseByte(),0==(t&a)&&(o=-o),o=r+o):o=(t&a)>0?r:r+e.parseShort(),o}function qt(e,t,r){var n,a,o=new se.Parser(t,r);if(e.numberOfContours=o.parseShort(),e._xMin=o.parseShort(),e._yMin=o.parseShort(),e._xMax=o.parseShort(),e._yMax=o.parseShort(),e.numberOfContours>0){for(var s=e.endPointIndices=[],i=0;i<e.numberOfContours;i+=1)s.push(o.parseUShort());e.instructionLength=o.parseUShort(),e.instructions=[];for(var u=0;u<e.instructionLength;u+=1)e.instructions.push(o.parseByte());var l=s[s.length-1]+1;n=[];for(var p=0;p<l;p+=1)if(a=o.parseByte(),n.push(a),(8&a)>0)for(var c=o.parseByte(),h=0;h<c;h+=1)n.push(a),p+=1;if(C.argument(n.length===l,"Bad flags."),s.length>0){var f,d=[];if(l>0){for(var v=0;v<l;v+=1)a=n[v],(f={}).onCurve=!!(1&a),f.lastPointOfContour=s.indexOf(v)>=0,d.push(f);for(var g=0,y=0;y<l;y+=1)a=n[y],(f=d[y]).x=Wt(o,a,g,2,16),g=f.x;for(var m=0,x=0;x<l;x+=1)a=n[x],(f=d[x]).y=Wt(o,a,m,4,32),m=f.y}e.points=d}else e.points=[]}else if(0===e.numberOfContours)e.points=[];else{e.isComposite=!0,e.points=[],e.components=[];for(var b=!0;b;){n=o.parseUShort();var S={glyphIndex:o.parseUShort(),xScale:1,scale01:0,scale10:0,yScale:1,dx:0,dy:0};(1&n)>0?(2&n)>0?(S.dx=o.parseShort(),S.dy=o.parseShort()):S.matchedPoints=[o.parseUShort(),o.parseUShort()]:(2&n)>0?(S.dx=o.parseChar(),S.dy=o.parseChar()):S.matchedPoints=[o.parseByte(),o.parseByte()],(8&n)>0?S.xScale=S.yScale=o.parseF2Dot14():(64&n)>0?(S.xScale=o.parseF2Dot14(),S.yScale=o.parseF2Dot14()):(128&n)>0&&(S.xScale=o.parseF2Dot14(),S.scale01=o.parseF2Dot14(),S.scale10=o.parseF2Dot14(),S.yScale=o.parseF2Dot14()),e.components.push(S),b=!!(32&n)}if(256&n){e.instructionLength=o.parseUShort(),e.instructions=[];for(var T=0;T<e.instructionLength;T+=1)e.instructions.push(o.parseByte())}}}function Xt(e,t){for(var r=[],n=0;n<e.length;n+=1){var a=e[n],o={x:t.xScale*a.x+t.scale01*a.y+t.dx,y:t.scale10*a.x+t.yScale*a.y+t.dy,onCurve:a.onCurve,lastPointOfContour:a.lastPointOfContour};r.push(o)}return r}function jt(e){var t=new R;if(!e)return t;for(var r=function(e){for(var t=[],r=[],n=0;n<e.length;n+=1){var a=e[n];r.push(a),a.lastPointOfContour&&(t.push(r),r=[])}return C.argument(0===r.length,"There are still points left in the current contour."),t}(e),n=0;n<r.length;++n){var a=r[n],o=null,s=a[a.length-1],i=a[0];if(s.onCurve)t.moveTo(s.x,s.y);else if(i.onCurve)t.moveTo(i.x,i.y);else{var u={x:.5*(s.x+i.x),y:.5*(s.y+i.y)};t.moveTo(u.x,u.y)}for(var l=0;l<a.length;++l)if(o=s,s=i,i=a[(l+1)%a.length],s.onCurve)t.lineTo(s.x,s.y);else{var p=i;o.onCurve||(s.x,o.x,s.y,o.y),i.onCurve||(p={x:.5*(s.x+i.x),y:.5*(s.y+i.y)}),t.quadraticCurveTo(s.x,s.y,p.x,p.y)}t.closePath()}return t}function Yt(e,t){if(t.isComposite)for(var r=0;r<t.components.length;r+=1){var n=t.components[r],a=e.get(n.glyphIndex);if(a.getPath(),a.points){var o=void 0;if(void 0===n.matchedPoints)o=Xt(a.points,n);else{if(n.matchedPoints[0]>t.points.length-1||n.matchedPoints[1]>a.points.length-1)throw Error("Matched points out of range in "+t.name);var s=t.points[n.matchedPoints[0]],i=a.points[n.matchedPoints[1]],u={xScale:n.xScale,scale01:n.scale01,scale10:n.scale10,yScale:n.yScale,dx:0,dy:0};i=Xt([i],u)[0],u.dx=s.x-i.x,u.dy=s.y-i.y,o=Xt(a.points,u)}t.points=t.points.concat(o)}}return jt(t.points)}Ft.prototype={searchTag:Mt,binSearch:At,getTable:function(e){var t=this.font.tables[this.tableName];return!t&&e&&(t=this.font.tables[this.tableName]=this.createDefaultTable()),t},getScriptNames:function(){var e=this.getTable();return e?e.scripts.map((function(e){return e.tag})):[]},getDefaultScriptName:function(){var e=this.getTable();if(e){for(var t=!1,r=0;r<e.scripts.length;r++){var n=e.scripts[r].tag;if("DFLT"===n)return n;"latn"===n&&(t=!0)}return t?"latn":void 0}},getScriptTable:function(e,t){var r=this.getTable(t);if(r){e=e||"DFLT";var n=r.scripts,a=Mt(r.scripts,e);if(a>=0)return n[a].script;if(t){var o={tag:e,script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}};return n.splice(-1-a,0,o),o.script}}},getLangSysTable:function(e,t,r){var n=this.getScriptTable(e,r);if(n){if(!t||"dflt"===t||"DFLT"===t)return n.defaultLangSys;var a=Mt(n.langSysRecords,t);if(a>=0)return n.langSysRecords[a].langSys;if(r){var o={tag:t,langSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]}};return n.langSysRecords.splice(-1-a,0,o),o.langSys}}},getFeatureTable:function(e,t,r,n){var a=this.getLangSysTable(e,t,n);if(a){for(var o,s=a.featureIndexes,i=this.font.tables[this.tableName].features,u=0;u<s.length;u++)if((o=i[s[u]]).tag===r)return o.feature;if(n){var l=i.length;return C.assert(0===l||r>=i[l-1].tag,"Features must be added in alphabetical order."),o={tag:r,feature:{params:0,lookupListIndexes:[]}},i.push(o),s.push(l),o.feature}}},getLookupTables:function(e,t,r,n,a){var o=this.getFeatureTable(e,t,r,a),s=[];if(o){for(var i,u=o.lookupListIndexes,l=this.font.tables[this.tableName].lookups,p=0;p<u.length;p++)(i=l[u[p]]).lookupType===n&&s.push(i);if(0===s.length&&a){i={lookupType:n,lookupFlag:0,subtables:[],markFilteringSet:void 0};var c=l.length;return l.push(i),u.push(c),[i]}}return s},getGlyphClass:function(e,t){switch(e.format){case 1:return e.startGlyph<=t&&t<e.startGlyph+e.classes.length?e.classes[t-e.startGlyph]:0;case 2:var r=It(e.ranges,t);return r?r.classId:0}},getCoverageIndex:function(e,t){switch(e.format){case 1:var r=At(e.glyphs,t);return r>=0?r:-1;case 2:var n=It(e.ranges,t);return n?n.index+t-n.start:-1}},expandCoverage:function(e){if(1===e.format)return e.glyphs;for(var t=[],r=e.ranges,n=0;n<r.length;n++)for(var a=r[n],o=a.start,s=a.end,i=o;i<=s;i++)t.push(i);return t}},Bt.prototype=Ft.prototype,Bt.prototype.init=function(){var e=this.getDefaultScriptName();this.defaultKerningTables=this.getKerningTables(e)},Bt.prototype.getKerningValue=function(e,t,r){for(var n=0;n<e.length;n++)for(var a=e[n].subtables,o=0;o<a.length;o++){var s=a[o],i=this.getCoverageIndex(s.coverage,t);if(!(i<0))switch(s.posFormat){case 1:for(var u=s.pairSets[i],l=0;l<u.length;l++){var p=u[l];if(p.secondGlyph===r)return p.value1&&p.value1.xAdvance||0}break;case 2:var c=this.getGlyphClass(s.classDef1,t),h=this.getGlyphClass(s.classDef2,r),f=s.classRecords[c][h];return f.value1&&f.value1.xAdvance||0}}return 0},Bt.prototype.getKerningTables=function(e,t){if(this.font.tables.gpos)return this.getLookupTables(e,t,"kern",2)},Nt.prototype=Ft.prototype,Nt.prototype.createDefaultTable=function(){return{version:1,scripts:[{tag:"DFLT",script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}}],features:[],lookups:[]}},Nt.prototype.getSingle=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,1),o=0;o<a.length;o++)for(var s=a[o].subtables,i=0;i<s.length;i++){var u=s[i],l=this.expandCoverage(u.coverage),p=void 0;if(1===u.substFormat){var c=u.deltaGlyphId;for(p=0;p<l.length;p++){var h=l[p];n.push({sub:h,by:h+c})}}else{var f=u.substitute;for(p=0;p<l.length;p++)n.push({sub:l[p],by:f[p]})}}return n},Nt.prototype.getAlternates=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,3),o=0;o<a.length;o++)for(var s=a[o].subtables,i=0;i<s.length;i++)for(var u=s[i],l=this.expandCoverage(u.coverage),p=u.alternateSets,c=0;c<l.length;c++)n.push({sub:l[c],by:p[c]});return n},Nt.prototype.getLigatures=function(e,t,r){for(var n=[],a=this.getLookupTables(t,r,e,4),o=0;o<a.length;o++)for(var s=a[o].subtables,i=0;i<s.length;i++)for(var u=s[i],l=this.expandCoverage(u.coverage),p=u.ligatureSets,c=0;c<l.length;c++)for(var h=l[c],f=p[c],d=0;d<f.length;d++){var v=f[d];n.push({sub:[h].concat(v.components),by:v.ligGlyph})}return n},Nt.prototype.addSingle=function(e,t,r,n){var a=zt(this.getLookupTables(r,n,e,1,!0)[0],2,{substFormat:2,coverage:{format:1,glyphs:[]},substitute:[]});C.assert(1===a.coverage.format,"Ligature: unable to modify coverage table format "+a.coverage.format);var o=t.sub,s=this.binSearch(a.coverage.glyphs,o);s<0&&(s=-1-s,a.coverage.glyphs.splice(s,0,o),a.substitute.splice(s,0,0)),a.substitute[s]=t.by},Nt.prototype.addAlternate=function(e,t,r,n){var a=zt(this.getLookupTables(r,n,e,3,!0)[0],1,{substFormat:1,coverage:{format:1,glyphs:[]},alternateSets:[]});C.assert(1===a.coverage.format,"Ligature: unable to modify coverage table format "+a.coverage.format);var o=t.sub,s=this.binSearch(a.coverage.glyphs,o);s<0&&(s=-1-s,a.coverage.glyphs.splice(s,0,o),a.alternateSets.splice(s,0,0)),a.alternateSets[s]=t.by},Nt.prototype.addLigature=function(e,t,r,n){var a=this.getLookupTables(r,n,e,4,!0)[0],o=a.subtables[0];o||(o={substFormat:1,coverage:{format:1,glyphs:[]},ligatureSets:[]},a.subtables[0]=o),C.assert(1===o.coverage.format,"Ligature: unable to modify coverage table format "+o.coverage.format);var s=t.sub[0],i=t.sub.slice(1),u={ligGlyph:t.by,components:i},l=this.binSearch(o.coverage.glyphs,s);if(l>=0){for(var p=o.ligatureSets[l],c=0;c<p.length;c++)if(Gt(p[c].components,i))return;p.push(u)}else l=-1-l,o.coverage.glyphs.splice(l,0,s),o.ligatureSets.splice(l,0,[u])},Nt.prototype.getFeature=function(e,t,r){if(/ss\d\d/.test(e))return this.getSingle(e,t,r);switch(e){case"aalt":case"salt":return this.getSingle(e,t,r).concat(this.getAlternates(e,t,r));case"dlig":case"liga":case"rlig":return this.getLigatures(e,t,r)}},Nt.prototype.add=function(e,t,r,n){if(/ss\d\d/.test(e))return this.addSingle(e,t,r,n);switch(e){case"aalt":case"salt":return"number"==typeof t.by?this.addSingle(e,t,r,n):this.addAlternate(e,t,r,n);case"dlig":case"liga":case"rlig":return this.addLigature(e,t,r,n)}};var Vt,Zt,Qt,Kt,Jt={getPath:jt,parse:function(e,t,r,n,a){return a.lowMemory?function(e,t,r,n){var a=new Te.GlyphSet(n);return n._push=function(o){var s=r[o];s!==r[o+1]?a.push(o,Te.ttfGlyphLoader(n,o,qt,e,t+s,Yt)):a.push(o,Te.glyphLoader(n,o))},a}(e,t,r,n):function(e,t,r,n){for(var a=new Te.GlyphSet(n),o=0;o<r.length-1;o+=1){var s=r[o];s!==r[o+1]?a.push(o,Te.ttfGlyphLoader(n,o,qt,e,t+s,Yt)):a.push(o,Te.glyphLoader(n,o))}return a}(e,t,r,n)}};function $t(e){this.font=e,this.getCommands=function(e){return Jt.getPath(e).commands},this._fpgmState=this._prepState=void 0,this._errorState=0}function er(e){return e}function tr(e){return Math.sign(e)*Math.round(Math.abs(e))}function rr(e){return Math.sign(e)*Math.round(Math.abs(2*e))/2}function nr(e){return Math.sign(e)*(Math.round(Math.abs(e)+.5)-.5)}function ar(e){return Math.sign(e)*Math.ceil(Math.abs(e))}function or(e){return Math.sign(e)*Math.floor(Math.abs(e))}var sr=function(e){var t=this.srPeriod,r=this.srPhase,n=1;return e<0&&(e=-e,n=-1),e+=this.srThreshold-r,e=Math.trunc(e/t)*t,(e+=r)<0?r*n:e*n},ir={x:1,y:0,axis:"x",distance:function(e,t,r,n){return(r?e.xo:e.x)-(n?t.xo:t.x)},interpolate:function(e,t,r,n){var a,o,s,i,u,l,p;if(!n||n===this)return a=e.xo-t.xo,o=e.xo-r.xo,u=t.x-t.xo,l=r.x-r.xo,0===(p=(s=Math.abs(a))+(i=Math.abs(o)))?void(e.x=e.xo+(u+l)/2):void(e.x=e.xo+(u*i+l*s)/p);a=n.distance(e,t,!0,!0),o=n.distance(e,r,!0,!0),u=n.distance(t,t,!1,!0),l=n.distance(r,r,!1,!0),0!==(p=(s=Math.abs(a))+(i=Math.abs(o)))?ir.setRelative(e,e,(u*i+l*s)/p,n,!0):ir.setRelative(e,e,(u+l)/2,n,!0)},normalSlope:Number.NEGATIVE_INFINITY,setRelative:function(e,t,r,n,a){if(n&&n!==this){var o=a?t.xo:t.x,s=a?t.yo:t.y,i=o+r*n.x,u=s+r*n.y;e.x=i+(e.y-u)/n.normalSlope}else e.x=(a?t.xo:t.x)+r},slope:0,touch:function(e){e.xTouched=!0},touched:function(e){return e.xTouched},untouch:function(e){e.xTouched=!1}},ur={x:0,y:1,axis:"y",distance:function(e,t,r,n){return(r?e.yo:e.y)-(n?t.yo:t.y)},interpolate:function(e,t,r,n){var a,o,s,i,u,l,p;if(!n||n===this)return a=e.yo-t.yo,o=e.yo-r.yo,u=t.y-t.yo,l=r.y-r.yo,0===(p=(s=Math.abs(a))+(i=Math.abs(o)))?void(e.y=e.yo+(u+l)/2):void(e.y=e.yo+(u*i+l*s)/p);a=n.distance(e,t,!0,!0),o=n.distance(e,r,!0,!0),u=n.distance(t,t,!1,!0),l=n.distance(r,r,!1,!0),0!==(p=(s=Math.abs(a))+(i=Math.abs(o)))?ur.setRelative(e,e,(u*i+l*s)/p,n,!0):ur.setRelative(e,e,(u+l)/2,n,!0)},normalSlope:0,setRelative:function(e,t,r,n,a){if(n&&n!==this){var o=a?t.xo:t.x,s=a?t.yo:t.y,i=o+r*n.x,u=s+r*n.y;e.y=u+n.normalSlope*(e.x-i)}else e.y=(a?t.yo:t.y)+r},slope:Number.POSITIVE_INFINITY,touch:function(e){e.yTouched=!0},touched:function(e){return e.yTouched},untouch:function(e){e.yTouched=!1}};function lr(e,t){this.x=e,this.y=t,this.axis=void 0,this.slope=t/e,this.normalSlope=-e/t,Object.freeze(this)}function pr(e,t){var r=Math.sqrt(e*e+t*t);return t/=r,1==(e/=r)&&0===t?ir:0===e&&1===t?ur:new lr(e,t)}function cr(e,t,r,n){this.x=this.xo=Math.round(64*e)/64,this.y=this.yo=Math.round(64*t)/64,this.lastPointOfContour=r,this.onCurve=n,this.prevPointOnContour=void 0,this.nextPointOnContour=void 0,this.xTouched=!1,this.yTouched=!1,Object.preventExtensions(this)}Object.freeze(ir),Object.freeze(ur),lr.prototype.distance=function(e,t,r,n){return this.x*ir.distance(e,t,r,n)+this.y*ur.distance(e,t,r,n)},lr.prototype.interpolate=function(e,t,r,n){var a,o,s,i,u,l,p;s=n.distance(e,t,!0,!0),i=n.distance(e,r,!0,!0),a=n.distance(t,t,!1,!0),o=n.distance(r,r,!1,!0),0!==(p=(u=Math.abs(s))+(l=Math.abs(i)))?this.setRelative(e,e,(a*l+o*u)/p,n,!0):this.setRelative(e,e,(a+o)/2,n,!0)},lr.prototype.setRelative=function(e,t,r,n,a){n=n||this;var o=a?t.xo:t.x,s=a?t.yo:t.y,i=o+r*n.x,u=s+r*n.y,l=n.normalSlope,p=this.slope,c=e.x,h=e.y;e.x=(p*c-l*i+u-h)/(p-l),e.y=p*(e.x-c)+h},lr.prototype.touch=function(e){e.xTouched=!0,e.yTouched=!0},cr.prototype.nextTouched=function(e){for(var t=this.nextPointOnContour;!e.touched(t)&&t!==this;)t=t.nextPointOnContour;return t},cr.prototype.prevTouched=function(e){for(var t=this.prevPointOnContour;!e.touched(t)&&t!==this;)t=t.prevPointOnContour;return t};var hr=Object.freeze(new cr(0,0)),fr={cvCutIn:17/16,deltaBase:9,deltaShift:.125,loop:1,minDis:1,autoFlip:!0};function dr(e,t){switch(this.env=e,this.stack=[],this.prog=t,e){case"glyf":this.zp0=this.zp1=this.zp2=1,this.rp0=this.rp1=this.rp2=0;case"prep":this.fv=this.pv=this.dpv=ir,this.round=tr}}function vr(e){for(var t=e.tZone=new Array(e.gZone.length),r=0;r<t.length;r++)t[r]=new cr(0,0)}function gr(e,t){var r,n=e.prog,a=e.ip,o=1;do{if(88===(r=n[++a]))o++;else if(89===r)o--;else if(64===r)a+=n[a+1]+1;else if(65===r)a+=2*n[a+1]+1;else if(r>=176&&r<=183)a+=r-176+1;else if(r>=184&&r<=191)a+=2*(r-184+1);else if(t&&1===o&&27===r)break}while(o>0);e.ip=a}function yr(e,t){exports.DEBUG&&console.log(t.step,"SVTCA["+e.axis+"]"),t.fv=t.pv=t.dpv=e}function mr(e,t){exports.DEBUG&&console.log(t.step,"SPVTCA["+e.axis+"]"),t.pv=t.dpv=e}function xr(e,t){exports.DEBUG&&console.log(t.step,"SFVTCA["+e.axis+"]"),t.fv=e}function br(e,t){var r,n,a=t.stack,o=a.pop(),s=a.pop(),i=t.z2[o],u=t.z1[s];exports.DEBUG&&console.log("SPVTL["+e+"]",o,s),e?(r=i.y-u.y,n=u.x-i.x):(r=u.x-i.x,n=u.y-i.y),t.pv=t.dpv=pr(r,n)}function Sr(e,t){var r,n,a=t.stack,o=a.pop(),s=a.pop(),i=t.z2[o],u=t.z1[s];exports.DEBUG&&console.log("SFVTL["+e+"]",o,s),e?(r=i.y-u.y,n=u.x-i.x):(r=u.x-i.x,n=u.y-i.y),t.fv=pr(r,n)}function Tr(e){exports.DEBUG&&console.log(e.step,"POP[]"),e.stack.pop()}function Ur(e,t){var r=t.stack.pop(),n=t.z0[r],a=t.fv,o=t.pv;exports.DEBUG&&console.log(t.step,"MDAP["+e+"]",r);var s=o.distance(n,hr);e&&(s=t.round(s)),a.setRelative(n,hr,s,o),a.touch(n),t.rp0=t.rp1=r}function kr(e,t){var r,n,a,o=t.z2,s=o.length-2;exports.DEBUG&&console.log(t.step,"IUP["+e.axis+"]");for(var i=0;i<s;i++)r=o[i],e.touched(r)||(n=r.prevTouched(e))!==r&&(n===(a=r.nextTouched(e))&&e.setRelative(r,r,e.distance(n,n,!1,!0),e,!0),e.interpolate(r,n,a,e))}function Or(e,t){for(var r=t.stack,n=e?t.rp1:t.rp2,a=(e?t.z0:t.z1)[n],o=t.fv,s=t.pv,i=t.loop,u=t.z2;i--;){var l=r.pop(),p=u[l],c=s.distance(a,a,!1,!0);o.setRelative(p,p,c,s),o.touch(p),exports.DEBUG&&console.log(t.step,(t.loop>1?"loop "+(t.loop-i)+": ":"")+"SHP["+(e?"rp1":"rp2")+"]",l)}t.loop=1}function Er(e,t){var r=t.stack,n=e?t.rp1:t.rp2,a=(e?t.z0:t.z1)[n],o=t.fv,s=t.pv,i=r.pop(),u=t.z2[t.contours[i]],l=u;exports.DEBUG&&console.log(t.step,"SHC["+e+"]",i);var p=s.distance(a,a,!1,!0);do{l!==a&&o.setRelative(l,l,p,s),l=l.nextPointOnContour}while(l!==u)}function Rr(e,t){var r,n,a=t.stack,o=e?t.rp1:t.rp2,s=(e?t.z0:t.z1)[o],i=t.fv,u=t.pv,l=a.pop();switch(exports.DEBUG&&console.log(t.step,"SHZ["+e+"]",l),l){case 0:r=t.tZone;break;case 1:r=t.gZone;break;default:throw new Error("Invalid zone")}for(var p=u.distance(s,s,!1,!0),c=r.length-2,h=0;h<c;h++)n=r[h],i.setRelative(n,n,p,u)}function wr(e,t){var r=t.stack,n=r.pop()/64,a=r.pop(),o=t.z1[a],s=t.z0[t.rp0],i=t.fv,u=t.pv;i.setRelative(o,s,n,u),i.touch(o),exports.DEBUG&&console.log(t.step,"MSIRP["+e+"]",n,a),t.rp1=t.rp0,t.rp2=a,e&&(t.rp0=a)}function Lr(e,t){var r=t.stack,n=r.pop(),a=r.pop(),o=t.z0[a],s=t.fv,i=t.pv,u=t.cvt[n];exports.DEBUG&&console.log(t.step,"MIAP["+e+"]",n,"(",u,")",a);var l=i.distance(o,hr);e&&(Math.abs(l-u)<t.cvCutIn&&(l=u),l=t.round(l)),s.setRelative(o,hr,l,i),0===t.zp0&&(o.xo=o.x,o.yo=o.y),s.touch(o),t.rp0=t.rp1=a}function Cr(e,t){var r=t.stack,n=r.pop(),a=t.z2[n];exports.DEBUG&&console.log(t.step,"GC["+e+"]",n),r.push(64*t.dpv.distance(a,hr,e,!1))}function Pr(e,t){var r=t.stack,n=r.pop(),a=r.pop(),o=t.z1[n],s=t.z0[a],i=t.dpv.distance(s,o,e,e);exports.DEBUG&&console.log(t.step,"MD["+e+"]",n,a,"->",i),t.stack.push(Math.round(64*i))}function Dr(e,t){var r=t.stack,n=r.pop(),a=t.fv,o=t.pv,s=t.ppem,i=t.deltaBase+16*(e-1),u=t.deltaShift,l=t.z0;exports.DEBUG&&console.log(t.step,"DELTAP["+e+"]",n,r);for(var p=0;p<n;p++){var c=r.pop(),h=r.pop();if(i+((240&h)>>4)===s){var f=(15&h)-8;f>=0&&f++,exports.DEBUG&&console.log(t.step,"DELTAPFIX",c,"by",f*u);var d=l[c];a.setRelative(d,d,f*u,o)}}}function Mr(e,t){var r=t.stack,n=r.pop();exports.DEBUG&&console.log(t.step,"ROUND[]"),r.push(64*t.round(n/64))}function Ar(e,t){var r=t.stack,n=r.pop(),a=t.ppem,o=t.deltaBase+16*(e-1),s=t.deltaShift;exports.DEBUG&&console.log(t.step,"DELTAC["+e+"]",n,r);for(var i=0;i<n;i++){var u=r.pop(),l=r.pop();if(o+((240&l)>>4)===a){var p=(15&l)-8;p>=0&&p++;var c=p*s;exports.DEBUG&&console.log(t.step,"DELTACFIX",u,"by",c),t.cvt[u]+=c}}}function Ir(e,t){var r,n,a=t.stack,o=a.pop(),s=a.pop(),i=t.z2[o],u=t.z1[s];exports.DEBUG&&console.log(t.step,"SDPVTL["+e+"]",o,s),e?(r=i.y-u.y,n=u.x-i.x):(r=u.x-i.x,n=u.y-i.y),t.dpv=pr(r,n)}function Fr(e,t){var r=t.stack,n=t.prog,a=t.ip;exports.DEBUG&&console.log(t.step,"PUSHB["+e+"]");for(var o=0;o<e;o++)r.push(n[++a]);t.ip=a}function Br(e,t){var r=t.ip,n=t.prog,a=t.stack;exports.DEBUG&&console.log(t.ip,"PUSHW["+e+"]");for(var o=0;o<e;o++){var s=n[++r]<<8|n[++r];32768&s&&(s=-(1+(65535^s))),a.push(s)}t.ip=r}function Nr(e,t,r,n,a,o){var s,i,u,l,p=o.stack,c=e&&p.pop(),h=p.pop(),f=o.rp0,d=o.z0[f],v=o.z1[h],g=o.minDis,y=o.fv,m=o.dpv;u=(i=s=m.distance(v,d,!0,!0))>=0?1:-1,i=Math.abs(i),e&&(l=o.cvt[c],n&&Math.abs(i-l)<o.cvCutIn&&(i=l)),r&&i<g&&(i=g),n&&(i=o.round(i)),y.setRelative(v,d,u*i,m),y.touch(v),exports.DEBUG&&console.log(o.step,(e?"MIRP[":"MDRP[")+(t?"M":"m")+(r?">":"_")+(n?"R":"_")+(0===a?"Gr":1===a?"Bl":2===a?"Wh":"")+"]",e?c+"("+o.cvt[c]+","+l+")":"",h,"(d =",s,"->",u*i,")"),o.rp1=o.rp0,o.rp2=h,t&&(o.rp0=h)}function Gr(e){this.char=e,this.state={},this.activeState=null}function zr(e,t,r){this.contextName=r,this.startIndex=e,this.endOffset=t}function Hr(e,t,r){this.contextName=e,this.openRange=null,this.ranges=[],this.checkStart=t,this.checkEnd=r}function _r(e,t){this.context=e,this.index=t,this.length=e.length,this.current=e[t],this.backtrack=e.slice(0,t),this.lookahead=e.slice(t+1)}function Wr(e){this.eventId=e,this.subscribers=[]}function qr(e){var t=this,r=["start","end","next","newToken","contextStart","contextEnd","insertToken","removeToken","removeRange","replaceToken","replaceRange","composeRUD","updateContextsRanges"];r.forEach((function(e){Object.defineProperty(t.events,e,{value:new Wr(e)})})),e&&r.forEach((function(r){var n=e[r];"function"==typeof n&&t.events[r].subscribe(n)})),["insertToken","removeToken","removeRange","replaceToken","replaceRange","composeRUD"].forEach((function(e){t.events[e].subscribe(t.updateContextsRanges)}))}function Xr(e){this.tokens=[],this.registeredContexts={},this.contextCheckers=[],this.events={},this.registeredModifiers=[],qr.call(this,e)}function jr(e){return/[\u0600-\u065F\u066A-\u06D2\u06FA-\u06FF]/.test(e)}function Yr(e){return/[\u0630\u0690\u0621\u0631\u0661\u0671\u0622\u0632\u0672\u0692\u06C2\u0623\u0673\u0693\u06C3\u0624\u0694\u06C4\u0625\u0675\u0695\u06C5\u06E5\u0676\u0696\u06C6\u0627\u0677\u0697\u06C7\u0648\u0688\u0698\u06C8\u0689\u0699\u06C9\u068A\u06CA\u066B\u068B\u06CB\u068C\u068D\u06CD\u06FD\u068E\u06EE\u06FE\u062F\u068F\u06CF\u06EF]/.test(e)}function Vr(e){return/[\u0600-\u0605\u060C-\u060E\u0610-\u061B\u061E\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED]/.test(e)}function Zr(e){return/[A-z]/.test(e)}function Qr(e){this.font=e,this.features={}}function Kr(e){this.id=e.id,this.tag=e.tag,this.substitution=e.substitution}function Jr(e,t){if(!e)return-1;switch(t.format){case 1:return t.glyphs.indexOf(e);case 2:for(var r=t.ranges,n=0;n<r.length;n++){var a=r[n];if(e>=a.start&&e<=a.end){var o=e-a.start;return a.index+o}}break;default:return-1}return-1}function $r(e,t){return-1===Jr(e,t.coverage)?null:e+t.deltaGlyphId}function en(e,t){var r=Jr(e,t.coverage);return-1===r?null:t.substitute[r]}function tn(e,t){for(var r=[],n=0;n<e.length;n++){var a=e[n],o=t.current,s=Jr(o=Array.isArray(o)?o[0]:o,a);-1!==s&&r.push(s)}return r.length!==e.length?-1:r}function rn(e,t){var r=t.inputCoverage.length+t.lookaheadCoverage.length+t.backtrackCoverage.length;if(e.context.length<r)return[];var n=tn(t.inputCoverage,e);if(-1===n)return[];var a=t.inputCoverage.length-1;if(e.lookahead.length<t.lookaheadCoverage.length)return[];for(var o=e.lookahead.slice(a);o.length&&Vr(o[0].char);)o.shift();var s=new _r(o,0),i=tn(t.lookaheadCoverage,s),u=[].concat(e.backtrack);for(u.reverse();u.length&&Vr(u[0].char);)u.shift();if(u.length<t.backtrackCoverage.length)return[];var l=new _r(u,0),p=tn(t.backtrackCoverage,l),c=[];if(n.length===t.inputCoverage.length&&i.length===t.lookaheadCoverage.length&&p.length===t.backtrackCoverage.length)for(var h=0;h<t.lookupRecords.length;h++)for(var f=t.lookupRecords[h].lookupListIndex,d=this.getLookupByIndex(f),v=0;v<d.subtables.length;v++){var g=d.subtables[v],y=this.getLookupMethod(d,g);if("12"===this.getSubstitutionType(d,g))for(var m=0;m<n.length;m++){var x=y(e.get(m));x&&c.push(x)}}return c}function nn(e,t){var r,n=Jr(e.current,t.coverage);if(-1===n)return null;for(var a=t.ligatureSets[n],o=0;o<a.length;o++){r=a[o];for(var s=0;s<r.components.length&&e.lookahead[s]===r.components[s];s++)if(s===r.components.length-1)return r}return null}function an(e,t){var r=Jr(e,t.coverage);return-1===r?null:t.sequences[r]}$t.prototype.exec=function(e,t){if("number"!=typeof t)throw new Error("Point size is not a number!");if(!(this._errorState>2)){var r=this.font,n=this._prepState;if(!n||n.ppem!==t){var a=this._fpgmState;if(!a){dr.prototype=fr,(a=this._fpgmState=new dr("fpgm",r.tables.fpgm)).funcs=[],a.font=r,exports.DEBUG&&(console.log("---EXEC FPGM---"),a.step=-1);try{Zt(a)}catch(e){return console.log("Hinting error in FPGM:"+e),void(this._errorState=3)}}dr.prototype=a,(n=this._prepState=new dr("prep",r.tables.prep)).ppem=t;var o=r.tables.cvt;if(o)for(var s=n.cvt=new Array(o.length),i=t/r.unitsPerEm,u=0;u<o.length;u++)s[u]=o[u]*i;else n.cvt=[];exports.DEBUG&&(console.log("---EXEC PREP---"),n.step=-1);try{Zt(n)}catch(e){this._errorState<2&&console.log("Hinting error in PREP:"+e),this._errorState=2}}if(!(this._errorState>1))try{return Qt(e,n)}catch(e){return this._errorState<1&&(console.log("Hinting error:"+e),console.log("Note: further hinting errors are silenced")),void(this._errorState=1)}}},Qt=function(e,t){var r,n,a,o=t.ppem/t.font.unitsPerEm,s=o,i=e.components;if(dr.prototype=t,i){var u=t.font;n=[],r=[];for(var l=0;l<i.length;l++){var p=i[l],c=u.glyphs.get(p.glyphIndex);a=new dr("glyf",c.instructions),exports.DEBUG&&(console.log("---EXEC COMP "+l+"---"),a.step=-1),Kt(c,a,o,s);for(var h=Math.round(p.dx*o),f=Math.round(p.dy*s),d=a.gZone,v=a.contours,g=0;g<d.length;g++){var y=d[g];y.xTouched=y.yTouched=!1,y.xo=y.x=y.x+h,y.yo=y.y=y.y+f}var m=n.length;n.push.apply(n,d);for(var x=0;x<v.length;x++)r.push(v[x]+m)}e.instructions&&!a.inhibitGridFit&&((a=new dr("glyf",e.instructions)).gZone=a.z0=a.z1=a.z2=n,a.contours=r,n.push(new cr(0,0),new cr(Math.round(e.advanceWidth*o),0)),exports.DEBUG&&(console.log("---EXEC COMPOSITE---"),a.step=-1),Zt(a),n.length-=2)}else a=new dr("glyf",e.instructions),exports.DEBUG&&(console.log("---EXEC GLYPH---"),a.step=-1),Kt(e,a,o,s),n=a.gZone;return n},Kt=function(e,t,r,n){for(var a,o,s,i=e.points||[],u=i.length,l=t.gZone=t.z0=t.z1=t.z2=[],p=t.contours=[],c=0;c<u;c++)a=i[c],l[c]=new cr(a.x*r,a.y*n,a.lastPointOfContour,a.onCurve);for(var h=0;h<u;h++)a=l[h],o||(o=a,p.push(h)),a.lastPointOfContour?(a.nextPointOnContour=o,o.prevPointOnContour=a,o=void 0):(s=l[h+1],a.nextPointOnContour=s,s.prevPointOnContour=a);if(!t.inhibitGridFit){if(exports.DEBUG){console.log("PROCESSING GLYPH",t.stack);for(var f=0;f<u;f++)console.log(f,l[f].x,l[f].y)}if(l.push(new cr(0,0),new cr(Math.round(e.advanceWidth*r),0)),Zt(t),l.length-=2,exports.DEBUG){console.log("FINISHED GLYPH",t.stack);for(var d=0;d<u;d++)console.log(d,l[d].x,l[d].y)}}},Zt=function(e){var t=e.prog;if(t){var r,n=t.length;for(e.ip=0;e.ip<n;e.ip++){if(exports.DEBUG&&e.step++,!(r=Vt[t[e.ip]]))throw new Error("unknown instruction: 0x"+Number(t[e.ip]).toString(16));r(e)}}},Vt=[yr.bind(void 0,ur),yr.bind(void 0,ir),mr.bind(void 0,ur),mr.bind(void 0,ir),xr.bind(void 0,ur),xr.bind(void 0,ir),br.bind(void 0,0),br.bind(void 0,1),Sr.bind(void 0,0),Sr.bind(void 0,1),function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SPVFS[]",r,n),e.pv=e.dpv=pr(n,r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SPVFS[]",r,n),e.fv=pr(n,r)},function(e){var t=e.stack,r=e.pv;exports.DEBUG&&console.log(e.step,"GPV[]"),t.push(16384*r.x),t.push(16384*r.y)},function(e){var t=e.stack,r=e.fv;exports.DEBUG&&console.log(e.step,"GFV[]"),t.push(16384*r.x),t.push(16384*r.y)},function(e){e.fv=e.pv,exports.DEBUG&&console.log(e.step,"SFVTPV[]")},function(e){var t=e.stack,r=t.pop(),n=t.pop(),a=t.pop(),o=t.pop(),s=t.pop(),i=e.z0,u=e.z1,l=i[r],p=i[n],c=u[a],h=u[o],f=e.z2[s];exports.DEBUG&&console.log("ISECT[], ",r,n,a,o,s);var d=l.x,v=l.y,g=p.x,y=p.y,m=c.x,x=c.y,b=h.x,S=h.y,T=(d-g)*(x-S)-(v-y)*(m-b),U=d*y-v*g,k=m*S-x*b;f.x=(U*(m-b)-k*(d-g))/T,f.y=(U*(x-S)-k*(v-y))/T},function(e){e.rp0=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SRP0[]",e.rp0)},function(e){e.rp1=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SRP1[]",e.rp1)},function(e){e.rp2=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SRP2[]",e.rp2)},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZP0[]",t),e.zp0=t,t){case 0:e.tZone||vr(e),e.z0=e.tZone;break;case 1:e.z0=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZP1[]",t),e.zp1=t,t){case 0:e.tZone||vr(e),e.z1=e.tZone;break;case 1:e.z1=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZP2[]",t),e.zp2=t,t){case 0:e.tZone||vr(e),e.z2=e.tZone;break;case 1:e.z2=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){var t=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SZPS[]",t),e.zp0=e.zp1=e.zp2=t,t){case 0:e.tZone||vr(e),e.z0=e.z1=e.z2=e.tZone;break;case 1:e.z0=e.z1=e.z2=e.gZone;break;default:throw new Error("Invalid zone pointer")}},function(e){e.loop=e.stack.pop(),exports.DEBUG&&console.log(e.step,"SLOOP[]",e.loop)},function(e){exports.DEBUG&&console.log(e.step,"RTG[]"),e.round=tr},function(e){exports.DEBUG&&console.log(e.step,"RTHG[]"),e.round=nr},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SMD[]",t),e.minDis=t/64},function(e){exports.DEBUG&&console.log(e.step,"ELSE[]"),gr(e,!1)},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"JMPR[]",t),e.ip+=t-1},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SCVTCI[]",t),e.cvCutIn=t/64},void 0,void 0,function(e){var t=e.stack;exports.DEBUG&&console.log(e.step,"DUP[]"),t.push(t[t.length-1])},Tr,function(e){exports.DEBUG&&console.log(e.step,"CLEAR[]"),e.stack.length=0},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SWAP[]"),t.push(r),t.push(n)},function(e){var t=e.stack;exports.DEBUG&&console.log(e.step,"DEPTH[]"),t.push(t.length)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"CINDEX[]",r),t.push(t[t.length-r])},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"MINDEX[]",r),t.push(t.splice(t.length-r,1)[0])},void 0,void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"LOOPCALL[]",r,n);var a=e.ip,o=e.prog;e.prog=e.funcs[r];for(var s=0;s<n;s++)Zt(e),exports.DEBUG&&console.log(++e.step,s+1<n?"next loopcall":"done loopcall",s);e.ip=a,e.prog=o},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"CALL[]",t);var r=e.ip,n=e.prog;e.prog=e.funcs[t],Zt(e),e.ip=r,e.prog=n,exports.DEBUG&&console.log(++e.step,"returning from",t)},function(e){if("fpgm"!==e.env)throw new Error("FDEF not allowed here");var t=e.stack,r=e.prog,n=e.ip,a=t.pop(),o=n;for(exports.DEBUG&&console.log(e.step,"FDEF[]",a);45!==r[++n];);e.ip=n,e.funcs[a]=r.slice(o+1,n)},void 0,Ur.bind(void 0,0),Ur.bind(void 0,1),kr.bind(void 0,ur),kr.bind(void 0,ir),Or.bind(void 0,0),Or.bind(void 0,1),Er.bind(void 0,0),Er.bind(void 0,1),Rr.bind(void 0,0),Rr.bind(void 0,1),function(e){for(var t=e.stack,r=e.loop,n=e.fv,a=t.pop()/64,o=e.z2;r--;){var s=t.pop(),i=o[s];exports.DEBUG&&console.log(e.step,(e.loop>1?"loop "+(e.loop-r)+": ":"")+"SHPIX[]",s,a),n.setRelative(i,i,a),n.touch(i)}e.loop=1},function(e){for(var t=e.stack,r=e.rp1,n=e.rp2,a=e.loop,o=e.z0[r],s=e.z1[n],i=e.fv,u=e.dpv,l=e.z2;a--;){var p=t.pop(),c=l[p];exports.DEBUG&&console.log(e.step,(e.loop>1?"loop "+(e.loop-a)+": ":"")+"IP[]",p,r,"<->",n),i.interpolate(c,o,s,u),i.touch(c)}e.loop=1},wr.bind(void 0,0),wr.bind(void 0,1),function(e){for(var t=e.stack,r=e.rp0,n=e.z0[r],a=e.loop,o=e.fv,s=e.pv,i=e.z1;a--;){var u=t.pop(),l=i[u];exports.DEBUG&&console.log(e.step,(e.loop>1?"loop "+(e.loop-a)+": ":"")+"ALIGNRP[]",u),o.setRelative(l,n,0,s),o.touch(l)}e.loop=1},function(e){exports.DEBUG&&console.log(e.step,"RTDG[]"),e.round=rr},Lr.bind(void 0,0),Lr.bind(void 0,1),function(e){var t=e.prog,r=e.ip,n=e.stack,a=t[++r];exports.DEBUG&&console.log(e.step,"NPUSHB[]",a);for(var o=0;o<a;o++)n.push(t[++r]);e.ip=r},function(e){var t=e.ip,r=e.prog,n=e.stack,a=r[++t];exports.DEBUG&&console.log(e.step,"NPUSHW[]",a);for(var o=0;o<a;o++){var s=r[++t]<<8|r[++t];32768&s&&(s=-(1+(65535^s))),n.push(s)}e.ip=t},function(e){var t=e.stack,r=e.store;r||(r=e.store=[]);var n=t.pop(),a=t.pop();exports.DEBUG&&console.log(e.step,"WS",n,a),r[a]=n},function(e){var t=e.stack,r=e.store,n=t.pop();exports.DEBUG&&console.log(e.step,"RS",n);var a=r&&r[n]||0;t.push(a)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"WCVTP",r,n),e.cvt[n]=r/64},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"RCVT",r),t.push(64*e.cvt[r])},Cr.bind(void 0,0),Cr.bind(void 0,1),void 0,Pr.bind(void 0,0),Pr.bind(void 0,1),function(e){exports.DEBUG&&console.log(e.step,"MPPEM[]"),e.stack.push(e.ppem)},void 0,function(e){exports.DEBUG&&console.log(e.step,"FLIPON[]"),e.autoFlip=!0},void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"LT[]",r,n),t.push(n<r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"LTEQ[]",r,n),t.push(n<=r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"GT[]",r,n),t.push(n>r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"GTEQ[]",r,n),t.push(n>=r?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"EQ[]",r,n),t.push(r===n?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"NEQ[]",r,n),t.push(r!==n?1:0)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"ODD[]",r),t.push(Math.trunc(r)%2?1:0)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"EVEN[]",r),t.push(Math.trunc(r)%2?0:1)},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"IF[]",t),t||(gr(e,!0),exports.DEBUG&&console.log(e.step,"EIF[]"))},function(e){exports.DEBUG&&console.log(e.step,"EIF[]")},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"AND[]",r,n),t.push(r&&n?1:0)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"OR[]",r,n),t.push(r||n?1:0)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"NOT[]",r),t.push(r?0:1)},Dr.bind(void 0,1),function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SDB[]",t),e.deltaBase=t},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SDS[]",t),e.deltaShift=Math.pow(.5,t)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"ADD[]",r,n),t.push(n+r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"SUB[]",r,n),t.push(n-r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"DIV[]",r,n),t.push(64*n/r)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"MUL[]",r,n),t.push(n*r/64)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"ABS[]",r),t.push(Math.abs(r))},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"NEG[]",r),t.push(-r)},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"FLOOR[]",r),t.push(64*Math.floor(r/64))},function(e){var t=e.stack,r=t.pop();exports.DEBUG&&console.log(e.step,"CEILING[]",r),t.push(64*Math.ceil(r/64))},Mr.bind(void 0,0),Mr.bind(void 0,1),Mr.bind(void 0,2),Mr.bind(void 0,3),void 0,void 0,void 0,void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"WCVTF[]",r,n),e.cvt[n]=r*e.ppem/e.font.unitsPerEm},Dr.bind(void 0,2),Dr.bind(void 0,3),Ar.bind(void 0,1),Ar.bind(void 0,2),Ar.bind(void 0,3),function(e){var t,r=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"SROUND[]",r),e.round=sr,192&r){case 0:t=.5;break;case 64:t=1;break;case 128:t=2;break;default:throw new Error("invalid SROUND value")}switch(e.srPeriod=t,48&r){case 0:e.srPhase=0;break;case 16:e.srPhase=.25*t;break;case 32:e.srPhase=.5*t;break;case 48:e.srPhase=.75*t;break;default:throw new Error("invalid SROUND value")}r&=15,e.srThreshold=0===r?0:(r/8-.5)*t},function(e){var t,r=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"S45ROUND[]",r),e.round=sr,192&r){case 0:t=Math.sqrt(2)/2;break;case 64:t=Math.sqrt(2);break;case 128:t=2*Math.sqrt(2);break;default:throw new Error("invalid S45ROUND value")}switch(e.srPeriod=t,48&r){case 0:e.srPhase=0;break;case 16:e.srPhase=.25*t;break;case 32:e.srPhase=.5*t;break;case 48:e.srPhase=.75*t;break;default:throw new Error("invalid S45ROUND value")}r&=15,e.srThreshold=0===r?0:(r/8-.5)*t},void 0,void 0,function(e){exports.DEBUG&&console.log(e.step,"ROFF[]"),e.round=er},void 0,function(e){exports.DEBUG&&console.log(e.step,"RUTG[]"),e.round=ar},function(e){exports.DEBUG&&console.log(e.step,"RDTG[]"),e.round=or},Tr,Tr,void 0,void 0,void 0,void 0,void 0,function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SCANCTRL[]",t)},Ir.bind(void 0,0),Ir.bind(void 0,1),function(e){var t=e.stack,r=t.pop(),n=0;exports.DEBUG&&console.log(e.step,"GETINFO[]",r),1&r&&(n=35),32&r&&(n|=4096),t.push(n)},void 0,function(e){var t=e.stack,r=t.pop(),n=t.pop(),a=t.pop();exports.DEBUG&&console.log(e.step,"ROLL[]"),t.push(n),t.push(r),t.push(a)},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"MAX[]",r,n),t.push(Math.max(n,r))},function(e){var t=e.stack,r=t.pop(),n=t.pop();exports.DEBUG&&console.log(e.step,"MIN[]",r,n),t.push(Math.min(n,r))},function(e){var t=e.stack.pop();exports.DEBUG&&console.log(e.step,"SCANTYPE[]",t)},function(e){var t=e.stack.pop(),r=e.stack.pop();switch(exports.DEBUG&&console.log(e.step,"INSTCTRL[]",t,r),t){case 1:return void(e.inhibitGridFit=!!r);case 2:return void(e.ignoreCvt=!!r);default:throw new Error("invalid INSTCTRL[] selector")}},void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,Fr.bind(void 0,1),Fr.bind(void 0,2),Fr.bind(void 0,3),Fr.bind(void 0,4),Fr.bind(void 0,5),Fr.bind(void 0,6),Fr.bind(void 0,7),Fr.bind(void 0,8),Br.bind(void 0,1),Br.bind(void 0,2),Br.bind(void 0,3),Br.bind(void 0,4),Br.bind(void 0,5),Br.bind(void 0,6),Br.bind(void 0,7),Br.bind(void 0,8),Nr.bind(void 0,0,0,0,0,0),Nr.bind(void 0,0,0,0,0,1),Nr.bind(void 0,0,0,0,0,2),Nr.bind(void 0,0,0,0,0,3),Nr.bind(void 0,0,0,0,1,0),Nr.bind(void 0,0,0,0,1,1),Nr.bind(void 0,0,0,0,1,2),Nr.bind(void 0,0,0,0,1,3),Nr.bind(void 0,0,0,1,0,0),Nr.bind(void 0,0,0,1,0,1),Nr.bind(void 0,0,0,1,0,2),Nr.bind(void 0,0,0,1,0,3),Nr.bind(void 0,0,0,1,1,0),Nr.bind(void 0,0,0,1,1,1),Nr.bind(void 0,0,0,1,1,2),Nr.bind(void 0,0,0,1,1,3),Nr.bind(void 0,0,1,0,0,0),Nr.bind(void 0,0,1,0,0,1),Nr.bind(void 0,0,1,0,0,2),Nr.bind(void 0,0,1,0,0,3),Nr.bind(void 0,0,1,0,1,0),Nr.bind(void 0,0,1,0,1,1),Nr.bind(void 0,0,1,0,1,2),Nr.bind(void 0,0,1,0,1,3),Nr.bind(void 0,0,1,1,0,0),Nr.bind(void 0,0,1,1,0,1),Nr.bind(void 0,0,1,1,0,2),Nr.bind(void 0,0,1,1,0,3),Nr.bind(void 0,0,1,1,1,0),Nr.bind(void 0,0,1,1,1,1),Nr.bind(void 0,0,1,1,1,2),Nr.bind(void 0,0,1,1,1,3),Nr.bind(void 0,1,0,0,0,0),Nr.bind(void 0,1,0,0,0,1),Nr.bind(void 0,1,0,0,0,2),Nr.bind(void 0,1,0,0,0,3),Nr.bind(void 0,1,0,0,1,0),Nr.bind(void 0,1,0,0,1,1),Nr.bind(void 0,1,0,0,1,2),Nr.bind(void 0,1,0,0,1,3),Nr.bind(void 0,1,0,1,0,0),Nr.bind(void 0,1,0,1,0,1),Nr.bind(void 0,1,0,1,0,2),Nr.bind(void 0,1,0,1,0,3),Nr.bind(void 0,1,0,1,1,0),Nr.bind(void 0,1,0,1,1,1),Nr.bind(void 0,1,0,1,1,2),Nr.bind(void 0,1,0,1,1,3),Nr.bind(void 0,1,1,0,0,0),Nr.bind(void 0,1,1,0,0,1),Nr.bind(void 0,1,1,0,0,2),Nr.bind(void 0,1,1,0,0,3),Nr.bind(void 0,1,1,0,1,0),Nr.bind(void 0,1,1,0,1,1),Nr.bind(void 0,1,1,0,1,2),Nr.bind(void 0,1,1,0,1,3),Nr.bind(void 0,1,1,1,0,0),Nr.bind(void 0,1,1,1,0,1),Nr.bind(void 0,1,1,1,0,2),Nr.bind(void 0,1,1,1,0,3),Nr.bind(void 0,1,1,1,1,0),Nr.bind(void 0,1,1,1,1,1),Nr.bind(void 0,1,1,1,1,2),Nr.bind(void 0,1,1,1,1,3)],Gr.prototype.setState=function(e,t){return this.state[e]=t,this.activeState={key:e,value:this.state[e]},this.activeState},Gr.prototype.getState=function(e){return this.state[e]||null},Xr.prototype.inboundIndex=function(e){return e>=0&&e<this.tokens.length},Xr.prototype.composeRUD=function(e){var t=this,r=e.map((function(e){return t[e[0]].apply(t,e.slice(1).concat(!0))})),n=function(e){return"object"==typeof e&&e.hasOwnProperty("FAIL")};if(r.every(n))return{FAIL:"composeRUD: one or more operations hasn't completed successfully",report:r.filter(n)};this.dispatch("composeRUD",[r.filter((function(e){return!n(e)}))])},Xr.prototype.replaceRange=function(e,t,r,n){t=null!==t?t:this.tokens.length;var a=r.every((function(e){return e instanceof Gr}));if(!isNaN(e)&&this.inboundIndex(e)&&a){var o=this.tokens.splice.apply(this.tokens,[e,t].concat(r));return n||this.dispatch("replaceToken",[e,t,r]),[o,r]}return{FAIL:"replaceRange: invalid tokens or startIndex."}},Xr.prototype.replaceToken=function(e,t,r){if(!isNaN(e)&&this.inboundIndex(e)&&t instanceof Gr){var n=this.tokens.splice(e,1,t);return r||this.dispatch("replaceToken",[e,t]),[n[0],t]}return{FAIL:"replaceToken: invalid token or index."}},Xr.prototype.removeRange=function(e,t,r){t=isNaN(t)?this.tokens.length:t;var n=this.tokens.splice(e,t);return r||this.dispatch("removeRange",[n,e,t]),n},Xr.prototype.removeToken=function(e,t){if(!isNaN(e)&&this.inboundIndex(e)){var r=this.tokens.splice(e,1);return t||this.dispatch("removeToken",[r,e]),r}return{FAIL:"removeToken: invalid token index."}},Xr.prototype.insertToken=function(e,t,r){return e.every((function(e){return e instanceof Gr}))?(this.tokens.splice.apply(this.tokens,[t,0].concat(e)),r||this.dispatch("insertToken",[e,t]),e):{FAIL:"insertToken: invalid token(s)."}},Xr.prototype.registerModifier=function(e,t,r){this.events.newToken.subscribe((function(n,a){var o=[n,a],s=[n,a];if(null===t||!0===t.apply(this,o)){var i=r.apply(this,s);n.setState(e,i)}})),this.registeredModifiers.push(e)},Wr.prototype.subscribe=function(e){return"function"==typeof e?this.subscribers.push(e)-1:{FAIL:"invalid '"+this.eventId+"' event handler"}},Wr.prototype.unsubscribe=function(e){this.subscribers.splice(e,1)},_r.prototype.setCurrentIndex=function(e){this.index=e,this.current=this.context[e],this.backtrack=this.context.slice(0,e),this.lookahead=this.context.slice(e+1)},_r.prototype.get=function(e){switch(!0){case 0===e:return this.current;case e<0&&Math.abs(e)<=this.backtrack.length:return this.backtrack.slice(e)[0];case e>0&&e<=this.lookahead.length:return this.lookahead[e-1];default:return null}},Xr.prototype.rangeToText=function(e){if(e instanceof zr)return this.getRangeTokens(e).map((function(e){return e.char})).join("")},Xr.prototype.getText=function(){return this.tokens.map((function(e){return e.char})).join("")},Xr.prototype.getContext=function(e){return this.registeredContexts[e]||null},Xr.prototype.on=function(e,t){var r=this.events[e];return r?r.subscribe(t):null},Xr.prototype.dispatch=function(e,t){var r=this,n=this.events[e];n instanceof Wr&&n.subscribers.forEach((function(e){e.apply(r,t||[])}))},Xr.prototype.registerContextChecker=function(e,t,r){if(this.getContext(e))return{FAIL:"context name '"+e+"' is already registered."};if("function"!=typeof t)return{FAIL:"missing context start check."};if("function"!=typeof r)return{FAIL:"missing context end check."};var n=new Hr(e,t,r);return this.registeredContexts[e]=n,this.contextCheckers.push(n),n},Xr.prototype.getRangeTokens=function(e){var t=e.startIndex+e.endOffset;return[].concat(this.tokens.slice(e.startIndex,t))},Xr.prototype.getContextRanges=function(e){var t=this.getContext(e);return t?t.ranges:{FAIL:"context checker '"+e+"' is not registered."}},Xr.prototype.resetContextsRanges=function(){var e=this.registeredContexts;for(var t in e)e.hasOwnProperty(t)&&(e[t].ranges=[])},Xr.prototype.updateContextsRanges=function(){this.resetContextsRanges();for(var e=this.tokens.map((function(e){return e.char})),t=0;t<e.length;t++){var r=new _r(e,t);this.runContextCheck(r)}this.dispatch("updateContextsRanges",[this.registeredContexts])},Xr.prototype.setEndOffset=function(e,t){var r=new zr(this.getContext(t).openRange.startIndex,e,t),n=this.getContext(t).ranges;return r.rangeId=t+"."+n.length,n.push(r),this.getContext(t).openRange=null,r},Xr.prototype.runContextCheck=function(e){var t=this,r=e.index;this.contextCheckers.forEach((function(n){var a=n.contextName,o=t.getContext(a).openRange;if(!o&&n.checkStart(e)&&(o=new zr(r,null,a),t.getContext(a).openRange=o,t.dispatch("contextStart",[a,r])),o&&n.checkEnd(e)){var s=r-o.startIndex+1,i=t.setEndOffset(s,a);t.dispatch("contextEnd",[a,i])}}))},Xr.prototype.tokenize=function(e){this.tokens=[],this.resetContextsRanges();var t=Array.from(e);this.dispatch("start");for(var r=0;r<t.length;r++){var n=t[r],a=new _r(t,r);this.dispatch("next",[a]),this.runContextCheck(a);var o=new Gr(n);this.tokens.push(o),this.dispatch("newToken",[o,a])}return this.dispatch("end",[this.tokens]),this.tokens},Qr.prototype.getDefaultScriptFeaturesIndexes=function(){for(var e=this.font.tables.gsub.scripts,t=0;t<e.length;t++){var r=e[t];if("DFLT"===r.tag)return r.script.defaultLangSys.featureIndexes}return[]},Qr.prototype.getScriptFeaturesIndexes=function(e){if(!this.font.tables.gsub)return[];if(!e)return this.getDefaultScriptFeaturesIndexes();for(var t=this.font.tables.gsub.scripts,r=0;r<t.length;r++){var n=t[r];if(n.tag===e&&n.script.defaultLangSys)return n.script.defaultLangSys.featureIndexes;var a=n.langSysRecords;if(a)for(var o=0;o<a.length;o++){var s=a[o];if(s.tag===e)return s.langSys.featureIndexes}}return this.getDefaultScriptFeaturesIndexes()},Qr.prototype.mapTagsToFeatures=function(e,t){for(var r={},n=0;n<e.length;n++){var a=e[n].tag,o=e[n].feature;r[a]=o}this.features[t].tags=r},Qr.prototype.getScriptFeatures=function(e){var t=this.features[e];if(this.features.hasOwnProperty(e))return t;var r=this.getScriptFeaturesIndexes(e);if(!r)return null;var n=this.font.tables.gsub;return t=r.map((function(e){return n.features[e]})),this.features[e]=t,this.mapTagsToFeatures(t,e),t},Qr.prototype.getSubstitutionType=function(e,t){return e.lookupType.toString()+t.substFormat.toString()},Qr.prototype.getLookupMethod=function(e,t){var r=this;switch(this.getSubstitutionType(e,t)){case"11":return function(e){return $r.apply(r,[e,t])};case"12":return function(e){return en.apply(r,[e,t])};case"63":return function(e){return rn.apply(r,[e,t])};case"41":return function(e){return nn.apply(r,[e,t])};case"21":return function(e){return an.apply(r,[e,t])};default:throw new Error("lookupType: "+e.lookupType+" - substFormat: "+t.substFormat+" is not yet supported")}},Qr.prototype.lookupFeature=function(e){var t=e.contextParams,r=t.index,n=this.getFeature({tag:e.tag,script:e.script});if(!n)return new Error("font '"+this.font.names.fullName.en+"' doesn't support feature '"+e.tag+"' for script '"+e.script+"'.");for(var a=this.getFeatureLookups(n),o=[].concat(t.context),s=0;s<a.length;s++)for(var i=a[s],u=this.getLookupSubtables(i),l=0;l<u.length;l++){var p=u[l],c=this.getSubstitutionType(i,p),h=this.getLookupMethod(i,p),f=void 0;switch(c){case"11":(f=h(t.current))&&o.splice(r,1,new Kr({id:11,tag:e.tag,substitution:f}));break;case"12":(f=h(t.current))&&o.splice(r,1,new Kr({id:12,tag:e.tag,substitution:f}));break;case"63":f=h(t),Array.isArray(f)&&f.length&&o.splice(r,1,new Kr({id:63,tag:e.tag,substitution:f}));break;case"41":(f=h(t))&&o.splice(r,1,new Kr({id:41,tag:e.tag,substitution:f}));break;case"21":(f=h(t.current))&&o.splice(r,1,new Kr({id:21,tag:e.tag,substitution:f}))}t=new _r(o,r),Array.isArray(f)&&!f.length||(f=null)}return o.length?o:null},Qr.prototype.supports=function(e){if(!e.script)return!1;this.getScriptFeatures(e.script);var t=this.features.hasOwnProperty(e.script);if(!e.tag)return t;var r=this.features[e.script].some((function(t){return t.tag===e.tag}));return t&&r},Qr.prototype.getLookupSubtables=function(e){return e.subtables||null},Qr.prototype.getLookupByIndex=function(e){return this.font.tables.gsub.lookups[e]||null},Qr.prototype.getFeatureLookups=function(e){return e.lookupListIndexes.map(this.getLookupByIndex.bind(this))},Qr.prototype.getFeature=function(e){if(!this.font)return{FAIL:"No font was found"};this.features.hasOwnProperty(e.script)||this.getScriptFeatures(e.script);var t=this.features[e.script];return t?t.tags[e.tag]?this.features[e.script].tags[e.tag]:null:{FAIL:"No feature for script "+e.script}};var on={startCheck:function(e){var t=e.current,r=e.get(-1);return null===r&&jr(t)||!jr(r)&&jr(t)},endCheck:function(e){var t=e.get(1);return null===t||!jr(t)}},sn={startCheck:function(e){var t=e.current,r=e.get(-1);return(jr(t)||Vr(t))&&!jr(r)},endCheck:function(e){var t=e.get(1);switch(!0){case null===t:return!0;case!jr(t)&&!Vr(t):var r=/\s/.test(t);if(!r)return!0;if(r&&!e.lookahead.some((function(e){return jr(e)||Vr(e)})))return!0;break;default:return!1}}},un={11:function(e,t,r){t[r].setState(e.tag,e.substitution)},12:function(e,t,r){t[r].setState(e.tag,e.substitution)},63:function(e,t,r){e.substitution.forEach((function(n,a){t[r+a].setState(e.tag,n)}))},41:function(e,t,r){var n=t[r];n.setState(e.tag,e.substitution.ligGlyph);for(var a=e.substitution.components.length,o=0;o<a;o++)(n=t[r+o+1]).setState("deleted",!0)}};function ln(e,t,r){e instanceof Kr&&un[e.id]&&un[e.id](e,t,r)}function pn(e){var t=this,r=this.featuresTags.arab,n=this.tokenizer.getRangeTokens(e);if(1!==n.length){var a=new _r(n.map((function(e){return e.getState("glyphIndex")})),0),o=new _r(n.map((function(e){return e.char})),0);n.forEach((function(e,s){if(!Vr(e.char)){a.setCurrentIndex(s),o.setCurrentIndex(s);var i,u=0;switch(function(e){for(var t=[].concat(e.backtrack),r=t.length-1;r>=0;r--){var n=t[r],a=Yr(n),o=Vr(n);if(!a&&!o)return!0;if(a)return!1}return!1}(o)&&(u|=1),function(e){if(Yr(e.current))return!1;for(var t=0;t<e.lookahead.length;t++)if(!Vr(e.lookahead[t]))return!0;return!1}(o)&&(u|=2),u){case 1:i="fina";break;case 2:i="init";break;case 3:i="medi"}if(-1!==r.indexOf(i)){var l=t.query.lookupFeature({tag:i,script:"arab",contextParams:a});if(l instanceof Error)return console.info(l.message);l.forEach((function(e,t){e instanceof Kr&&(ln(e,n,t),a.context[t]=e.substitution)}))}}}))}}function cn(e,t){return new _r(e.map((function(e){return e.activeState.value})),t||0)}function hn(e){var t=this,r=this.tokenizer.getRangeTokens(e),n=cn(r);n.context.forEach((function(e,a){n.setCurrentIndex(a);var o=t.query.lookupFeature({tag:"rlig",script:"arab",contextParams:n});o.length&&(o.forEach((function(e){return ln(e,r,a)})),n=cn(r))}))}var fn={startCheck:function(e){var t=e.current,r=e.get(-1);return null===r&&Zr(t)||!Zr(r)&&Zr(t)},endCheck:function(e){var t=e.get(1);return null===t||!Zr(t)}};function dn(e,t){return new _r(e.map((function(e){return e.activeState.value})),t||0)}function vn(e){var t=this,r=this.tokenizer.getRangeTokens(e),n=dn(r);n.context.forEach((function(e,a){n.setCurrentIndex(a);var o=t.query.lookupFeature({tag:"liga",script:"latn",contextParams:n});o.length&&(o.forEach((function(e){return ln(e,r,a)})),n=dn(r))}))}function gn(e){this.baseDir=e||"ltr",this.tokenizer=new Xr,this.featuresTags={}}function yn(e){var t=this.contextChecks[e+"Check"];return this.tokenizer.registerContextChecker(e,t.startCheck,t.endCheck)}function mn(){return yn.call(this,"latinWord"),yn.call(this,"arabicWord"),yn.call(this,"arabicSentence"),this.tokenizer.tokenize(this.text)}function xn(){var e=this;this.tokenizer.getContextRanges("arabicSentence").forEach((function(t){var r=e.tokenizer.getRangeTokens(t);e.tokenizer.replaceRange(t.startIndex,t.endOffset,r.reverse())}))}function bn(){if(-1===this.tokenizer.registeredModifiers.indexOf("glyphIndex"))throw new Error("glyphIndex modifier is required to apply arabic presentation features.")}function Sn(){var e=this;this.featuresTags.hasOwnProperty("arab")&&(bn.call(this),this.tokenizer.getContextRanges("arabicWord").forEach((function(t){pn.call(e,t)})))}function Tn(){var e=this;this.featuresTags.hasOwnProperty("arab")&&-1!==this.featuresTags.arab.indexOf("rlig")&&(bn.call(this),this.tokenizer.getContextRanges("arabicWord").forEach((function(t){hn.call(e,t)})))}function Un(){var e=this;this.featuresTags.hasOwnProperty("latn")&&-1!==this.featuresTags.latn.indexOf("liga")&&(bn.call(this),this.tokenizer.getContextRanges("latinWord").forEach((function(t){vn.call(e,t)})))}function kn(e){(e=e||{}).tables=e.tables||{},e.empty||(_t(e.familyName,"When creating a new Font object, familyName is required."),_t(e.styleName,"When creating a new Font object, styleName is required."),_t(e.unitsPerEm,"When creating a new Font object, unitsPerEm is required."),_t(e.ascender,"When creating a new Font object, ascender is required."),_t(e.descender<=0,"When creating a new Font object, negative descender value is required."),this.names={fontFamily:{en:e.familyName||" "},fontSubfamily:{en:e.styleName||" "},fullName:{en:e.fullName||e.familyName+" "+e.styleName},postScriptName:{en:e.postScriptName||(e.familyName+e.styleName).replace(/\s/g,"")},designer:{en:e.designer||" "},designerURL:{en:e.designerURL||" "},manufacturer:{en:e.manufacturer||" "},manufacturerURL:{en:e.manufacturerURL||" "},license:{en:e.license||" "},licenseURL:{en:e.licenseURL||" "},version:{en:e.version||"Version 0.1"},description:{en:e.description||" "},copyright:{en:e.copyright||" "},trademark:{en:e.trademark||" "}},this.unitsPerEm=e.unitsPerEm||1e3,this.ascender=e.ascender,this.descender=e.descender,this.createdTimestamp=e.createdTimestamp,this.tables=Object.assign(e.tables,{os2:Object.assign({usWeightClass:e.weightClass||this.usWeightClasses.MEDIUM,usWidthClass:e.widthClass||this.usWidthClasses.MEDIUM,fsSelection:e.fsSelection||this.fsSelectionValues.REGULAR},e.tables.os2)})),this.supported=!0,this.glyphs=new Te.GlyphSet(this,e.glyphs||[]),this.encoding=new de(this),this.position=new Bt(this),this.substitution=new Nt(this),this.tables=this.tables||{},this._push=null,this._hmtxTableData={},Object.defineProperty(this,"hinting",{get:function(){return this._hinting?this._hinting:"truetype"===this.outlinesFormat?this._hinting=new $t(this):void 0}})}function On(e,t,r){var n={},a=new se.Parser(e,t);return n.tag=a.parseTag(),n.minValue=a.parseFixed(),n.defaultValue=a.parseFixed(),n.maxValue=a.parseFixed(),a.skip("uShort",1),n.name=r[a.parseUShort()]||{},n}function En(e,t,r,n){var a={},o=new se.Parser(e,t);a.name=n[o.parseUShort()]||{},o.skip("uShort",1),a.coordinates={};for(var s=0;s<r.length;++s)a.coordinates[r[s].tag]=o.parseFixed();return a}gn.prototype.setText=function(e){this.text=e},gn.prototype.contextChecks={latinWordCheck:fn,arabicWordCheck:on,arabicSentenceCheck:sn},gn.prototype.registerFeatures=function(e,t){var r=this,n=t.filter((function(t){return r.query.supports({script:e,tag:t})}));this.featuresTags.hasOwnProperty(e)?this.featuresTags[e]=this.featuresTags[e].concat(n):this.featuresTags[e]=n},gn.prototype.applyFeatures=function(e,t){if(!e)throw new Error("No valid font was provided to apply features");this.query||(this.query=new Qr(e));for(var r=0;r<t.length;r++){var n=t[r];this.query.supports({script:n.script})&&this.registerFeatures(n.script,n.tags)}},gn.prototype.registerModifier=function(e,t,r){this.tokenizer.registerModifier(e,t,r)},gn.prototype.checkContextReady=function(e){return!!this.tokenizer.getContext(e)},gn.prototype.applyFeaturesToContexts=function(){this.checkContextReady("arabicWord")&&(Sn.call(this),Tn.call(this)),this.checkContextReady("latinWord")&&Un.call(this),this.checkContextReady("arabicSentence")&&xn.call(this)},gn.prototype.processText=function(e){this.text&&this.text===e||(this.setText(e),mn.call(this),this.applyFeaturesToContexts())},gn.prototype.getBidiText=function(e){return this.processText(e),this.tokenizer.getText()},gn.prototype.getTextGlyphs=function(e){this.processText(e);for(var t=[],r=0;r<this.tokenizer.tokens.length;r++){var n=this.tokenizer.tokens[r];if(!n.state.deleted){var a=n.activeState.value;t.push(Array.isArray(a)?a[0]:a)}}return t},kn.prototype.hasChar=function(e){return null!==this.encoding.charToGlyphIndex(e)},kn.prototype.charToGlyphIndex=function(e){return this.encoding.charToGlyphIndex(e)},kn.prototype.charToGlyph=function(e){var t=this.charToGlyphIndex(e),r=this.glyphs.get(t);return r||(r=this.glyphs.get(0)),r},kn.prototype.updateFeatures=function(e){return this.defaultRenderOptions.features.map((function(t){return"latn"===t.script?{script:"latn",tags:t.tags.filter((function(t){return e[t]}))}:t}))},kn.prototype.stringToGlyphs=function(e,t){var r=this,n=new gn;n.registerModifier("glyphIndex",null,(function(e){return r.charToGlyphIndex(e.char)}));var a=t?this.updateFeatures(t.features):this.defaultRenderOptions.features;n.applyFeatures(this,a);for(var o=n.getTextGlyphs(e),s=o.length,i=new Array(s),u=this.glyphs.get(0),l=0;l<s;l+=1)i[l]=this.glyphs.get(o[l])||u;return i},kn.prototype.nameToGlyphIndex=function(e){return this.glyphNames.nameToGlyphIndex(e)},kn.prototype.nameToGlyph=function(e){var t=this.nameToGlyphIndex(e),r=this.glyphs.get(t);return r||(r=this.glyphs.get(0)),r},kn.prototype.glyphIndexToName=function(e){return this.glyphNames.glyphIndexToName?this.glyphNames.glyphIndexToName(e):""},kn.prototype.getKerningValue=function(e,t){e=e.index||e,t=t.index||t;var r=this.position.defaultKerningTables;return r?this.position.getKerningValue(r,e,t):this.kerningPairs[e+","+t]||0},kn.prototype.defaultRenderOptions={kerning:!0,features:[{script:"arab",tags:["init","medi","fina","rlig"]},{script:"latn",tags:["liga","rlig"]}]},kn.prototype.forEachGlyph=function(e,t,r,n,a,o){t=void 0!==t?t:0,r=void 0!==r?r:0,n=void 0!==n?n:72,a=Object.assign({},this.defaultRenderOptions,a);var s,i=1/this.unitsPerEm*n,u=this.stringToGlyphs(e,a);if(a.kerning){var l=a.script||this.position.getDefaultScriptName();s=this.position.getKerningTables(l,a.language)}for(var p=0;p<u.length;p+=1){var c=u[p];o.call(this,c,t,r,n,a),c.advanceWidth&&(t+=c.advanceWidth*i),a.kerning&&p<u.length-1&&(t+=(s?this.position.getKerningValue(s,c.index,u[p+1].index):this.getKerningValue(c,u[p+1]))*i),a.letterSpacing?t+=a.letterSpacing*n:a.tracking&&(t+=a.tracking/1e3*n)}return t},kn.prototype.getPath=function(e,t,r,n,a){var o=new R;return this.forEachGlyph(e,t,r,n,a,(function(e,t,r,n){var s=e.getPath(t,r,n,a,this);o.extend(s)})),o},kn.prototype.getPaths=function(e,t,r,n,a){var o=[];return this.forEachGlyph(e,t,r,n,a,(function(e,t,r,n){var s=e.getPath(t,r,n,a,this);o.push(s)})),o},kn.prototype.getAdvanceWidth=function(e,t,r){return this.forEachGlyph(e,0,0,t,r,(function(){}))},kn.prototype.draw=function(e,t,r,n,a,o){this.getPath(t,r,n,a,o).draw(e)},kn.prototype.drawPoints=function(e,t,r,n,a,o){this.forEachGlyph(t,r,n,a,o,(function(t,r,n,a){t.drawPoints(e,r,n,a)}))},kn.prototype.drawMetrics=function(e,t,r,n,a,o){this.forEachGlyph(t,r,n,a,o,(function(t,r,n,a){t.drawMetrics(e,r,n,a)}))},kn.prototype.getEnglishName=function(e){var t=this.names[e];if(t)return t.en},kn.prototype.validate=function(){var e=this;function t(t){var r=e.getEnglishName(t);r&&r.trim().length}t("fontFamily"),t("weightName"),t("manufacturer"),t("copyright"),t("version"),this.unitsPerEm},kn.prototype.toTables=function(){return Dt(this)},kn.prototype.toBuffer=function(){return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."),this.toArrayBuffer()},kn.prototype.toArrayBuffer=function(){for(var e=this.toTables().encode(),t=new ArrayBuffer(e.length),r=new Uint8Array(t),n=0;n<e.length;n++)r[n]=e[n];return t},kn.prototype.download=function(e){var t=this.getEnglishName("fontFamily"),n=this.getEnglishName("fontSubfamily");e=e||t.replace(/\s/g,"")+"-"+n+".otf";var a=this.toArrayBuffer();if("undefined"!=typeof window)if(window.URL=window.URL||window.webkitURL,window.URL){var o=new DataView(a),s=new Blob([o],{type:"font/opentype"}),i=document.createElement("a");i.href=window.URL.createObjectURL(s),i.download=e;var u=document.createEvent("MouseEvents");u.initEvent("click",!0,!1),i.dispatchEvent(u)}else console.warn("Font file could not be downloaded. Try using a different browser.");else{var l=r(102),p=function(e){for(var t=new Buffer(e.byteLength),r=new Uint8Array(e),n=0;n<t.length;++n)t[n]=r[n];return t}(a);l.writeFileSync(e,p)}},kn.prototype.fsSelectionValues={ITALIC:1,UNDERSCORE:2,NEGATIVE:4,OUTLINED:8,STRIKEOUT:16,BOLD:32,REGULAR:64,USER_TYPO_METRICS:128,WWS:256,OBLIQUE:512},kn.prototype.usWidthClasses={ULTRA_CONDENSED:1,EXTRA_CONDENSED:2,CONDENSED:3,SEMI_CONDENSED:4,MEDIUM:5,SEMI_EXPANDED:6,EXPANDED:7,EXTRA_EXPANDED:8,ULTRA_EXPANDED:9},kn.prototype.usWeightClasses={THIN:100,EXTRA_LIGHT:200,LIGHT:300,NORMAL:400,MEDIUM:500,SEMI_BOLD:600,BOLD:700,EXTRA_BOLD:800,BLACK:900};var Rn=function(e,t,r){var n=new se.Parser(e,t),a=n.parseULong();C.argument(65536===a,"Unsupported fvar table version.");var o=n.parseOffset16();n.skip("uShort",1);for(var s=n.parseUShort(),i=n.parseUShort(),u=n.parseUShort(),l=n.parseUShort(),p=[],c=0;c<s;c++)p.push(On(e,t+o+c*i,r));for(var h=[],f=t+o+s*i,d=0;d<u;d++)h.push(En(e,f+d*l,p,r));return{axes:p,instances:h}},wn=new Array(10);wn[1]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();return 1===t?{posFormat:1,coverage:this.parsePointer(ae.coverage),value:this.parseValueRecord()}:2===t?{posFormat:2,coverage:this.parsePointer(ae.coverage),values:this.parseValueRecordList()}:void C.assert(!1,"0x"+e.toString(16)+": GPOS lookup type 1 format must be 1 or 2.")},wn[2]=function(){var e=this.offset+this.relativeOffset,t=this.parseUShort();C.assert(1===t||2===t,"0x"+e.toString(16)+": GPOS lookup type 2 format must be 1 or 2.");var r=this.parsePointer(ae.coverage),n=this.parseUShort(),a=this.parseUShort();if(1===t)return{posFormat:t,coverage:r,valueFormat1:n,valueFormat2:a,pairSets:this.parseList(ae.pointer(ae.list((function(){return{secondGlyph:this.parseUShort(),value1:this.parseValueRecord(n),value2:this.parseValueRecord(a)}}))))};if(2===t){var o=this.parsePointer(ae.classDef),s=this.parsePointer(ae.classDef),i=this.parseUShort(),u=this.parseUShort();return{posFormat:t,coverage:r,valueFormat1:n,valueFormat2:a,classDef1:o,classDef2:s,class1Count:i,class2Count:u,classRecords:this.parseList(i,ae.list(u,(function(){return{value1:this.parseValueRecord(n),value2:this.parseValueRecord(a)}})))}}},wn[3]=function(){return{error:"GPOS Lookup 3 not supported"}},wn[4]=function(){return{error:"GPOS Lookup 4 not supported"}},wn[5]=function(){return{error:"GPOS Lookup 5 not supported"}},wn[6]=function(){return{error:"GPOS Lookup 6 not supported"}},wn[7]=function(){return{error:"GPOS Lookup 7 not supported"}},wn[8]=function(){return{error:"GPOS Lookup 8 not supported"}},wn[9]=function(){return{error:"GPOS Lookup 9 not supported"}};new Array(10);var Ln=function(e,t){var r=new ae(e,t=t||0),n=r.parseVersion(1);return C.argument(1===n||1.1===n,"Unsupported GPOS table version "+n),1===n?{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(wn)}:{version:n,scripts:r.parseScriptList(),features:r.parseFeatureList(),lookups:r.parseLookupList(wn),variations:r.parseFeatureVariationsList()}},Cn=function(e,t){var r=new se.Parser(e,t),n=r.parseUShort();if(0===n)return function(e){var t={};e.skip("uShort");var r=e.parseUShort();C.argument(0===r,"Unsupported kern sub-table version."),e.skip("uShort",2);var n=e.parseUShort();e.skip("uShort",3);for(var a=0;a<n;a+=1){var o=e.parseUShort(),s=e.parseUShort(),i=e.parseShort();t[o+","+s]=i}return t}(r);if(1===n)return function(e){var t={};e.skip("uShort"),e.parseULong()>1&&console.warn("Only the first kern subtable is supported."),e.skip("uLong");var r=255&e.parseUShort();if(e.skip("uShort"),0===r){var n=e.parseUShort();e.skip("uShort",3);for(var a=0;a<n;a+=1){var o=e.parseUShort(),s=e.parseUShort(),i=e.parseShort();t[o+","+s]=i}}return t}(r);throw new Error("Unsupported kern table version ("+n+").")},Pn=function(e,t,r,n){for(var a=new se.Parser(e,t),o=n?a.parseUShort:a.parseULong,s=[],i=0;i<r+1;i+=1){var u=o.call(a);n&&(u*=2),s.push(u)}return s};function Dn(e,t){r(102).readFile(e,(function(e,r){if(e)return t(e.message);t(null,Ht(r))}))}function Mn(e,t){var r=new XMLHttpRequest;r.open("get",e,!0),r.responseType="arraybuffer",r.onload=function(){return r.response?t(null,r.response):t("Font could not be loaded: "+r.statusText)},r.onerror=function(){t("Font could not be loaded")},r.send()}function An(e,t){for(var r=[],n=12,a=0;a<t;a+=1){var o=se.getTag(e,n),s=se.getULong(e,n+4),i=se.getULong(e,n+8),u=se.getULong(e,n+12);r.push({tag:o,checksum:s,offset:i,length:u,compression:!1}),n+=16}return r}function In(e,t){if("WOFF"===t.compression){var r=new Uint8Array(e.buffer,t.offset+2,t.compressedLength-2),n=new Uint8Array(t.length);if(function(e,t){var r,n,a=new s(e,t);do{switch(r=x(a),b(a,2,0)){case 0:n=k(a);break;case 1:n=U(a,i,u);break;case 2:T(a,a.ltree,a.dtree),n=U(a,a.ltree,a.dtree);break;default:n=-3}if(0!==n)throw new Error("Data error")}while(!r);a.destLen<a.dest.length?"function"==typeof a.dest.slice?a.dest.slice(0,a.destLen):a.dest.subarray(0,a.destLen):a.dest}(r,n),n.byteLength!==t.length)throw new Error("Decompression error: "+t.tag+" decompressed length doesn't match recorded length");return{data:new DataView(n.buffer,0),offset:0}}return{data:e,offset:t.offset}}function Fn(e,t){var r,n;t=null==t?{}:t;var a,o,s,i,u,l,p,c,h,f,d,v,g=new kn({empty:!0}),y=new DataView(e,0),m=[],x=se.getTag(y,0);if(x===String.fromCharCode(0,1,0,0)||"true"===x||"typ1"===x)g.outlinesFormat="truetype",m=An(y,a=se.getUShort(y,4));else if("OTTO"===x)g.outlinesFormat="cff",m=An(y,a=se.getUShort(y,4));else{if("wOFF"!==x)throw new Error("Unsupported OpenType signature "+x);var b=se.getTag(y,4);if(b===String.fromCharCode(0,1,0,0))g.outlinesFormat="truetype";else{if("OTTO"!==b)throw new Error("Unsupported OpenType flavor "+x);g.outlinesFormat="cff"}m=function(e,t){for(var r=[],n=44,a=0;a<t;a+=1){var o,s=se.getTag(e,n),i=se.getULong(e,n+4),u=se.getULong(e,n+8),l=se.getULong(e,n+12);o=u<l&&"WOFF",r.push({tag:s,offset:i,compression:o,compressedLength:u,length:l}),n+=20}return r}(y,a=se.getUShort(y,12))}for(var S=0;S<a;S+=1){var T=m[S],U=void 0;switch(T.tag){case"cmap":U=In(y,T),g.tables.cmap=ue(U.data,U.offset),g.encoding=new ve(g.tables.cmap);break;case"cvt ":U=In(y,T),v=new se.Parser(U.data,U.offset),g.tables.cvt=v.parseShortList(T.length/2);break;case"fvar":s=T;break;case"fpgm":U=In(y,T),v=new se.Parser(U.data,U.offset),g.tables.fpgm=v.parseByteList(T.length);break;case"head":U=In(y,T),g.tables.head=We(U.data,U.offset),g.unitsPerEm=g.tables.head.unitsPerEm,r=g.tables.head.indexToLocFormat;break;case"hhea":U=In(y,T),g.tables.hhea=Xe(U.data,U.offset),g.ascender=g.tables.hhea.ascender,g.descender=g.tables.hhea.descender,g.numberOfHMetrics=g.tables.hhea.numberOfHMetrics;break;case"hmtx":p=T;break;case"ltag":U=In(y,T),n=Qe(U.data,U.offset);break;case"maxp":U=In(y,T),g.tables.maxp=Ke(U.data,U.offset),g.numGlyphs=g.tables.maxp.numGlyphs;break;case"name":f=T;break;case"OS/2":U=In(y,T),g.tables.os2=dt(U.data,U.offset);break;case"post":U=In(y,T),g.tables.post=yt(U.data,U.offset),g.glyphNames=new ye(g.tables.post);break;case"prep":U=In(y,T),v=new se.Parser(U.data,U.offset),g.tables.prep=v.parseByteList(T.length);break;case"glyf":i=T;break;case"loca":h=T;break;case"CFF ":o=T;break;case"kern":c=T;break;case"GPOS":u=T;break;case"GSUB":l=T;break;case"meta":d=T}}var k=In(y,f);if(g.tables.name=ct(k.data,k.offset,n),g.names=g.tables.name,i&&h){var O=0===r,E=In(y,h),R=Pn(E.data,E.offset,g.numGlyphs,O),w=In(y,i);g.glyphs=Jt.parse(w.data,w.offset,R,g,t)}else{if(!o)throw new Error("Font doesn't contain TrueType or CFF outlines.");var L=In(y,o);He(L.data,L.offset,g,t)}var C=In(y,p);if(Ye(g,C.data,C.offset,g.numberOfHMetrics,g.numGlyphs,g.glyphs,t),function(e,t){t.lowMemory?function(e){e._IndexToUnicodeMap={};for(var t=e.tables.cmap.glyphIndexMap,r=Object.keys(t),n=0;n<r.length;n+=1){var a=r[n],o=t[a];void 0===e._IndexToUnicodeMap[o]?e._IndexToUnicodeMap[o]={unicodes:[parseInt(a)]}:e._IndexToUnicodeMap[o].unicodes.push(parseInt(a))}}(e):function(e){for(var t,r=e.tables.cmap.glyphIndexMap,n=Object.keys(r),a=0;a<n.length;a+=1){var o=n[a],s=r[o];(t=e.glyphs.get(s)).addUnicode(parseInt(o))}for(var i=0;i<e.glyphs.length;i+=1)t=e.glyphs.get(i),e.cffEncoding?e.isCIDFont?t.name="gid"+i:t.name=e.cffEncoding.charset[i]:e.glyphNames.names&&(t.name=e.glyphNames.glyphIndexToName(i))}(e)}(g,t),c){var P=In(y,c);g.kerningPairs=Cn(P.data,P.offset)}else g.kerningPairs={};if(u){var D=In(y,u);g.tables.gpos=Ln(D.data,D.offset),g.position.init()}if(l){var M=In(y,l);g.tables.gsub=Tt(M.data,M.offset)}if(s){var A=In(y,s);g.tables.fvar=Rn(A.data,A.offset,g.names)}if(d){var I=In(y,d);g.tables.meta=kt(I.data,I.offset),g.metas=g.tables.meta}return g}function Bn(e,t,r){var n="undefined"==typeof window?Dn:Mn;return new Promise((function(a,o){n(e,(function(e,n){if(e){if(t)return t(e);o(e)}var s;try{s=Fn(n,r)}catch(e){if(t)return t(e,null);o(e)}if(t)return t(null,s);a(s)}))}))}function Nn(e,t){return Fn(Ht(r(102).readFileSync(e)),t)}const Gn=Object.freeze({__proto__:null,Font:kn,Glyph:xe,Path:R,BoundingBox:E,_parse:se,parse:Fn,load:Bn,loadSync:Nn})},89:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0,t.aabb=e=>{const t=e[0],r={x:t.x,y:t.y},n={x:t.x,y:t.y};for(let t=1;t<e.length;t++){const a=e[t];r.x=Math.min(r.x,a.x),r.y=Math.min(r.y,a.y),n.x=Math.max(n.x,a.x),n.y=Math.max(n.y,a.y)}return{min:r,max:n}}},462:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabbContains=void 0,t.aabbContains=(e,t)=>e.min.x<=t.min.x&&e.min.y<=t.min.y&&e.max.x>=t.max.x&&e.max.y>=t.max.y},922:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabbIntersect=void 0,t.aabbIntersect=(e,t)=>t.min.x<=e.max.x&&t.max.x>=e.min.x&&t.min.y<=e.max.y&&t.max.y>=e.min.y},955:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.combineAabbs=void 0;const n=r(345);t.combineAabbs=e=>{if(!e.length)return;const t=e[0],r={min:t.min,max:t.max};for(let t=1;t<e.length;t++){const a=e[t];r.min=n.min2(r.min,a.min),r.max=n.max2(r.max,a.max)}return r}},943:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(a,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function i(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,i)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(422),s=r(705),i=r(199),u=a(r(620)),l=a(r(978));let p,c,h,f,d,v,g,y,m;const x=()=>{p.clear(p.COLOR_BUFFER_BIT),p.drawArrays(p.TRIANGLES,0,c.length/2),requestAnimationFrame(x)};n(void 0,void 0,void 0,(function*(){const e=1/128,t=-.5078125,r=(yield o.load("./media/Timeless.ttf")).stringToGlyphs("Test");let n=0;const a=[],b=[],S=[],T=[];for(const o of r){const r=o.getPath(n,100,128),u=s.pathToPoints(r.toPathData(5),-.99);n+=o.advanceWidth/1e3*128;const l=i.pointsToPolygons(u);for(const r of l)for(const n of r){const r=[n.p1.x*e-1,1-n.p1.y*e+t],o=[n.p2.x*e-1,1-n.p2.y*e+t],s=[n.p3.x*e-1,1-n.p3.y*e+t];a.push(...r,...o,...s),b.push(...o,...s,...r),S.push(...s,...r,...o),T.push(0,1,2)}}c=new Float32Array(a),h=new Float32Array(b),f=new Float32Array(S),d=new Float32Array(T),(()=>{const e=document.getElementById("canvas1");p=e.getContext("webgl",{antialias:!1,premultipliedAlpha:!1});const t=Math.sqrt(2)/e.width;v=p.createBuffer(),p.bindBuffer(p.ARRAY_BUFFER,v),p.bufferData(p.ARRAY_BUFFER,c,p.STATIC_DRAW),g=p.createBuffer(),p.bindBuffer(p.ARRAY_BUFFER,g),p.bufferData(p.ARRAY_BUFFER,h,p.STATIC_DRAW),y=p.createBuffer(),p.bindBuffer(p.ARRAY_BUFFER,y),p.bufferData(p.ARRAY_BUFFER,f,p.STATIC_DRAW),m=p.createBuffer(),p.bindBuffer(p.ARRAY_BUFFER,m),p.bufferData(p.ARRAY_BUFFER,d,p.STATIC_DRAW);const r=p.createShader(p.VERTEX_SHADER);if(p.shaderSource(r,u.default),p.compileShader(r),""!==String(p.getShaderInfoLog(r)).trim())throw new Error(String(p.getShaderInfoLog(r)));const n=p.createShader(p.FRAGMENT_SHADER);if(p.shaderSource(n,l.default),p.compileShader(n),""!==String(p.getShaderInfoLog(n)).trim())throw new Error(String(p.getShaderInfoLog(n)));const a=p.createProgram();if(p.attachShader(a,r),p.attachShader(a,n),p.linkProgram(a),""!==String(p.getProgramInfoLog(a)).trim())throw new Error(String(p.getProgramInfoLog(a)));p.useProgram(a);const o=p.getAttribLocation(a,"pos");p.bindBuffer(p.ARRAY_BUFFER,v),p.vertexAttribPointer(o,2,p.FLOAT,!1,0,0),p.enableVertexAttribArray(o);const s=p.getAttribLocation(a,"prevPos");p.bindBuffer(p.ARRAY_BUFFER,y),p.vertexAttribPointer(s,2,p.FLOAT,!1,0,0),p.enableVertexAttribArray(s);const i=p.getAttribLocation(a,"nextPos");p.bindBuffer(p.ARRAY_BUFFER,g),p.vertexAttribPointer(i,2,p.FLOAT,!1,0,0),p.enableVertexAttribArray(i);const x=p.getAttribLocation(a,"index");p.bindBuffer(p.ARRAY_BUFFER,m),p.vertexAttribPointer(x,1,p.FLOAT,!1,0,0),p.enableVertexAttribArray(x);const b=p.getUniformLocation(a,"offset");p.uniform1f(b,t);const S=p.getUniformLocation(a,"screenSize");p.uniform2fv(S,[e.width,e.height]),p.clearColor(0,0,0,0),p.viewport(0,0,e.width,e.height),p.enable(p.BLEND),p.blendFunc(p.ONE,p.ONE)})(),x()}))},856:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const n=r(345);t.cubicBezierToPoints=(e,t)=>{const r=[{x:e.p1.x,y:e.p1.y},{x:e.p4.x,y:e.p4.y}],a=(e,o,s,i)=>{const u=n.lerp(o,s,.5),l=n.lerp2(e.p2,e.p3,u),p=n.lerp2(n.lerp2(n.lerp2(e.p1,e.p2,u),l,u),n.lerp2(l,n.lerp2(e.p3,e.p4,u),u),u),c=r[i-1],h=r[i];r.splice(i,0,p),n.dot(n.normalize(n.sub(c,p)),n.normalize(n.sub(h,p)))>t&&(a(e,u,s,i+1),a(e,o,u,i))};return a(e,0,1,1),r}},705:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pathToPoints=void 0;const n=r(856),a=r(354),o=/(?=[astvzqmhlc])/gi,s=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;t.pathToPoints=(e,t)=>{const r=e.split(o),i=[];if(r.length){let e=[];const o={x:0,y:0};for(;r.length;){const u=r.shift();if(!(null==u?void 0:u.length))continue;const l=u.substring(1).match(s)||[],p=u[0],c=p.toLowerCase(),h=p===c;switch(c){case"l":case"m":for(;l.length;){const t={x:parseFloat(l.shift()),y:parseFloat(l.shift())};h&&(t.x+=o.x,t.y+=o.y),e.push(t),o.x=t.x,o.y=t.y}break;case"h":for(;l.length;){let t=parseFloat(l.shift());h&&(t+=o.x),e.push({x:t,y:o.y}),o.x=t}break;case"v":for(;l.length;){let t=parseFloat(l.shift());h&&(t+=o.y),e.push({x:o.x,y:t}),o.y=t}break;case"z":const r=e[0];e.push({x:r.x,y:r.y}),i.push(e),e=[],o.x=0,o.y=0;break;case"c":for(;l.length;){const r={x:parseFloat(l.shift()),y:parseFloat(l.shift())},a={x:parseFloat(l.shift()),y:parseFloat(l.shift())},s={x:parseFloat(l.shift()),y:parseFloat(l.shift())};h&&(r.x+=o.x,r.y+=o.y,a.x+=o.x,a.y+=o.y,s.x+=o.x,s.y+=o.y),e.push(...n.cubicBezierToPoints({p1:o,p2:r,p3:a,p4:s},t)),o.x=s.x,o.y=s.y}break;case"q":for(;l.length;){const r={x:parseFloat(l.shift()),y:parseFloat(l.shift())},n={x:parseFloat(l.shift()),y:parseFloat(l.shift())};h&&(r.x+=o.x,r.y+=o.y,n.x+=o.x,n.y+=o.y),e.push(...a.quadraticBezierToPoints({p1:o,p2:r,p3:n},t)),o.x=n.x,o.y=n.y}break;case"s":case"t":case"a":console.log(c+" is not implemented")}}e.length&&i.push(e)}return i}},199:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pointsToPolygons=void 0;const a=n(r(187)),o=r(89),s=r(462),i=r(922),u=r(955),l=r(345),p=r(923);t.pointsToPolygons=e=>{let t=[],r=[];if(e.forEach((e=>{const n={points:e,aabb:o.aabb(e)};p.polygonAreaSigned(e)>0?t.push(n):r.push(n)})),t.length){if(r.length){const e=u.combineAabbs(t.map((e=>e.aabb))),n=u.combineAabbs(r.map((e=>e.aabb)));if(s.aabbContains(n,e)){const e=r;r=t,t=e}}}else{const e=r;r=t,t=e}const n=[];return t.length?(t.forEach((e=>{const t=[],o=[],s=[];s.push(...e.points),e.points.map((e=>{t.push(e.x),t.push(e.y)})),r.filter((t=>i.aabbIntersect(t.aabb,e.aabb))).forEach((e=>{s.push(...e.points),o.push(t.length/2),e.points.forEach((e=>{t.push(e.x),t.push(e.y)}))}));const u=a.default(t,o),p=[];for(let e=0;e<u.length;e+=3){let t=s[u[e]];const r=s[u[e+1]];let n=s[u[e+2]];p.push({p1:t,p2:r,p3:n,e1:l.sub(r,t),e2:l.sub(n,r),e3:l.sub(t,n),points:[t,r,n],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}p.length&&n.push(p)})),n):n}},923:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=r(345);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let r=0;for(let a=0;a<t;a++)r+=n.determinant2(e[a],e[a+1]);return r+=n.determinant2(e[t],e[0]),r/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},354:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.quadraticBezierToPoints=void 0;const n=r(345);t.quadraticBezierToPoints=(e,t)=>{const r=[{x:e.p1.x,y:e.p1.y},{x:e.p3.x,y:e.p3.y}],a=(e,o,s,i)=>{const u=n.lerp(o,s,.5),l=n.lerp2(n.lerp2(e.p1,e.p2,u),n.lerp2(e.p2,e.p3,u),u),p=r[i-1],c=r[i];r.splice(i,0,l),n.dot(n.normalize(n.sub(p,l)),n.normalize(n.sub(c,l)))>t&&(a(e,u,s,i+1),a(e,o,u,i))};return a(e,0,1,1),r}},345:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.lerp=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.timeAtPos=t.clamp2=t.clamp=void 0,t.clamp=(e,t,r)=>Math.max(Math.min(e,r),t),t.clamp2=(e,r,n)=>({x:t.clamp(e.x,r.x,n.x),y:t.clamp(e.y,r.y,n.y)}),t.timeAtPos=(e,r,n)=>r?t.clamp((n-e)/r,0,1):0,t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp=(e,t,r)=>e*(1-r)+t*r,t.lerp2=(e,r,n)=>({x:t.lerp(e.x,r.x,n),y:t.lerp(e.y,r.y,n)}),t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const r={x:e.x,y:e.y};return t.forEach((e=>{r.x=Math.min(r.x,e.x),r.y=Math.min(r.y,e.y)})),r},t.max2=(e,...t)=>{const r={x:e.x,y:e.y};return t.forEach((e=>{r.x=Math.max(r.x,e.x),r.y=Math.max(r.y,e.y)})),r},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,r)=>!(e.x>r.x||e.x<t.x||e.y>r.y||e.y<t.y)},978:e=>{"use strict";e.exports="precision highp float;\r\n\r\nuniform vec2 screenSize;\r\n\r\n//these should be flat (no interpolation) - not supported in webgl 1.0\r\nvarying vec2 vPrevPos;\r\nvarying vec2 vPos;\r\nvarying vec2 vNextPos;\r\nvarying vec2 e1;\r\nvarying vec2 e2;\r\nvarying vec2 e3;\r\nvarying vec4 bounds;\r\n\r\nconst float delta = 0.000001;\r\n\r\nvec4 sort(vec4 val) {\r\n  float a = min(val.x, val.y);\r\n  float b = max(val.x, val.y);\r\n  float c = min(val.z, val.w);\r\n  float d = max(val.z, val.w);\r\n\r\n  float e = min(b, c);\r\n  float f = max(b, c);\r\n  float h = max(a, e);\r\n  float i = min(f, d);\r\n\r\n  return vec4(min(a, e), min(h, i), max(h, i), max(f, d));\r\n}\r\n\r\nfloat det2(vec2 p1, vec2 p2) {\r\n  return (p1.x * p2.y) - (p1.y * p2.x);\r\n}\r\n\r\nfloat timeAtPos(float startPos, float dir, float newPos) {\r\n  if (abs(dir) < delta) {\r\n      return 0.0;\r\n  }\r\n\r\n  return clamp((newPos - startPos) / dir, 0.0, 1.0);\r\n}\r\n\r\nvoid main(void) {\r\n  //remove conservative rasterisation overdraw\r\n  if (gl_FragCoord.x < bounds.x || gl_FragCoord.y < bounds.y || gl_FragCoord.x > bounds.z || gl_FragCoord.y > bounds.w) {\r\n      discard;\r\n  }\r\n\r\n  //intersect the triangle with the pixel bounds\r\n  vec2 pixelMin = floor(gl_FragCoord.xy);\r\n  vec2 pixelMax = ceil(gl_FragCoord.xy);\r\n\r\n  vec4 firstLineTs = sort(vec4(\r\n      timeAtPos(vPrevPos.x, e1.x, pixelMin.x),\r\n      timeAtPos(vPrevPos.x, e1.x, pixelMax.x),\r\n      timeAtPos(vPrevPos.y, e1.y, pixelMin.y),\r\n      timeAtPos(vPrevPos.y, e1.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p1 = clamp(vPrevPos + e1 * firstLineTs.x, pixelMin, pixelMax);\r\n  vec2 p2 = clamp(vPrevPos + e1 * firstLineTs.y, pixelMin, pixelMax);\r\n  vec2 p3 = clamp(vPrevPos + e1 * firstLineTs.z, pixelMin, pixelMax);\r\n  vec2 p4 = clamp(vPrevPos + e1 * firstLineTs.w, pixelMin, pixelMax);\r\n\r\n  vec4 secondLineTs = sort(vec4(\r\n      timeAtPos(vPos.x, e2.x, pixelMin.x),\r\n      timeAtPos(vPos.x, e2.x, pixelMax.x),\r\n      timeAtPos(vPos.y, e2.y, pixelMin.y),\r\n      timeAtPos(vPos.y, e2.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p5 = clamp(vPos + e2 * secondLineTs.x, pixelMin, pixelMax);\r\n  vec2 p6 = clamp(vPos + e2 * secondLineTs.y, pixelMin, pixelMax);\r\n  vec2 p7 = clamp(vPos + e2 * secondLineTs.z, pixelMin, pixelMax);\r\n  vec2 p8 = clamp(vPos + e2 * secondLineTs.w, pixelMin, pixelMax);\r\n  \r\n  vec4 thirdLineTs = sort(vec4(\r\n      timeAtPos(vNextPos.x, e3.x, pixelMin.x),\r\n      timeAtPos(vNextPos.x, e3.x, pixelMax.x),\r\n      timeAtPos(vNextPos.y, e3.y, pixelMin.y),\r\n      timeAtPos(vNextPos.y, e3.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p9  = clamp(vNextPos + e3 * thirdLineTs.x, pixelMin, pixelMax);\r\n  vec2 p10 = clamp(vNextPos + e3 * thirdLineTs.y, pixelMin, pixelMax);\r\n  vec2 p11 = clamp(vNextPos + e3 * thirdLineTs.z, pixelMin, pixelMax);\r\n  vec2 p12 = clamp(vNextPos + e3 * thirdLineTs.w, pixelMin, pixelMax);\r\n\r\n  //compute the area under the formed polygon\r\n  float polygonArea = (\r\n      det2(p1, p2) + det2(p2, p3) + det2(p3, p4) + det2(p4, p5) +\r\n      det2(p5, p6) + det2(p6, p7) + det2(p7, p8) + det2(p8, p9) + \r\n      det2(p9, p10) + det2(p10, p11) + det2(p11, p12) + det2(p12, p1)\r\n  ) / 2.0;\r\n\r\n  float alphaAmount = clamp(abs(polygonArea), 0.0, 1.0);\r\n\r\n  gl_FragColor = vec4(1.0, 0.0, 0.0, alphaAmount);\r\n}\r\n"},620:e=>{"use strict";e.exports="uniform vec2 screenSize;\r\nuniform float offset;\r\n\r\nattribute float index;\r\nattribute vec2 pos;\r\nattribute vec2 prevPos;\r\nattribute vec2 nextPos;\r\n\r\nvarying vec4 bounds;\r\n\r\nvarying vec2 vPrevPos;\r\nvarying vec2 vPos;\r\nvarying vec2 vNextPos;\r\nvarying vec2 e1;\r\nvarying vec2 e2;\r\nvarying vec2 e3;\r\n\r\nconst float delta = 0.0000001;\r\n\r\nvoid main(void) {\r\n    // determine a new vertex position such that it covers the neighbour pixel centers\r\n    vec2 a = normalize(pos - prevPos);\r\n    vec2 b = normalize(pos - nextPos);\r\n    float angle = sqrt((1.0 - dot(a, b)) / 2.0);\r\n\r\n    vec2 vecPos;\r\n    if (abs(angle) > delta) {\r\n        vecPos = pos + normalize(a + b) * (offset / angle);\r\n    } else {\r\n        vecPos = pos;\r\n    }\r\n\r\n    // compute a bounding box and pass to the fragment shader so we dont render outside the inflated triangle bounds\r\n    bounds = screenSize.xyxy * (vec4(min(min(pos, prevPos), nextPos), max(max(pos, prevPos), nextPos)) / 2.0 + 0.5) + vec4(-0.5, -0.5, 0.5, 0.5);\r\n\r\n    //translate the position into screen space\r\n    vec2 screenPos = screenSize.xy * (pos / 2.0 + 0.5);\r\n    vec2 screenPrevPos = screenSize.xy * (prevPos / 2.0 + 0.5);\r\n    vec2 screenNextPos = screenSize.xy * (nextPos / 2.0 + 0.5);\r\n    \r\n    //prevent interpolation by ensuring the same positions are sent each vertex in the same triangle\r\n    if (int(index) == 0) {\r\n        vPrevPos = screenPos;\r\n        vPos = screenNextPos;\r\n        vNextPos = screenPrevPos;\r\n    } else if (int(index) == 1) {\r\n        vPrevPos = screenPrevPos;\r\n        vPos = screenPos;\r\n        vNextPos = screenNextPos;\r\n    } else {\r\n        vPrevPos = screenNextPos;\r\n        vPos = screenPrevPos;\r\n        vNextPos = screenPos;\r\n    }\r\n    \r\n    e1 = vPos - vPrevPos;\r\n    e2 = vNextPos - vPos;\r\n    e3 = vPrevPos - vNextPos;\r\n\r\n    gl_Position = vec4(vecPos, 0.0, 1.0);\r\n}\r\n"},102:()=>{}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(943)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,