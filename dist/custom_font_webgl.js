"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[138],{89:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.aabb=void 0;const t=n(669);r.aabb=(...e)=>({min:t.min2(...e),max:t.max2(...e)})},943:function(e,r,n){var t=this&&this.__awaiter||function(e,r,n,t){return new(n||(n=Promise))((function(o,a){function s(e){try{c(t.next(e))}catch(e){a(e)}}function i(e){try{c(t.throw(e))}catch(e){a(e)}}function c(e){var r;e.done?o(e.value):(r=e.value,r instanceof n?r:new n((function(e){e(r)}))).then(s,i)}c((t=t.apply(e,r||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});const a=n(422),s=n(705),i=n(199),c=o(n(911)),l=o(n(618));let p,v,d,f,u,h,x,P,m;const g=()=>{p.clear(p.COLOR_BUFFER_BIT),p.drawArrays(p.TRIANGLES,0,v.length/2),requestAnimationFrame(g)};t(void 0,void 0,void 0,(function*(){const e=1/128,r=-.5078125,n=(yield a.load("./media/Timeless.ttf")).stringToGlyphs("Test");let t=0;const o=[],b=[],y=[],A=[];for(const a of n){const n=a.getPath(t,100,128),c=s.pathToPoints(n.toPathData(5),-.99);t+=a.advanceWidth/1e3*128;const l=i.pointsToPolygons(c);for(const n of l)for(const t of n){const n=[t.p1[0]*e-1,1-t.p1[1]*e+r],a=[t.p2[0]*e-1,1-t.p2[1]*e+r],s=[t.p3[0]*e-1,1-t.p3[1]*e+r];o.push(...n,...a,...s),b.push(...a,...s,...n),y.push(...s,...n,...a),A.push(0,1,2)}}v=new Float32Array(o),d=new Float32Array(b),f=new Float32Array(y),u=new Float32Array(A),(()=>{const e=document.getElementById("canvas1");p=e.getContext("webgl",{antialias:!1,premultipliedAlpha:!1});const r=Math.sqrt(2)/e.width;h=p.createBuffer(),p.bindBuffer(p.ARRAY_BUFFER,h),p.bufferData(p.ARRAY_BUFFER,v,p.STATIC_DRAW),x=p.createBuffer(),p.bindBuffer(p.ARRAY_BUFFER,x),p.bufferData(p.ARRAY_BUFFER,d,p.STATIC_DRAW),P=p.createBuffer(),p.bindBuffer(p.ARRAY_BUFFER,P),p.bufferData(p.ARRAY_BUFFER,f,p.STATIC_DRAW),m=p.createBuffer(),p.bindBuffer(p.ARRAY_BUFFER,m),p.bufferData(p.ARRAY_BUFFER,u,p.STATIC_DRAW);const n=p.createShader(p.VERTEX_SHADER);if(p.shaderSource(n,c.default),p.compileShader(n),""!==String(p.getShaderInfoLog(n)).trim())throw new Error(String(p.getShaderInfoLog(n)));const t=p.createShader(p.FRAGMENT_SHADER);if(p.shaderSource(t,l.default),p.compileShader(t),""!==String(p.getShaderInfoLog(t)).trim())throw new Error(String(p.getShaderInfoLog(t)));const o=p.createProgram();if(p.attachShader(o,n),p.attachShader(o,t),p.linkProgram(o),""!==String(p.getProgramInfoLog(o)).trim())throw new Error(String(p.getProgramInfoLog(o)));p.useProgram(o);const a=p.getAttribLocation(o,"pos");p.bindBuffer(p.ARRAY_BUFFER,h),p.vertexAttribPointer(a,2,p.FLOAT,!1,0,0),p.enableVertexAttribArray(a);const s=p.getAttribLocation(o,"prevPos");p.bindBuffer(p.ARRAY_BUFFER,P),p.vertexAttribPointer(s,2,p.FLOAT,!1,0,0),p.enableVertexAttribArray(s);const i=p.getAttribLocation(o,"nextPos");p.bindBuffer(p.ARRAY_BUFFER,x),p.vertexAttribPointer(i,2,p.FLOAT,!1,0,0),p.enableVertexAttribArray(i);const g=p.getAttribLocation(o,"index");p.bindBuffer(p.ARRAY_BUFFER,m),p.vertexAttribPointer(g,1,p.FLOAT,!1,0,0),p.enableVertexAttribArray(g);const b=p.getUniformLocation(o,"offset");p.uniform1f(b,r);const y=p.getUniformLocation(o,"screenSize");p.uniform2fv(y,[e.width,e.height]),p.clearColor(0,0,0,0),p.viewport(0,0,e.width,e.height),p.enable(p.BLEND),p.blendFunc(p.ONE,p.ONE)})(),g()}))},856:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.cubicBezierToPoints=void 0;const t=n(887),o=n(345),a=n(669);r.cubicBezierToPoints=(e,r)=>{const n=[t.vec2.clone(e.p1),t.vec2.clone(e.p4)],s=(e,t,i,c,l=!1)=>{const p=o.lerp(t,i,.5),v=a.lerp2(e.p2,e.p3,p),d=a.lerp2(a.lerp2(a.lerp2(e.p1,e.p2,p),v,p),a.lerp2(v,a.lerp2(e.p3,e.p4,p),p),p),f=n[c-1],u=n[c];n.splice(c,0,d),(a.dot(a.normalize(a.sub(f,d)),a.normalize(a.sub(u,d)))>r||l)&&(s(e,p,i,c+1),s(e,t,p,c))};return s(e,0,1,1,!0),n}},705:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.pathToPoints=void 0;const t=n(887),o=n(856),a=n(354),s=/(?=[astvzqmhlc])/gi,i=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;r.pathToPoints=(e,r)=>{const n=e.split(s),c=[];if(n.length){let e=[];const s=t.vec2.create();for(;n.length;){const l=n.shift();if(!(null==l?void 0:l.length))continue;const p=l.substring(1).match(i)||[],v=l[0],d=v.toLowerCase(),f=v===d;switch(d){case"l":case"m":for(;p.length;){const r=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));f&&t.vec2.add(r,r,s),e.push(r),t.vec2.copy(s,r)}break;case"h":for(;p.length;){let r=parseFloat(p.shift());f&&(r+=s[0]),e.push(t.vec2.fromValues(r,s[1])),s[0]=r}break;case"v":for(;p.length;){let r=parseFloat(p.shift());f&&(r+=s[1]),e.push(t.vec2.fromValues(s[0],r)),s[1]=r}break;case"z":{const r=e[0];e.push(t.vec2.clone(r)),c.push(e),e=[],t.vec2.zero(s);break}case"c":for(;p.length;){const n=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),a=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),i=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));f&&(t.vec2.add(n,n,s),t.vec2.add(a,a,s),t.vec2.add(i,i,s)),e.push(...o.cubicBezierToPoints({p1:s,p2:n,p3:a,p4:i},r)),t.vec2.copy(s,i)}break;case"q":for(;p.length;){const n=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),o=t.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));f&&(t.vec2.add(n,n,s),t.vec2.add(o,o,s)),e.push(...a.quadraticBezierToPoints({p1:s,p2:n,p3:o},r)),t.vec2.copy(s,o)}break;case"s":case"t":case"a":console.log(d+" is not implemented")}}e.length&&c.push(e)}return c}},199:function(e,r,n){var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.pointsToPolygons=void 0;const o=t(n(187)),a=n(89),s=n(669),i=n(923);r.pointsToPolygons=e=>{const r=e.map((e=>({points:e,aabb:a.aabb(...e),area:i.polygonAreaSigned(e),children:[]})));r.sort(((e,r)=>Math.abs(r.area)-Math.abs(e.area)));const n=[];for(let e=0;e<r.length;++e){let t=null;for(let n=e-1;n>=0;--n)if(s.inside(r[n].points,r[e].points[0])&&r[e].area*r[n].area<0){t=r[n];break}t?t.children.push(r[e]):n.push(r[e])}const t=[];let c=[];const l=e=>{const r=[],n=[],t=[];e.points.forEach((e=>{r.push(...e),t.push(e)})),e.children.forEach((e=>{e.children.forEach(l),n.push(r.length/2),e.points.forEach((e=>{r.push(...e),t.push(e)}))}));const a=o.default(r,n);for(let e=0;e<a.length;e+=3){const r=t[a[e+0]],n=t[a[e+1]],o=t[a[e+2]];c.push({p1:r,p2:n,p3:o,e1:s.sub(n,r),e2:s.sub(o,n),e3:s.sub(r,o),points:[r,n,o],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}};return n.forEach((e=>{l(e),t.push(c),c=[]})),t}},923:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.polygonArea=r.polygonAreaSigned=void 0;const t=n(669);r.polygonAreaSigned=e=>{if(!e.length)return 0;const r=e.length-1;let n=0;for(let o=0;o<r;o++)n+=t.determinant2(e[o],e[o+1]);return n+=t.determinant2(e[r],e[0]),n/2},r.polygonArea=e=>Math.abs(r.polygonAreaSigned(e))},354:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.quadraticBezierToPoints=void 0;const t=n(887),o=n(345),a=n(669);r.quadraticBezierToPoints=(e,r)=>{const n=[t.vec2.clone(e.p1),t.vec2.clone(e.p3)],s=(e,t,i,c)=>{const l=o.lerp(t,i,.5),p=a.lerp2(a.lerp2(e.p1,e.p2,l),a.lerp2(e.p2,e.p3,l),l),v=n[c-1],d=n[c];n.splice(c,0,p),a.dot(a.normalize(a.sub(v,p)),a.normalize(a.sub(d,p)))>r&&(s(e,l,i,c+1),s(e,t,l,c))};return s(e,0,1,1),n}},345:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.lerp=r.timeAtPos=r.clamp=r.fract=r.negFract=r.EPSILON=void 0,r.EPSILON=1e-6,r.negFract=e=>1-e+Math.floor(e),r.fract=e=>e-Math.floor(e),r.clamp=(e,r,n)=>Math.max(Math.min(e,n),r),r.timeAtPos=(e,n,t)=>n?r.clamp((t-e)/n,0,1):0,r.lerp=(e,r,n)=>e*(1-n)+r*n},669:(e,r,n)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.inside=r.inRange=r.avg=r.max2=r.min2=r.toPrecision2=r.lerp2=r.normalize=r.length=r.dot=r.sign=r.abs=r.ceil=r.floor=r.sub=r.adds=r.add=r.divide=r.multiply=r.scale=r.equals=r.determinant2=r.clamp2=void 0;const t=n(887),o=n(345);r.clamp2=(e,r,n)=>{const o=t.vec2.clone(e);return t.vec2.min(o,o,n),t.vec2.max(o,o,r),o},r.determinant2=(e,r)=>e[0]*r[1]-e[1]*r[0],r.equals=t.vec2.equals,r.scale=(e,r)=>t.vec2.scale(t.vec2.create(),e,r),r.multiply=(e,r)=>t.vec2.multiply(t.vec2.create(),e,r),r.divide=(e,r)=>t.vec2.divide(t.vec2.create(),e,r),r.add=(e,r)=>t.vec2.add(t.vec2.create(),e,r),r.adds=(e,r)=>t.vec2.fromValues(e[0]+r,e[1]+r),r.sub=(e,r)=>t.vec2.sub(t.vec2.create(),e,r),r.floor=e=>t.vec2.floor(t.vec2.create(),e),r.ceil=e=>t.vec2.ceil(t.vec2.create(),e),r.abs=e=>t.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),r.sign=e=>t.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),r.dot=(e,r)=>t.vec2.dot(e,r),r.length=e=>t.vec2.length(e),r.normalize=e=>r.scale(e,1/r.length(e)),r.lerp2=(e,r,n)=>t.vec2.lerp(t.vec2.create(),e,r,n),r.toPrecision2=(e,r)=>(e[0]=parseFloat(e[0].toPrecision(r)),e[1]=parseFloat(e[1].toPrecision(r)),e),r.min2=(...e)=>{const[r,...n]=e,o=t.vec2.clone(r);return n.forEach((e=>{t.vec2.min(o,o,e)})),o},r.max2=(...e)=>{const[r,...n]=e,o=t.vec2.clone(r);return n.forEach((e=>{t.vec2.max(o,o,e)})),o},r.avg=(...e)=>{const r=t.vec2.create();return e.length&&(e.forEach((e=>{t.vec2.add(r,r,e)})),t.vec2.scale(r,r,1/e.length)),r},r.inRange=(e,r,n)=>!(e[0]>n[0]||e[0]<r[0]||e[1]>n[1]||e[1]<r[1]),r.inside=(e,r)=>{let n=0,t=e[e.length-1];return e.forEach((e=>{const a=t[1]<e[1]?t:e,s=t[1]<e[1]?e:t;a[1]<r[1]+o.EPSILON&&s[1]>r[1]+o.EPSILON&&(s[0]-a[0])*(r[1]-a[1])>(r[0]-a[0])*(s[1]-a[1])&&(n+=1),t=e})),n%2!=0}},618:e=>{e.exports="precision highp float;\r\n\r\nuniform vec2 screenSize;\r\n\r\n//these should be flat (no interpolation) - not supported in webgl 1.0\r\nvarying vec2 vPrevPos;\r\nvarying vec2 vPos;\r\nvarying vec2 vNextPos;\r\nvarying vec2 e1;\r\nvarying vec2 e2;\r\nvarying vec2 e3;\r\nvarying vec4 bounds;\r\n\r\nconst float delta = 0.000001;\r\n\r\nvec4 sort(vec4 val) {\r\n  float a = min(val.x, val.y);\r\n  float b = max(val.x, val.y);\r\n  float c = min(val.z, val.w);\r\n  float d = max(val.z, val.w);\r\n\r\n  float e = min(b, c);\r\n  float f = max(b, c);\r\n  float h = max(a, e);\r\n  float i = min(f, d);\r\n\r\n  return vec4(min(a, e), min(h, i), max(h, i), max(f, d));\r\n}\r\n\r\nfloat det2(vec2 p1, vec2 p2) {\r\n  return (p1.x * p2.y) - (p1.y * p2.x);\r\n}\r\n\r\nfloat timeAtPos(float startPos, float dir, float newPos) {\r\n  if (abs(dir) < delta) {\r\n      return 0.0;\r\n  }\r\n\r\n  return clamp((newPos - startPos) / dir, 0.0, 1.0);\r\n}\r\n\r\nvoid main(void) {\r\n  //remove conservative rasterisation overdraw\r\n  if (gl_FragCoord.x < bounds.x || gl_FragCoord.y < bounds.y || gl_FragCoord.x > bounds.z || gl_FragCoord.y > bounds.w) {\r\n      discard;\r\n  }\r\n\r\n  //intersect the triangle with the pixel bounds\r\n  vec2 pixelMin = floor(gl_FragCoord.xy);\r\n  vec2 pixelMax = ceil(gl_FragCoord.xy);\r\n\r\n  vec4 firstLineTs = sort(vec4(\r\n      timeAtPos(vPrevPos.x, e1.x, pixelMin.x),\r\n      timeAtPos(vPrevPos.x, e1.x, pixelMax.x),\r\n      timeAtPos(vPrevPos.y, e1.y, pixelMin.y),\r\n      timeAtPos(vPrevPos.y, e1.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p1 = clamp(vPrevPos + e1 * firstLineTs.x, pixelMin, pixelMax);\r\n  vec2 p2 = clamp(vPrevPos + e1 * firstLineTs.y, pixelMin, pixelMax);\r\n  vec2 p3 = clamp(vPrevPos + e1 * firstLineTs.z, pixelMin, pixelMax);\r\n  vec2 p4 = clamp(vPrevPos + e1 * firstLineTs.w, pixelMin, pixelMax);\r\n\r\n  vec4 secondLineTs = sort(vec4(\r\n      timeAtPos(vPos.x, e2.x, pixelMin.x),\r\n      timeAtPos(vPos.x, e2.x, pixelMax.x),\r\n      timeAtPos(vPos.y, e2.y, pixelMin.y),\r\n      timeAtPos(vPos.y, e2.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p5 = clamp(vPos + e2 * secondLineTs.x, pixelMin, pixelMax);\r\n  vec2 p6 = clamp(vPos + e2 * secondLineTs.y, pixelMin, pixelMax);\r\n  vec2 p7 = clamp(vPos + e2 * secondLineTs.z, pixelMin, pixelMax);\r\n  vec2 p8 = clamp(vPos + e2 * secondLineTs.w, pixelMin, pixelMax);\r\n  \r\n  vec4 thirdLineTs = sort(vec4(\r\n      timeAtPos(vNextPos.x, e3.x, pixelMin.x),\r\n      timeAtPos(vNextPos.x, e3.x, pixelMax.x),\r\n      timeAtPos(vNextPos.y, e3.y, pixelMin.y),\r\n      timeAtPos(vNextPos.y, e3.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p9  = clamp(vNextPos + e3 * thirdLineTs.x, pixelMin, pixelMax);\r\n  vec2 p10 = clamp(vNextPos + e3 * thirdLineTs.y, pixelMin, pixelMax);\r\n  vec2 p11 = clamp(vNextPos + e3 * thirdLineTs.z, pixelMin, pixelMax);\r\n  vec2 p12 = clamp(vNextPos + e3 * thirdLineTs.w, pixelMin, pixelMax);\r\n\r\n  //compute the area under the formed polygon\r\n  float polygonArea = (\r\n      det2(p1, p2) + det2(p2, p3) + det2(p3, p4) + det2(p4, p5) +\r\n      det2(p5, p6) + det2(p6, p7) + det2(p7, p8) + det2(p8, p9) + \r\n      det2(p9, p10) + det2(p10, p11) + det2(p11, p12) + det2(p12, p1)\r\n  ) / 2.0;\r\n\r\n  float alphaAmount = clamp(abs(polygonArea), 0.0, 1.0);\r\n\r\n  gl_FragColor = vec4(1.0, 0.0, 0.0, alphaAmount);\r\n}\r\n"},911:e=>{e.exports="uniform vec2 screenSize;\r\nuniform float offset;\r\n\r\nattribute float index;\r\nattribute vec2 pos;\r\nattribute vec2 prevPos;\r\nattribute vec2 nextPos;\r\n\r\nvarying vec4 bounds;\r\n\r\nvarying vec2 vPrevPos;\r\nvarying vec2 vPos;\r\nvarying vec2 vNextPos;\r\nvarying vec2 e1;\r\nvarying vec2 e2;\r\nvarying vec2 e3;\r\n\r\nconst float delta = 0.0000001;\r\n\r\nvoid main(void) {\r\n    // determine a new vertex position such that it covers the neighbour pixel centers\r\n    vec2 a = normalize(pos - prevPos);\r\n    vec2 b = normalize(pos - nextPos);\r\n    float angle = sqrt((1.0 - dot(a, b)) / 2.0);\r\n\r\n    vec2 vecPos;\r\n    if (abs(angle) > delta) {\r\n        vecPos = pos + normalize(a + b) * (offset / angle);\r\n    } else {\r\n        vecPos = pos;\r\n    }\r\n\r\n    // compute a bounding box and pass to the fragment shader so we dont render outside the inflated triangle bounds\r\n    bounds = screenSize.xyxy * (vec4(min(min(pos, prevPos), nextPos), max(max(pos, prevPos), nextPos)) / 2.0 + 0.5) + vec4(-0.5, -0.5, 0.5, 0.5);\r\n\r\n    //translate the position into screen space\r\n    vec2 screenPos = screenSize.xy * (pos / 2.0 + 0.5);\r\n    vec2 screenPrevPos = screenSize.xy * (prevPos / 2.0 + 0.5);\r\n    vec2 screenNextPos = screenSize.xy * (nextPos / 2.0 + 0.5);\r\n    \r\n    //prevent interpolation by ensuring the same positions are sent each vertex in the same triangle\r\n    if (int(index) == 0) {\r\n        vPrevPos = screenPos;\r\n        vPos = screenNextPos;\r\n        vNextPos = screenPrevPos;\r\n    } else if (int(index) == 1) {\r\n        vPrevPos = screenPrevPos;\r\n        vPos = screenPos;\r\n        vNextPos = screenNextPos;\r\n    } else {\r\n        vPrevPos = screenNextPos;\r\n        vPos = screenPrevPos;\r\n        vNextPos = screenPos;\r\n    }\r\n    \r\n    e1 = vPos - vPrevPos;\r\n    e2 = vNextPos - vPos;\r\n    e3 = vPrevPos - vNextPos;\r\n\r\n    gl_Position = vec4(vecPos, 0.0, 1.0);\r\n}\r\n"}},e=>{e(e.s=943)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,