(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[0],{89:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0;const o=a(669);t.aabb=(...e)=>({min:o.min2(...e),max:o.max2(...e)})},462:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabbContains=void 0,t.aabbContains=(e,t)=>e.min[0]<=t.min[0]&&e.min[1]<=t.min[1]&&e.max[0]>=t.max[0]&&e.max[1]>=t.max[1]},922:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabbIntersect=void 0,t.aabbIntersect=(e,t)=>t.min[0]<=e.max[0]&&t.max[0]>=e.min[0]&&t.min[1]<=e.max[1]&&t.max[1]>=e.min[1]},955:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.combineAabbs=void 0;const o=a(669);t.combineAabbs=e=>{if(!e.length)return;const t=e[0],a={min:t.min,max:t.max};for(let t=1;t<e.length;t++){const n=e[t];a.min=o.min2(a.min,n.min),a.max=o.max2(a.max,n.max)}return a}},737:function(e,t,a){"use strict";var o=this&&this.__awaiter||function(e,t,a,o){return new(a||(a=Promise))((function(n,s){function i(e){try{c(o.next(e))}catch(e){s(e)}}function r(e){try{c(o.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,r)}c((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=a(422),s=a(395),i=a(705),r=a(199),c=a(923),l=a(345),m=a(669),u=a(848),p=a(887),d=document.getElementById("game"),h=document.getElementById("game2"),v=document.getElementById("zoomInput"),f=document.getElementById("textString"),b=document.getElementById("xPosition"),g=document.getElementById("yPosition"),x=d.getContext("2d"),P=h.getContext("2d",{alpha:!0});if(!x||!P)throw new Error("Could not get canvas graphics :(");let M;x.imageSmoothingEnabled=!1,P.imageSmoothingQuality="high",P.imageSmoothingEnabled=!0;const y=[],_=[];let E=parseFloat(v.value),A=0,F=0,z=f.value;b.addEventListener("input",(()=>{A=parseFloat(b.value),requestAnimationFrame(S)})),g.addEventListener("input",(()=>{F=parseFloat(g.value),requestAnimationFrame(S)})),f.addEventListener("input",(()=>{z=f.value,T()})),v.addEventListener("input",(()=>{E=parseFloat(v.value),requestAnimationFrame(S)}));let O=new Map;const T=()=>{const e=M.stringToGlyphs(z);y.length=0,_.length=0;let t=0;e.forEach((e=>{const a=e.getPath(t,100,52),o=i.pathToPoints(a.toPathData(5),-.99);t+=e.advanceWidth/1e3*52;const n=r.pointsToPolygons(o);_.push(...o),y.push(...n)})),O.clear(),_.forEach((e=>e.forEach((e=>{O.set(e,Object.assign({},e))})))),requestAnimationFrame(S)},S=()=>{x.clearRect(0,0,d.width,d.height),_.forEach((e=>e.forEach((e=>{const t=O.get(e);e[0]=t[0]*E+A,e[1]=t[1]*E+F}))));const e=x.getImageData(0,0,d.width,d.height),t=e.data;y.forEach((e=>{e.forEach((e=>{e.e1=m.sub(e.p2,e.p1),e.e2=m.sub(e.p3,e.p2),e.e3=m.sub(e.p1,e.p3),u.rasterizeTriangle(e.points,{pos:p.vec2.create(),cellSize:p.vec2.fromValues(1,1)},(a=>{const o=4*(d.width*a[1]+a[0]),n={min:p.vec2.fromValues(a[0],a[1]),size:p.vec2.fromValues(1,1),max:p.vec2.fromValues(a[0]+1,a[1]+1)},i=s.intersectCellTriangle(e,n),r=l.clamp(Number(c.polygonArea(i).toFixed(5)),0,1);t[o+3]=Math.min(t[o+3]+255*r,255)}),(e=>{const a=4*(d.width*e[1]+e[0]);t[a]=0,t[a+1]=0,t[a+2]=0,t[a+3]=255}))}))})),x.putImageData(e,0,0),P.clearRect(0,0,h.width,h.height),P.fillStyle="black",P.font=52*E+"px Timeless Regular",P.fillText(z,A,100*E+F)};o(void 0,void 0,void 0,(function*(){M=yield n.load("./media/Timeless.ttf"),T()}))},856:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const o=a(887),n=a(345),s=a(669);t.cubicBezierToPoints=(e,t)=>{const a=[o.vec2.clone(e.p1),o.vec2.clone(e.p4)],i=(e,o,r,c,l=!1)=>{const m=n.lerp(o,r,.5),u=s.lerp2(e.p2,e.p3,m),p=s.lerp2(s.lerp2(s.lerp2(e.p1,e.p2,m),u,m),s.lerp2(u,s.lerp2(e.p3,e.p4,m),m),m),d=a[c-1],h=a[c];a.splice(c,0,p),(s.dot(s.normalize(s.sub(d,p)),s.normalize(s.sub(h,p)))>t||l)&&(i(e,m,r,c+1),i(e,o,m,c))};return i(e,0,1,1,!0),a}},395:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const o=a(669),n=a(345),s=a(857);t.intersectCellTriangle=(e,t)=>{const a=[],i=n.timeAtPos(e.p1[0],e.e1[0],t.min[0]),r=n.timeAtPos(e.p1[0],e.e1[0],t.max[0]),c=n.timeAtPos(e.p1[1],e.e1[1],t.min[1]),l=n.timeAtPos(e.p1[1],e.e1[1],t.max[1]);a.push(...s.sort(i,r,c,l).map((a=>o.clamp2(o.add(e.p1,o.scale(e.e1,a)),t.min,t.max))));const m=n.timeAtPos(e.p2[0],e.e2[0],t.min[0]),u=n.timeAtPos(e.p2[0],e.e2[0],t.max[0]),p=n.timeAtPos(e.p2[1],e.e2[1],t.min[1]),d=n.timeAtPos(e.p2[1],e.e2[1],t.max[1]);a.push(...s.sort(m,u,p,d).map((a=>o.clamp2(o.add(e.p2,o.scale(e.e2,a)),t.min,t.max))));const h=n.timeAtPos(e.p3[0],e.e3[0],t.min[0]),v=n.timeAtPos(e.p3[0],e.e3[0],t.max[0]),f=n.timeAtPos(e.p3[1],e.e3[1],t.min[1]),b=n.timeAtPos(e.p3[1],e.e3[1],t.max[1]);return a.push(...s.sort(h,v,f,b).map((a=>o.clamp2(o.add(e.p3,o.scale(e.e3,a)),t.min,t.max)))),a}},705:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pathToPoints=void 0;const o=a(887),n=a(856),s=a(354),i=/(?=[astvzqmhlc])/gi,r=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;t.pathToPoints=(e,t)=>{const a=e.split(i),c=[];if(a.length){let e=[];const i=o.vec2.create();for(;a.length;){const l=a.shift();if(!(null==l?void 0:l.length))continue;const m=l.substring(1).match(r)||[],u=l[0],p=u.toLowerCase(),d=u===p;switch(p){case"l":case"m":for(;m.length;){const t=o.vec2.fromValues(parseFloat(m.shift()),parseFloat(m.shift()));d&&o.vec2.add(t,t,i),e.push(t),o.vec2.copy(i,t)}break;case"h":for(;m.length;){let t=parseFloat(m.shift());d&&(t+=i[0]),e.push(o.vec2.fromValues(t,i[1])),i[0]=t}break;case"v":for(;m.length;){let t=parseFloat(m.shift());d&&(t+=i[1]),e.push(o.vec2.fromValues(i[0],t)),i[1]=t}break;case"z":const a=e[0];e.push(o.vec2.clone(a)),c.push(e),e=[],o.vec2.zero(i);break;case"c":for(;m.length;){const a=o.vec2.fromValues(parseFloat(m.shift()),parseFloat(m.shift())),s=o.vec2.fromValues(parseFloat(m.shift()),parseFloat(m.shift())),r=o.vec2.fromValues(parseFloat(m.shift()),parseFloat(m.shift()));d&&(o.vec2.add(a,a,i),o.vec2.add(s,s,i),o.vec2.add(r,r,i)),e.push(...n.cubicBezierToPoints({p1:i,p2:a,p3:s,p4:r},t)),o.vec2.copy(i,r)}break;case"q":for(;m.length;){const a=o.vec2.fromValues(parseFloat(m.shift()),parseFloat(m.shift())),n=o.vec2.fromValues(parseFloat(m.shift()),parseFloat(m.shift()));d&&(o.vec2.add(a,a,i),o.vec2.add(n,n,i)),e.push(...s.quadraticBezierToPoints({p1:i,p2:a,p3:n},t)),o.vec2.copy(i,n)}break;case"s":case"t":case"a":console.log(p+" is not implemented")}}e.length&&c.push(e)}return c}},199:function(e,t,a){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pointsToPolygons=void 0;const n=o(a(187)),s=a(89),i=a(462),r=a(922),c=a(955),l=a(669),m=a(923);t.pointsToPolygons=e=>{let t=[],a=[];if(e.forEach((e=>{const o={points:e,aabb:s.aabb(...e)};m.polygonAreaSigned(e)>0?t.push(o):a.push(o)})),t.length){if(a.length){const e=c.combineAabbs(t.map((e=>e.aabb))),o=c.combineAabbs(a.map((e=>e.aabb)));if(i.aabbContains(o,e)){const e=a;a=t,t=e}}}else{const e=a;a=t,t=e}const o=[];return t.length?(t.forEach((e=>{const t=[],s=[],i=[];i.push(...e.points),e.points.map((e=>{t.push(e[0]),t.push(e[1])})),a.filter((t=>r.aabbIntersect(t.aabb,e.aabb))).forEach((e=>{i.push(...e.points),s.push(t.length/2),e.points.forEach((e=>{t.push(e[0]),t.push(e[1])}))}));const c=n.default(t,s),m=[];for(let e=0;e<c.length;e+=3){let t=i[c[e]];const a=i[c[e+1]];let o=i[c[e+2]];m.push({p1:t,p2:a,p3:o,e1:l.sub(a,t),e2:l.sub(o,a),e3:l.sub(t,o),points:[t,a,o],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}m.length&&o.push(m)})),o):o}},923:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=a(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let n=0;n<t;n++)a+=o.determinant2(e[n],e[n+1]);return a+=o.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},354:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.quadraticBezierToPoints=void 0;const o=a(887),n=a(345),s=a(669);t.quadraticBezierToPoints=(e,t)=>{const a=[o.vec2.clone(e.p1),o.vec2.clone(e.p3)],i=(e,o,r,c)=>{const l=n.lerp(o,r,.5),m=s.lerp2(s.lerp2(e.p1,e.p2,l),s.lerp2(e.p2,e.p3,l),l),u=a[c-1],p=a[c];a.splice(c,0,m),s.dot(s.normalize(s.sub(u,m)),s.normalize(s.sub(p,m)))>t&&(i(e,l,r,c+1),i(e,o,l,c))};return i(e,0,1,1),a}},345:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,o)=>a?t.clamp((o-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},669:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=a(887);t.clamp2=(e,t,a)=>{const n=o.vec2.clone(e);return o.vec2.min(n,n,a),o.vec2.max(n,n,t),n},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=o.vec2.equals,t.scale=(e,t)=>o.vec2.scale(o.vec2.create(),e,t),t.multiply=(e,t)=>o.vec2.multiply(o.vec2.create(),e,t),t.divide=(e,t)=>o.vec2.divide(o.vec2.create(),e,t),t.add=(e,t)=>o.vec2.add(o.vec2.create(),e,t),t.adds=(e,t)=>o.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>o.vec2.sub(o.vec2.create(),e,t),t.floor=e=>o.vec2.floor(o.vec2.create(),e),t.ceil=e=>o.vec2.ceil(o.vec2.create(),e),t.abs=e=>o.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>o.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>o.vec2.dot(e,t),t.length=e=>o.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,a)=>o.vec2.lerp(o.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.min(n,n,e)})),n},t.max2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.max(n,n,e)})),n},t.avg=(...e)=>{const t=o.vec2.create();return e.length&&(e.forEach((e=>{o.vec2.add(t,t,e)})),o.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1])},857:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,a,o)=>{const n=Math.min(e,t),s=Math.max(e,t),i=Math.min(a,o),r=Math.max(a,o),c=Math.min(s,i),l=Math.max(s,i),m=Math.max(n,c),u=Math.min(l,r);return[Math.min(n,c),Math.min(m,u),Math.max(m,u),Math.max(l,r)]}},848:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.rasterizeTriangle=void 0;const o=a(887),n=a(264);t.rasterizeTriangle=(e,t,a,s)=>{const i=[{from:e[0],to:e[1]},{from:e[1],to:e[2]},{from:e[2],to:e[0]}],r={},c=new Set;i.forEach((e=>{n.traverse(e.from,e.to,t,(e=>{let t=r[e[1]];const o=e[0]+","+e[1];c.has(o)||(t?(t.min=Math.min(t.min,e[0]),t.max=Math.max(t.max,e[0])):t={min:e[0],max:e[0]},r[e[1]]=t,a(e),c.add(o))}))}));const l=o.vec2.create();for(let e in r)if(r.hasOwnProperty(e)){l[1]=parseInt(e,10);const t=r[e];for(l[0]=t.min+1;l[0]<t.max;l[0]++)c.has(l[0]+","+l[1])||s(l)}return r}},264:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.traverse=void 0;const o=a(887),n=a(345),s=a(669);t.traverse=(e,t,a,i)=>{const r=s.sub(e,a.pos),c=s.sub(t,e),l=s.floor(s.divide(r,a.cellSize)),m=s.floor(s.divide(s.sub(t,a.pos),a.cellSize));if(Math.abs(c[1])<n.EPSILON){for(let e=Math.min(l[0],m[0]),t=Math.max(l[0],m[0]);e<=t;e++)if(l[0]=e,!1===i(l))return!1;return}if(Math.abs(c[0])<n.EPSILON){for(let e=Math.min(l[1],m[1]),t=Math.max(l[1],m[1]);e<=t;e++)if(l[1]=e,!1===i(l))return!1;return}const u=s.sign(c),p=s.multiply(s.divide(u,c),a.cellSize),d=s.divide(r,a.cellSize),h=o.vec2.fromValues(u[0]>0?p[0]*n.negFract(d[0]):p[0]*n.fract(d[0]),u[1]>0?p[1]*n.negFract(d[1]):p[1]*n.fract(d[1]));for(;;){if(!1===i(l))return!1;if(h[0]>1&&h[1]>1)return;h[0]<h[1]?(l[0]+=u[0],h[0]+=p[0]):(l[1]+=u[1],h[1]+=p[1])}}}},e=>{"use strict";e(e.s=737)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,