(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[0],{89:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0,t.aabb=e=>{const t=e[0],a={x:t.x,y:t.y},n={x:t.x,y:t.y};for(let t=1;t<e.length;t++){const o=e[t];a.x=Math.min(a.x,o.x),a.y=Math.min(a.y,o.y),n.x=Math.max(n.x,o.x),n.y=Math.max(n.y,o.y)}return{min:a,max:n}}},462:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabbContains=void 0,t.aabbContains=(e,t)=>e.min.x<=t.min.x&&e.min.y<=t.min.y&&e.max.x>=t.max.x&&e.max.y>=t.max.y},922:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabbIntersect=void 0,t.aabbIntersect=(e,t)=>t.min.x<=e.max.x&&t.max.x>=e.min.x&&t.min.y<=e.max.y&&t.max.y>=e.min.y},955:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.combineAabbs=void 0;const n=a(669);t.combineAabbs=e=>{if(!e.length)return;const t=e[0],a={min:t.min,max:t.max};for(let t=1;t<e.length;t++){const o=e[t];a.min=n.min2(a.min,o.min),a.max=n.max2(a.max,o.max)}return a}},737:function(e,t,a){"use strict";var n=this&&this.__awaiter||function(e,t,a,n){return new(a||(a=Promise))((function(o,s){function i(e){try{l(n.next(e))}catch(e){s(e)}}function r(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,r)}l((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=a(422),s=a(558),i=a(705),r=a(199),l=a(923),x=a(345),y=a(669),c=a(848),p=document.getElementById("game"),m=document.getElementById("game2"),u=document.getElementById("zoomInput"),h=document.getElementById("textString"),d=document.getElementById("xPosition"),f=document.getElementById("yPosition"),b=p.getContext("2d"),g=m.getContext("2d",{alpha:!0});if(!b||!g)throw new Error("Could not get canvas graphics :(");let M;b.imageSmoothingEnabled=!1,g.imageSmoothingQuality="high",g.imageSmoothingEnabled=!0;const v=[],P=[];let _=parseFloat(u.value),E=0,A=0,F=h.value;d.addEventListener("input",(()=>{E=parseFloat(d.value),requestAnimationFrame(T)})),f.addEventListener("input",(()=>{A=parseFloat(f.value),requestAnimationFrame(T)})),h.addEventListener("input",(()=>{F=h.value,O()})),u.addEventListener("input",(()=>{_=parseFloat(u.value),requestAnimationFrame(T)}));let z=new Map;const O=()=>{const e=M.stringToGlyphs(F);v.length=0,P.length=0;let t=0;e.forEach((e=>{const a=e.getPath(t,100,52),n=i.pathToPoints(a.toPathData(5),-.99);t+=e.advanceWidth/1e3*52;const o=r.pointsToPolygons(n);P.push(...n),v.push(...o)})),z.clear(),P.forEach((e=>e.forEach((e=>{z.set(e,Object.assign({},e))})))),requestAnimationFrame(T)},T=()=>{b.clearRect(0,0,p.width,p.height),P.forEach((e=>e.forEach((e=>{const t=z.get(e);e.x=t.x*_+E,e.y=t.y*_+A}))));const e=b.getImageData(0,0,p.width,p.height),t=e.data;v.forEach((e=>{e.forEach((e=>{e.e1=y.sub(e.p2,e.p1),e.e2=y.sub(e.p3,e.p2),e.e3=y.sub(e.p1,e.p3),c.rasterizeTriangle(e.points,{pos:{x:0,y:0},cellSize:{x:1,y:1}},(a=>{const n=4*(p.width*a.y+a.x),o={min:{x:a.x,y:a.y},size:{x:1,y:1},max:{x:a.x+1,y:a.y+1}},i=s.intersectCellTriangle(e,o),r=x.clamp(Number(l.polygonArea(i).toFixed(5)),0,1);t[n+3]=Math.min(t[n+3]+255*r,255)}),(e=>{const a=4*(p.width*e.y+e.x);t[a]=0,t[a+1]=0,t[a+2]=0,t[a+3]=255}))}))})),b.putImageData(e,0,0),g.clearRect(0,0,m.width,m.height),g.fillStyle="black",g.font=52*_+"px Timeless Regular",g.fillText(F,E,100*_+A)};n(void 0,void 0,void 0,(function*(){M=yield o.load("./media/Timeless.ttf"),O()}))},856:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const n=a(345),o=a(669);t.cubicBezierToPoints=(e,t)=>{const a=[{x:e.p1.x,y:e.p1.y},{x:e.p4.x,y:e.p4.y}],s=(e,i,r,l,x=!1)=>{const y=n.lerp(i,r,.5),c=o.lerp2(e.p2,e.p3,y),p=o.lerp2(o.lerp2(o.lerp2(e.p1,e.p2,y),c,y),o.lerp2(c,o.lerp2(e.p3,e.p4,y),y),y),m=a[l-1],u=a[l];a.splice(l,0,p),(o.dot(o.normalize(o.sub(m,p)),o.normalize(o.sub(u,p)))>t||x)&&(s(e,y,r,l+1),s(e,i,y,l))};return s(e,0,1,1,!0),a}},558:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const n=a(669),o=a(345),s=a(857);t.intersectCellTriangle=(e,t)=>{const a=[],i=o.timeAtPos(e.p1.x,e.e1.x,t.min.x),r=o.timeAtPos(e.p1.x,e.e1.x,t.max.x),l=o.timeAtPos(e.p1.y,e.e1.y,t.min.y),x=o.timeAtPos(e.p1.y,e.e1.y,t.max.y);a.push(...s.sort(i,r,l,x).map((a=>n.clamp2(n.add(e.p1,n.scale(e.e1,a)),t.min,t.max))));const y=o.timeAtPos(e.p2.x,e.e2.x,t.min.x),c=o.timeAtPos(e.p2.x,e.e2.x,t.max.x),p=o.timeAtPos(e.p2.y,e.e2.y,t.min.y),m=o.timeAtPos(e.p2.y,e.e2.y,t.max.y);a.push(...s.sort(y,c,p,m).map((a=>n.clamp2(n.add(e.p2,n.scale(e.e2,a)),t.min,t.max))));const u=o.timeAtPos(e.p3.x,e.e3.x,t.min.x),h=o.timeAtPos(e.p3.x,e.e3.x,t.max.x),d=o.timeAtPos(e.p3.y,e.e3.y,t.min.y),f=o.timeAtPos(e.p3.y,e.e3.y,t.max.y);return a.push(...s.sort(u,h,d,f).map((a=>n.clamp2(n.add(e.p3,n.scale(e.e3,a)),t.min,t.max)))),a}},705:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pathToPoints=void 0;const n=a(856),o=a(354),s=/(?=[astvzqmhlc])/gi,i=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;t.pathToPoints=(e,t)=>{const a=e.split(s),r=[];if(a.length){let e=[];const s={x:0,y:0};for(;a.length;){const l=a.shift();if(!(null==l?void 0:l.length))continue;const x=l.substring(1).match(i)||[],y=l[0],c=y.toLowerCase(),p=y===c;switch(c){case"l":case"m":for(;x.length;){const t={x:parseFloat(x.shift()),y:parseFloat(x.shift())};p&&(t.x+=s.x,t.y+=s.y),e.push(t),s.x=t.x,s.y=t.y}break;case"h":for(;x.length;){let t=parseFloat(x.shift());p&&(t+=s.x),e.push({x:t,y:s.y}),s.x=t}break;case"v":for(;x.length;){let t=parseFloat(x.shift());p&&(t+=s.y),e.push({x:s.x,y:t}),s.y=t}break;case"z":const a=e[0];e.push({x:a.x,y:a.y}),r.push(e),e=[],s.x=0,s.y=0;break;case"c":for(;x.length;){const a={x:parseFloat(x.shift()),y:parseFloat(x.shift())},o={x:parseFloat(x.shift()),y:parseFloat(x.shift())},i={x:parseFloat(x.shift()),y:parseFloat(x.shift())};p&&(a.x+=s.x,a.y+=s.y,o.x+=s.x,o.y+=s.y,i.x+=s.x,i.y+=s.y),e.push(...n.cubicBezierToPoints({p1:s,p2:a,p3:o,p4:i},t)),s.x=i.x,s.y=i.y}break;case"q":for(;x.length;){const a={x:parseFloat(x.shift()),y:parseFloat(x.shift())},n={x:parseFloat(x.shift()),y:parseFloat(x.shift())};p&&(a.x+=s.x,a.y+=s.y,n.x+=s.x,n.y+=s.y),e.push(...o.quadraticBezierToPoints({p1:s,p2:a,p3:n},t)),s.x=n.x,s.y=n.y}break;case"s":case"t":case"a":console.log(c+" is not implemented")}}e.length&&r.push(e)}return r}},199:function(e,t,a){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pointsToPolygons=void 0;const o=n(a(187)),s=a(89),i=a(462),r=a(922),l=a(955),x=a(669),y=a(923);t.pointsToPolygons=e=>{let t=[],a=[];if(e.forEach((e=>{const n={points:e,aabb:s.aabb(e)};y.polygonAreaSigned(e)>0?t.push(n):a.push(n)})),t.length){if(a.length){const e=l.combineAabbs(t.map((e=>e.aabb))),n=l.combineAabbs(a.map((e=>e.aabb)));if(i.aabbContains(n,e)){const e=a;a=t,t=e}}}else{const e=a;a=t,t=e}const n=[];return t.length?(t.forEach((e=>{const t=[],s=[],i=[];i.push(...e.points),e.points.map((e=>{t.push(e.x),t.push(e.y)})),a.filter((t=>r.aabbIntersect(t.aabb,e.aabb))).forEach((e=>{i.push(...e.points),s.push(t.length/2),e.points.forEach((e=>{t.push(e.x),t.push(e.y)}))}));const l=o.default(t,s),y=[];for(let e=0;e<l.length;e+=3){let t=i[l[e]];const a=i[l[e+1]];let n=i[l[e+2]];y.push({p1:t,p2:a,p3:n,e1:x.sub(a,t),e2:x.sub(n,a),e3:x.sub(t,n),points:[t,a,n],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}y.length&&n.push(y)})),n):n}},923:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=a(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let o=0;o<t;o++)a+=n.determinant2(e[o],e[o+1]);return a+=n.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},354:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.quadraticBezierToPoints=void 0;const n=a(345),o=a(669);t.quadraticBezierToPoints=(e,t)=>{const a=[{x:e.p1.x,y:e.p1.y},{x:e.p3.x,y:e.p3.y}],s=(e,i,r,l)=>{const x=n.lerp(i,r,.5),y=o.lerp2(o.lerp2(e.p1,e.p2,x),o.lerp2(e.p2,e.p3,x),x),c=a[l-1],p=a[l];a.splice(l,0,y),o.dot(o.normalize(o.sub(c,y)),o.normalize(o.sub(p,y)))>t&&(s(e,x,r,l+1),s(e,i,x,l))};return s(e,0,1,1),a}},345:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,n)=>a?t.clamp((n-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},669:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const n=a(345);t.clamp2=(e,t,a)=>({x:n.clamp(e.x,t.x,a.x),y:n.clamp(e.y,t.y,a.y)}),t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,a)=>({x:n.lerp(e.x,t.x,a),y:n.lerp(e.y,t.y,a)}),t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.min(a.x,e.x),a.y=Math.min(a.y,e.y)})),a},t.max2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.max(a.x,e.x),a.y=Math.max(a.y,e.y)})),a},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,a)=>!(e.x>a.x||e.x<t.x||e.y>a.y||e.y<t.y)},857:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,a,n)=>{const o=Math.min(e,t),s=Math.max(e,t),i=Math.min(a,n),r=Math.max(a,n),l=Math.min(s,i),x=Math.max(s,i),y=Math.max(o,l),c=Math.min(x,r);return[Math.min(o,l),Math.min(y,c),Math.max(y,c),Math.max(x,r)]}},848:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.rasterizeTriangle=void 0;const n=a(264);t.rasterizeTriangle=(e,t,a,o)=>{const s=[{from:e[0],to:e[1]},{from:e[1],to:e[2]},{from:e[2],to:e[0]}],i={},r=new Set;s.forEach((e=>{n.traverse(e.from,e.to,t,(e=>{let t=i[e.y];const n=e.x+","+e.y;r.has(n)||(t?(t.min=Math.min(t.min,e.x),t.max=Math.max(t.max,e.x)):t={min:e.x,max:e.x},i[e.y]=t,a(e),r.add(n))}))}));const l={x:0,y:0};for(let e in i)if(i.hasOwnProperty(e)){l.y=parseInt(e,10);const t=i[e];for(l.x=t.min+1;l.x<t.max;l.x++)r.has(l.x+","+l.y)||o(l)}return i}},264:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.traverse=void 0;const n=a(345),o=a(669);t.traverse=(e,t,a,s)=>{const i=o.sub(e,a.pos),r=o.sub(t,e),l=o.floor(o.divide(i,a.cellSize)),x=o.floor(o.divide(o.sub(t,a.pos),a.cellSize));if(Math.abs(r.y)<n.EPSILON){for(let e=Math.min(l.x,x.x),t=Math.max(l.x,x.x);e<=t;e++)if(l.x=e,!1===s(l))return!1;return}if(Math.abs(r.x)<n.EPSILON){for(let e=Math.min(l.y,x.y),t=Math.max(l.y,x.y);e<=t;e++)if(l.y=e,!1===s(l))return!1;return}const y=o.sign(r),c=o.multiply(o.divide(y,r),a.cellSize),p=o.divide(i,a.cellSize),m={x:y.x>0?c.x*n.negFract(p.x):c.x*n.fract(p.x),y:y.y>0?c.y*n.negFract(p.y):c.y*n.fract(p.y)};for(;;){if(!1===s(l))return!1;if(m.x>1&&m.y>1)return;m.x<m.y?(l.x+=y.x,m.x+=c.x):(l.y+=y.y,m.y+=c.y)}}}},e=>{"use strict";e(e.s=737)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,