"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[0],{89:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0;const o=a(669);t.aabb=(...e)=>({min:o.min2(...e),max:o.max2(...e)})},737:function(e,t,a){var o=this&&this.__awaiter||function(e,t,a,o){return new(a||(a=Promise))((function(n,s){function i(e){try{c(o.next(e))}catch(e){s(e)}}function r(e){try{c(o.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,r)}c((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=a(422),s=a(705),i=a(199),r=a(923),c=a(669),l=a(916),p=a(395),h=a(345),u=document.getElementById("game"),d=document.getElementById("game2"),m=document.getElementById("zoomInput"),v=document.getElementById("textString"),f=document.getElementById("xPosition"),g=document.getElementById("yPosition"),b=u.getContext("2d"),M=d.getContext("2d",{alpha:!0});if(!b||!M)throw new Error("Could not get canvas graphics :(");let P;b.imageSmoothingEnabled=!1,M.imageSmoothingQuality="high",M.imageSmoothingEnabled=!0;const x=[],y=[];let E=parseFloat(m.value),_=0,F=0,A=v.value;f.addEventListener("input",(()=>{_=parseFloat(f.value),requestAnimationFrame(q)})),g.addEventListener("input",(()=>{F=parseFloat(g.value),requestAnimationFrame(q)})),v.addEventListener("input",(()=>{A=v.value,T()})),m.addEventListener("input",(()=>{E=parseFloat(m.value),requestAnimationFrame(q)}));const O=new Map,T=()=>{const e=P.stringToGlyphs(A);x.length=0,y.length=0;let t=0;e.forEach((e=>{const a=e.getPath(t,100,52),o=s.pathToPoints(a.toPathData(5),-.99);t+=e.advanceWidth/1e3*52;const n=i.pointsToPolygons(o);y.push(...o),x.push(...n)})),O.clear(),y.forEach((e=>e.forEach((e=>{O.set(e,Object.assign({},e))})))),requestAnimationFrame(q)},q=()=>{b.clearRect(0,0,u.width,u.height),y.forEach((e=>e.forEach((e=>{const t=O.get(e);e[0]=t[0]*E+_,e[1]=t[1]*E+F}))));const e=b.getImageData(0,0,u.width,u.height),t=e.data;x.forEach((e=>{e.forEach((e=>{e.e1=c.sub(e.p2,e.p1),e.e2=c.sub(e.p3,e.p2),e.e3=c.sub(e.p1,e.p3),l.rasterise(e.points,((a,o,n,s)=>{let i=4*(u.width*n+a);if(s)for(let e=a;e<=o;e++,i+=4)t[i]=0,t[i+1]=0,t[i+2]=0,t[i+3]=255;else{const s=n+1;for(let c=a;c<=o;c++,i+=4){const a=p.intersectCellTriangle(e,{min:[c,n],max:[c+1,s]}),o=h.clamp(r.polygonArea(a),0,1);t[i]=0,t[i+1]=0,t[i+2]=0,t[i+3]=Math.min(t[i+3]+Math.floor(255*o),255)}}}))}))})),b.putImageData(e,0,0),M.clearRect(0,0,d.width,d.height),M.fillStyle="black",M.font=52*E+"px Timeless Regular",M.fillText(A,_,100*E+F)};o(void 0,void 0,void 0,(function*(){P=yield n.load("./media/Timeless.ttf"),T()}))},856:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const o=a(887),n=a(345),s=a(669);t.cubicBezierToPoints=(e,t)=>{const a=[o.vec2.clone(e.p1),o.vec2.clone(e.p4)],i=(e,o,r,c,l=!1)=>{const p=n.lerp(o,r,.5),h=s.lerp2(e.p2,e.p3,p),u=s.lerp2(s.lerp2(s.lerp2(e.p1,e.p2,p),h,p),s.lerp2(h,s.lerp2(e.p3,e.p4,p),p),p),d=a[c-1],m=a[c];a.splice(c,0,u),(s.dot(s.normalize(s.sub(d,u)),s.normalize(s.sub(m,u)))>t||l)&&(i(e,p,r,c+1),i(e,o,p,c))};return i(e,0,1,1,!0),a}},395:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const o=a(669),n=a(345),s=a(857);t.intersectCellTriangle=(e,t)=>{const a=[],i=n.timeAtPos(e.p1[0],e.e1[0],t.min[0]),r=n.timeAtPos(e.p1[0],e.e1[0],t.max[0]),c=n.timeAtPos(e.p1[1],e.e1[1],t.min[1]),l=n.timeAtPos(e.p1[1],e.e1[1],t.max[1]);a.push(...s.sort(i,r,c,l).map((a=>o.clamp2(o.add(e.p1,o.scale(e.e1,a)),t.min,t.max))));const p=n.timeAtPos(e.p2[0],e.e2[0],t.min[0]),h=n.timeAtPos(e.p2[0],e.e2[0],t.max[0]),u=n.timeAtPos(e.p2[1],e.e2[1],t.min[1]),d=n.timeAtPos(e.p2[1],e.e2[1],t.max[1]);a.push(...s.sort(p,h,u,d).map((a=>o.clamp2(o.add(e.p2,o.scale(e.e2,a)),t.min,t.max))));const m=n.timeAtPos(e.p3[0],e.e3[0],t.min[0]),v=n.timeAtPos(e.p3[0],e.e3[0],t.max[0]),f=n.timeAtPos(e.p3[1],e.e3[1],t.min[1]),g=n.timeAtPos(e.p3[1],e.e3[1],t.max[1]);return a.push(...s.sort(m,v,f,g).map((a=>o.clamp2(o.add(e.p3,o.scale(e.e3,a)),t.min,t.max)))),a}},705:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pathToPoints=void 0;const o=a(887),n=a(856),s=a(354),i=/(?=[astvzqmhlc])/gi,r=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;t.pathToPoints=(e,t)=>{const a=e.split(i),c=[];if(a.length){let e=[];const i=o.vec2.create();for(;a.length;){const l=a.shift();if(!(null==l?void 0:l.length))continue;const p=l.substring(1).match(r)||[],h=l[0],u=h.toLowerCase(),d=h===u;switch(u){case"l":case"m":for(;p.length;){const t=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&o.vec2.add(t,t,i),e.push(t),o.vec2.copy(i,t)}break;case"h":for(;p.length;){let t=parseFloat(p.shift());d&&(t+=i[0]),e.push(o.vec2.fromValues(t,i[1])),i[0]=t}break;case"v":for(;p.length;){let t=parseFloat(p.shift());d&&(t+=i[1]),e.push(o.vec2.fromValues(i[0],t)),i[1]=t}break;case"z":{const t=e[0];e.push(o.vec2.clone(t)),c.push(e),e=[],o.vec2.zero(i);break}case"c":for(;p.length;){const a=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),s=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),r=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&(o.vec2.add(a,a,i),o.vec2.add(s,s,i),o.vec2.add(r,r,i)),e.push(...n.cubicBezierToPoints({p1:i,p2:a,p3:s,p4:r},t)),o.vec2.copy(i,r)}break;case"q":for(;p.length;){const a=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),n=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&(o.vec2.add(a,a,i),o.vec2.add(n,n,i)),e.push(...s.quadraticBezierToPoints({p1:i,p2:a,p3:n},t)),o.vec2.copy(i,n)}break;case"s":case"t":case"a":console.log(u+" is not implemented")}}e.length&&c.push(e)}return c}},199:function(e,t,a){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pointsToPolygons=void 0;const n=o(a(187)),s=a(89),i=a(669),r=a(923);t.pointsToPolygons=e=>{const t=e.map((e=>({points:e,aabb:s.aabb(...e),area:r.polygonAreaSigned(e),children:[]})));t.sort(((e,t)=>Math.abs(t.area)-Math.abs(e.area)));const a=[];for(let e=0;e<t.length;++e){let o=null;for(let a=e-1;a>=0;--a)if(i.inside(t[a].points,t[e].points[0])&&t[e].area*t[a].area<0){o=t[a];break}o?o.children.push(t[e]):a.push(t[e])}const o=[];let c=[];const l=e=>{const t=[],a=[],o=[];e.points.forEach((e=>{t.push(...e),o.push(e)})),e.children.forEach((e=>{e.children.forEach(l),a.push(t.length/2),e.points.forEach((e=>{t.push(...e),o.push(e)}))}));const s=n.default(t,a);for(let e=0;e<s.length;e+=3){const t=o[s[e+0]],a=o[s[e+1]],n=o[s[e+2]];c.push({p1:t,p2:a,p3:n,e1:i.sub(a,t),e2:i.sub(n,a),e3:i.sub(t,n),points:[t,a,n],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}};return a.forEach((e=>{l(e),o.push(c),c=[]})),o}},923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=a(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let n=0;n<t;n++)a+=o.determinant2(e[n],e[n+1]);return a+=o.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},354:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.quadraticBezierToPoints=void 0;const o=a(887),n=a(345),s=a(669);t.quadraticBezierToPoints=(e,t)=>{const a=[o.vec2.clone(e.p1),o.vec2.clone(e.p3)],i=(e,o,r,c)=>{const l=n.lerp(o,r,.5),p=s.lerp2(s.lerp2(e.p1,e.p2,l),s.lerp2(e.p2,e.p3,l),l),h=a[c-1],u=a[c];a.splice(c,0,p),s.dot(s.normalize(s.sub(h,p)),s.normalize(s.sub(u,p)))>t&&(i(e,l,r,c+1),i(e,o,l,c))};return i(e,0,1,1),a}},841:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getLineEquation=void 0;const o=a(669);t.getLineEquation=e=>{const t=o.sub(e.p2,e.p1),a=t[1]/t[0];return{gradient:a,intersect:e.p1[1]-e.p1[0]*a}}},952:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveLineX=void 0,t.solveLineX=(e,t)=>(t-e.intersect)/e.gradient},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,o)=>a?t.clamp((o-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inside=t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=a(887),n=a(345);t.clamp2=(e,t,a)=>{const n=o.vec2.clone(e);return o.vec2.min(n,n,a),o.vec2.max(n,n,t),n},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=o.vec2.equals,t.scale=(e,t)=>o.vec2.scale(o.vec2.create(),e,t),t.multiply=(e,t)=>o.vec2.multiply(o.vec2.create(),e,t),t.divide=(e,t)=>o.vec2.divide(o.vec2.create(),e,t),t.add=(e,t)=>o.vec2.add(o.vec2.create(),e,t),t.adds=(e,t)=>o.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>o.vec2.sub(o.vec2.create(),e,t),t.floor=e=>o.vec2.floor(o.vec2.create(),e),t.ceil=e=>o.vec2.ceil(o.vec2.create(),e),t.abs=e=>o.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>o.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>o.vec2.dot(e,t),t.length=e=>o.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,a)=>o.vec2.lerp(o.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.min(n,n,e)})),n},t.max2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.max(n,n,e)})),n},t.avg=(...e)=>{const t=o.vec2.create();return e.length&&(e.forEach((e=>{o.vec2.add(t,t,e)})),o.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1]),t.inside=(e,t)=>{let a=0,o=e[e.length-1];return e.forEach((e=>{const s=o[1]<e[1]?o:e,i=o[1]<e[1]?e:o;s[1]<t[1]+n.EPSILON&&i[1]>t[1]+n.EPSILON&&(i[0]-s[0])*(t[1]-s[1])>(t[0]-s[0])*(i[1]-s[1])&&(a+=1),o=e})),a%2!=0}},857:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,a,o)=>{const n=Math.min(e,t),s=Math.max(e,t),i=Math.min(a,o),r=Math.max(a,o),c=Math.min(s,i),l=Math.max(s,i),p=Math.max(n,c),h=Math.min(l,r);return[Math.min(n,c),Math.min(p,h),Math.max(p,h),Math.max(l,r)]}},916:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rasterise=void 0;const o=a(345),n=a(952),s=a(669),i=a(841),r=e=>{let t,a;return e.p1[1]<e.p2[1]?(t=e.p1,a=e.p2):e.p1[1]>e.p2[1]?(t=e.p2,a=e.p1):e.p1[0]<e.p2[0]?(t=e.p1,a=e.p2):(t=e.p2,a=e.p1),{pStart:t,pEnd:a,xRange:[Math.min(e.p1[0],e.p2[0]),Math.max(e.p1[0],e.p2[0])],equation:i.getLineEquation(e)}};t.rasterise=(e,t)=>{const a=[{p1:e[0],p2:e[1]},{p1:e[1],p2:e[2]},{p1:e[2],p2:e[0]}],i=s.min2(...e),c=s.max2(...e),l=[r(a[0]),r(a[1]),r(a[2])];let p=Math.floor(i[1]);const h=Math.ceil(c[1]);if(h-p<1)t(Math.floor(i[0]),Math.floor(c[0]),p,!1);else for(let e=p+1;e<=h;e++){const a=[-1,-1,-1,-1];for(let t=0;t<3;t++){const s=l[t];if(s.pEnd[1]>=p&&s.pStart[1]<=e){let t=n.solveLineX(s.equation,p);t=isFinite(t)?o.clamp(t,s.xRange[0],s.xRange[1]):s.pStart[0],t=Math.floor(t);let i=n.solveLineX(s.equation,e);i=isFinite(i)?o.clamp(i,s.xRange[0],s.xRange[1]):s.pEnd[0],i=Math.floor(i);const r=[Math.min(t,i),Math.max(t,i)];a[0]<0?(a[0]=r[0],a[1]=r[1]):r[0]<=a[1]+1&&r[0]>=a[0]-1||r[1]<=a[1]+1&&r[1]>=a[0]-1?(a[0]=Math.min(a[0],r[0]),a[1]=Math.max(a[1],r[1])):a[2]<0?r[0]>a[1]?(a[2]=r[0],a[3]=r[1]):(a[2]=a[0],a[3]=a[1],a[0]=r[0],a[1]=r[1]):(a[2]=Math.min(a[2],r[0]),a[3]=Math.max(a[3],r[1]))}}a[2]>a[1]?(t(a[0],a[1],p,!1),t(a[1]+1,a[2]-1,p,!0),t(a[2],a[3],p,!1)):t(a[0],Math.max(a[1],a[3]),p,!1),p=e}}}},e=>{e(e.s=737)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cEssS0FBS3hHLElBQUkwUSxFQUFPRSxJQUNsREgsRUFBTSxHQUFLLEdBRVhBLEVBQU0sR0FBS1AsRUFBTyxHQUNsQk8sRUFBTSxHQUFLUCxFQUFPLElBRVpBLEVBQU8sSUFBTU8sRUFBTSxHQUFLLEdBQUtQLEVBQU8sSUFBTU8sRUFBTSxHQUFLLEdBQzFEUCxFQUFPLElBQU1PLEVBQU0sR0FBSyxHQUFLUCxFQUFPLElBQU1PLEVBQU0sR0FBSyxHQUV0REEsRUFBTSxHQUFLakssS0FBSzFHLElBQUkyUSxFQUFNLEdBQUlQLEVBQU8sSUFDckNPLEVBQU0sR0FBS2pLLEtBQUt4RyxJQUFJeVEsRUFBTSxHQUFJUCxFQUFPLEtBRWhDTyxFQUFNLEdBQUssRUFFWlAsRUFBTyxHQUFLTyxFQUFNLElBQ2xCQSxFQUFNLEdBQUtQLEVBQU8sR0FDbEJPLEVBQU0sR0FBS1AsRUFBTyxLQUdsQk8sRUFBTSxHQUFLQSxFQUFNLEdBQ2pCQSxFQUFNLEdBQUtBLEVBQU0sR0FDakJBLEVBQU0sR0FBS1AsRUFBTyxHQUNsQk8sRUFBTSxHQUFLUCxFQUFPLEtBS3RCTyxFQUFNLEdBQUtqSyxLQUFLMUcsSUFBSTJRLEVBQU0sR0FBSVAsRUFBTyxJQUNyQ08sRUFBTSxHQUFLakssS0FBS3hHLElBQUl5USxFQUFNLEdBQUlQLEVBQU8sTUFLN0NPLEVBQU0sR0FBS0EsRUFBTSxJQUNqQk4sRUFBU00sRUFBTSxHQUFJQSxFQUFNLEdBQUlELEdBQU8sR0FDcENMLEVBQVNNLEVBQU0sR0FBSyxFQUFHQSxFQUFNLEdBQUssRUFBR0QsR0FBTyxHQUM1Q0wsRUFBU00sRUFBTSxHQUFJQSxFQUFNLEdBQUlELEdBQU8sSUFHcENMLEVBQVNNLEVBQU0sR0FBSWpLLEtBQUt4RyxJQUFJeVEsRUFBTSxHQUFJQSxFQUFNLElBQUtELEdBQU8sR0FFNURBLEVBQVExSyxNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL2FhYmIvYWFiYi50cyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvZGVtb3MvY3VzdG9tRm9udC50cyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvZ2VvbWV0cnkvY3ViaWNCZXppZXJUb1BvaW50cy50cyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvZ2VvbWV0cnkvaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlLnRzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9nZW9tZXRyeS9wYXRoVG9Qb2ludHMudHMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL2dlb21ldHJ5L3BvaW50c1RvUG9seWdvbi50cyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvZ2VvbWV0cnkvcG9seWdvbkFyZWEudHMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL2dlb21ldHJ5L3F1YWRyYXRpY0JlemllclRvUG9pbnRzLnRzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9saW5lL2dldExpbmVFcXVhdGlvbi50cyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvbGluZS9zb2x2ZUxpbmVYLnRzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9tYXRocy9jb21tb24udHMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL21hdGhzL3BvaW50LnRzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9tYXRocy9zb3J0LnRzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9yZW5kZXIvcmFzdGVyaXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuYWFiYiA9IHZvaWQgMDtcclxuY29uc3QgcG9pbnRfMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9wb2ludFwiKTtcclxuY29uc3QgYWFiYiA9ICguLi5wb2ludHMpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWluOiBwb2ludF8xLm1pbjIoLi4ucG9pbnRzKSxcclxuICAgICAgICBtYXg6IHBvaW50XzEubWF4MiguLi5wb2ludHMpXHJcbiAgICB9O1xyXG59O1xyXG5leHBvcnRzLmFhYmIgPSBhYWJiO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IG9wZW50eXBlX2pzXzEgPSByZXF1aXJlKFwib3BlbnR5cGUuanNcIik7XHJcbmNvbnN0IHBhdGhUb1BvaW50c18xID0gcmVxdWlyZShcIi4uL2dlb21ldHJ5L3BhdGhUb1BvaW50c1wiKTtcclxuY29uc3QgcG9pbnRzVG9Qb2x5Z29uXzEgPSByZXF1aXJlKFwiLi4vZ2VvbWV0cnkvcG9pbnRzVG9Qb2x5Z29uXCIpO1xyXG5jb25zdCBwb2x5Z29uQXJlYV8xID0gcmVxdWlyZShcIi4uL2dlb21ldHJ5L3BvbHlnb25BcmVhXCIpO1xyXG5jb25zdCBwb2ludF8xID0gcmVxdWlyZShcIi4uL21hdGhzL3BvaW50XCIpO1xyXG5jb25zdCByYXN0ZXJpc2VfMSA9IHJlcXVpcmUoXCIuLi9yZW5kZXIvcmFzdGVyaXNlXCIpO1xyXG5jb25zdCBpbnRlcnNlY3RDZWxsVHJpYW5nbGVfMSA9IHJlcXVpcmUoXCIuLi9nZW9tZXRyeS9pbnRlcnNlY3RDZWxsVHJpYW5nbGVcIik7XHJcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL21hdGhzL2NvbW1vblwiKTtcclxuY29uc3QgZ2FtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lJyk7XHJcbmNvbnN0IGdhbWUyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbWUyJyk7XHJcbmNvbnN0IHpvb21JbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd6b29tSW5wdXQnKTtcclxuY29uc3QgdGV4dFN0cmluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZXh0U3RyaW5nJyk7XHJcbmNvbnN0IHhQb3NpdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd4UG9zaXRpb24nKTtcclxuY29uc3QgeVBvc2l0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3lQb3NpdGlvbicpO1xyXG5jb25zdCBnID0gZ2FtZS5nZXRDb250ZXh0KCcyZCcpO1xyXG5jb25zdCBnMiA9IGdhbWUyLmdldENvbnRleHQoJzJkJywgeyBhbHBoYTogdHJ1ZSB9KTtcclxuaWYgKCFnIHx8ICFnMikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZ2V0IGNhbnZhcyBncmFwaGljcyA6KCcpO1xyXG59XHJcbmcuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XHJcbmcyLmltYWdlU21vb3RoaW5nUXVhbGl0eSA9ICdoaWdoJztcclxuZzIuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gdHJ1ZTtcclxubGV0IGZvbnQ7XHJcbmNvbnN0IHBvbHlnb25zID0gW107XHJcbmNvbnN0IGFsbFBvaW50cyA9IFtdO1xyXG5sZXQgc2NhbGVyID0gcGFyc2VGbG9hdCh6b29tSW5wdXQudmFsdWUpO1xyXG5jb25zdCBmb250U2l6ZSA9IDUyO1xyXG5sZXQgeFBvcyA9IDA7XHJcbmxldCB5UG9zID0gMDtcclxuY29uc3QgZm9udE5hbWUgPSAnVGltZWxlc3MgUmVndWxhcic7XHJcbmxldCB0ZXh0ID0gdGV4dFN0cmluZy52YWx1ZTtcclxuY29uc3Qgc3BsaXRCb3VuZGFyeSA9IC0wLjk5O1xyXG5jb25zdCBmb250V2lkdGggPSBmb250U2l6ZTsgLy8xODtcclxueFBvc2l0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgeFBvcyA9IHBhcnNlRmxvYXQoeFBvc2l0aW9uLnZhbHVlKTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcclxufSk7XHJcbnlQb3NpdGlvbi5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcclxuICAgIHlQb3MgPSBwYXJzZUZsb2F0KHlQb3NpdGlvbi52YWx1ZSk7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XHJcbn0pO1xyXG50ZXh0U3RyaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgdGV4dCA9IHRleHRTdHJpbmcudmFsdWU7XHJcbiAgICBsb2FkQ2hhcnMoKTtcclxufSk7XHJcbnpvb21JbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcclxuICAgIHNjYWxlciA9IHBhcnNlRmxvYXQoem9vbUlucHV0LnZhbHVlKTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcclxufSk7XHJcbmNvbnN0IG9yaWdpbmFsUG9pbnRQb3MgPSBuZXcgTWFwKCk7XHJcbmNvbnN0IGxvYWRDaGFycyA9ICgpID0+IHtcclxuICAgIGNvbnN0IG15Q2hhcnMgPSBmb250LnN0cmluZ1RvR2x5cGhzKHRleHQpO1xyXG4gICAgcG9seWdvbnMubGVuZ3RoID0gMDtcclxuICAgIGFsbFBvaW50cy5sZW5ndGggPSAwO1xyXG4gICAgbGV0IGNoYXJQb3MgPSAwO1xyXG4gICAgbXlDaGFycy5mb3JFYWNoKChteUNoYXIpID0+IHtcclxuICAgICAgICBjb25zdCBhUGF0aCA9IG15Q2hhci5nZXRQYXRoKGNoYXJQb3MsIDEwMCwgZm9udFNpemUpO1xyXG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHBhdGhUb1BvaW50c18xLnBhdGhUb1BvaW50cyhhUGF0aC50b1BhdGhEYXRhKDUpLCBzcGxpdEJvdW5kYXJ5KTtcclxuICAgICAgICBjaGFyUG9zICs9IChteUNoYXIuYWR2YW5jZVdpZHRoIC8gMTAwMCkgKiBmb250V2lkdGg7XHJcbiAgICAgICAgY29uc3QgY2hhclBvbHlnb25zID0gcG9pbnRzVG9Qb2x5Z29uXzEucG9pbnRzVG9Qb2x5Z29ucyhwb2ludHMpO1xyXG4gICAgICAgIGFsbFBvaW50cy5wdXNoKC4uLnBvaW50cyk7XHJcbiAgICAgICAgcG9seWdvbnMucHVzaCguLi5jaGFyUG9seWdvbnMpO1xyXG4gICAgfSk7XHJcbiAgICBvcmlnaW5hbFBvaW50UG9zLmNsZWFyKCk7XHJcbiAgICBhbGxQb2ludHMuZm9yRWFjaCgocG9pbnRzKSA9PiBwb2ludHMuZm9yRWFjaCgocG9pbnQpID0+IHtcclxuICAgICAgICBvcmlnaW5hbFBvaW50UG9zLnNldChwb2ludCwgT2JqZWN0LmFzc2lnbih7fSwgcG9pbnQpKTtcclxuICAgIH0pKTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcclxufTtcclxuY29uc3QgZHJhdyA9ICgpID0+IHtcclxuICAgIGcuY2xlYXJSZWN0KDAsIDAsIGdhbWUud2lkdGgsIGdhbWUuaGVpZ2h0KTtcclxuICAgIGFsbFBvaW50cy5mb3JFYWNoKChwb2ludHMpID0+IHBvaW50cy5mb3JFYWNoKChwb2ludCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsUG9zaXRpb24gPSBvcmlnaW5hbFBvaW50UG9zLmdldChwb2ludCk7XHJcbiAgICAgICAgcG9pbnRbMF0gPSBvcmlnaW5hbFBvc2l0aW9uWzBdICogc2NhbGVyICsgeFBvcztcclxuICAgICAgICBwb2ludFsxXSA9IG9yaWdpbmFsUG9zaXRpb25bMV0gKiBzY2FsZXIgKyB5UG9zO1xyXG4gICAgfSkpO1xyXG4gICAgY29uc3QgaW1hZ2VEYXRhID0gZy5nZXRJbWFnZURhdGEoMCwgMCwgZ2FtZS53aWR0aCwgZ2FtZS5oZWlnaHQpO1xyXG4gICAgY29uc3QgZGF0YSA9IGltYWdlRGF0YS5kYXRhO1xyXG4gICAgcG9seWdvbnMuZm9yRWFjaCgocG9seWdvbikgPT4ge1xyXG4gICAgICAgIHBvbHlnb24uZm9yRWFjaCgodHJpYW5nbGUpID0+IHtcclxuICAgICAgICAgICAgdHJpYW5nbGUuZTEgPSBwb2ludF8xLnN1Yih0cmlhbmdsZS5wMiwgdHJpYW5nbGUucDEpO1xyXG4gICAgICAgICAgICB0cmlhbmdsZS5lMiA9IHBvaW50XzEuc3ViKHRyaWFuZ2xlLnAzLCB0cmlhbmdsZS5wMik7XHJcbiAgICAgICAgICAgIHRyaWFuZ2xlLmUzID0gcG9pbnRfMS5zdWIodHJpYW5nbGUucDEsIHRyaWFuZ2xlLnAzKTtcclxuICAgICAgICAgICAgcmFzdGVyaXNlXzEucmFzdGVyaXNlKHRyaWFuZ2xlLnBvaW50cywgKG1pblgsIG1heFgsIHksIGlzSW5zaWRlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAoZ2FtZS53aWR0aCAqIHkgKyBtaW5YKSAqIDQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNJbnNpZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB4ID0gbWluWDsgeCA8PSBtYXhYOyB4KyssIGluZGV4ICs9IDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtpbmRleF0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2luZGV4ICsgMV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2luZGV4ICsgMl0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2luZGV4ICsgM10gPSAyNTU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4WSA9IHkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHggPSBtaW5YOyB4IDw9IG1heFg7IHgrKywgaW5kZXggKz0gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxsRmlsbFBvbHlnb24gPSBpbnRlcnNlY3RDZWxsVHJpYW5nbGVfMS5pbnRlcnNlY3RDZWxsVHJpYW5nbGUodHJpYW5nbGUsIHsgbWluOiBbeCwgeV0sIG1heDogW3ggKyAxLCBtYXhZXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY292ZXJhZ2UgPSBjb21tb25fMS5jbGFtcChwb2x5Z29uQXJlYV8xLnBvbHlnb25BcmVhKGNlbGxGaWxsUG9seWdvbiksIDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2luZGV4XSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbaW5kZXggKyAxXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbaW5kZXggKyAyXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbaW5kZXggKyAzXSA9IE1hdGgubWluKGRhdGFbaW5kZXggKyAzXSArIE1hdGguZmxvb3IoY292ZXJhZ2UgKiAyNTUpLCAyNTUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGcucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XHJcbiAgICAvL2RyYXcgY3B1IHJlbmRlcmluZyB0ZXh0IGFzIGEgc2lkZS1ieS1zaWRlIGNvbXBhcmlzb25cclxuICAgIGcyLmNsZWFyUmVjdCgwLCAwLCBnYW1lMi53aWR0aCwgZ2FtZTIuaGVpZ2h0KTtcclxuICAgIGcyLmZpbGxTdHlsZSA9ICdibGFjayc7XHJcbiAgICBnMi5mb250ID0gZm9udFNpemUgKiBzY2FsZXIgKyAncHggJyArIGZvbnROYW1lO1xyXG4gICAgZzIuZmlsbFRleHQodGV4dCwgeFBvcywgc2NhbGVyICogMTAwICsgeVBvcyk7XHJcbn07XHJcbmNvbnN0IHN0YXJ0ID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICBmb250ID0geWllbGQgb3BlbnR5cGVfanNfMS5sb2FkKCcuL21lZGlhL1RpbWVsZXNzLnR0ZicpO1xyXG4gICAgbG9hZENoYXJzKCk7XHJcbn0pO1xyXG5zdGFydCgpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmN1YmljQmV6aWVyVG9Qb2ludHMgPSB2b2lkIDA7XHJcbmNvbnN0IGdsX21hdHJpeF8xID0gcmVxdWlyZShcImdsLW1hdHJpeFwiKTtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvY29tbW9uXCIpO1xyXG5jb25zdCBwb2ludF8xID0gcmVxdWlyZShcIi4uL21hdGhzL3BvaW50XCIpO1xyXG5jb25zdCBjdWJpY0JlemllclRvUG9pbnRzID0gKGJlemllciwgc3BsaXRUaHJlc2hvbGQpID0+IHtcclxuICAgIGNvbnN0IHBvaW50cyA9IFtnbF9tYXRyaXhfMS52ZWMyLmNsb25lKGJlemllci5wMSksIGdsX21hdHJpeF8xLnZlYzIuY2xvbmUoYmV6aWVyLnA0KV07XHJcbiAgICBjb25zdCBjdWJpY0JlemllclNwbGl0ID0gKGJlemllciwgbWluLCBtYXgsIGluc2VydEluZGV4LCBmaXJzdCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGltZSA9IGNvbW1vbl8xLmxlcnAobWluLCBtYXgsIDAuNSk7XHJcbiAgICAgICAgY29uc3QgbWlkTGVycCA9IHBvaW50XzEubGVycDIoYmV6aWVyLnAyLCBiZXppZXIucDMsIHRpbWUpO1xyXG4gICAgICAgIGNvbnN0IHBvaW50T25DdXJ2ZSA9IHBvaW50XzEubGVycDIocG9pbnRfMS5sZXJwMihwb2ludF8xLmxlcnAyKGJlemllci5wMSwgYmV6aWVyLnAyLCB0aW1lKSwgbWlkTGVycCwgdGltZSksIHBvaW50XzEubGVycDIobWlkTGVycCwgcG9pbnRfMS5sZXJwMihiZXppZXIucDMsIGJlemllci5wNCwgdGltZSksIHRpbWUpLCB0aW1lKTtcclxuICAgICAgICBjb25zdCBwcmV2UG9pbnQgPSBwb2ludHNbaW5zZXJ0SW5kZXggLSAxXTtcclxuICAgICAgICBjb25zdCBuZXh0UG9pbnQgPSBwb2ludHNbaW5zZXJ0SW5kZXhdO1xyXG4gICAgICAgIHBvaW50cy5zcGxpY2UoaW5zZXJ0SW5kZXgsIDAsIHBvaW50T25DdXJ2ZSk7XHJcbiAgICAgICAgaWYgKHBvaW50XzEuZG90KHBvaW50XzEubm9ybWFsaXplKHBvaW50XzEuc3ViKHByZXZQb2ludCwgcG9pbnRPbkN1cnZlKSksIHBvaW50XzEubm9ybWFsaXplKHBvaW50XzEuc3ViKG5leHRQb2ludCwgcG9pbnRPbkN1cnZlKSkpID4gc3BsaXRUaHJlc2hvbGQgfHxcclxuICAgICAgICAgICAgZmlyc3QpIHtcclxuICAgICAgICAgICAgY3ViaWNCZXppZXJTcGxpdChiZXppZXIsIHRpbWUsIG1heCwgaW5zZXJ0SW5kZXggKyAxKTtcclxuICAgICAgICAgICAgY3ViaWNCZXppZXJTcGxpdChiZXppZXIsIG1pbiwgdGltZSwgaW5zZXJ0SW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjdWJpY0JlemllclNwbGl0KGJlemllciwgMCwgMSwgMSwgdHJ1ZSk7XHJcbiAgICByZXR1cm4gcG9pbnRzO1xyXG59O1xyXG5leHBvcnRzLmN1YmljQmV6aWVyVG9Qb2ludHMgPSBjdWJpY0JlemllclRvUG9pbnRzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmludGVyc2VjdENlbGxUcmlhbmdsZSA9IHZvaWQgMDtcclxuY29uc3QgcG9pbnRfMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9wb2ludFwiKTtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvY29tbW9uXCIpO1xyXG5jb25zdCBzb3J0XzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvc29ydFwiKTtcclxuY29uc3QgaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlID0gKHRyaWFuZ2xlLCBjZWxsKSA9PiB7XHJcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcclxuICAgIGNvbnN0IHQxID0gY29tbW9uXzEudGltZUF0UG9zKHRyaWFuZ2xlLnAxWzBdLCB0cmlhbmdsZS5lMVswXSwgY2VsbC5taW5bMF0pO1xyXG4gICAgY29uc3QgdDIgPSBjb21tb25fMS50aW1lQXRQb3ModHJpYW5nbGUucDFbMF0sIHRyaWFuZ2xlLmUxWzBdLCBjZWxsLm1heFswXSk7XHJcbiAgICBjb25zdCB0MyA9IGNvbW1vbl8xLnRpbWVBdFBvcyh0cmlhbmdsZS5wMVsxXSwgdHJpYW5nbGUuZTFbMV0sIGNlbGwubWluWzFdKTtcclxuICAgIGNvbnN0IHQ0ID0gY29tbW9uXzEudGltZUF0UG9zKHRyaWFuZ2xlLnAxWzFdLCB0cmlhbmdsZS5lMVsxXSwgY2VsbC5tYXhbMV0pO1xyXG4gICAgcG9pbnRzLnB1c2goLi4uc29ydF8xLnNvcnQodDEsIHQyLCB0MywgdDQpLm1hcCgodCkgPT4gcG9pbnRfMS5jbGFtcDIocG9pbnRfMS5hZGQodHJpYW5nbGUucDEsIHBvaW50XzEuc2NhbGUodHJpYW5nbGUuZTEsIHQpKSwgY2VsbC5taW4sIGNlbGwubWF4KSkpO1xyXG4gICAgY29uc3QgdDUgPSBjb21tb25fMS50aW1lQXRQb3ModHJpYW5nbGUucDJbMF0sIHRyaWFuZ2xlLmUyWzBdLCBjZWxsLm1pblswXSk7XHJcbiAgICBjb25zdCB0NiA9IGNvbW1vbl8xLnRpbWVBdFBvcyh0cmlhbmdsZS5wMlswXSwgdHJpYW5nbGUuZTJbMF0sIGNlbGwubWF4WzBdKTtcclxuICAgIGNvbnN0IHQ3ID0gY29tbW9uXzEudGltZUF0UG9zKHRyaWFuZ2xlLnAyWzFdLCB0cmlhbmdsZS5lMlsxXSwgY2VsbC5taW5bMV0pO1xyXG4gICAgY29uc3QgdDggPSBjb21tb25fMS50aW1lQXRQb3ModHJpYW5nbGUucDJbMV0sIHRyaWFuZ2xlLmUyWzFdLCBjZWxsLm1heFsxXSk7XHJcbiAgICBwb2ludHMucHVzaCguLi5zb3J0XzEuc29ydCh0NSwgdDYsIHQ3LCB0OCkubWFwKCh0KSA9PiBwb2ludF8xLmNsYW1wMihwb2ludF8xLmFkZCh0cmlhbmdsZS5wMiwgcG9pbnRfMS5zY2FsZSh0cmlhbmdsZS5lMiwgdCkpLCBjZWxsLm1pbiwgY2VsbC5tYXgpKSk7XHJcbiAgICBjb25zdCB0OSA9IGNvbW1vbl8xLnRpbWVBdFBvcyh0cmlhbmdsZS5wM1swXSwgdHJpYW5nbGUuZTNbMF0sIGNlbGwubWluWzBdKTtcclxuICAgIGNvbnN0IHQxMCA9IGNvbW1vbl8xLnRpbWVBdFBvcyh0cmlhbmdsZS5wM1swXSwgdHJpYW5nbGUuZTNbMF0sIGNlbGwubWF4WzBdKTtcclxuICAgIGNvbnN0IHQxMSA9IGNvbW1vbl8xLnRpbWVBdFBvcyh0cmlhbmdsZS5wM1sxXSwgdHJpYW5nbGUuZTNbMV0sIGNlbGwubWluWzFdKTtcclxuICAgIGNvbnN0IHQxMiA9IGNvbW1vbl8xLnRpbWVBdFBvcyh0cmlhbmdsZS5wM1sxXSwgdHJpYW5nbGUuZTNbMV0sIGNlbGwubWF4WzFdKTtcclxuICAgIHBvaW50cy5wdXNoKC4uLnNvcnRfMS5zb3J0KHQ5LCB0MTAsIHQxMSwgdDEyKS5tYXAoKHQpID0+IHBvaW50XzEuY2xhbXAyKHBvaW50XzEuYWRkKHRyaWFuZ2xlLnAzLCBwb2ludF8xLnNjYWxlKHRyaWFuZ2xlLmUzLCB0KSksIGNlbGwubWluLCBjZWxsLm1heCkpKTtcclxuICAgIHJldHVybiBwb2ludHM7XHJcbn07XHJcbmV4cG9ydHMuaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlID0gaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnBhdGhUb1BvaW50cyA9IHZvaWQgMDtcclxuY29uc3QgZ2xfbWF0cml4XzEgPSByZXF1aXJlKFwiZ2wtbWF0cml4XCIpO1xyXG5jb25zdCBjdWJpY0JlemllclRvUG9pbnRzXzEgPSByZXF1aXJlKFwiLi9jdWJpY0JlemllclRvUG9pbnRzXCIpO1xyXG5jb25zdCBxdWFkcmF0aWNCZXppZXJUb1BvaW50c18xID0gcmVxdWlyZShcIi4vcXVhZHJhdGljQmV6aWVyVG9Qb2ludHNcIik7XHJcbmNvbnN0IGJsb2NrUmVnZXhwID0gLyg/PVthc3R2enFtaGxjXSkvZ2k7XHJcbmNvbnN0IHZhbHVlc1JlZ2V4cCA9IC8oLT9bMC05XSpcXC4/WzAtOV0rKSg/OmVbLStdP1xcZCspPy9naTtcclxuY29uc3QgcGF0aFRvUG9pbnRzID0gKHBhdGhTdHIsIHNwbGl0Qm91bmRhcnkpID0+IHtcclxuICAgIGNvbnN0IHBhdGhCbG9ja3MgPSBwYXRoU3RyLnNwbGl0KGJsb2NrUmVnZXhwKTtcclxuICAgIGNvbnN0IHBvaW50cyA9IFtdO1xyXG4gICAgaWYgKHBhdGhCbG9ja3MubGVuZ3RoKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRQb2x5Z29uID0gW107XHJcbiAgICAgICAgY29uc3QgY3VycmVudFBvaW50ID0gZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKTtcclxuICAgICAgICB3aGlsZSAocGF0aEJsb2Nrcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBwYXRoQmxvY2tzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGlmICghKGJsb2NrID09PSBudWxsIHx8IGJsb2NrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBibG9jay5sZW5ndGgpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBwYXRoUGFydHMgPSBibG9jay5zdWJzdHJpbmcoMSkubWF0Y2godmFsdWVzUmVnZXhwKSB8fCBbXTtcclxuICAgICAgICAgICAgY29uc3QgbmV4dENvbW1hbmQgPSBibG9ja1swXTtcclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXNlZENvbW1hbmQgPSBuZXh0Q29tbWFuZC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBpc1JlbGF0aXZlID0gbmV4dENvbW1hbmQgPT09IG5vcm1hbGlzZWRDb21tYW5kO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG5vcm1hbGlzZWRDb21tYW5kKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsJzogLy9saW5lVG9cclxuICAgICAgICAgICAgICAgIGNhc2UgJ20nOiAvL21vdmVUb1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwYXRoUGFydHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRQb2ludCA9IGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcyhwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSwgcGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xfbWF0cml4XzEudmVjMi5hZGQobmV4dFBvaW50LCBuZXh0UG9pbnQsIGN1cnJlbnRQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvbHlnb24ucHVzaChuZXh0UG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLmNvcHkoY3VycmVudFBvaW50LCBuZXh0UG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOiAvL2hvcml6b250YWxMaW5lVG9cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocGF0aFBhcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dFggPSBwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRYICs9IGN1cnJlbnRQb2ludFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9seWdvbi5wdXNoKGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcyhuZXh0WCwgY3VycmVudFBvaW50WzFdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2ludFswXSA9IG5leHRYO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3YnOiAvL3ZlcnRpY2FsTGluZVRvXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBhdGhQYXJ0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRZID0gcGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0WSArPSBjdXJyZW50UG9pbnRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvbHlnb24ucHVzaChnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMoY3VycmVudFBvaW50WzBdLCBuZXh0WSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9pbnRbMV0gPSBuZXh0WTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd6Jzoge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2xvc2VQYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IGN1cnJlbnRQb2x5Z29uWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2x5Z29uLnB1c2goZ2xfbWF0cml4XzEudmVjMi5jbG9uZShmaXJzdFBvaW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goY3VycmVudFBvbHlnb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2x5Z29uID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZ2xfbWF0cml4XzEudmVjMi56ZXJvKGN1cnJlbnRQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjJzogLy9jdWJpYyBiZXppZXJcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocGF0aFBhcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWNvbmRQb2ludCA9IGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcyhwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSwgcGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGlyZFBvaW50ID0gZ2xfbWF0cml4XzEudmVjMi5mcm9tVmFsdWVzKHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpLCBwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvdXJ0aFBvaW50ID0gZ2xfbWF0cml4XzEudmVjMi5mcm9tVmFsdWVzKHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpLCBwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLmFkZChzZWNvbmRQb2ludCwgc2Vjb25kUG9pbnQsIGN1cnJlbnRQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLmFkZCh0aGlyZFBvaW50LCB0aGlyZFBvaW50LCBjdXJyZW50UG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xfbWF0cml4XzEudmVjMi5hZGQoZm91cnRoUG9pbnQsIGZvdXJ0aFBvaW50LCBjdXJyZW50UG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2x5Z29uLnB1c2goLi4uY3ViaWNCZXppZXJUb1BvaW50c18xLmN1YmljQmV6aWVyVG9Qb2ludHMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDE6IGN1cnJlbnRQb2ludCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyOiBzZWNvbmRQb2ludCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzOiB0aGlyZFBvaW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDQ6IGZvdXJ0aFBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHNwbGl0Qm91bmRhcnkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xfbWF0cml4XzEudmVjMi5jb3B5KGN1cnJlbnRQb2ludCwgZm91cnRoUG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3EnOiAvL3F1YWRyYXRpYyBiZXppZXJcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocGF0aFBhcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWNvbmRQb2ludCA9IGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcyhwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSwgcGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aGlyZFBvaW50ID0gZ2xfbWF0cml4XzEudmVjMi5mcm9tVmFsdWVzKHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpLCBwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLmFkZChzZWNvbmRQb2ludCwgc2Vjb25kUG9pbnQsIGN1cnJlbnRQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLmFkZCh0aGlyZFBvaW50LCB0aGlyZFBvaW50LCBjdXJyZW50UG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2x5Z29uLnB1c2goLi4ucXVhZHJhdGljQmV6aWVyVG9Qb2ludHNfMS5xdWFkcmF0aWNCZXppZXJUb1BvaW50cyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMTogY3VycmVudFBvaW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDI6IHNlY29uZFBvaW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDM6IHRoaXJkUG9pbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgc3BsaXRCb3VuZGFyeSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLmNvcHkoY3VycmVudFBvaW50LCB0aGlyZFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzJzogLy9jdWJpYyBiZXppZXIgKHNob3J0Y3V0KVxyXG4gICAgICAgICAgICAgICAgY2FzZSAndCc6IC8vcXVhZHJhdGljIGJlemllciAoc2hvcnRjdXQpXHJcbiAgICAgICAgICAgICAgICBjYXNlICdhJzogLy9hcmMgKHNraXApXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobm9ybWFsaXNlZENvbW1hbmQgKyAnIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjdXJyZW50UG9seWdvbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcG9pbnRzLnB1c2goY3VycmVudFBvbHlnb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vY2FsY3VsYXRlIHRoZSBhYWJiIGJhc2VkIG9uIHRoZSBwb2ludHNcclxuICAgIHJldHVybiBwb2ludHM7XHJcbn07XHJcbmV4cG9ydHMucGF0aFRvUG9pbnRzID0gcGF0aFRvUG9pbnRzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnBvaW50c1RvUG9seWdvbnMgPSB2b2lkIDA7XHJcbmNvbnN0IGVhcmN1dF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJlYXJjdXRcIikpO1xyXG5jb25zdCBhYWJiXzEgPSByZXF1aXJlKFwiLi4vYWFiYi9hYWJiXCIpO1xyXG5jb25zdCBwb2ludF8xID0gcmVxdWlyZShcIi4uL21hdGhzL3BvaW50XCIpO1xyXG5jb25zdCBwb2x5Z29uQXJlYV8xID0gcmVxdWlyZShcIi4vcG9seWdvbkFyZWFcIik7XHJcbmNvbnN0IHBvaW50c1RvUG9seWdvbnMgPSAocG9pbnRzKSA9PiB7XHJcbiAgICBjb25zdCBncm91cHMgPSBwb2ludHMubWFwKChwb2ludHNBcnIpID0+ICh7XHJcbiAgICAgICAgcG9pbnRzOiBwb2ludHNBcnIsXHJcbiAgICAgICAgYWFiYjogYWFiYl8xLmFhYmIoLi4ucG9pbnRzQXJyKSxcclxuICAgICAgICBhcmVhOiBwb2x5Z29uQXJlYV8xLnBvbHlnb25BcmVhU2lnbmVkKHBvaW50c0FyciksXHJcbiAgICAgICAgY2hpbGRyZW46IFtdXHJcbiAgICB9KSk7XHJcbiAgICBncm91cHMuc29ydCgoYSwgYikgPT4gTWF0aC5hYnMoYi5hcmVhKSAtIE1hdGguYWJzKGEuYXJlYSkpO1xyXG4gICAgY29uc3Qgcm9vdCA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBsZXQgcGFyZW50ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBqID0gaSAtIDE7IGogPj0gMDsgLS1qKSB7XHJcbiAgICAgICAgICAgIGlmIChwb2ludF8xLmluc2lkZShncm91cHNbal0ucG9pbnRzLCBncm91cHNbaV0ucG9pbnRzWzBdKSAmJiBncm91cHNbaV0uYXJlYSAqIGdyb3Vwc1tqXS5hcmVhIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gZ3JvdXBzW2pdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChncm91cHNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcm9vdC5wdXNoKGdyb3Vwc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgcG9seWdvbnMgPSBbXTtcclxuICAgIGxldCB0cmlhbmdsZXMgPSBbXTtcclxuICAgIGNvbnN0IHByb2Nlc3MgPSAoZ3JvdXApID0+IHtcclxuICAgICAgICBjb25zdCBjb29yZHMgPSBbXTtcclxuICAgICAgICBjb25zdCBob2xlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHBvaW50cyA9IFtdO1xyXG4gICAgICAgIGdyb3VwLnBvaW50cy5mb3JFYWNoKChwb2ludCkgPT4ge1xyXG4gICAgICAgICAgICBjb29yZHMucHVzaCguLi5wb2ludCk7XHJcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBncm91cC5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xyXG4gICAgICAgICAgICBjaGlsZC5jaGlsZHJlbi5mb3JFYWNoKHByb2Nlc3MpO1xyXG4gICAgICAgICAgICBob2xlcy5wdXNoKGNvb3Jkcy5sZW5ndGggLyAyKTtcclxuICAgICAgICAgICAgY2hpbGQucG9pbnRzLmZvckVhY2goKHBvaW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb29yZHMucHVzaCguLi5wb2ludCk7XHJcbiAgICAgICAgICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGluZGljZXMgPSBlYXJjdXRfMS5kZWZhdWx0KGNvb3JkcywgaG9sZXMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkgKz0gMykge1xyXG4gICAgICAgICAgICBjb25zdCBwMSA9IHBvaW50c1tpbmRpY2VzW2kgKyAwXV07XHJcbiAgICAgICAgICAgIGNvbnN0IHAyID0gcG9pbnRzW2luZGljZXNbaSArIDFdXTtcclxuICAgICAgICAgICAgY29uc3QgcDMgPSBwb2ludHNbaW5kaWNlc1tpICsgMl1dO1xyXG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBwMSxcclxuICAgICAgICAgICAgICAgIHAyLFxyXG4gICAgICAgICAgICAgICAgcDMsXHJcbiAgICAgICAgICAgICAgICBlMTogcG9pbnRfMS5zdWIocDIsIHAxKSxcclxuICAgICAgICAgICAgICAgIGUyOiBwb2ludF8xLnN1YihwMywgcDIpLFxyXG4gICAgICAgICAgICAgICAgZTM6IHBvaW50XzEuc3ViKHAxLCBwMyksXHJcbiAgICAgICAgICAgICAgICBwb2ludHM6IFtwMSwgcDIsIHAzXSxcclxuICAgICAgICAgICAgICAgIGNvbG91cjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDI1NSksXHJcbiAgICAgICAgICAgICAgICAgICAgeTogTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMjU1KSxcclxuICAgICAgICAgICAgICAgICAgICB6OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAyNTUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByb290LmZvckVhY2goKGdyb3VwKSA9PiB7XHJcbiAgICAgICAgcHJvY2Vzcyhncm91cCk7XHJcbiAgICAgICAgcG9seWdvbnMucHVzaCh0cmlhbmdsZXMpO1xyXG4gICAgICAgIHRyaWFuZ2xlcyA9IFtdO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcG9seWdvbnM7XHJcbn07XHJcbmV4cG9ydHMucG9pbnRzVG9Qb2x5Z29ucyA9IHBvaW50c1RvUG9seWdvbnM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucG9seWdvbkFyZWEgPSBleHBvcnRzLnBvbHlnb25BcmVhU2lnbmVkID0gdm9pZCAwO1xyXG5jb25zdCBwb2ludF8xID0gcmVxdWlyZShcIi4uL21hdGhzL3BvaW50XCIpO1xyXG5jb25zdCBwb2x5Z29uQXJlYVNpZ25lZCA9IChwb2ludHMpID0+IHtcclxuICAgIGlmICghcG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbGFzdEluZGV4ID0gcG9pbnRzLmxlbmd0aCAtIDE7XHJcbiAgICBsZXQgYXJlYSA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxhc3RJbmRleDsgaSsrKSB7XHJcbiAgICAgICAgYXJlYSArPSBwb2ludF8xLmRldGVybWluYW50Mihwb2ludHNbaV0sIHBvaW50c1tpICsgMV0pO1xyXG4gICAgfVxyXG4gICAgYXJlYSArPSBwb2ludF8xLmRldGVybWluYW50Mihwb2ludHNbbGFzdEluZGV4XSwgcG9pbnRzWzBdKTtcclxuICAgIHJldHVybiBhcmVhIC8gMjtcclxufTtcclxuZXhwb3J0cy5wb2x5Z29uQXJlYVNpZ25lZCA9IHBvbHlnb25BcmVhU2lnbmVkO1xyXG5jb25zdCBwb2x5Z29uQXJlYSA9IChwb2ludHMpID0+IHtcclxuICAgIHJldHVybiBNYXRoLmFicyhleHBvcnRzLnBvbHlnb25BcmVhU2lnbmVkKHBvaW50cykpO1xyXG59O1xyXG5leHBvcnRzLnBvbHlnb25BcmVhID0gcG9seWdvbkFyZWE7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucXVhZHJhdGljQmV6aWVyVG9Qb2ludHMgPSB2b2lkIDA7XHJcbmNvbnN0IGdsX21hdHJpeF8xID0gcmVxdWlyZShcImdsLW1hdHJpeFwiKTtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvY29tbW9uXCIpO1xyXG5jb25zdCBwb2ludF8xID0gcmVxdWlyZShcIi4uL21hdGhzL3BvaW50XCIpO1xyXG5jb25zdCBxdWFkcmF0aWNCZXppZXJUb1BvaW50cyA9IChiZXppZXIsIHNwbGl0Qm91bmRhcnkpID0+IHtcclxuICAgIGNvbnN0IHBvaW50cyA9IFtnbF9tYXRyaXhfMS52ZWMyLmNsb25lKGJlemllci5wMSksIGdsX21hdHJpeF8xLnZlYzIuY2xvbmUoYmV6aWVyLnAzKV07XHJcbiAgICBjb25zdCBxdWFkcmF0aWNCZXppZXJTcGxpdCA9IChiZXppZXIsIG1pbiwgbWF4LCBpbnNlcnRJbmRleCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRpbWUgPSBjb21tb25fMS5sZXJwKG1pbiwgbWF4LCAwLjUpO1xyXG4gICAgICAgIGNvbnN0IHBvaW50T25DdXJ2ZSA9IHBvaW50XzEubGVycDIocG9pbnRfMS5sZXJwMihiZXppZXIucDEsIGJlemllci5wMiwgdGltZSksIHBvaW50XzEubGVycDIoYmV6aWVyLnAyLCBiZXppZXIucDMsIHRpbWUpLCB0aW1lKTtcclxuICAgICAgICBjb25zdCBwcmV2UG9pbnQgPSBwb2ludHNbaW5zZXJ0SW5kZXggLSAxXTtcclxuICAgICAgICBjb25zdCBuZXh0UG9pbnQgPSBwb2ludHNbaW5zZXJ0SW5kZXhdO1xyXG4gICAgICAgIHBvaW50cy5zcGxpY2UoaW5zZXJ0SW5kZXgsIDAsIHBvaW50T25DdXJ2ZSk7XHJcbiAgICAgICAgaWYgKHBvaW50XzEuZG90KHBvaW50XzEubm9ybWFsaXplKHBvaW50XzEuc3ViKHByZXZQb2ludCwgcG9pbnRPbkN1cnZlKSksIHBvaW50XzEubm9ybWFsaXplKHBvaW50XzEuc3ViKG5leHRQb2ludCwgcG9pbnRPbkN1cnZlKSkpID4gc3BsaXRCb3VuZGFyeSkge1xyXG4gICAgICAgICAgICBxdWFkcmF0aWNCZXppZXJTcGxpdChiZXppZXIsIHRpbWUsIG1heCwgaW5zZXJ0SW5kZXggKyAxKTtcclxuICAgICAgICAgICAgcXVhZHJhdGljQmV6aWVyU3BsaXQoYmV6aWVyLCBtaW4sIHRpbWUsIGluc2VydEluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcXVhZHJhdGljQmV6aWVyU3BsaXQoYmV6aWVyLCAwLCAxLCAxKTtcclxuICAgIHJldHVybiBwb2ludHM7XHJcbn07XHJcbmV4cG9ydHMucXVhZHJhdGljQmV6aWVyVG9Qb2ludHMgPSBxdWFkcmF0aWNCZXppZXJUb1BvaW50cztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5nZXRMaW5lRXF1YXRpb24gPSB2b2lkIDA7XHJcbmNvbnN0IHBvaW50XzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvcG9pbnRcIik7XHJcbmNvbnN0IGdldExpbmVFcXVhdGlvbiA9IChsaW5lKSA9PiB7XHJcbiAgICBjb25zdCBkaXJlY3Rpb24gPSBwb2ludF8xLnN1YihsaW5lLnAyLCBsaW5lLnAxKTtcclxuICAgIGNvbnN0IGdyYWRpZW50ID0gZGlyZWN0aW9uWzFdIC8gZGlyZWN0aW9uWzBdO1xyXG4gICAgY29uc3QgaW50ZXJzZWN0ID0gbGluZS5wMVsxXSAtIGxpbmUucDFbMF0gKiBncmFkaWVudDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ3JhZGllbnQsXHJcbiAgICAgICAgaW50ZXJzZWN0XHJcbiAgICB9O1xyXG59O1xyXG5leHBvcnRzLmdldExpbmVFcXVhdGlvbiA9IGdldExpbmVFcXVhdGlvbjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zb2x2ZUxpbmVYID0gdm9pZCAwO1xyXG5jb25zdCBzb2x2ZUxpbmVYID0gKGVxdWF0aW9uLCB5KSA9PiB7XHJcbiAgICByZXR1cm4gKHkgLSBlcXVhdGlvbi5pbnRlcnNlY3QpIC8gZXF1YXRpb24uZ3JhZGllbnQ7XHJcbn07XHJcbmV4cG9ydHMuc29sdmVMaW5lWCA9IHNvbHZlTGluZVg7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMubGVycCA9IGV4cG9ydHMudGltZUF0UG9zID0gZXhwb3J0cy5jbGFtcCA9IGV4cG9ydHMuZnJhY3QgPSBleHBvcnRzLm5lZ0ZyYWN0ID0gZXhwb3J0cy5FUFNJTE9OID0gdm9pZCAwO1xyXG5leHBvcnRzLkVQU0lMT04gPSAwLjAwMDAwMTtcclxuY29uc3QgbmVnRnJhY3QgPSAoeCkgPT4gMS4wIC0geCArIE1hdGguZmxvb3IoeCk7XHJcbmV4cG9ydHMubmVnRnJhY3QgPSBuZWdGcmFjdDtcclxuY29uc3QgZnJhY3QgPSAoeCkgPT4geCAtIE1hdGguZmxvb3IoeCk7XHJcbmV4cG9ydHMuZnJhY3QgPSBmcmFjdDtcclxuY29uc3QgY2xhbXAgPSAoYSwgbWluLCBtYXgpID0+IE1hdGgubWF4KE1hdGgubWluKGEsIG1heCksIG1pbik7XHJcbmV4cG9ydHMuY2xhbXAgPSBjbGFtcDtcclxuY29uc3QgdGltZUF0UG9zID0gKHN0YXJ0UG9zLCBkaXIsIG5ld1BvcykgPT4gZGlyID8gZXhwb3J0cy5jbGFtcCgobmV3UG9zIC0gc3RhcnRQb3MpIC8gZGlyLCAwLCAxKSA6IDA7XHJcbmV4cG9ydHMudGltZUF0UG9zID0gdGltZUF0UG9zO1xyXG5jb25zdCBsZXJwID0gKGEsIGIsIHQpID0+IGEgKiAoMSAtIHQpICsgYiAqIHQ7XHJcbmV4cG9ydHMubGVycCA9IGxlcnA7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuaW5zaWRlID0gZXhwb3J0cy5pblJhbmdlID0gZXhwb3J0cy5hdmcgPSBleHBvcnRzLm1heDIgPSBleHBvcnRzLm1pbjIgPSBleHBvcnRzLnRvUHJlY2lzaW9uMiA9IGV4cG9ydHMubGVycDIgPSBleHBvcnRzLm5vcm1hbGl6ZSA9IGV4cG9ydHMubGVuZ3RoID0gZXhwb3J0cy5kb3QgPSBleHBvcnRzLnNpZ24gPSBleHBvcnRzLmFicyA9IGV4cG9ydHMuY2VpbCA9IGV4cG9ydHMuZmxvb3IgPSBleHBvcnRzLnN1YiA9IGV4cG9ydHMuYWRkcyA9IGV4cG9ydHMuYWRkID0gZXhwb3J0cy5kaXZpZGUgPSBleHBvcnRzLm11bHRpcGx5ID0gZXhwb3J0cy5zY2FsZSA9IGV4cG9ydHMuZXF1YWxzID0gZXhwb3J0cy5kZXRlcm1pbmFudDIgPSBleHBvcnRzLmNsYW1wMiA9IHZvaWQgMDtcclxuY29uc3QgZ2xfbWF0cml4XzEgPSByZXF1aXJlKFwiZ2wtbWF0cml4XCIpO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcclxuY29uc3QgY2xhbXAyID0gKGEsIG1pbiwgbWF4KSA9PiB7XHJcbiAgICBjb25zdCBvdXQgPSBnbF9tYXRyaXhfMS52ZWMyLmNsb25lKGEpO1xyXG4gICAgZ2xfbWF0cml4XzEudmVjMi5taW4ob3V0LCBvdXQsIG1heCk7XHJcbiAgICBnbF9tYXRyaXhfMS52ZWMyLm1heChvdXQsIG91dCwgbWluKTtcclxuICAgIHJldHVybiBvdXQ7XHJcbn07XHJcbmV4cG9ydHMuY2xhbXAyID0gY2xhbXAyO1xyXG5jb25zdCBkZXRlcm1pbmFudDIgPSAocDEsIHAyKSA9PiBwMVswXSAqIHAyWzFdIC0gcDFbMV0gKiBwMlswXTtcclxuZXhwb3J0cy5kZXRlcm1pbmFudDIgPSBkZXRlcm1pbmFudDI7XHJcbmV4cG9ydHMuZXF1YWxzID0gZ2xfbWF0cml4XzEudmVjMi5lcXVhbHM7XHJcbmNvbnN0IHNjYWxlID0gKHAxLCBhKSA9PiBnbF9tYXRyaXhfMS52ZWMyLnNjYWxlKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIHAxLCBhKTtcclxuZXhwb3J0cy5zY2FsZSA9IHNjYWxlO1xyXG5jb25zdCBtdWx0aXBseSA9IChwMSwgcDIpID0+IGdsX21hdHJpeF8xLnZlYzIubXVsdGlwbHkoZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKSwgcDEsIHAyKTtcclxuZXhwb3J0cy5tdWx0aXBseSA9IG11bHRpcGx5O1xyXG5jb25zdCBkaXZpZGUgPSAocDEsIHAyKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmRpdmlkZShnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLCBwMSwgcDIpO1xyXG5leHBvcnRzLmRpdmlkZSA9IGRpdmlkZTtcclxuY29uc3QgYWRkID0gKHAxLCBwMikgPT4gZ2xfbWF0cml4XzEudmVjMi5hZGQoZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKSwgcDEsIHAyKTtcclxuZXhwb3J0cy5hZGQgPSBhZGQ7XHJcbmNvbnN0IGFkZHMgPSAocDEsIGEpID0+IGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcyhwMVswXSArIGEsIHAxWzFdICsgYSk7XHJcbmV4cG9ydHMuYWRkcyA9IGFkZHM7XHJcbmNvbnN0IHN1YiA9IChwMSwgcDIpID0+IGdsX21hdHJpeF8xLnZlYzIuc3ViKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIHAxLCBwMik7XHJcbmV4cG9ydHMuc3ViID0gc3ViO1xyXG5jb25zdCBmbG9vciA9IChwMSkgPT4gZ2xfbWF0cml4XzEudmVjMi5mbG9vcihnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLCBwMSk7XHJcbmV4cG9ydHMuZmxvb3IgPSBmbG9vcjtcclxuY29uc3QgY2VpbCA9IChwMSkgPT4gZ2xfbWF0cml4XzEudmVjMi5jZWlsKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIHAxKTtcclxuZXhwb3J0cy5jZWlsID0gY2VpbDtcclxuY29uc3QgYWJzID0gKHAxKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMoTWF0aC5hYnMocDFbMF0pLCBNYXRoLmFicyhwMVsxXSkpO1xyXG5leHBvcnRzLmFicyA9IGFicztcclxuY29uc3Qgc2lnbiA9IChwMSkgPT4gZ2xfbWF0cml4XzEudmVjMi5mcm9tVmFsdWVzKE1hdGguc2lnbihwMVswXSksIE1hdGguc2lnbihwMVsxXSkpO1xyXG5leHBvcnRzLnNpZ24gPSBzaWduO1xyXG5jb25zdCBkb3QgPSAocDEsIHAyKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmRvdChwMSwgcDIpO1xyXG5leHBvcnRzLmRvdCA9IGRvdDtcclxuY29uc3QgbGVuZ3RoID0gKHAxKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmxlbmd0aChwMSk7XHJcbmV4cG9ydHMubGVuZ3RoID0gbGVuZ3RoO1xyXG5jb25zdCBub3JtYWxpemUgPSAocDEpID0+IGV4cG9ydHMuc2NhbGUocDEsIDEgLyBleHBvcnRzLmxlbmd0aChwMSkpO1xyXG5leHBvcnRzLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZTtcclxuY29uc3QgbGVycDIgPSAoYSwgYiwgdCkgPT4gZ2xfbWF0cml4XzEudmVjMi5sZXJwKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIGEsIGIsIHQpO1xyXG5leHBvcnRzLmxlcnAyID0gbGVycDI7XHJcbi8vd2FybmluZzogbXV0YXRlcyBhXHJcbmNvbnN0IHRvUHJlY2lzaW9uMiA9IChhLCBhbW91bnQpID0+IHtcclxuICAgIGFbMF0gPSBwYXJzZUZsb2F0KGFbMF0udG9QcmVjaXNpb24oYW1vdW50KSk7XHJcbiAgICBhWzFdID0gcGFyc2VGbG9hdChhWzFdLnRvUHJlY2lzaW9uKGFtb3VudCkpO1xyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbmV4cG9ydHMudG9QcmVjaXNpb24yID0gdG9QcmVjaXNpb24yO1xyXG5jb25zdCBtaW4yID0gKC4uLm9ianMpID0+IHtcclxuICAgIGNvbnN0IFtmaXJzdCwgLi4ucmVzdF0gPSBvYmpzO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gZ2xfbWF0cml4XzEudmVjMi5jbG9uZShmaXJzdCk7XHJcbiAgICByZXN0LmZvckVhY2goKG9iaikgPT4ge1xyXG4gICAgICAgIGdsX21hdHJpeF8xLnZlYzIubWluKHJlc3VsdCwgcmVzdWx0LCBvYmopO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5leHBvcnRzLm1pbjIgPSBtaW4yO1xyXG5jb25zdCBtYXgyID0gKC4uLm9ianMpID0+IHtcclxuICAgIGNvbnN0IFtmaXJzdCwgLi4ucmVzdF0gPSBvYmpzO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gZ2xfbWF0cml4XzEudmVjMi5jbG9uZShmaXJzdCk7XHJcbiAgICByZXN0LmZvckVhY2goKG9iaikgPT4ge1xyXG4gICAgICAgIGdsX21hdHJpeF8xLnZlYzIubWF4KHJlc3VsdCwgcmVzdWx0LCBvYmopO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5leHBvcnRzLm1heDIgPSBtYXgyO1xyXG5jb25zdCBhdmcgPSAoLi4ub2JqcykgPT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKTtcclxuICAgIGlmIChvYmpzLmxlbmd0aCkge1xyXG4gICAgICAgIG9ianMuZm9yRWFjaCgob2JqKSA9PiB7XHJcbiAgICAgICAgICAgIGdsX21hdHJpeF8xLnZlYzIuYWRkKHJlc3VsdCwgcmVzdWx0LCBvYmopO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGdsX21hdHJpeF8xLnZlYzIuc2NhbGUocmVzdWx0LCByZXN1bHQsIDEgLyBvYmpzLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5leHBvcnRzLmF2ZyA9IGF2ZztcclxuY29uc3QgaW5SYW5nZSA9IChwMSwgbWluLCBtYXgpID0+IHtcclxuICAgIHJldHVybiAhKHAxWzBdID4gbWF4WzBdIHx8IHAxWzBdIDwgbWluWzBdIHx8IHAxWzFdID4gbWF4WzFdIHx8IHAxWzFdIDwgbWluWzFdKTtcclxufTtcclxuZXhwb3J0cy5pblJhbmdlID0gaW5SYW5nZTtcclxuY29uc3QgaW5zaWRlID0gKHBvaW50cywgcCkgPT4ge1xyXG4gICAgbGV0IGNvdW50ID0gMDtcclxuICAgIGxldCBjdXIgPSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdO1xyXG4gICAgcG9pbnRzLmZvckVhY2goKG5leHQpID0+IHtcclxuICAgICAgICBjb25zdCBwMCA9IGN1clsxXSA8IG5leHRbMV0gPyBjdXIgOiBuZXh0O1xyXG4gICAgICAgIGNvbnN0IHAxID0gY3VyWzFdIDwgbmV4dFsxXSA/IG5leHQgOiBjdXI7XHJcbiAgICAgICAgaWYgKHAwWzFdIDwgcFsxXSArIGNvbW1vbl8xLkVQU0lMT04gJiYgcDFbMV0gPiBwWzFdICsgY29tbW9uXzEuRVBTSUxPTikge1xyXG4gICAgICAgICAgICBpZiAoKHAxWzBdIC0gcDBbMF0pICogKHBbMV0gLSBwMFsxXSkgPiAocFswXSAtIHAwWzBdKSAqIChwMVsxXSAtIHAwWzFdKSkge1xyXG4gICAgICAgICAgICAgICAgY291bnQgKz0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjdXIgPSBuZXh0O1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gY291bnQgJSAyICE9PSAwO1xyXG59O1xyXG5leHBvcnRzLmluc2lkZSA9IGluc2lkZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zb3J0ID0gdm9pZCAwO1xyXG4vL2NwdSB0ZXN0IG9mIHNvcnRpbmcgZm91ciBmbG9hdHMgd2l0aG91dCBicmFuY2ggY29uZGl0aW9uc1xyXG5jb25zdCBzb3J0ID0gKHQxLCB0MiwgdDMsIHQ0KSA9PiB7XHJcbiAgICBjb25zdCBhID0gTWF0aC5taW4odDEsIHQyKTtcclxuICAgIGNvbnN0IGIgPSBNYXRoLm1heCh0MSwgdDIpO1xyXG4gICAgY29uc3QgYyA9IE1hdGgubWluKHQzLCB0NCk7XHJcbiAgICBjb25zdCBkID0gTWF0aC5tYXgodDMsIHQ0KTtcclxuICAgIGNvbnN0IGUgPSBNYXRoLm1pbihiLCBjKTtcclxuICAgIGNvbnN0IGYgPSBNYXRoLm1heChiLCBjKTtcclxuICAgIGNvbnN0IGggPSBNYXRoLm1heChhLCBlKTtcclxuICAgIGNvbnN0IGkgPSBNYXRoLm1pbihmLCBkKTtcclxuICAgIHJldHVybiBbTWF0aC5taW4oYSwgZSksIE1hdGgubWluKGgsIGkpLCBNYXRoLm1heChoLCBpKSwgTWF0aC5tYXgoZiwgZCldO1xyXG59O1xyXG5leHBvcnRzLnNvcnQgPSBzb3J0O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnJhc3RlcmlzZSA9IHZvaWQgMDtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvY29tbW9uXCIpO1xyXG5jb25zdCBzb2x2ZUxpbmVYXzEgPSByZXF1aXJlKFwiLi4vbGluZS9zb2x2ZUxpbmVYXCIpO1xyXG5jb25zdCBwb2ludF8xID0gcmVxdWlyZShcIi4uL21hdGhzL3BvaW50XCIpO1xyXG5jb25zdCBnZXRMaW5lRXF1YXRpb25fMSA9IHJlcXVpcmUoXCIuLi9saW5lL2dldExpbmVFcXVhdGlvblwiKTtcclxuY29uc3QgZ2V0TGluZVJhbmdlID0gKGxpbmUpID0+IHtcclxuICAgIGxldCBwU3RhcnQ7XHJcbiAgICBsZXQgcEVuZDtcclxuICAgIGlmIChsaW5lLnAxWzFdIDwgbGluZS5wMlsxXSkge1xyXG4gICAgICAgIHBTdGFydCA9IGxpbmUucDE7XHJcbiAgICAgICAgcEVuZCA9IGxpbmUucDI7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChsaW5lLnAxWzFdID4gbGluZS5wMlsxXSkge1xyXG4gICAgICAgIHBTdGFydCA9IGxpbmUucDI7XHJcbiAgICAgICAgcEVuZCA9IGxpbmUucDE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChsaW5lLnAxWzBdIDwgbGluZS5wMlswXSkge1xyXG4gICAgICAgIHBTdGFydCA9IGxpbmUucDE7XHJcbiAgICAgICAgcEVuZCA9IGxpbmUucDI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBwU3RhcnQgPSBsaW5lLnAyO1xyXG4gICAgICAgIHBFbmQgPSBsaW5lLnAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwU3RhcnQsXHJcbiAgICAgICAgcEVuZCxcclxuICAgICAgICB4UmFuZ2U6IFtNYXRoLm1pbihsaW5lLnAxWzBdLCBsaW5lLnAyWzBdKSwgTWF0aC5tYXgobGluZS5wMVswXSwgbGluZS5wMlswXSldLFxyXG4gICAgICAgIGVxdWF0aW9uOiBnZXRMaW5lRXF1YXRpb25fMS5nZXRMaW5lRXF1YXRpb24obGluZSlcclxuICAgIH07XHJcbn07XHJcbmNvbnN0IHJhc3RlcmlzZSA9IChwb2ludHMsIGNhbGxiYWNrKSA9PiB7XHJcbiAgICBjb25zdCBsaW5lcyA9IFtcclxuICAgICAgICB7IHAxOiBwb2ludHNbMF0sIHAyOiBwb2ludHNbMV0gfSxcclxuICAgICAgICB7IHAxOiBwb2ludHNbMV0sIHAyOiBwb2ludHNbMl0gfSxcclxuICAgICAgICB7IHAxOiBwb2ludHNbMl0sIHAyOiBwb2ludHNbMF0gfVxyXG4gICAgXTtcclxuICAgIGNvbnN0IG1pblBvcyA9IHBvaW50XzEubWluMiguLi5wb2ludHMpO1xyXG4gICAgY29uc3QgbWF4UG9zID0gcG9pbnRfMS5tYXgyKC4uLnBvaW50cyk7XHJcbiAgICBjb25zdCBsaW5lUmFuZ2VzID0gW2dldExpbmVSYW5nZShsaW5lc1swXSksIGdldExpbmVSYW5nZShsaW5lc1sxXSksIGdldExpbmVSYW5nZShsaW5lc1syXSldO1xyXG4gICAgbGV0IHByZXZZID0gTWF0aC5mbG9vcihtaW5Qb3NbMV0pO1xyXG4gICAgY29uc3QgbWF4WSA9IE1hdGguY2VpbChtYXhQb3NbMV0pO1xyXG4gICAgaWYgKG1heFkgLSBwcmV2WSA8IDEpIHtcclxuICAgICAgICBjYWxsYmFjayhNYXRoLmZsb29yKG1pblBvc1swXSksIE1hdGguZmxvb3IobWF4UG9zWzBdKSwgcHJldlksIGZhbHNlKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCB5ID0gcHJldlkgKyAxOyB5IDw9IG1heFk7IHkrKykge1xyXG4gICAgICAgIC8vd2UganVzdCBuZWVkIHRvIGdldCBmb3VyIG51bWJlcnMsIHRoZSBvdXRlciBtaW4gYW5kIG1heCBhbmQgaW5uZXIgbWluIGFuZCBtYXggdmFsdWVzXHJcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBbLTEsIC0xLCAtMSwgLTFdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lUmFuZ2VzW2ldO1xyXG4gICAgICAgICAgICBpZiAobGluZS5wRW5kWzFdID49IHByZXZZICYmIGxpbmUucFN0YXJ0WzFdIDw9IHkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBmcm9tWCA9IHNvbHZlTGluZVhfMS5zb2x2ZUxpbmVYKGxpbmUuZXF1YXRpb24sIHByZXZZKTtcclxuICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZShmcm9tWCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tWCA9IGNvbW1vbl8xLmNsYW1wKGZyb21YLCBsaW5lLnhSYW5nZVswXSwgbGluZS54UmFuZ2VbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbVggPSBsaW5lLnBTdGFydFswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZyb21YID0gTWF0aC5mbG9vcihmcm9tWCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG9YID0gc29sdmVMaW5lWF8xLnNvbHZlTGluZVgobGluZS5lcXVhdGlvbiwgeSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUodG9YKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvWCA9IGNvbW1vbl8xLmNsYW1wKHRvWCwgbGluZS54UmFuZ2VbMF0sIGxpbmUueFJhbmdlWzFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvWCA9IGxpbmUucEVuZFswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvWCA9IE1hdGguZmxvb3IodG9YKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhSYW5nZSA9IFtNYXRoLm1pbihmcm9tWCwgdG9YKSwgTWF0aC5tYXgoZnJvbVgsIHRvWCldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlWzBdIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZmlyc3QgZW50cnlcclxuICAgICAgICAgICAgICAgICAgICByYW5nZVswXSA9IHhSYW5nZVswXTtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZVsxXSA9IHhSYW5nZVsxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCh4UmFuZ2VbMF0gPD0gcmFuZ2VbMV0gKyAxICYmIHhSYW5nZVswXSA+PSByYW5nZVswXSAtIDEpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHhSYW5nZVsxXSA8PSByYW5nZVsxXSArIDEgJiYgeFJhbmdlWzFdID49IHJhbmdlWzBdIC0gMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2V4dGVuZHMgdGhlIGZpcnN0IGVudHJ5XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VbMF0gPSBNYXRoLm1pbihyYW5nZVswXSwgeFJhbmdlWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZVsxXSA9IE1hdGgubWF4KHJhbmdlWzFdLCB4UmFuZ2VbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmFuZ2VbMl0gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tdXN0IGJlIGEgbmV3IHNlY29uZCByYW5nZSwgZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gc3dhcCBvciBub3QgdG8ga2VlcCB0aGVtIG9yZGVyZWRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeFJhbmdlWzBdID4gcmFuZ2VbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VbMl0gPSB4UmFuZ2VbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlWzNdID0geFJhbmdlWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VbMl0gPSByYW5nZVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VbM10gPSByYW5nZVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VbMF0gPSB4UmFuZ2VbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlWzFdID0geFJhbmdlWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZXh0ZW5kcyB0aGUgc2Vjb25kIHJhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VbMl0gPSBNYXRoLm1pbihyYW5nZVsyXSwgeFJhbmdlWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZVszXSA9IE1hdGgubWF4KHJhbmdlWzNdLCB4UmFuZ2VbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vd2UgaGF2ZSBhbiBpbnNpZGVcclxuICAgICAgICBpZiAocmFuZ2VbMl0gPiByYW5nZVsxXSkge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhyYW5nZVswXSwgcmFuZ2VbMV0sIHByZXZZLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHJhbmdlWzFdICsgMSwgcmFuZ2VbMl0gLSAxLCBwcmV2WSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHJhbmdlWzJdLCByYW5nZVszXSwgcHJldlksIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKHJhbmdlWzBdLCBNYXRoLm1heChyYW5nZVsxXSwgcmFuZ2VbM10pLCBwcmV2WSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcmV2WSA9IHk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMucmFzdGVyaXNlID0gcmFzdGVyaXNlO1xyXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhYWJiIiwicG9pbnRfMSIsInBvaW50cyIsIm1pbiIsIm1pbjIiLCJtYXgiLCJtYXgyIiwiX19hd2FpdGVyIiwidGhpcyIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5Iiwib3BlbnR5cGVfanNfMSIsInBhdGhUb1BvaW50c18xIiwicG9pbnRzVG9Qb2x5Z29uXzEiLCJwb2x5Z29uQXJlYV8xIiwicmFzdGVyaXNlXzEiLCJpbnRlcnNlY3RDZWxsVHJpYW5nbGVfMSIsImNvbW1vbl8xIiwiZ2FtZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnYW1lMiIsInpvb21JbnB1dCIsInRleHRTdHJpbmciLCJ4UG9zaXRpb24iLCJ5UG9zaXRpb24iLCJnIiwiZ2V0Q29udGV4dCIsImcyIiwiYWxwaGEiLCJFcnJvciIsImZvbnQiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJpbWFnZVNtb290aGluZ1F1YWxpdHkiLCJwb2x5Z29ucyIsImFsbFBvaW50cyIsInNjYWxlciIsInBhcnNlRmxvYXQiLCJ4UG9zIiwieVBvcyIsInRleHQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZHJhdyIsImxvYWRDaGFycyIsIm9yaWdpbmFsUG9pbnRQb3MiLCJNYXAiLCJteUNoYXJzIiwic3RyaW5nVG9HbHlwaHMiLCJsZW5ndGgiLCJjaGFyUG9zIiwiZm9yRWFjaCIsIm15Q2hhciIsImFQYXRoIiwiZ2V0UGF0aCIsInBhdGhUb1BvaW50cyIsInRvUGF0aERhdGEiLCJhZHZhbmNlV2lkdGgiLCJjaGFyUG9seWdvbnMiLCJwb2ludHNUb1BvbHlnb25zIiwicHVzaCIsImNsZWFyIiwicG9pbnQiLCJzZXQiLCJhc3NpZ24iLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsIm9yaWdpbmFsUG9zaXRpb24iLCJnZXQiLCJpbWFnZURhdGEiLCJnZXRJbWFnZURhdGEiLCJkYXRhIiwicG9seWdvbiIsInRyaWFuZ2xlIiwiZTEiLCJzdWIiLCJwMiIsInAxIiwiZTIiLCJwMyIsImUzIiwicmFzdGVyaXNlIiwibWluWCIsIm1heFgiLCJ5IiwiaXNJbnNpZGUiLCJpbmRleCIsIngiLCJtYXhZIiwiY2VsbEZpbGxQb2x5Z29uIiwiaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlIiwiY292ZXJhZ2UiLCJjbGFtcCIsInBvbHlnb25BcmVhIiwiTWF0aCIsImZsb29yIiwicHV0SW1hZ2VEYXRhIiwiZmlsbFN0eWxlIiwiZm9udFNpemUiLCJmaWxsVGV4dCIsImxvYWQiLCJjdWJpY0JlemllclRvUG9pbnRzIiwiZ2xfbWF0cml4XzEiLCJiZXppZXIiLCJzcGxpdFRocmVzaG9sZCIsInZlYzIiLCJjbG9uZSIsInA0IiwiY3ViaWNCZXppZXJTcGxpdCIsImluc2VydEluZGV4IiwiZmlyc3QiLCJ0aW1lIiwibGVycCIsIm1pZExlcnAiLCJsZXJwMiIsInBvaW50T25DdXJ2ZSIsInByZXZQb2ludCIsIm5leHRQb2ludCIsInNwbGljZSIsImRvdCIsIm5vcm1hbGl6ZSIsInNvcnRfMSIsImNlbGwiLCJ0MSIsInRpbWVBdFBvcyIsInQyIiwidDMiLCJ0NCIsInNvcnQiLCJtYXAiLCJ0IiwiY2xhbXAyIiwiYWRkIiwic2NhbGUiLCJ0NSIsInQ2IiwidDciLCJ0OCIsInQ5IiwidDEwIiwidDExIiwidDEyIiwiY3ViaWNCZXppZXJUb1BvaW50c18xIiwicXVhZHJhdGljQmV6aWVyVG9Qb2ludHNfMSIsImJsb2NrUmVnZXhwIiwidmFsdWVzUmVnZXhwIiwicGF0aFN0ciIsInNwbGl0Qm91bmRhcnkiLCJwYXRoQmxvY2tzIiwic3BsaXQiLCJjdXJyZW50UG9seWdvbiIsImN1cnJlbnRQb2ludCIsImNyZWF0ZSIsImJsb2NrIiwic2hpZnQiLCJwYXRoUGFydHMiLCJzdWJzdHJpbmciLCJtYXRjaCIsIm5leHRDb21tYW5kIiwibm9ybWFsaXNlZENvbW1hbmQiLCJ0b0xvd2VyQ2FzZSIsImlzUmVsYXRpdmUiLCJmcm9tVmFsdWVzIiwiY29weSIsIm5leHRYIiwibmV4dFkiLCJmaXJzdFBvaW50IiwiemVybyIsInNlY29uZFBvaW50IiwidGhpcmRQb2ludCIsImZvdXJ0aFBvaW50IiwicXVhZHJhdGljQmV6aWVyVG9Qb2ludHMiLCJjb25zb2xlIiwibG9nIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsImVhcmN1dF8xIiwiYWFiYl8xIiwiZ3JvdXBzIiwicG9pbnRzQXJyIiwiYXJlYSIsInBvbHlnb25BcmVhU2lnbmVkIiwiY2hpbGRyZW4iLCJhIiwiYiIsImFicyIsInJvb3QiLCJpIiwicGFyZW50IiwiaiIsImluc2lkZSIsInRyaWFuZ2xlcyIsInByb2Nlc3MiLCJncm91cCIsImNvb3JkcyIsImhvbGVzIiwiY2hpbGQiLCJpbmRpY2VzIiwiZGVmYXVsdCIsImNvbG91ciIsInJvdW5kIiwicmFuZG9tIiwieiIsImxhc3RJbmRleCIsImRldGVybWluYW50MiIsInF1YWRyYXRpY0JlemllclNwbGl0IiwiZ2V0TGluZUVxdWF0aW9uIiwibGluZSIsImRpcmVjdGlvbiIsImdyYWRpZW50IiwiaW50ZXJzZWN0Iiwic29sdmVMaW5lWCIsImVxdWF0aW9uIiwiZnJhY3QiLCJuZWdGcmFjdCIsIkVQU0lMT04iLCJzdGFydFBvcyIsImRpciIsIm5ld1BvcyIsImluUmFuZ2UiLCJhdmciLCJ0b1ByZWNpc2lvbjIiLCJzaWduIiwiY2VpbCIsImFkZHMiLCJkaXZpZGUiLCJtdWx0aXBseSIsImVxdWFscyIsIm91dCIsImFtb3VudCIsInRvUHJlY2lzaW9uIiwib2JqcyIsInJlc3QiLCJvYmoiLCJwIiwiY291bnQiLCJjdXIiLCJwMCIsImMiLCJkIiwiZiIsImgiLCJzb2x2ZUxpbmVYXzEiLCJnZXRMaW5lRXF1YXRpb25fMSIsImdldExpbmVSYW5nZSIsInBTdGFydCIsInBFbmQiLCJ4UmFuZ2UiLCJjYWxsYmFjayIsImxpbmVzIiwibWluUG9zIiwibWF4UG9zIiwibGluZVJhbmdlcyIsInByZXZZIiwicmFuZ2UiLCJmcm9tWCIsImlzRmluaXRlIiwidG9YIl0sInNvdXJjZVJvb3QiOiIifQ==