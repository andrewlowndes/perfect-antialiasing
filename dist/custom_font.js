"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[0],{89:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0;const o=a(669);t.aabb=(...e)=>({min:(0,o.min2)(...e),max:(0,o.max2)(...e)})},737:function(e,t,a){var o=this&&this.__awaiter||function(e,t,a,o){return new(a||(a=Promise))((function(n,s){function i(e){try{c(o.next(e))}catch(e){s(e)}}function r(e){try{c(o.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,r)}c((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=a(422),s=a(705),i=a(199),r=a(923),c=a(669),l=a(916),p=a(395),h=a(345),u=document.getElementById("game"),d=document.getElementById("game2"),m=document.getElementById("zoomInput"),v=document.getElementById("textString"),f=document.getElementById("xPosition"),g=document.getElementById("yPosition"),b=u.getContext("2d"),M=d.getContext("2d",{alpha:!0});if(!b||!M)throw new Error("Could not get canvas graphics :(");let P;b.imageSmoothingEnabled=!1,M.imageSmoothingQuality="high",M.imageSmoothingEnabled=!0;const x=[],y=[];let E=parseFloat(m.value),_=0,F=0,A=v.value;f.addEventListener("input",(()=>{_=parseFloat(f.value),requestAnimationFrame(q)})),g.addEventListener("input",(()=>{F=parseFloat(g.value),requestAnimationFrame(q)})),v.addEventListener("input",(()=>{A=v.value,T()})),m.addEventListener("input",(()=>{E=parseFloat(m.value),requestAnimationFrame(q)}));const O=new Map,T=()=>{const e=P.stringToGlyphs(A);x.length=0,y.length=0;let t=0;e.forEach((e=>{const a=e.getPath(t,100,52),o=(0,s.pathToPoints)(a.toPathData(5),-.99);t+=e.advanceWidth/1e3*52;const n=(0,i.pointsToPolygons)(o);y.push(...o),x.push(...n)})),O.clear(),y.forEach((e=>e.forEach((e=>{O.set(e,Object.assign({},e))})))),requestAnimationFrame(q)},q=()=>{b.clearRect(0,0,u.width,u.height),y.forEach((e=>e.forEach((e=>{const t=O.get(e);e[0]=t[0]*E+_,e[1]=t[1]*E+F}))));const e=b.getImageData(0,0,u.width,u.height),t=e.data;x.forEach((e=>{e.forEach((e=>{e.e1=(0,c.sub)(e.p2,e.p1),e.e2=(0,c.sub)(e.p3,e.p2),e.e3=(0,c.sub)(e.p1,e.p3),(0,l.rasterise)(e.points,((a,o,n,s)=>{let i=4*(u.width*n+a);if(s)for(let e=a;e<=o;e++,i+=4)t[i]=0,t[i+1]=0,t[i+2]=0,t[i+3]=255;else{const s=n+1;for(let c=a;c<=o;c++,i+=4){const a=(0,p.intersectCellTriangle)(e,{min:[c,n],max:[c+1,s]}),o=(0,h.clamp)((0,r.polygonArea)(a),0,1);t[i]=0,t[i+1]=0,t[i+2]=0,t[i+3]=Math.min(t[i+3]+Math.floor(255*o),255)}}}))}))})),b.putImageData(e,0,0),M.clearRect(0,0,d.width,d.height),M.fillStyle="black",M.font=52*E+"px Timeless Regular",M.fillText(A,_,100*E+F)};o(void 0,void 0,void 0,(function*(){P=yield(0,n.load)("./media/Timeless.ttf"),T()}))},856:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const o=a(887),n=a(345),s=a(669);t.cubicBezierToPoints=(e,t)=>{const a=[o.vec2.clone(e.p1),o.vec2.clone(e.p4)],i=(e,o,r,c,l=!1)=>{const p=(0,n.lerp)(o,r,.5),h=(0,s.lerp2)(e.p2,e.p3,p),u=(0,s.lerp2)((0,s.lerp2)((0,s.lerp2)(e.p1,e.p2,p),h,p),(0,s.lerp2)(h,(0,s.lerp2)(e.p3,e.p4,p),p),p),d=a[c-1],m=a[c];a.splice(c,0,u),((0,s.dot)((0,s.normalize)((0,s.sub)(d,u)),(0,s.normalize)((0,s.sub)(m,u)))>t||l)&&(i(e,p,r,c+1),i(e,o,p,c))};return i(e,0,1,1,!0),a}},395:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const o=a(669),n=a(345),s=a(857);t.intersectCellTriangle=(e,t)=>{const a=[],i=(0,n.timeAtPos)(e.p1[0],e.e1[0],t.min[0]),r=(0,n.timeAtPos)(e.p1[0],e.e1[0],t.max[0]),c=(0,n.timeAtPos)(e.p1[1],e.e1[1],t.min[1]),l=(0,n.timeAtPos)(e.p1[1],e.e1[1],t.max[1]);a.push(...(0,s.sort)(i,r,c,l).map((a=>(0,o.clamp2)((0,o.add)(e.p1,(0,o.scale)(e.e1,a)),t.min,t.max))));const p=(0,n.timeAtPos)(e.p2[0],e.e2[0],t.min[0]),h=(0,n.timeAtPos)(e.p2[0],e.e2[0],t.max[0]),u=(0,n.timeAtPos)(e.p2[1],e.e2[1],t.min[1]),d=(0,n.timeAtPos)(e.p2[1],e.e2[1],t.max[1]);a.push(...(0,s.sort)(p,h,u,d).map((a=>(0,o.clamp2)((0,o.add)(e.p2,(0,o.scale)(e.e2,a)),t.min,t.max))));const m=(0,n.timeAtPos)(e.p3[0],e.e3[0],t.min[0]),v=(0,n.timeAtPos)(e.p3[0],e.e3[0],t.max[0]),f=(0,n.timeAtPos)(e.p3[1],e.e3[1],t.min[1]),g=(0,n.timeAtPos)(e.p3[1],e.e3[1],t.max[1]);return a.push(...(0,s.sort)(m,v,f,g).map((a=>(0,o.clamp2)((0,o.add)(e.p3,(0,o.scale)(e.e3,a)),t.min,t.max)))),a}},705:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pathToPoints=void 0;const o=a(887),n=a(856),s=a(354),i=/(?=[astvzqmhlc])/gi,r=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;t.pathToPoints=(e,t)=>{const a=e.split(i),c=[];if(a.length){let e=[];const i=o.vec2.create();for(;a.length;){const l=a.shift();if(!(null==l?void 0:l.length))continue;const p=l.substring(1).match(r)||[],h=l[0],u=h.toLowerCase(),d=h===u;switch(u){case"l":case"m":for(;p.length;){const t=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&o.vec2.add(t,t,i),e.push(t),o.vec2.copy(i,t)}break;case"h":for(;p.length;){let t=parseFloat(p.shift());d&&(t+=i[0]),e.push(o.vec2.fromValues(t,i[1])),i[0]=t}break;case"v":for(;p.length;){let t=parseFloat(p.shift());d&&(t+=i[1]),e.push(o.vec2.fromValues(i[0],t)),i[1]=t}break;case"z":{const t=e[0];e.push(o.vec2.clone(t)),c.push(e),e=[],o.vec2.zero(i);break}case"c":for(;p.length;){const a=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),s=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),r=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&(o.vec2.add(a,a,i),o.vec2.add(s,s,i),o.vec2.add(r,r,i)),e.push(...(0,n.cubicBezierToPoints)({p1:i,p2:a,p3:s,p4:r},t)),o.vec2.copy(i,r)}break;case"q":for(;p.length;){const a=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),n=o.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&(o.vec2.add(a,a,i),o.vec2.add(n,n,i)),e.push(...(0,s.quadraticBezierToPoints)({p1:i,p2:a,p3:n},t)),o.vec2.copy(i,n)}break;case"s":case"t":case"a":console.log(u+" is not implemented")}}e.length&&c.push(e)}return c}},199:function(e,t,a){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pointsToPolygons=void 0;const n=o(a(187)),s=a(89),i=a(669),r=a(923);t.pointsToPolygons=e=>{const t=e.map((e=>({points:e,aabb:(0,s.aabb)(...e),area:(0,r.polygonAreaSigned)(e),children:[]})));t.sort(((e,t)=>Math.abs(t.area)-Math.abs(e.area)));const a=[];for(let e=0;e<t.length;++e){let o=null;for(let a=e-1;a>=0;--a)if((0,i.inside)(t[a].points,t[e].points[0])&&t[e].area*t[a].area<0){o=t[a];break}o?o.children.push(t[e]):a.push(t[e])}const o=[];let c=[];const l=e=>{const t=[],a=[],o=[];e.points.forEach((e=>{t.push(...e),o.push(e)})),e.children.forEach((e=>{e.children.forEach(l),a.push(t.length/2),e.points.forEach((e=>{t.push(...e),o.push(e)}))}));const s=(0,n.default)(t,a);for(let e=0;e<s.length;e+=3){const t=o[s[e+0]],a=o[s[e+1]],n=o[s[e+2]];c.push({p1:t,p2:a,p3:n,e1:(0,i.sub)(a,t),e2:(0,i.sub)(n,a),e3:(0,i.sub)(t,n),points:[t,a,n],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}};return a.forEach((e=>{l(e),o.push(c),c=[]})),o}},923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=a(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let n=0;n<t;n++)a+=(0,o.determinant2)(e[n],e[n+1]);return a+=(0,o.determinant2)(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs((0,t.polygonAreaSigned)(e))},354:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.quadraticBezierToPoints=void 0;const o=a(887),n=a(345),s=a(669);t.quadraticBezierToPoints=(e,t)=>{const a=[o.vec2.clone(e.p1),o.vec2.clone(e.p3)],i=(e,o,r,c)=>{const l=(0,n.lerp)(o,r,.5),p=(0,s.lerp2)((0,s.lerp2)(e.p1,e.p2,l),(0,s.lerp2)(e.p2,e.p3,l),l),h=a[c-1],u=a[c];a.splice(c,0,p),(0,s.dot)((0,s.normalize)((0,s.sub)(h,p)),(0,s.normalize)((0,s.sub)(u,p)))>t&&(i(e,l,r,c+1),i(e,o,l,c))};return i(e,0,1,1),a}},841:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getLineEquation=void 0;const o=a(669);t.getLineEquation=e=>{const t=(0,o.sub)(e.p2,e.p1),a=t[1]/t[0];return{gradient:a,intersect:e.p1[1]-e.p1[0]*a}}},952:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveLineX=void 0,t.solveLineX=(e,t)=>(t-e.intersect)/e.gradient},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,o)=>a?(0,t.clamp)((o-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inside=t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=a(887),n=a(345);t.clamp2=(e,t,a)=>{const n=o.vec2.clone(e);return o.vec2.min(n,n,a),o.vec2.max(n,n,t),n},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=o.vec2.equals,t.scale=(e,t)=>o.vec2.scale(o.vec2.create(),e,t),t.multiply=(e,t)=>o.vec2.multiply(o.vec2.create(),e,t),t.divide=(e,t)=>o.vec2.divide(o.vec2.create(),e,t),t.add=(e,t)=>o.vec2.add(o.vec2.create(),e,t),t.adds=(e,t)=>o.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>o.vec2.sub(o.vec2.create(),e,t),t.floor=e=>o.vec2.floor(o.vec2.create(),e),t.ceil=e=>o.vec2.ceil(o.vec2.create(),e),t.abs=e=>o.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>o.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>o.vec2.dot(e,t),t.length=e=>o.vec2.length(e),t.normalize=e=>(0,t.scale)(e,1/(0,t.length)(e)),t.lerp2=(e,t,a)=>o.vec2.lerp(o.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.min(n,n,e)})),n},t.max2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.max(n,n,e)})),n},t.avg=(...e)=>{const t=o.vec2.create();return e.length&&(e.forEach((e=>{o.vec2.add(t,t,e)})),o.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1]),t.inside=(e,t)=>{let a=0,o=e[e.length-1];return e.forEach((e=>{const s=o[1]<e[1]?o:e,i=o[1]<e[1]?e:o;s[1]<t[1]+n.EPSILON&&i[1]>t[1]+n.EPSILON&&(i[0]-s[0])*(t[1]-s[1])>(t[0]-s[0])*(i[1]-s[1])&&(a+=1),o=e})),a%2!=0}},857:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,a,o)=>{const n=Math.min(e,t),s=Math.max(e,t),i=Math.min(a,o),r=Math.max(a,o),c=Math.max(n,Math.min(s,i)),l=Math.min(r,Math.max(s,i));return[Math.min(n,i),Math.min(c,l),Math.max(c,l),Math.max(s,r)]}},916:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rasterise=void 0;const o=a(345),n=a(952),s=a(669),i=a(841),r=e=>{let t,a;return e.p1[1]<e.p2[1]?(t=e.p1,a=e.p2):e.p1[1]>e.p2[1]?(t=e.p2,a=e.p1):e.p1[0]<e.p2[0]?(t=e.p1,a=e.p2):(t=e.p2,a=e.p1),{pStart:t,pEnd:a,xRange:[Math.min(e.p1[0],e.p2[0]),Math.max(e.p1[0],e.p2[0])],equation:(0,i.getLineEquation)(e)}};t.rasterise=(e,t)=>{const a=[{p1:e[0],p2:e[1]},{p1:e[1],p2:e[2]},{p1:e[2],p2:e[0]}],i=(0,s.min2)(...e),c=(0,s.max2)(...e),l=[r(a[0]),r(a[1]),r(a[2])];let p=Math.floor(i[1]);const h=Math.ceil(c[1]);if(h-p<1)t(Math.floor(i[0]),Math.floor(c[0]),p,!1);else for(let e=p+1;e<=h;e++){const a=[-1,-1,-1,-1];for(let t=0;t<3;t++){const s=l[t];if(s.pEnd[1]>=p&&s.pStart[1]<=e){let t=(0,n.solveLineX)(s.equation,p);t=isFinite(t)?(0,o.clamp)(t,s.xRange[0],s.xRange[1]):s.pStart[0],t=Math.floor(t);let i=(0,n.solveLineX)(s.equation,e);i=isFinite(i)?(0,o.clamp)(i,s.xRange[0],s.xRange[1]):s.pEnd[0],i=Math.floor(i);const r=[Math.min(t,i),Math.max(t,i)];a[0]<0?(a[0]=r[0],a[1]=r[1]):r[0]<=a[1]+1&&r[0]>=a[0]-1||r[1]<=a[1]+1&&r[1]>=a[0]-1?(a[0]=Math.min(a[0],r[0]),a[1]=Math.max(a[1],r[1])):a[2]<0?r[0]>a[1]?(a[2]=r[0],a[3]=r[1]):(a[2]=a[0],a[3]=a[1],a[0]=r[0],a[1]=r[1]):(a[2]=Math.min(a[2],r[0]),a[3]=Math.max(a[3],r[1]))}}a[2]>a[1]?(t(a[0],a[1],p,!1),t(a[1]+1,a[2]-1,p,!0),t(a[2],a[3],p,!1)):t(a[0],Math.max(a[1],a[3]),p,!1),p=e}}}},e=>{e(e.s=737)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,