(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[504],{89:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0;const n=o(669);t.aabb=(...e)=>({min:n.min2(...e),max:n.max2(...e)})},462:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabbContains=void 0,t.aabbContains=(e,t)=>e.min[0]<=t.min[0]&&e.min[1]<=t.min[1]&&e.max[0]>=t.max[0]&&e.max[1]>=t.max[1]},922:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabbIntersect=void 0,t.aabbIntersect=(e,t)=>t.min[0]<=e.max[0]&&t.max[0]>=e.min[0]&&t.min[1]<=e.max[1]&&t.max[1]>=e.min[1]},955:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.combineAabbs=void 0;const n=o(669);t.combineAabbs=e=>{if(!e.length)return;const t=e[0],o={min:t.min,max:t.max};for(let t=1;t<e.length;t++){const a=e[t];o.min=n.min2(o.min,a.min),o.max=n.max2(o.max,a.max)}return o}},438:function(e,t,o){"use strict";var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(a,s){function c(e){try{r(n.next(e))}catch(e){s(e)}}function i(e){try{r(n.throw(e))}catch(e){s(e)}}function r(e){var t;e.done?a(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(c,i)}r((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const a=o(422),s=o(887),c=o(705),i=o(199),r=o(717),l=document.getElementById("game"),u=document.getElementById("charSelect"),p=document.getElementById("svgPreview"),h=l.getContext("2d");if(!h)throw new Error("Could not get canvas graphics :(");h.imageSmoothingEnabled=!1;const d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");let m,v=[],f=[];const b=e=>{const t=m.charToGlyph(e).getPath(0,0,1e3);((e,t)=>{const o=s.vec2.fromValues(Math.round(t.x2-t.x1),Math.round(t.y2-t.y1));p.innerHTML="";const n="http://www.w3.org/2000/svg",a=document.createElementNS(n,"svg");a.setAttributeNS(null,"width",o[0].toString()),a.setAttributeNS(null,"height",o[1].toString()),a.setAttributeNS(null,"viewBox",[t.x1,t.y1,o[0],o[1]].join(" "));const r=document.createElementNS(n,"path");r.setAttributeNS(null,"d",e),a.appendChild(r),p.appendChild(a),v=c.pathToPoints(e,-.99),f=i.pointsToPolygons(v),v.forEach((e=>e.forEach((e=>{e[0]-=t.x1,e[1]=l.height-e[1]+t.y1}))))})(t.toPathData(5),t.getBoundingBox())},g=()=>{h.clearRect(0,0,l.width,l.height),h.fillStyle="black",h.beginPath(),v.forEach((e=>{r.plotLines(h,e)})),h.stroke(),h.fillStyle="black",f.forEach((e=>{e.forEach((e=>{h.beginPath(),r.plotLines(h,e.points),h.fill()}))})),requestAnimationFrame(g)};n(void 0,void 0,void 0,(function*(){m=yield a.load("./media/Timeless.ttf"),u.innerHTML="",d.forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,u.appendChild(t)})),u.addEventListener("change",(()=>{""!==u.value?b(u.value):(v=[],f=[],p.innerHTML="")})),b("A"),requestAnimationFrame(g)}))},856:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const n=o(887),a=o(345),s=o(669);t.cubicBezierToPoints=(e,t)=>{const o=[n.vec2.clone(e.p1),n.vec2.clone(e.p4)],c=(e,n,i,r,l=!1)=>{const u=a.lerp(n,i,.5),p=s.lerp2(e.p2,e.p3,u),h=s.lerp2(s.lerp2(s.lerp2(e.p1,e.p2,u),p,u),s.lerp2(p,s.lerp2(e.p3,e.p4,u),u),u),d=o[r-1],m=o[r];o.splice(r,0,h),(s.dot(s.normalize(s.sub(d,h)),s.normalize(s.sub(m,h)))>t||l)&&(c(e,u,i,r+1),c(e,n,u,r))};return c(e,0,1,1,!0),o}},705:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pathToPoints=void 0;const n=o(887),a=o(856),s=o(354),c=/(?=[astvzqmhlc])/gi,i=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;t.pathToPoints=(e,t)=>{const o=e.split(c),r=[];if(o.length){let e=[];const c=n.vec2.create();for(;o.length;){const l=o.shift();if(!(null==l?void 0:l.length))continue;const u=l.substring(1).match(i)||[],p=l[0],h=p.toLowerCase(),d=p===h;switch(h){case"l":case"m":for(;u.length;){const t=n.vec2.fromValues(parseFloat(u.shift()),parseFloat(u.shift()));d&&n.vec2.add(t,t,c),e.push(t),n.vec2.copy(c,t)}break;case"h":for(;u.length;){let t=parseFloat(u.shift());d&&(t+=c[0]),e.push(n.vec2.fromValues(t,c[1])),c[0]=t}break;case"v":for(;u.length;){let t=parseFloat(u.shift());d&&(t+=c[1]),e.push(n.vec2.fromValues(c[0],t)),c[1]=t}break;case"z":const o=e[0];e.push(n.vec2.clone(o)),r.push(e),e=[],n.vec2.zero(c);break;case"c":for(;u.length;){const o=n.vec2.fromValues(parseFloat(u.shift()),parseFloat(u.shift())),s=n.vec2.fromValues(parseFloat(u.shift()),parseFloat(u.shift())),i=n.vec2.fromValues(parseFloat(u.shift()),parseFloat(u.shift()));d&&(n.vec2.add(o,o,c),n.vec2.add(s,s,c),n.vec2.add(i,i,c)),e.push(...a.cubicBezierToPoints({p1:c,p2:o,p3:s,p4:i},t)),n.vec2.copy(c,i)}break;case"q":for(;u.length;){const o=n.vec2.fromValues(parseFloat(u.shift()),parseFloat(u.shift())),a=n.vec2.fromValues(parseFloat(u.shift()),parseFloat(u.shift()));d&&(n.vec2.add(o,o,c),n.vec2.add(a,a,c)),e.push(...s.quadraticBezierToPoints({p1:c,p2:o,p3:a},t)),n.vec2.copy(c,a)}break;case"s":case"t":case"a":console.log(h+" is not implemented")}}e.length&&r.push(e)}return r}},199:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pointsToPolygons=void 0;const a=n(o(187)),s=o(89),c=o(462),i=o(922),r=o(955),l=o(669),u=o(923);t.pointsToPolygons=e=>{let t=[],o=[];if(e.forEach((e=>{const n={points:e,aabb:s.aabb(...e)};u.polygonAreaSigned(e)>0?t.push(n):o.push(n)})),t.length){if(o.length){const e=r.combineAabbs(t.map((e=>e.aabb))),n=r.combineAabbs(o.map((e=>e.aabb)));if(c.aabbContains(n,e)){const e=o;o=t,t=e}}}else{const e=o;o=t,t=e}const n=[];return t.length?(t.forEach((e=>{const t=[],s=[],c=[];c.push(...e.points),e.points.map((e=>{t.push(e[0]),t.push(e[1])})),o.filter((t=>i.aabbIntersect(t.aabb,e.aabb))).forEach((e=>{c.push(...e.points),s.push(t.length/2),e.points.forEach((e=>{t.push(e[0]),t.push(e[1])}))}));const r=a.default(t,s),u=[];for(let e=0;e<r.length;e+=3){let t=c[r[e]];const o=c[r[e+1]];let n=c[r[e+2]];u.push({p1:t,p2:o,p3:n,e1:l.sub(o,t),e2:l.sub(n,o),e3:l.sub(t,n),points:[t,o,n],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}u.length&&n.push(u)})),n):n}},923:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=o(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let o=0;for(let a=0;a<t;a++)o+=n.determinant2(e[a],e[a+1]);return o+=n.determinant2(e[t],e[0]),o/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},354:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.quadraticBezierToPoints=void 0;const n=o(887),a=o(345),s=o(669);t.quadraticBezierToPoints=(e,t)=>{const o=[n.vec2.clone(e.p1),n.vec2.clone(e.p3)],c=(e,n,i,r)=>{const l=a.lerp(n,i,.5),u=s.lerp2(s.lerp2(e.p1,e.p2,l),s.lerp2(e.p2,e.p3,l),l),p=o[r-1],h=o[r];o.splice(r,0,u),s.dot(s.normalize(s.sub(p,u)),s.normalize(s.sub(h,u)))>t&&(c(e,l,i,r+1),c(e,n,l,r))};return c(e,0,1,1),o}},345:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,o)=>Math.max(Math.min(e,o),t),t.timeAtPos=(e,o,n)=>o?t.clamp((n-e)/o,0,1):0,t.lerp=(e,t,o)=>e*(1-o)+t*o},669:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const n=o(887);t.clamp2=(e,t,o)=>{const a=n.vec2.clone(e);return n.vec2.min(a,a,o),n.vec2.max(a,a,t),a},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=n.vec2.equals,t.scale=(e,t)=>n.vec2.scale(n.vec2.create(),e,t),t.multiply=(e,t)=>n.vec2.multiply(n.vec2.create(),e,t),t.divide=(e,t)=>n.vec2.divide(n.vec2.create(),e,t),t.add=(e,t)=>n.vec2.add(n.vec2.create(),e,t),t.adds=(e,t)=>n.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>n.vec2.sub(n.vec2.create(),e,t),t.floor=e=>n.vec2.floor(n.vec2.create(),e),t.ceil=e=>n.vec2.ceil(n.vec2.create(),e),t.abs=e=>n.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>n.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>n.vec2.dot(e,t),t.length=e=>n.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,o)=>n.vec2.lerp(n.vec2.create(),e,t,o),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...o]=e,a=n.vec2.clone(t);return o.forEach((e=>{n.vec2.min(a,a,e)})),a},t.max2=(...e)=>{const[t,...o]=e,a=n.vec2.clone(t);return o.forEach((e=>{n.vec2.max(a,a,e)})),a},t.avg=(...e)=>{const t=n.vec2.create();return e.length&&(e.forEach((e=>{n.vec2.add(t,t,e)})),n.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,o)=>!(e[0]>o[0]||e[0]<t[0]||e[1]>o[1]||e[1]<t[1])},717:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.plotLines=void 0,t.plotLines=(e,t)=>{const o=t[0];e.moveTo(o[0],e.canvas.height-o[1]);for(let o=0;o<t.length;o++){const n=t[o];e.lineTo(n[0],e.canvas.height-n[1])}}}},e=>{"use strict";e(e.s=438)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,