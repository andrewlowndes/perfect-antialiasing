"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[504],{89:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0;const n=o(669);t.aabb=(...e)=>({min:(0,n.min2)(...e),max:(0,n.max2)(...e)})},438:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(a,c){function r(e){try{l(n.next(e))}catch(e){c(e)}}function s(e){try{l(n.throw(e))}catch(e){c(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}l((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const a=o(422),c=o(887),r=o(705),s=o(199),l=o(717),i=document.getElementById("game"),p=document.getElementById("charSelect"),u=document.getElementById("svgPreview"),h=document.getElementById("num_triangles"),d=i.getContext("2d");if(!d)throw new Error("Could not get canvas graphics :(");d.imageSmoothingEnabled=!1;const v="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");let f,m=[],g=[];const b=e=>{const t=f.charToGlyph(e).getPath(0,0,1e3);((e,t)=>{const o=c.vec2.fromValues(Math.round(t.x2-t.x1),Math.round(t.y2-t.y1));u.innerHTML="";const n="http://www.w3.org/2000/svg",a=document.createElementNS(n,"svg");a.setAttributeNS(null,"width",o[0].toString()),a.setAttributeNS(null,"height",o[1].toString()),a.setAttributeNS(null,"viewBox",[t.x1,t.y1,o[0],o[1]].join(" "));const l=document.createElementNS(n,"path");l.setAttributeNS(null,"d",e),a.appendChild(l),u.appendChild(a),m=(0,r.pathToPoints)(e,-.99),g=(0,s.pointsToPolygons)(m),m.forEach((e=>e.forEach((e=>{e[0]-=t.x1,e[1]=i.height-e[1]+t.y1}))))})(t.toPathData(5),t.getBoundingBox())},y=()=>{d.clearRect(0,0,i.width,i.height),d.fillStyle="black",d.beginPath(),m.forEach((e=>{(0,l.plotLines)(d,e)})),d.stroke();let e=0;d.fillStyle="black",g.forEach((t=>{t.forEach((t=>{d.beginPath(),(0,l.plotLines)(d,t.points),d.fill(),e++}))})),h.textContent=`Num triangles: ${e}`,requestAnimationFrame(y)};n(void 0,void 0,void 0,(function*(){f=yield(0,a.load)("./media/Timeless.ttf"),p.innerHTML="",v.forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,p.appendChild(t)})),p.addEventListener("change",(()=>{""!==p.value?b(p.value):(m=[],g=[],u.innerHTML="")})),b("A"),requestAnimationFrame(y)}))},856:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const n=o(887),a=o(345),c=o(669);t.cubicBezierToPoints=(e,t)=>{const o=[n.vec2.clone(e.p1),n.vec2.clone(e.p4)],r=(e,n,s,l,i=!1)=>{const p=(0,a.lerp)(n,s,.5),u=(0,c.lerp2)(e.p2,e.p3,p),h=(0,c.lerp2)((0,c.lerp2)((0,c.lerp2)(e.p1,e.p2,p),u,p),(0,c.lerp2)(u,(0,c.lerp2)(e.p3,e.p4,p),p),p),d=o[l-1],v=o[l];o.splice(l,0,h),((0,c.dot)((0,c.normalize)((0,c.sub)(d,h)),(0,c.normalize)((0,c.sub)(v,h)))>t||i)&&(r(e,p,s,l+1),r(e,n,p,l))};return r(e,0,1,1,!0),o}},705:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pathToPoints=void 0;const n=o(887),a=o(856),c=o(354),r=/(?=[astvzqmhlc])/gi,s=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;t.pathToPoints=(e,t)=>{const o=e.split(r),l=[];if(o.length){let e=[];const r=n.vec2.create();for(;o.length;){const i=o.shift();if(!(null==i?void 0:i.length))continue;const p=i.substring(1).match(s)||[],u=i[0],h=u.toLowerCase(),d=u===h;switch(h){case"l":case"m":for(;p.length;){const t=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&n.vec2.add(t,t,r),e.push(t),n.vec2.copy(r,t)}break;case"h":for(;p.length;){let t=parseFloat(p.shift());d&&(t+=r[0]),e.push(n.vec2.fromValues(t,r[1])),r[0]=t}break;case"v":for(;p.length;){let t=parseFloat(p.shift());d&&(t+=r[1]),e.push(n.vec2.fromValues(r[0],t)),r[1]=t}break;case"z":{const t=e[0];e.push(n.vec2.clone(t)),l.push(e),e=[],n.vec2.zero(r);break}case"c":for(;p.length;){const o=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),c=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),s=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&(n.vec2.add(o,o,r),n.vec2.add(c,c,r),n.vec2.add(s,s,r)),e.push(...(0,a.cubicBezierToPoints)({p1:r,p2:o,p3:c,p4:s},t)),n.vec2.copy(r,s)}break;case"q":for(;p.length;){const o=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),a=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&(n.vec2.add(o,o,r),n.vec2.add(a,a,r)),e.push(...(0,c.quadraticBezierToPoints)({p1:r,p2:o,p3:a},t)),n.vec2.copy(r,a)}break;case"s":case"t":case"a":console.log(h+" is not implemented")}}e.length&&l.push(e)}return l}},199:function(e,t,o){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pointsToPolygons=void 0;const a=n(o(187)),c=o(89),r=o(669),s=o(923);t.pointsToPolygons=e=>{const t=e.map((e=>({points:e,aabb:(0,c.aabb)(...e),area:(0,s.polygonAreaSigned)(e),children:[]})));t.sort(((e,t)=>Math.abs(t.area)-Math.abs(e.area)));const o=[];for(let e=0;e<t.length;++e){let n=null;for(let o=e-1;o>=0;--o)if((0,r.inside)(t[o].points,t[e].points[0])&&t[e].area*t[o].area<0){n=t[o];break}n?n.children.push(t[e]):o.push(t[e])}const n=[];let l=[];const i=e=>{const t=[],o=[],n=[];e.points.forEach((e=>{t.push(...e),n.push(e)})),e.children.forEach((e=>{e.children.forEach(i),o.push(t.length/2),e.points.forEach((e=>{t.push(...e),n.push(e)}))}));const c=(0,a.default)(t,o);for(let e=0;e<c.length;e+=3){const t=n[c[e+0]],o=n[c[e+1]],a=n[c[e+2]];l.push({p1:t,p2:o,p3:a,e1:(0,r.sub)(o,t),e2:(0,r.sub)(a,o),e3:(0,r.sub)(t,a),points:[t,o,a],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}};return o.forEach((e=>{i(e),n.push(l),l=[]})),n}},923:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=o(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let o=0;for(let a=0;a<t;a++)o+=(0,n.determinant2)(e[a],e[a+1]);return o+=(0,n.determinant2)(e[t],e[0]),o/2},t.polygonArea=e=>Math.abs((0,t.polygonAreaSigned)(e))},354:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.quadraticBezierToPoints=void 0;const n=o(887),a=o(345),c=o(669);t.quadraticBezierToPoints=(e,t)=>{const o=[n.vec2.clone(e.p1),n.vec2.clone(e.p3)],r=(e,n,s,l)=>{const i=(0,a.lerp)(n,s,.5),p=(0,c.lerp2)((0,c.lerp2)(e.p1,e.p2,i),(0,c.lerp2)(e.p2,e.p3,i),i),u=o[l-1],h=o[l];o.splice(l,0,p),(0,c.dot)((0,c.normalize)((0,c.sub)(u,p)),(0,c.normalize)((0,c.sub)(h,p)))>t&&(r(e,i,s,l+1),r(e,n,i,l))};return r(e,0,1,1),o}},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,o)=>Math.max(Math.min(e,o),t),t.timeAtPos=(e,o,n)=>o?(0,t.clamp)((n-e)/o,0,1):0,t.lerp=(e,t,o)=>e*(1-o)+t*o},669:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inside=t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const n=o(887),a=o(345);t.clamp2=(e,t,o)=>{const a=n.vec2.clone(e);return n.vec2.min(a,a,o),n.vec2.max(a,a,t),a},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=n.vec2.equals,t.scale=(e,t)=>n.vec2.scale(n.vec2.create(),e,t),t.multiply=(e,t)=>n.vec2.multiply(n.vec2.create(),e,t),t.divide=(e,t)=>n.vec2.divide(n.vec2.create(),e,t),t.add=(e,t)=>n.vec2.add(n.vec2.create(),e,t),t.adds=(e,t)=>n.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>n.vec2.sub(n.vec2.create(),e,t),t.floor=e=>n.vec2.floor(n.vec2.create(),e),t.ceil=e=>n.vec2.ceil(n.vec2.create(),e),t.abs=e=>n.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>n.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>n.vec2.dot(e,t),t.length=e=>n.vec2.length(e),t.normalize=e=>(0,t.scale)(e,1/(0,t.length)(e)),t.lerp2=(e,t,o)=>n.vec2.lerp(n.vec2.create(),e,t,o),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...o]=e,a=n.vec2.clone(t);return o.forEach((e=>{n.vec2.min(a,a,e)})),a},t.max2=(...e)=>{const[t,...o]=e,a=n.vec2.clone(t);return o.forEach((e=>{n.vec2.max(a,a,e)})),a},t.avg=(...e)=>{const t=n.vec2.create();return e.length&&(e.forEach((e=>{n.vec2.add(t,t,e)})),n.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,o)=>!(e[0]>o[0]||e[0]<t[0]||e[1]>o[1]||e[1]<t[1]),t.inside=(e,t)=>{let o=0,n=e[e.length-1];return e.forEach((e=>{const c=n[1]<e[1]?n:e,r=n[1]<e[1]?e:n;c[1]<t[1]+a.EPSILON&&r[1]>t[1]+a.EPSILON&&(r[0]-c[0])*(t[1]-c[1])>(t[0]-c[0])*(r[1]-c[1])&&(o+=1),n=e})),o%2!=0}},717:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.plotLines=void 0,t.plotLines=(e,t)=>{const o=t[0];e.moveTo(o[0],e.canvas.height-o[1]);for(let o=0;o<t.length;o++){const n=t[o];e.lineTo(n[0],e.canvas.height-n[1])}}}},e=>{e(e.s=438)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,