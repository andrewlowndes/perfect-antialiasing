"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[504],{89:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0;const n=o(669);t.aabb=(...e)=>({min:(0,n.min2)(...e),max:(0,n.max2)(...e)})},438:function(e,t,o){var n=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))((function(a,c){function r(e){try{l(n.next(e))}catch(e){c(e)}}function s(e){try{l(n.throw(e))}catch(e){c(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(r,s)}l((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const a=o(422),c=o(887),r=o(705),s=o(199),l=o(717),i=document.getElementById("game"),p=document.getElementById("charSelect"),u=document.getElementById("svgPreview"),h=document.getElementById("num_triangles"),d=i.getContext("2d");if(!d)throw new Error("Could not get canvas graphics :(");d.imageSmoothingEnabled=!1;const v="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");let f,m=[],g=[];const b=e=>{const t=f.charToGlyph(e).getPath(0,0,1e3);((e,t)=>{const o=c.vec2.fromValues(Math.round(t.x2-t.x1),Math.round(t.y2-t.y1));u.innerHTML="";const n="http://www.w3.org/2000/svg",a=document.createElementNS(n,"svg");a.setAttributeNS(null,"width",o[0].toString()),a.setAttributeNS(null,"height",o[1].toString()),a.setAttributeNS(null,"viewBox",[t.x1,t.y1,o[0],o[1]].join(" "));const l=document.createElementNS(n,"path");l.setAttributeNS(null,"d",e),a.appendChild(l),u.appendChild(a),m=(0,r.pathToPoints)(e,-.99),g=(0,s.pointsToPolygons)(m),m.forEach((e=>e.forEach((e=>{e[0]-=t.x1,e[1]=i.height-e[1]+t.y1}))))})(t.toPathData(5),t.getBoundingBox())},y=()=>{d.clearRect(0,0,i.width,i.height),d.fillStyle="black",d.beginPath(),m.forEach((e=>{(0,l.plotLines)(d,e)})),d.stroke();let e=0;d.fillStyle="black",g.forEach((t=>{t.forEach((t=>{d.beginPath(),(0,l.plotLines)(d,t.points),d.fill(),e++}))})),h.textContent=`Num triangles: ${e}`,requestAnimationFrame(y)};n(void 0,void 0,void 0,(function*(){f=yield(0,a.load)("./media/Timeless.ttf"),p.innerHTML="",v.forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,p.appendChild(t)})),p.addEventListener("change",(()=>{""!==p.value?b(p.value):(m=[],g=[],u.innerHTML="")})),b("A"),requestAnimationFrame(y)}))},856:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const n=o(887),a=o(345),c=o(669);t.cubicBezierToPoints=(e,t)=>{const o=[n.vec2.clone(e.p1),n.vec2.clone(e.p4)],r=(e,n,s,l,i=!1)=>{const p=(0,a.lerp)(n,s,.5),u=(0,c.lerp2)(e.p2,e.p3,p),h=(0,c.lerp2)((0,c.lerp2)((0,c.lerp2)(e.p1,e.p2,p),u,p),(0,c.lerp2)(u,(0,c.lerp2)(e.p3,e.p4,p),p),p),d=o[l-1],v=o[l];o.splice(l,0,h),((0,c.dot)((0,c.normalize)((0,c.sub)(d,h)),(0,c.normalize)((0,c.sub)(v,h)))>t||i)&&(r(e,p,s,l+1),r(e,n,p,l))};return r(e,0,1,1,!0),o}},705:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pathToPoints=void 0;const n=o(887),a=o(856),c=o(354),r=/(?=[astvzqmhlc])/gi,s=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;t.pathToPoints=(e,t)=>{const o=e.split(r),l=[];if(o.length){let e=[];const r=n.vec2.create();for(;o.length;){const i=o.shift();if(!(null==i?void 0:i.length))continue;const p=i.substring(1).match(s)||[],u=i[0],h=u.toLowerCase(),d=u===h;switch(h){case"l":case"m":for(;p.length;){const t=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&n.vec2.add(t,t,r),e.push(t),n.vec2.copy(r,t)}break;case"h":for(;p.length;){let t=parseFloat(p.shift());d&&(t+=r[0]),e.push(n.vec2.fromValues(t,r[1])),r[0]=t}break;case"v":for(;p.length;){let t=parseFloat(p.shift());d&&(t+=r[1]),e.push(n.vec2.fromValues(r[0],t)),r[1]=t}break;case"z":{const t=e[0];e.push(n.vec2.clone(t)),l.push(e),e=[],n.vec2.zero(r);break}case"c":for(;p.length;){const o=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),c=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),s=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&(n.vec2.add(o,o,r),n.vec2.add(c,c,r),n.vec2.add(s,s,r)),e.push(...(0,a.cubicBezierToPoints)({p1:r,p2:o,p3:c,p4:s},t)),n.vec2.copy(r,s)}break;case"q":for(;p.length;){const o=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift())),a=n.vec2.fromValues(parseFloat(p.shift()),parseFloat(p.shift()));d&&(n.vec2.add(o,o,r),n.vec2.add(a,a,r)),e.push(...(0,c.quadraticBezierToPoints)({p1:r,p2:o,p3:a},t)),n.vec2.copy(r,a)}break;case"s":case"t":case"a":console.log(h+" is not implemented")}}e.length&&l.push(e)}return l}},199:function(e,t,o){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pointsToPolygons=void 0;const a=n(o(187)),c=o(89),r=o(669),s=o(923);t.pointsToPolygons=e=>{const t=e.map((e=>({points:e,aabb:(0,c.aabb)(...e),area:(0,s.polygonAreaSigned)(e),children:[]})));t.sort(((e,t)=>Math.abs(t.area)-Math.abs(e.area)));const o=[];for(let e=0;e<t.length;++e){let n=null;for(let o=e-1;o>=0;--o)if((0,r.inside)(t[o].points,t[e].points[0])&&t[e].area*t[o].area<0){n=t[o];break}n?n.children.push(t[e]):o.push(t[e])}const n=[];let l=[];const i=e=>{const t=[],o=[],n=[];e.points.forEach((e=>{t.push(...e),n.push(e)})),e.children.forEach((e=>{e.children.forEach(i),o.push(t.length/2),e.points.forEach((e=>{t.push(...e),n.push(e)}))}));const c=(0,a.default)(t,o);for(let e=0;e<c.length;e+=3){const t=n[c[e+0]],o=n[c[e+1]],a=n[c[e+2]];l.push({p1:t,p2:o,p3:a,e1:(0,r.sub)(o,t),e2:(0,r.sub)(a,o),e3:(0,r.sub)(t,a),points:[t,o,a],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}};return o.forEach((e=>{i(e),n.push(l),l=[]})),n}},923:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=o(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let o=0;for(let a=0;a<t;a++)o+=(0,n.determinant2)(e[a],e[a+1]);return o+=(0,n.determinant2)(e[t],e[0]),o/2},t.polygonArea=e=>Math.abs((0,t.polygonAreaSigned)(e))},354:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.quadraticBezierToPoints=void 0;const n=o(887),a=o(345),c=o(669);t.quadraticBezierToPoints=(e,t)=>{const o=[n.vec2.clone(e.p1),n.vec2.clone(e.p3)],r=(e,n,s,l)=>{const i=(0,a.lerp)(n,s,.5),p=(0,c.lerp2)((0,c.lerp2)(e.p1,e.p2,i),(0,c.lerp2)(e.p2,e.p3,i),i),u=o[l-1],h=o[l];o.splice(l,0,p),(0,c.dot)((0,c.normalize)((0,c.sub)(u,p)),(0,c.normalize)((0,c.sub)(h,p)))>t&&(r(e,i,s,l+1),r(e,n,i,l))};return r(e,0,1,1),o}},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,o)=>Math.max(Math.min(e,o),t),t.timeAtPos=(e,o,n)=>o?(0,t.clamp)((n-e)/o,0,1):0,t.lerp=(e,t,o)=>e*(1-o)+t*o},669:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inside=t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const n=o(887),a=o(345);t.clamp2=(e,t,o)=>{const a=n.vec2.clone(e);return n.vec2.min(a,a,o),n.vec2.max(a,a,t),a},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=n.vec2.equals,t.scale=(e,t)=>n.vec2.scale(n.vec2.create(),e,t),t.multiply=(e,t)=>n.vec2.multiply(n.vec2.create(),e,t),t.divide=(e,t)=>n.vec2.divide(n.vec2.create(),e,t),t.add=(e,t)=>n.vec2.add(n.vec2.create(),e,t),t.adds=(e,t)=>n.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>n.vec2.sub(n.vec2.create(),e,t),t.floor=e=>n.vec2.floor(n.vec2.create(),e),t.ceil=e=>n.vec2.ceil(n.vec2.create(),e),t.abs=e=>n.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>n.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>n.vec2.dot(e,t),t.length=e=>n.vec2.length(e),t.normalize=e=>(0,t.scale)(e,1/(0,t.length)(e)),t.lerp2=(e,t,o)=>n.vec2.lerp(n.vec2.create(),e,t,o),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...o]=e,a=n.vec2.clone(t);return o.forEach((e=>{n.vec2.min(a,a,e)})),a},t.max2=(...e)=>{const[t,...o]=e,a=n.vec2.clone(t);return o.forEach((e=>{n.vec2.max(a,a,e)})),a},t.avg=(...e)=>{const t=n.vec2.create();return e.length&&(e.forEach((e=>{n.vec2.add(t,t,e)})),n.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,o)=>!(e[0]>o[0]||e[0]<t[0]||e[1]>o[1]||e[1]<t[1]),t.inside=(e,t)=>{let o=0,n=e[e.length-1];return e.forEach((e=>{const c=n[1]<e[1]?n:e,r=n[1]<e[1]?e:n;c[1]<t[1]+a.EPSILON&&r[1]>t[1]+a.EPSILON&&(r[0]-c[0])*(t[1]-c[1])>(t[0]-c[0])*(r[1]-c[1])&&(o+=1),n=e})),o%2!=0}},717:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.plotLines=void 0,t.plotLines=(e,t)=>{const o=t[0];e.moveTo(o[0],e.canvas.height-o[1]);for(let o=0;o<t.length;o++){const n=t[o];e.lineTo(n[0],e.canvas.height-n[1])}}}},e=>{e(e.s=438)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxFQUFHLEdBQUtsRyxFQUFJLElBQU1rRyxFQUFHLEdBQUtoRyxFQUFJLElBQU1nRyxFQUFHLEdBQUtsRyxFQUFJLElBa0IvRUwsRUFBUThLLE9BZk8sQ0FBQzFLLEVBQVEwTixLQUNwQixJQUFJQyxFQUFRLEVBQ1JDLEVBQU01TixFQUFPQSxFQUFPMkgsT0FBUyxHQVdqQyxPQVZBM0gsRUFBT3FFLFNBQVNyRCxJQUNaLE1BQU02TSxFQUFLRCxFQUFJLEdBQUs1TSxFQUFLLEdBQUs0TSxFQUFNNU0sRUFDOUJtRixFQUFLeUgsRUFBSSxHQUFLNU0sRUFBSyxHQUFLQSxFQUFPNE0sRUFDakNDLEVBQUcsR0FBS0gsRUFBRSxHQUFLM0gsRUFBU29HLFNBQVdoRyxFQUFHLEdBQUt1SCxFQUFFLEdBQUszSCxFQUFTb0csVUFDdERoRyxFQUFHLEdBQUswSCxFQUFHLEtBQU9ILEVBQUUsR0FBS0csRUFBRyxLQUFPSCxFQUFFLEdBQUtHLEVBQUcsS0FBTzFILEVBQUcsR0FBSzBILEVBQUcsTUFDaEVGLEdBQVMsR0FHakJDLEVBQU01TSxLQUVIMk0sRUFBUSxHQUFNLEksWUMvRnpCak8sT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdERELEVBQVFxRixlQUFZLEVBU3BCckYsRUFBUXFGLFVBUlUsQ0FBQy9DLEVBQUdsQyxLQUNsQixNQUFNOEksRUFBYTlJLEVBQU8sR0FDMUJrQyxFQUFFNEwsT0FBT2hGLEVBQVcsR0FBSTVHLEVBQUU2TCxPQUFPeEosT0FBU3VFLEVBQVcsSUFDckQsSUFBSyxJQUFJeUIsRUFBSSxFQUFHQSxFQUFJdkssRUFBTzJILE9BQVE0QyxJQUFLLENBQ3BDLE1BQU1qRyxFQUFRdEUsRUFBT3VLLEdBQ3JCckksRUFBRThMLE9BQU8xSixFQUFNLEdBQUlwQyxFQUFFNkwsT0FBT3hKLE9BQVNELEVBQU0sUSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9hYWJiL2FhYmIudHMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL2RlbW9zL3BhdGhUb1BvbHlnb24udHMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL2dlb21ldHJ5L2N1YmljQmV6aWVyVG9Qb2ludHMudHMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL2dlb21ldHJ5L3BhdGhUb1BvaW50cy50cyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvZ2VvbWV0cnkvcG9pbnRzVG9Qb2x5Z29uLnRzIiwid2VicGFjazovL3N1YnBpeGVsLXJlbmRlcmluZy8uL3NyYy9nZW9tZXRyeS9wb2x5Z29uQXJlYS50cyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvZ2VvbWV0cnkvcXVhZHJhdGljQmV6aWVyVG9Qb2ludHMudHMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL21hdGhzL2NvbW1vbi50cyIsIndlYnBhY2s6Ly9zdWJwaXhlbC1yZW5kZXJpbmcvLi9zcmMvbWF0aHMvcG9pbnQudHMiLCJ3ZWJwYWNrOi8vc3VicGl4ZWwtcmVuZGVyaW5nLy4vc3JjL3JlbmRlci9wbG90TGluZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hYWJiID0gdm9pZCAwO1xyXG5jb25zdCBwb2ludF8xID0gcmVxdWlyZShcIi4uL21hdGhzL3BvaW50XCIpO1xyXG5jb25zdCBhYWJiID0gKC4uLnBvaW50cykgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtaW46ICgwLCBwb2ludF8xLm1pbjIpKC4uLnBvaW50cyksXHJcbiAgICAgICAgbWF4OiAoMCwgcG9pbnRfMS5tYXgyKSguLi5wb2ludHMpXHJcbiAgICB9O1xyXG59O1xyXG5leHBvcnRzLmFhYmIgPSBhYWJiO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IG9wZW50eXBlX2pzXzEgPSByZXF1aXJlKFwib3BlbnR5cGUuanNcIik7XHJcbmNvbnN0IGdsX21hdHJpeF8xID0gcmVxdWlyZShcImdsLW1hdHJpeFwiKTtcclxuY29uc3QgcGF0aFRvUG9pbnRzXzEgPSByZXF1aXJlKFwiLi4vZ2VvbWV0cnkvcGF0aFRvUG9pbnRzXCIpO1xyXG5jb25zdCBwb2ludHNUb1BvbHlnb25fMSA9IHJlcXVpcmUoXCIuLi9nZW9tZXRyeS9wb2ludHNUb1BvbHlnb25cIik7XHJcbmNvbnN0IHBsb3RMaW5lc18xID0gcmVxdWlyZShcIi4uL3JlbmRlci9wbG90TGluZXNcIik7XHJcbmNvbnN0IGdhbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZScpO1xyXG5jb25zdCBjaGFyU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJTZWxlY3QnKTtcclxuY29uc3Qgc3ZnUHJldmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdmdQcmV2aWV3Jyk7XHJcbmNvbnN0IG51bVRyaWFuZ2xlc0RvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdudW1fdHJpYW5nbGVzJyk7XHJcbmNvbnN0IGcgPSBnYW1lLmdldENvbnRleHQoJzJkJyk7XHJcbmlmICghZykge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZ2V0IGNhbnZhcyBncmFwaGljcyA6KCcpO1xyXG59XHJcbmcuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XHJcbmNvbnN0IHNwbGl0Qm91bmRhcnkgPSAtMC45OTtcclxuY29uc3QgYWxwaGFDaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Jy5zcGxpdCgnJyk7XHJcbmxldCBmb250O1xyXG5sZXQgcG9pbnRzID0gW107XHJcbmxldCBwb2x5Z29ucyA9IFtdO1xyXG5jb25zdCBiaW5kQ2hhclNlbGVjdCA9ICgpID0+IHtcclxuICAgIGNoYXJTZWxlY3QuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBhbHBoYUNoYXJzLmZvckVhY2goKGFscGhhQ2hhcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNoYXJPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICBjaGFyT3B0aW9uLnZhbHVlID0gYWxwaGFDaGFyO1xyXG4gICAgICAgIGNoYXJPcHRpb24udGV4dENvbnRlbnQgPSBhbHBoYUNoYXI7XHJcbiAgICAgICAgY2hhclNlbGVjdC5hcHBlbmRDaGlsZChjaGFyT3B0aW9uKTtcclxuICAgIH0pO1xyXG4gICAgY2hhclNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGNoYXJTZWxlY3QudmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgIGxvYWRDaGFyKGNoYXJTZWxlY3QudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcG9pbnRzID0gW107XHJcbiAgICAgICAgICAgIHBvbHlnb25zID0gW107XHJcbiAgICAgICAgICAgIHN2Z1ByZXZpZXcuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcbmNvbnN0IGxvYWRQYXRoID0gKHBhdGhTdHIsIGFCb3VuZHMpID0+IHtcclxuICAgIGNvbnN0IHNpemUgPSBnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMoTWF0aC5yb3VuZChhQm91bmRzLngyIC0gYUJvdW5kcy54MSksIE1hdGgucm91bmQoYUJvdW5kcy55MiAtIGFCb3VuZHMueTEpKTtcclxuICAgIC8vY3JlYXRlIGFuIGF2ZyBmb3IgY29tcGFyaXNvblxyXG4gICAgc3ZnUHJldmlldy5pbm5lckhUTUwgPSAnJztcclxuICAgIGNvbnN0IHN2Z05zID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcclxuICAgIGNvbnN0IG5ld1N2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOcywgJ3N2ZycpO1xyXG4gICAgbmV3U3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsICd3aWR0aCcsIHNpemVbMF0udG9TdHJpbmcoKSk7XHJcbiAgICBuZXdTdmcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2hlaWdodCcsIHNpemVbMV0udG9TdHJpbmcoKSk7XHJcbiAgICBuZXdTdmcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3ZpZXdCb3gnLCBbYUJvdW5kcy54MSwgYUJvdW5kcy55MSwgc2l6ZVswXSwgc2l6ZVsxXV0uam9pbignICcpKTtcclxuICAgIGNvbnN0IHN2Z1BhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTnMsICdwYXRoJyk7XHJcbiAgICBzdmdQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgcGF0aFN0cik7XHJcbiAgICBuZXdTdmcuYXBwZW5kQ2hpbGQoc3ZnUGF0aCk7XHJcbiAgICBzdmdQcmV2aWV3LmFwcGVuZENoaWxkKG5ld1N2Zyk7XHJcbiAgICAvL25vdyBjb252ZXJ0IG91ciBwYXRoIHRvIHBvaW50cyBhbmQgZHJhdyB0aGUgb3V0bGluZSB1c2luZyBsaW5lc1xyXG4gICAgLy9ub3RlOiBjb3VsZCB1c2UgYVBhdGguY29tbWFuZHMgc28gd2UgZG9uJ3QgbmVlZCB0byBwYXJzZSBhZ2FpblxyXG4gICAgcG9pbnRzID0gKDAsIHBhdGhUb1BvaW50c18xLnBhdGhUb1BvaW50cykocGF0aFN0ciwgc3BsaXRCb3VuZGFyeSk7XHJcbiAgICBwb2x5Z29ucyA9ICgwLCBwb2ludHNUb1BvbHlnb25fMS5wb2ludHNUb1BvbHlnb25zKShwb2ludHMpO1xyXG4gICAgcG9pbnRzLmZvckVhY2goKHBvaW50cykgPT4gcG9pbnRzLmZvckVhY2goKHBvaW50KSA9PiB7XHJcbiAgICAgICAgcG9pbnRbMF0gLT0gYUJvdW5kcy54MTtcclxuICAgICAgICBwb2ludFsxXSA9IGdhbWUuaGVpZ2h0IC0gcG9pbnRbMV0gKyBhQm91bmRzLnkxO1xyXG4gICAgfSkpO1xyXG59O1xyXG5jb25zdCBsb2FkQ2hhciA9IChjaGFyVG9EcmF3KSA9PiB7XHJcbiAgICBjb25zdCBmb250U2l6ZSA9IDEwMDA7XHJcbiAgICBjb25zdCBhQ2hhciA9IGZvbnQuY2hhclRvR2x5cGgoY2hhclRvRHJhdyk7XHJcbiAgICBjb25zdCBhUGF0aCA9IGFDaGFyLmdldFBhdGgoMCwgMCwgZm9udFNpemUpO1xyXG4gICAgbG9hZFBhdGgoYVBhdGgudG9QYXRoRGF0YSg1KSwgYVBhdGguZ2V0Qm91bmRpbmdCb3goKSk7XHJcbn07XHJcbmNvbnN0IGRyYXcgPSAoKSA9PiB7XHJcbiAgICBnLmNsZWFyUmVjdCgwLCAwLCBnYW1lLndpZHRoLCBnYW1lLmhlaWdodCk7XHJcbiAgICBnLmZpbGxTdHlsZSA9ICdibGFjayc7XHJcbiAgICBnLmJlZ2luUGF0aCgpO1xyXG4gICAgcG9pbnRzLmZvckVhY2goKHBvaW50TGlzdCkgPT4ge1xyXG4gICAgICAgICgwLCBwbG90TGluZXNfMS5wbG90TGluZXMpKGcsIHBvaW50TGlzdCk7XHJcbiAgICB9KTtcclxuICAgIGcuc3Ryb2tlKCk7XHJcbiAgICAvL2RyYXcgdGhlIGNvbnZlcnRlZCBwb2x5Z29uXHJcbiAgICBsZXQgbnVtVHJpYW5nbGVzID0gMDtcclxuICAgIGcuZmlsbFN0eWxlID0gJ2JsYWNrJztcclxuICAgIHBvbHlnb25zLmZvckVhY2goKHBvbHlnb24pID0+IHtcclxuICAgICAgICBwb2x5Z29uLmZvckVhY2goKHRyaWFuZ2xlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vZy5maWxsU3R5bGUgPSBcInJnYihcIiArIHRyaWFuZ2xlLmNvbG91clswXSArIFwiLFwiICsgdHJpYW5nbGUuY29sb3VyLnkgKyBcIixcIiArIHRyaWFuZ2xlLmNvbG91ci56ICsgXCIpXCI7XHJcbiAgICAgICAgICAgIGcuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICgwLCBwbG90TGluZXNfMS5wbG90TGluZXMpKGcsIHRyaWFuZ2xlLnBvaW50cyk7XHJcbiAgICAgICAgICAgIGcuZmlsbCgpO1xyXG4gICAgICAgICAgICBudW1UcmlhbmdsZXMrKztcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgbnVtVHJpYW5nbGVzRG9tLnRleHRDb250ZW50ID0gYE51bSB0cmlhbmdsZXM6ICR7bnVtVHJpYW5nbGVzfWA7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XHJcbn07XHJcbmNvbnN0IHN0YXJ0ID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICBmb250ID0geWllbGQgKDAsIG9wZW50eXBlX2pzXzEubG9hZCkoJy4vbWVkaWEvVGltZWxlc3MudHRmJyk7XHJcbiAgICBiaW5kQ2hhclNlbGVjdCgpO1xyXG4gICAgbG9hZENoYXIoJ0EnKTtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcclxufSk7XHJcbnN0YXJ0KCk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY3ViaWNCZXppZXJUb1BvaW50cyA9IHZvaWQgMDtcclxuY29uc3QgZ2xfbWF0cml4XzEgPSByZXF1aXJlKFwiZ2wtbWF0cml4XCIpO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9jb21tb25cIik7XHJcbmNvbnN0IHBvaW50XzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvcG9pbnRcIik7XHJcbmNvbnN0IGN1YmljQmV6aWVyVG9Qb2ludHMgPSAoYmV6aWVyLCBzcGxpdFRocmVzaG9sZCkgPT4ge1xyXG4gICAgY29uc3QgcG9pbnRzID0gW2dsX21hdHJpeF8xLnZlYzIuY2xvbmUoYmV6aWVyLnAxKSwgZ2xfbWF0cml4XzEudmVjMi5jbG9uZShiZXppZXIucDQpXTtcclxuICAgIGNvbnN0IGN1YmljQmV6aWVyU3BsaXQgPSAoYmV6aWVyLCBtaW4sIG1heCwgaW5zZXJ0SW5kZXgsIGZpcnN0ID0gZmFsc2UpID0+IHtcclxuICAgICAgICBjb25zdCB0aW1lID0gKDAsIGNvbW1vbl8xLmxlcnApKG1pbiwgbWF4LCAwLjUpO1xyXG4gICAgICAgIGNvbnN0IG1pZExlcnAgPSAoMCwgcG9pbnRfMS5sZXJwMikoYmV6aWVyLnAyLCBiZXppZXIucDMsIHRpbWUpO1xyXG4gICAgICAgIGNvbnN0IHBvaW50T25DdXJ2ZSA9ICgwLCBwb2ludF8xLmxlcnAyKSgoMCwgcG9pbnRfMS5sZXJwMikoKDAsIHBvaW50XzEubGVycDIpKGJlemllci5wMSwgYmV6aWVyLnAyLCB0aW1lKSwgbWlkTGVycCwgdGltZSksICgwLCBwb2ludF8xLmxlcnAyKShtaWRMZXJwLCAoMCwgcG9pbnRfMS5sZXJwMikoYmV6aWVyLnAzLCBiZXppZXIucDQsIHRpbWUpLCB0aW1lKSwgdGltZSk7XHJcbiAgICAgICAgY29uc3QgcHJldlBvaW50ID0gcG9pbnRzW2luc2VydEluZGV4IC0gMV07XHJcbiAgICAgICAgY29uc3QgbmV4dFBvaW50ID0gcG9pbnRzW2luc2VydEluZGV4XTtcclxuICAgICAgICBwb2ludHMuc3BsaWNlKGluc2VydEluZGV4LCAwLCBwb2ludE9uQ3VydmUpO1xyXG4gICAgICAgIGlmICgoMCwgcG9pbnRfMS5kb3QpKCgwLCBwb2ludF8xLm5vcm1hbGl6ZSkoKDAsIHBvaW50XzEuc3ViKShwcmV2UG9pbnQsIHBvaW50T25DdXJ2ZSkpLCAoMCwgcG9pbnRfMS5ub3JtYWxpemUpKCgwLCBwb2ludF8xLnN1YikobmV4dFBvaW50LCBwb2ludE9uQ3VydmUpKSkgPiBzcGxpdFRocmVzaG9sZCB8fFxyXG4gICAgICAgICAgICBmaXJzdCkge1xyXG4gICAgICAgICAgICBjdWJpY0JlemllclNwbGl0KGJlemllciwgdGltZSwgbWF4LCBpbnNlcnRJbmRleCArIDEpO1xyXG4gICAgICAgICAgICBjdWJpY0JlemllclNwbGl0KGJlemllciwgbWluLCB0aW1lLCBpbnNlcnRJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGN1YmljQmV6aWVyU3BsaXQoYmV6aWVyLCAwLCAxLCAxLCB0cnVlKTtcclxuICAgIHJldHVybiBwb2ludHM7XHJcbn07XHJcbmV4cG9ydHMuY3ViaWNCZXppZXJUb1BvaW50cyA9IGN1YmljQmV6aWVyVG9Qb2ludHM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucGF0aFRvUG9pbnRzID0gdm9pZCAwO1xyXG5jb25zdCBnbF9tYXRyaXhfMSA9IHJlcXVpcmUoXCJnbC1tYXRyaXhcIik7XHJcbmNvbnN0IGN1YmljQmV6aWVyVG9Qb2ludHNfMSA9IHJlcXVpcmUoXCIuL2N1YmljQmV6aWVyVG9Qb2ludHNcIik7XHJcbmNvbnN0IHF1YWRyYXRpY0JlemllclRvUG9pbnRzXzEgPSByZXF1aXJlKFwiLi9xdWFkcmF0aWNCZXppZXJUb1BvaW50c1wiKTtcclxuY29uc3QgYmxvY2tSZWdleHAgPSAvKD89W2FzdHZ6cW1obGNdKS9naTtcclxuY29uc3QgdmFsdWVzUmVnZXhwID0gLygtP1swLTldKlxcLj9bMC05XSspKD86ZVstK10/XFxkKyk/L2dpO1xyXG5jb25zdCBwYXRoVG9Qb2ludHMgPSAocGF0aFN0ciwgc3BsaXRCb3VuZGFyeSkgPT4ge1xyXG4gICAgY29uc3QgcGF0aEJsb2NrcyA9IHBhdGhTdHIuc3BsaXQoYmxvY2tSZWdleHApO1xyXG4gICAgY29uc3QgcG9pbnRzID0gW107XHJcbiAgICBpZiAocGF0aEJsb2Nrcy5sZW5ndGgpIHtcclxuICAgICAgICBsZXQgY3VycmVudFBvbHlnb24gPSBbXTtcclxuICAgICAgICBjb25zdCBjdXJyZW50UG9pbnQgPSBnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpO1xyXG4gICAgICAgIHdoaWxlIChwYXRoQmxvY2tzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBibG9jayA9IHBhdGhCbG9ja3Muc2hpZnQoKTtcclxuICAgICAgICAgICAgaWYgKCEoYmxvY2sgPT09IG51bGwgfHwgYmxvY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJsb2NrLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGhQYXJ0cyA9IGJsb2NrLnN1YnN0cmluZygxKS5tYXRjaCh2YWx1ZXNSZWdleHApIHx8IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0Q29tbWFuZCA9IGJsb2NrWzBdO1xyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpc2VkQ29tbWFuZCA9IG5leHRDb21tYW5kLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzUmVsYXRpdmUgPSBuZXh0Q29tbWFuZCA9PT0gbm9ybWFsaXNlZENvbW1hbmQ7XHJcbiAgICAgICAgICAgIHN3aXRjaCAobm9ybWFsaXNlZENvbW1hbmQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2wnOiAvL2xpbmVUb1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6IC8vbW92ZVRvXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBhdGhQYXJ0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dFBvaW50ID0gZ2xfbWF0cml4XzEudmVjMi5mcm9tVmFsdWVzKHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpLCBwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLmFkZChuZXh0UG9pbnQsIG5leHRQb2ludCwgY3VycmVudFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9seWdvbi5wdXNoKG5leHRQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsX21hdHJpeF8xLnZlYzIuY29weShjdXJyZW50UG9pbnQsIG5leHRQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6IC8vaG9yaXpvbnRhbExpbmVUb1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwYXRoUGFydHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXh0WCA9IHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFggKz0gY3VycmVudFBvaW50WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2x5Z29uLnB1c2goZ2xfbWF0cml4XzEudmVjMi5mcm9tVmFsdWVzKG5leHRYLCBjdXJyZW50UG9pbnRbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvaW50WzBdID0gbmV4dFg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndic6IC8vdmVydGljYWxMaW5lVG9cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocGF0aFBhcnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dFkgPSBwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRZICs9IGN1cnJlbnRQb2ludFsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9seWdvbi5wdXNoKGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcyhjdXJyZW50UG9pbnRbMF0sIG5leHRZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2ludFsxXSA9IG5leHRZO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3onOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jbG9zZVBhdGhcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFBvaW50ID0gY3VycmVudFBvbHlnb25bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvbHlnb24ucHVzaChnbF9tYXRyaXhfMS52ZWMyLmNsb25lKGZpcnN0UG9pbnQpKTtcclxuICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChjdXJyZW50UG9seWdvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvbHlnb24gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLnplcm8oY3VycmVudFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2MnOiAvL2N1YmljIGJlemllclxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwYXRoUGFydHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlY29uZFBvaW50ID0gZ2xfbWF0cml4XzEudmVjMi5mcm9tVmFsdWVzKHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpLCBwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoaXJkUG9pbnQgPSBnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMocGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSksIHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm91cnRoUG9pbnQgPSBnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMocGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSksIHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsX21hdHJpeF8xLnZlYzIuYWRkKHNlY29uZFBvaW50LCBzZWNvbmRQb2ludCwgY3VycmVudFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsX21hdHJpeF8xLnZlYzIuYWRkKHRoaXJkUG9pbnQsIHRoaXJkUG9pbnQsIGN1cnJlbnRQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLmFkZChmb3VydGhQb2ludCwgZm91cnRoUG9pbnQsIGN1cnJlbnRQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBvbHlnb24ucHVzaCguLi4oMCwgY3ViaWNCZXppZXJUb1BvaW50c18xLmN1YmljQmV6aWVyVG9Qb2ludHMpKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxOiBjdXJyZW50UG9pbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMjogc2Vjb25kUG9pbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMzogdGhpcmRQb2ludCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHA0OiBmb3VydGhQb2ludFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBzcGxpdEJvdW5kYXJ5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsX21hdHJpeF8xLnZlYzIuY29weShjdXJyZW50UG9pbnQsIGZvdXJ0aFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdxJzogLy9xdWFkcmF0aWMgYmV6aWVyXHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBhdGhQYXJ0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2Vjb25kUG9pbnQgPSBnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMocGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSksIHBhcnNlRmxvYXQocGF0aFBhcnRzLnNoaWZ0KCkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhpcmRQb2ludCA9IGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcyhwYXJzZUZsb2F0KHBhdGhQYXJ0cy5zaGlmdCgpKSwgcGFyc2VGbG9hdChwYXRoUGFydHMuc2hpZnQoKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xfbWF0cml4XzEudmVjMi5hZGQoc2Vjb25kUG9pbnQsIHNlY29uZFBvaW50LCBjdXJyZW50UG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xfbWF0cml4XzEudmVjMi5hZGQodGhpcmRQb2ludCwgdGhpcmRQb2ludCwgY3VycmVudFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9seWdvbi5wdXNoKC4uLigwLCBxdWFkcmF0aWNCZXppZXJUb1BvaW50c18xLnF1YWRyYXRpY0JlemllclRvUG9pbnRzKSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMTogY3VycmVudFBvaW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDI6IHNlY29uZFBvaW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDM6IHRoaXJkUG9pbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgc3BsaXRCb3VuZGFyeSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLmNvcHkoY3VycmVudFBvaW50LCB0aGlyZFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzJzogLy9jdWJpYyBiZXppZXIgKHNob3J0Y3V0KVxyXG4gICAgICAgICAgICAgICAgY2FzZSAndCc6IC8vcXVhZHJhdGljIGJlemllciAoc2hvcnRjdXQpXHJcbiAgICAgICAgICAgICAgICBjYXNlICdhJzogLy9hcmMgKHNraXApXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobm9ybWFsaXNlZENvbW1hbmQgKyAnIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjdXJyZW50UG9seWdvbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcG9pbnRzLnB1c2goY3VycmVudFBvbHlnb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vY2FsY3VsYXRlIHRoZSBhYWJiIGJhc2VkIG9uIHRoZSBwb2ludHNcclxuICAgIHJldHVybiBwb2ludHM7XHJcbn07XHJcbmV4cG9ydHMucGF0aFRvUG9pbnRzID0gcGF0aFRvUG9pbnRzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnBvaW50c1RvUG9seWdvbnMgPSB2b2lkIDA7XHJcbmNvbnN0IGVhcmN1dF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJlYXJjdXRcIikpO1xyXG5jb25zdCBhYWJiXzEgPSByZXF1aXJlKFwiLi4vYWFiYi9hYWJiXCIpO1xyXG5jb25zdCBwb2ludF8xID0gcmVxdWlyZShcIi4uL21hdGhzL3BvaW50XCIpO1xyXG5jb25zdCBwb2x5Z29uQXJlYV8xID0gcmVxdWlyZShcIi4vcG9seWdvbkFyZWFcIik7XHJcbmNvbnN0IHBvaW50c1RvUG9seWdvbnMgPSAocG9pbnRzKSA9PiB7XHJcbiAgICBjb25zdCBncm91cHMgPSBwb2ludHMubWFwKChwb2ludHNBcnIpID0+ICh7XHJcbiAgICAgICAgcG9pbnRzOiBwb2ludHNBcnIsXHJcbiAgICAgICAgYWFiYjogKDAsIGFhYmJfMS5hYWJiKSguLi5wb2ludHNBcnIpLFxyXG4gICAgICAgIGFyZWE6ICgwLCBwb2x5Z29uQXJlYV8xLnBvbHlnb25BcmVhU2lnbmVkKShwb2ludHNBcnIpLFxyXG4gICAgICAgIGNoaWxkcmVuOiBbXVxyXG4gICAgfSkpO1xyXG4gICAgZ3JvdXBzLnNvcnQoKGEsIGIpID0+IE1hdGguYWJzKGIuYXJlYSkgLSBNYXRoLmFicyhhLmFyZWEpKTtcclxuICAgIGNvbnN0IHJvb3QgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgbGV0IHBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IGkgLSAxOyBqID49IDA7IC0taikge1xyXG4gICAgICAgICAgICBpZiAoKDAsIHBvaW50XzEuaW5zaWRlKShncm91cHNbal0ucG9pbnRzLCBncm91cHNbaV0ucG9pbnRzWzBdKSAmJiBncm91cHNbaV0uYXJlYSAqIGdyb3Vwc1tqXS5hcmVhIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gZ3JvdXBzW2pdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChncm91cHNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcm9vdC5wdXNoKGdyb3Vwc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgcG9seWdvbnMgPSBbXTtcclxuICAgIGxldCB0cmlhbmdsZXMgPSBbXTtcclxuICAgIGNvbnN0IHByb2Nlc3MgPSAoZ3JvdXApID0+IHtcclxuICAgICAgICBjb25zdCBjb29yZHMgPSBbXTtcclxuICAgICAgICBjb25zdCBob2xlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHBvaW50cyA9IFtdO1xyXG4gICAgICAgIGdyb3VwLnBvaW50cy5mb3JFYWNoKChwb2ludCkgPT4ge1xyXG4gICAgICAgICAgICBjb29yZHMucHVzaCguLi5wb2ludCk7XHJcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBncm91cC5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xyXG4gICAgICAgICAgICBjaGlsZC5jaGlsZHJlbi5mb3JFYWNoKHByb2Nlc3MpO1xyXG4gICAgICAgICAgICBob2xlcy5wdXNoKGNvb3Jkcy5sZW5ndGggLyAyKTtcclxuICAgICAgICAgICAgY2hpbGQucG9pbnRzLmZvckVhY2goKHBvaW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb29yZHMucHVzaCguLi5wb2ludCk7XHJcbiAgICAgICAgICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGluZGljZXMgPSAoMCwgZWFyY3V0XzEuZGVmYXVsdCkoY29vcmRzLCBob2xlcyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAxID0gcG9pbnRzW2luZGljZXNbaSArIDBdXTtcclxuICAgICAgICAgICAgY29uc3QgcDIgPSBwb2ludHNbaW5kaWNlc1tpICsgMV1dO1xyXG4gICAgICAgICAgICBjb25zdCBwMyA9IHBvaW50c1tpbmRpY2VzW2kgKyAyXV07XHJcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHAxLFxyXG4gICAgICAgICAgICAgICAgcDIsXHJcbiAgICAgICAgICAgICAgICBwMyxcclxuICAgICAgICAgICAgICAgIGUxOiAoMCwgcG9pbnRfMS5zdWIpKHAyLCBwMSksXHJcbiAgICAgICAgICAgICAgICBlMjogKDAsIHBvaW50XzEuc3ViKShwMywgcDIpLFxyXG4gICAgICAgICAgICAgICAgZTM6ICgwLCBwb2ludF8xLnN1YikocDEsIHAzKSxcclxuICAgICAgICAgICAgICAgIHBvaW50czogW3AxLCBwMiwgcDNdLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMjU1KSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAyNTUpLFxyXG4gICAgICAgICAgICAgICAgICAgIHo6IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDI1NSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJvb3QuZm9yRWFjaCgoZ3JvdXApID0+IHtcclxuICAgICAgICBwcm9jZXNzKGdyb3VwKTtcclxuICAgICAgICBwb2x5Z29ucy5wdXNoKHRyaWFuZ2xlcyk7XHJcbiAgICAgICAgdHJpYW5nbGVzID0gW107XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwb2x5Z29ucztcclxufTtcclxuZXhwb3J0cy5wb2ludHNUb1BvbHlnb25zID0gcG9pbnRzVG9Qb2x5Z29ucztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5wb2x5Z29uQXJlYSA9IGV4cG9ydHMucG9seWdvbkFyZWFTaWduZWQgPSB2b2lkIDA7XHJcbmNvbnN0IHBvaW50XzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvcG9pbnRcIik7XHJcbmNvbnN0IHBvbHlnb25BcmVhU2lnbmVkID0gKHBvaW50cykgPT4ge1xyXG4gICAgaWYgKCFwb2ludHMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBsYXN0SW5kZXggPSBwb2ludHMubGVuZ3RoIC0gMTtcclxuICAgIGxldCBhcmVhID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFzdEluZGV4OyBpKyspIHtcclxuICAgICAgICBhcmVhICs9ICgwLCBwb2ludF8xLmRldGVybWluYW50MikocG9pbnRzW2ldLCBwb2ludHNbaSArIDFdKTtcclxuICAgIH1cclxuICAgIGFyZWEgKz0gKDAsIHBvaW50XzEuZGV0ZXJtaW5hbnQyKShwb2ludHNbbGFzdEluZGV4XSwgcG9pbnRzWzBdKTtcclxuICAgIHJldHVybiBhcmVhIC8gMjtcclxufTtcclxuZXhwb3J0cy5wb2x5Z29uQXJlYVNpZ25lZCA9IHBvbHlnb25BcmVhU2lnbmVkO1xyXG5jb25zdCBwb2x5Z29uQXJlYSA9IChwb2ludHMpID0+IHtcclxuICAgIHJldHVybiBNYXRoLmFicygoMCwgZXhwb3J0cy5wb2x5Z29uQXJlYVNpZ25lZCkocG9pbnRzKSk7XHJcbn07XHJcbmV4cG9ydHMucG9seWdvbkFyZWEgPSBwb2x5Z29uQXJlYTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5xdWFkcmF0aWNCZXppZXJUb1BvaW50cyA9IHZvaWQgMDtcclxuY29uc3QgZ2xfbWF0cml4XzEgPSByZXF1aXJlKFwiZ2wtbWF0cml4XCIpO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9jb21tb25cIik7XHJcbmNvbnN0IHBvaW50XzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvcG9pbnRcIik7XHJcbmNvbnN0IHF1YWRyYXRpY0JlemllclRvUG9pbnRzID0gKGJlemllciwgc3BsaXRCb3VuZGFyeSkgPT4ge1xyXG4gICAgY29uc3QgcG9pbnRzID0gW2dsX21hdHJpeF8xLnZlYzIuY2xvbmUoYmV6aWVyLnAxKSwgZ2xfbWF0cml4XzEudmVjMi5jbG9uZShiZXppZXIucDMpXTtcclxuICAgIGNvbnN0IHF1YWRyYXRpY0JlemllclNwbGl0ID0gKGJlemllciwgbWluLCBtYXgsIGluc2VydEluZGV4KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGltZSA9ICgwLCBjb21tb25fMS5sZXJwKShtaW4sIG1heCwgMC41KTtcclxuICAgICAgICBjb25zdCBwb2ludE9uQ3VydmUgPSAoMCwgcG9pbnRfMS5sZXJwMikoKDAsIHBvaW50XzEubGVycDIpKGJlemllci5wMSwgYmV6aWVyLnAyLCB0aW1lKSwgKDAsIHBvaW50XzEubGVycDIpKGJlemllci5wMiwgYmV6aWVyLnAzLCB0aW1lKSwgdGltZSk7XHJcbiAgICAgICAgY29uc3QgcHJldlBvaW50ID0gcG9pbnRzW2luc2VydEluZGV4IC0gMV07XHJcbiAgICAgICAgY29uc3QgbmV4dFBvaW50ID0gcG9pbnRzW2luc2VydEluZGV4XTtcclxuICAgICAgICBwb2ludHMuc3BsaWNlKGluc2VydEluZGV4LCAwLCBwb2ludE9uQ3VydmUpO1xyXG4gICAgICAgIGlmICgoMCwgcG9pbnRfMS5kb3QpKCgwLCBwb2ludF8xLm5vcm1hbGl6ZSkoKDAsIHBvaW50XzEuc3ViKShwcmV2UG9pbnQsIHBvaW50T25DdXJ2ZSkpLCAoMCwgcG9pbnRfMS5ub3JtYWxpemUpKCgwLCBwb2ludF8xLnN1YikobmV4dFBvaW50LCBwb2ludE9uQ3VydmUpKSkgPiBzcGxpdEJvdW5kYXJ5KSB7XHJcbiAgICAgICAgICAgIHF1YWRyYXRpY0JlemllclNwbGl0KGJlemllciwgdGltZSwgbWF4LCBpbnNlcnRJbmRleCArIDEpO1xyXG4gICAgICAgICAgICBxdWFkcmF0aWNCZXppZXJTcGxpdChiZXppZXIsIG1pbiwgdGltZSwgaW5zZXJ0SW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBxdWFkcmF0aWNCZXppZXJTcGxpdChiZXppZXIsIDAsIDEsIDEpO1xyXG4gICAgcmV0dXJuIHBvaW50cztcclxufTtcclxuZXhwb3J0cy5xdWFkcmF0aWNCZXppZXJUb1BvaW50cyA9IHF1YWRyYXRpY0JlemllclRvUG9pbnRzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmxlcnAgPSBleHBvcnRzLnRpbWVBdFBvcyA9IGV4cG9ydHMuY2xhbXAgPSBleHBvcnRzLmZyYWN0ID0gZXhwb3J0cy5uZWdGcmFjdCA9IGV4cG9ydHMuRVBTSUxPTiA9IHZvaWQgMDtcclxuZXhwb3J0cy5FUFNJTE9OID0gMC4wMDAwMDE7XHJcbmNvbnN0IG5lZ0ZyYWN0ID0gKHgpID0+IDEuMCAtIHggKyBNYXRoLmZsb29yKHgpO1xyXG5leHBvcnRzLm5lZ0ZyYWN0ID0gbmVnRnJhY3Q7XHJcbmNvbnN0IGZyYWN0ID0gKHgpID0+IHggLSBNYXRoLmZsb29yKHgpO1xyXG5leHBvcnRzLmZyYWN0ID0gZnJhY3Q7XHJcbmNvbnN0IGNsYW1wID0gKGEsIG1pbiwgbWF4KSA9PiBNYXRoLm1heChNYXRoLm1pbihhLCBtYXgpLCBtaW4pO1xyXG5leHBvcnRzLmNsYW1wID0gY2xhbXA7XHJcbmNvbnN0IHRpbWVBdFBvcyA9IChzdGFydFBvcywgZGlyLCBuZXdQb3MpID0+IGRpciA/ICgwLCBleHBvcnRzLmNsYW1wKSgobmV3UG9zIC0gc3RhcnRQb3MpIC8gZGlyLCAwLCAxKSA6IDA7XHJcbmV4cG9ydHMudGltZUF0UG9zID0gdGltZUF0UG9zO1xyXG5jb25zdCBsZXJwID0gKGEsIGIsIHQpID0+IGEgKiAoMSAtIHQpICsgYiAqIHQ7XHJcbmV4cG9ydHMubGVycCA9IGxlcnA7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuaW5zaWRlID0gZXhwb3J0cy5pblJhbmdlID0gZXhwb3J0cy5hdmcgPSBleHBvcnRzLm1heDIgPSBleHBvcnRzLm1pbjIgPSBleHBvcnRzLnRvUHJlY2lzaW9uMiA9IGV4cG9ydHMubGVycDIgPSBleHBvcnRzLm5vcm1hbGl6ZSA9IGV4cG9ydHMubGVuZ3RoID0gZXhwb3J0cy5kb3QgPSBleHBvcnRzLnNpZ24gPSBleHBvcnRzLmFicyA9IGV4cG9ydHMuY2VpbCA9IGV4cG9ydHMuZmxvb3IgPSBleHBvcnRzLnN1YiA9IGV4cG9ydHMuYWRkcyA9IGV4cG9ydHMuYWRkID0gZXhwb3J0cy5kaXZpZGUgPSBleHBvcnRzLm11bHRpcGx5ID0gZXhwb3J0cy5zY2FsZSA9IGV4cG9ydHMuZXF1YWxzID0gZXhwb3J0cy5kZXRlcm1pbmFudDIgPSBleHBvcnRzLmNsYW1wMiA9IHZvaWQgMDtcclxuY29uc3QgZ2xfbWF0cml4XzEgPSByZXF1aXJlKFwiZ2wtbWF0cml4XCIpO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcclxuY29uc3QgY2xhbXAyID0gKGEsIG1pbiwgbWF4KSA9PiB7XHJcbiAgICBjb25zdCBvdXQgPSBnbF9tYXRyaXhfMS52ZWMyLmNsb25lKGEpO1xyXG4gICAgZ2xfbWF0cml4XzEudmVjMi5taW4ob3V0LCBvdXQsIG1heCk7XHJcbiAgICBnbF9tYXRyaXhfMS52ZWMyLm1heChvdXQsIG91dCwgbWluKTtcclxuICAgIHJldHVybiBvdXQ7XHJcbn07XHJcbmV4cG9ydHMuY2xhbXAyID0gY2xhbXAyO1xyXG5jb25zdCBkZXRlcm1pbmFudDIgPSAocDEsIHAyKSA9PiBwMVswXSAqIHAyWzFdIC0gcDFbMV0gKiBwMlswXTtcclxuZXhwb3J0cy5kZXRlcm1pbmFudDIgPSBkZXRlcm1pbmFudDI7XHJcbmV4cG9ydHMuZXF1YWxzID0gZ2xfbWF0cml4XzEudmVjMi5lcXVhbHM7XHJcbmNvbnN0IHNjYWxlID0gKHAxLCBhKSA9PiBnbF9tYXRyaXhfMS52ZWMyLnNjYWxlKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIHAxLCBhKTtcclxuZXhwb3J0cy5zY2FsZSA9IHNjYWxlO1xyXG5jb25zdCBtdWx0aXBseSA9IChwMSwgcDIpID0+IGdsX21hdHJpeF8xLnZlYzIubXVsdGlwbHkoZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKSwgcDEsIHAyKTtcclxuZXhwb3J0cy5tdWx0aXBseSA9IG11bHRpcGx5O1xyXG5jb25zdCBkaXZpZGUgPSAocDEsIHAyKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmRpdmlkZShnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLCBwMSwgcDIpO1xyXG5leHBvcnRzLmRpdmlkZSA9IGRpdmlkZTtcclxuY29uc3QgYWRkID0gKHAxLCBwMikgPT4gZ2xfbWF0cml4XzEudmVjMi5hZGQoZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKSwgcDEsIHAyKTtcclxuZXhwb3J0cy5hZGQgPSBhZGQ7XHJcbmNvbnN0IGFkZHMgPSAocDEsIGEpID0+IGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcyhwMVswXSArIGEsIHAxWzFdICsgYSk7XHJcbmV4cG9ydHMuYWRkcyA9IGFkZHM7XHJcbmNvbnN0IHN1YiA9IChwMSwgcDIpID0+IGdsX21hdHJpeF8xLnZlYzIuc3ViKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIHAxLCBwMik7XHJcbmV4cG9ydHMuc3ViID0gc3ViO1xyXG5jb25zdCBmbG9vciA9IChwMSkgPT4gZ2xfbWF0cml4XzEudmVjMi5mbG9vcihnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLCBwMSk7XHJcbmV4cG9ydHMuZmxvb3IgPSBmbG9vcjtcclxuY29uc3QgY2VpbCA9IChwMSkgPT4gZ2xfbWF0cml4XzEudmVjMi5jZWlsKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIHAxKTtcclxuZXhwb3J0cy5jZWlsID0gY2VpbDtcclxuY29uc3QgYWJzID0gKHAxKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMoTWF0aC5hYnMocDFbMF0pLCBNYXRoLmFicyhwMVsxXSkpO1xyXG5leHBvcnRzLmFicyA9IGFicztcclxuY29uc3Qgc2lnbiA9IChwMSkgPT4gZ2xfbWF0cml4XzEudmVjMi5mcm9tVmFsdWVzKE1hdGguc2lnbihwMVswXSksIE1hdGguc2lnbihwMVsxXSkpO1xyXG5leHBvcnRzLnNpZ24gPSBzaWduO1xyXG5jb25zdCBkb3QgPSAocDEsIHAyKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmRvdChwMSwgcDIpO1xyXG5leHBvcnRzLmRvdCA9IGRvdDtcclxuY29uc3QgbGVuZ3RoID0gKHAxKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmxlbmd0aChwMSk7XHJcbmV4cG9ydHMubGVuZ3RoID0gbGVuZ3RoO1xyXG5jb25zdCBub3JtYWxpemUgPSAocDEpID0+ICgwLCBleHBvcnRzLnNjYWxlKShwMSwgMSAvICgwLCBleHBvcnRzLmxlbmd0aCkocDEpKTtcclxuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XHJcbmNvbnN0IGxlcnAyID0gKGEsIGIsIHQpID0+IGdsX21hdHJpeF8xLnZlYzIubGVycChnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLCBhLCBiLCB0KTtcclxuZXhwb3J0cy5sZXJwMiA9IGxlcnAyO1xyXG4vL3dhcm5pbmc6IG11dGF0ZXMgYVxyXG5jb25zdCB0b1ByZWNpc2lvbjIgPSAoYSwgYW1vdW50KSA9PiB7XHJcbiAgICBhWzBdID0gcGFyc2VGbG9hdChhWzBdLnRvUHJlY2lzaW9uKGFtb3VudCkpO1xyXG4gICAgYVsxXSA9IHBhcnNlRmxvYXQoYVsxXS50b1ByZWNpc2lvbihhbW91bnQpKTtcclxuICAgIHJldHVybiBhO1xyXG59O1xyXG5leHBvcnRzLnRvUHJlY2lzaW9uMiA9IHRvUHJlY2lzaW9uMjtcclxuY29uc3QgbWluMiA9ICguLi5vYmpzKSA9PiB7XHJcbiAgICBjb25zdCBbZmlyc3QsIC4uLnJlc3RdID0gb2JqcztcclxuICAgIGNvbnN0IHJlc3VsdCA9IGdsX21hdHJpeF8xLnZlYzIuY2xvbmUoZmlyc3QpO1xyXG4gICAgcmVzdC5mb3JFYWNoKChvYmopID0+IHtcclxuICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLm1pbihyZXN1bHQsIHJlc3VsdCwgb2JqKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuZXhwb3J0cy5taW4yID0gbWluMjtcclxuY29uc3QgbWF4MiA9ICguLi5vYmpzKSA9PiB7XHJcbiAgICBjb25zdCBbZmlyc3QsIC4uLnJlc3RdID0gb2JqcztcclxuICAgIGNvbnN0IHJlc3VsdCA9IGdsX21hdHJpeF8xLnZlYzIuY2xvbmUoZmlyc3QpO1xyXG4gICAgcmVzdC5mb3JFYWNoKChvYmopID0+IHtcclxuICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLm1heChyZXN1bHQsIHJlc3VsdCwgb2JqKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuZXhwb3J0cy5tYXgyID0gbWF4MjtcclxuY29uc3QgYXZnID0gKC4uLm9ianMpID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCk7XHJcbiAgICBpZiAob2Jqcy5sZW5ndGgpIHtcclxuICAgICAgICBvYmpzLmZvckVhY2goKG9iaikgPT4ge1xyXG4gICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLmFkZChyZXN1bHQsIHJlc3VsdCwgb2JqKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLnNjYWxlKHJlc3VsdCwgcmVzdWx0LCAxIC8gb2Jqcy5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuZXhwb3J0cy5hdmcgPSBhdmc7XHJcbmNvbnN0IGluUmFuZ2UgPSAocDEsIG1pbiwgbWF4KSA9PiB7XHJcbiAgICByZXR1cm4gIShwMVswXSA+IG1heFswXSB8fCBwMVswXSA8IG1pblswXSB8fCBwMVsxXSA+IG1heFsxXSB8fCBwMVsxXSA8IG1pblsxXSk7XHJcbn07XHJcbmV4cG9ydHMuaW5SYW5nZSA9IGluUmFuZ2U7XHJcbmNvbnN0IGluc2lkZSA9IChwb2ludHMsIHApID0+IHtcclxuICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICBsZXQgY3VyID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXTtcclxuICAgIHBvaW50cy5mb3JFYWNoKChuZXh0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgcDAgPSBjdXJbMV0gPCBuZXh0WzFdID8gY3VyIDogbmV4dDtcclxuICAgICAgICBjb25zdCBwMSA9IGN1clsxXSA8IG5leHRbMV0gPyBuZXh0IDogY3VyO1xyXG4gICAgICAgIGlmIChwMFsxXSA8IHBbMV0gKyBjb21tb25fMS5FUFNJTE9OICYmIHAxWzFdID4gcFsxXSArIGNvbW1vbl8xLkVQU0lMT04pIHtcclxuICAgICAgICAgICAgaWYgKChwMVswXSAtIHAwWzBdKSAqIChwWzFdIC0gcDBbMV0pID4gKHBbMF0gLSBwMFswXSkgKiAocDFbMV0gLSBwMFsxXSkpIHtcclxuICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY3VyID0gbmV4dDtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNvdW50ICUgMiAhPT0gMDtcclxufTtcclxuZXhwb3J0cy5pbnNpZGUgPSBpbnNpZGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucGxvdExpbmVzID0gdm9pZCAwO1xyXG5jb25zdCBwbG90TGluZXMgPSAoZywgcG9pbnRzKSA9PiB7XHJcbiAgICBjb25zdCBmaXJzdFBvaW50ID0gcG9pbnRzWzBdO1xyXG4gICAgZy5tb3ZlVG8oZmlyc3RQb2ludFswXSwgZy5jYW52YXMuaGVpZ2h0IC0gZmlyc3RQb2ludFsxXSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xyXG4gICAgICAgIGcubGluZVRvKHBvaW50WzBdLCBnLmNhbnZhcy5oZWlnaHQgLSBwb2ludFsxXSk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMucGxvdExpbmVzID0gcGxvdExpbmVzO1xyXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhYWJiIiwicG9pbnRfMSIsInBvaW50cyIsIm1pbiIsIm1pbjIiLCJtYXgiLCJtYXgyIiwiX19hd2FpdGVyIiwidGhpcyIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5Iiwib3BlbnR5cGVfanNfMSIsImdsX21hdHJpeF8xIiwicGF0aFRvUG9pbnRzXzEiLCJwb2ludHNUb1BvbHlnb25fMSIsInBsb3RMaW5lc18xIiwiZ2FtZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGFyU2VsZWN0Iiwic3ZnUHJldmlldyIsIm51bVRyaWFuZ2xlc0RvbSIsImciLCJnZXRDb250ZXh0IiwiRXJyb3IiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJhbHBoYUNoYXJzIiwic3BsaXQiLCJmb250IiwicG9seWdvbnMiLCJsb2FkQ2hhciIsImNoYXJUb0RyYXciLCJhUGF0aCIsImNoYXJUb0dseXBoIiwiZ2V0UGF0aCIsInBhdGhTdHIiLCJhQm91bmRzIiwic2l6ZSIsInZlYzIiLCJmcm9tVmFsdWVzIiwiTWF0aCIsInJvdW5kIiwieDIiLCJ4MSIsInkyIiwieTEiLCJpbm5lckhUTUwiLCJzdmdOcyIsIm5ld1N2ZyIsImNyZWF0ZUVsZW1lbnROUyIsInNldEF0dHJpYnV0ZU5TIiwidG9TdHJpbmciLCJqb2luIiwic3ZnUGF0aCIsImFwcGVuZENoaWxkIiwicGF0aFRvUG9pbnRzIiwicG9pbnRzVG9Qb2x5Z29ucyIsImZvckVhY2giLCJwb2ludCIsImhlaWdodCIsImxvYWRQYXRoIiwidG9QYXRoRGF0YSIsImdldEJvdW5kaW5nQm94IiwiZHJhdyIsImNsZWFyUmVjdCIsIndpZHRoIiwiZmlsbFN0eWxlIiwiYmVnaW5QYXRoIiwicG9pbnRMaXN0IiwicGxvdExpbmVzIiwic3Ryb2tlIiwibnVtVHJpYW5nbGVzIiwicG9seWdvbiIsInRyaWFuZ2xlIiwiZmlsbCIsInRleHRDb250ZW50IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibG9hZCIsImFscGhhQ2hhciIsImNoYXJPcHRpb24iLCJjcmVhdGVFbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImN1YmljQmV6aWVyVG9Qb2ludHMiLCJjb21tb25fMSIsImJlemllciIsInNwbGl0VGhyZXNob2xkIiwiY2xvbmUiLCJwMSIsInA0IiwiY3ViaWNCZXppZXJTcGxpdCIsImluc2VydEluZGV4IiwiZmlyc3QiLCJ0aW1lIiwibGVycCIsIm1pZExlcnAiLCJsZXJwMiIsInAyIiwicDMiLCJwb2ludE9uQ3VydmUiLCJwcmV2UG9pbnQiLCJuZXh0UG9pbnQiLCJzcGxpY2UiLCJkb3QiLCJub3JtYWxpemUiLCJzdWIiLCJjdWJpY0JlemllclRvUG9pbnRzXzEiLCJxdWFkcmF0aWNCZXppZXJUb1BvaW50c18xIiwiYmxvY2tSZWdleHAiLCJ2YWx1ZXNSZWdleHAiLCJzcGxpdEJvdW5kYXJ5IiwicGF0aEJsb2NrcyIsImxlbmd0aCIsImN1cnJlbnRQb2x5Z29uIiwiY3VycmVudFBvaW50IiwiY3JlYXRlIiwiYmxvY2siLCJzaGlmdCIsInBhdGhQYXJ0cyIsInN1YnN0cmluZyIsIm1hdGNoIiwibmV4dENvbW1hbmQiLCJub3JtYWxpc2VkQ29tbWFuZCIsInRvTG93ZXJDYXNlIiwiaXNSZWxhdGl2ZSIsInBhcnNlRmxvYXQiLCJhZGQiLCJwdXNoIiwiY29weSIsIm5leHRYIiwibmV4dFkiLCJmaXJzdFBvaW50IiwiemVybyIsInNlY29uZFBvaW50IiwidGhpcmRQb2ludCIsImZvdXJ0aFBvaW50IiwicXVhZHJhdGljQmV6aWVyVG9Qb2ludHMiLCJjb25zb2xlIiwibG9nIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsImVhcmN1dF8xIiwiYWFiYl8xIiwicG9seWdvbkFyZWFfMSIsImdyb3VwcyIsIm1hcCIsInBvaW50c0FyciIsImFyZWEiLCJwb2x5Z29uQXJlYVNpZ25lZCIsImNoaWxkcmVuIiwic29ydCIsImEiLCJiIiwiYWJzIiwicm9vdCIsImkiLCJwYXJlbnQiLCJqIiwiaW5zaWRlIiwidHJpYW5nbGVzIiwicHJvY2VzcyIsImdyb3VwIiwiY29vcmRzIiwiaG9sZXMiLCJjaGlsZCIsImluZGljZXMiLCJkZWZhdWx0IiwiZTEiLCJlMiIsImUzIiwiY29sb3VyIiwieCIsInJhbmRvbSIsInkiLCJ6IiwicG9seWdvbkFyZWEiLCJsYXN0SW5kZXgiLCJkZXRlcm1pbmFudDIiLCJxdWFkcmF0aWNCZXppZXJTcGxpdCIsInRpbWVBdFBvcyIsImNsYW1wIiwiZnJhY3QiLCJuZWdGcmFjdCIsIkVQU0lMT04iLCJmbG9vciIsInN0YXJ0UG9zIiwiZGlyIiwibmV3UG9zIiwidCIsImluUmFuZ2UiLCJhdmciLCJ0b1ByZWNpc2lvbjIiLCJzaWduIiwiY2VpbCIsImFkZHMiLCJkaXZpZGUiLCJtdWx0aXBseSIsInNjYWxlIiwiZXF1YWxzIiwiY2xhbXAyIiwib3V0IiwiYW1vdW50IiwidG9QcmVjaXNpb24iLCJvYmpzIiwicmVzdCIsIm9iaiIsInAiLCJjb3VudCIsImN1ciIsInAwIiwibW92ZVRvIiwiY2FudmFzIiwibGluZVRvIl0sInNvdXJjZVJvb3QiOiIifQ==