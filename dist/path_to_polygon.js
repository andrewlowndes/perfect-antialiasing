(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[504],{89:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0,t.aabb=e=>{const t=e[0],n={x:t.x,y:t.y},o={x:t.x,y:t.y};for(let t=1;t<e.length;t++){const a=e[t];n.x=Math.min(n.x,a.x),n.y=Math.min(n.y,a.y),o.x=Math.max(o.x,a.x),o.y=Math.max(o.y,a.y)}return{min:n,max:o}}},462:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabbContains=void 0,t.aabbContains=(e,t)=>e.min.x<=t.min.x&&e.min.y<=t.min.y&&e.max.x>=t.max.x&&e.max.y>=t.max.y},922:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabbIntersect=void 0,t.aabbIntersect=(e,t)=>t.min.x<=e.max.x&&t.max.x>=e.min.x&&t.min.y<=e.max.y&&t.max.y>=e.min.y},955:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.combineAabbs=void 0;const o=n(669);t.combineAabbs=e=>{if(!e.length)return;const t=e[0],n={min:t.min,max:t.max};for(let t=1;t<e.length;t++){const a=e[t];n.min=o.min2(n.min,a.min),n.max=o.max2(n.max,a.max)}return n}},438:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(a,s){function i(e){try{l(o.next(e))}catch(e){s(e)}}function r(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,r)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const a=n(422),s=n(705),i=n(199),r=n(717),l=document.getElementById("game"),c=document.getElementById("charSelect"),y=document.getElementById("svgPreview"),x=l.getContext("2d");if(!x)throw new Error("Could not get canvas graphics :(");x.imageSmoothingEnabled=!1;const p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");let h,u=[],d=[];const m=e=>{const t=h.charToGlyph(e).getPath(0,0,1e3);((e,t)=>{const n={x:Math.round(t.x2-t.x1),y:Math.round(t.y2-t.y1)};y.innerHTML="";const o="http://www.w3.org/2000/svg",a=document.createElementNS(o,"svg");a.setAttributeNS(null,"width",n.x.toString()),a.setAttributeNS(null,"height",n.y.toString()),a.setAttributeNS(null,"viewBox",[t.x1,t.y1,n.x,n.y].join(" "));const r=document.createElementNS(o,"path");r.setAttributeNS(null,"d",e),a.appendChild(r),y.appendChild(a),u=s.pathToPoints(e,-.99),d=i.pointsToPolygons(u),u.forEach((e=>e.forEach((e=>{e.x-=t.x1,e.y=l.height-e.y+t.y1}))))})(t.toPathData(5),t.getBoundingBox())},b=()=>{x.clearRect(0,0,l.width,l.height),x.fillStyle="black",x.beginPath(),u.forEach((e=>{r.plotLines(x,e)})),x.stroke(),x.fillStyle="black",d.forEach((e=>{e.forEach((e=>{x.beginPath(),r.plotLines(x,e.points),x.fill()}))})),requestAnimationFrame(b)};o(void 0,void 0,void 0,(function*(){h=yield a.load("./media/Timeless.ttf"),c.innerHTML="",p.forEach((e=>{const t=document.createElement("option");t.value=e,t.textContent=e,c.appendChild(t)})),c.addEventListener("change",(()=>{""!==c.value?m(c.value):(u=[],d=[],y.innerHTML="")})),m("A"),requestAnimationFrame(b)}))},856:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cubicBezierToPoints=void 0;const o=n(345),a=n(669);t.cubicBezierToPoints=(e,t)=>{const n=[{x:e.p1.x,y:e.p1.y},{x:e.p4.x,y:e.p4.y}],s=(e,i,r,l,c=!1)=>{const y=o.lerp(i,r,.5),x=a.lerp2(e.p2,e.p3,y),p=a.lerp2(a.lerp2(a.lerp2(e.p1,e.p2,y),x,y),a.lerp2(x,a.lerp2(e.p3,e.p4,y),y),y),h=n[l-1],u=n[l];n.splice(l,0,p),(a.dot(a.normalize(a.sub(h,p)),a.normalize(a.sub(u,p)))>t||c)&&(s(e,y,r,l+1),s(e,i,y,l))};return s(e,0,1,1,!0),n}},705:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pathToPoints=void 0;const o=n(856),a=n(354),s=/(?=[astvzqmhlc])/gi,i=/(-?[0-9]*\.?[0-9]+)(?:e[-+]?\d+)?/gi;t.pathToPoints=(e,t)=>{const n=e.split(s),r=[];if(n.length){let e=[];const s={x:0,y:0};for(;n.length;){const l=n.shift();if(!(null==l?void 0:l.length))continue;const c=l.substring(1).match(i)||[],y=l[0],x=y.toLowerCase(),p=y===x;switch(x){case"l":case"m":for(;c.length;){const t={x:parseFloat(c.shift()),y:parseFloat(c.shift())};p&&(t.x+=s.x,t.y+=s.y),e.push(t),s.x=t.x,s.y=t.y}break;case"h":for(;c.length;){let t=parseFloat(c.shift());p&&(t+=s.x),e.push({x:t,y:s.y}),s.x=t}break;case"v":for(;c.length;){let t=parseFloat(c.shift());p&&(t+=s.y),e.push({x:s.x,y:t}),s.y=t}break;case"z":const n=e[0];e.push({x:n.x,y:n.y}),r.push(e),e=[],s.x=0,s.y=0;break;case"c":for(;c.length;){const n={x:parseFloat(c.shift()),y:parseFloat(c.shift())},a={x:parseFloat(c.shift()),y:parseFloat(c.shift())},i={x:parseFloat(c.shift()),y:parseFloat(c.shift())};p&&(n.x+=s.x,n.y+=s.y,a.x+=s.x,a.y+=s.y,i.x+=s.x,i.y+=s.y),e.push(...o.cubicBezierToPoints({p1:s,p2:n,p3:a,p4:i},t)),s.x=i.x,s.y=i.y}break;case"q":for(;c.length;){const n={x:parseFloat(c.shift()),y:parseFloat(c.shift())},o={x:parseFloat(c.shift()),y:parseFloat(c.shift())};p&&(n.x+=s.x,n.y+=s.y,o.x+=s.x,o.y+=s.y),e.push(...a.quadraticBezierToPoints({p1:s,p2:n,p3:o},t)),s.x=o.x,s.y=o.y}break;case"s":case"t":case"a":console.log(x+" is not implemented")}}e.length&&r.push(e)}return r}},199:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pointsToPolygons=void 0;const a=o(n(187)),s=n(89),i=n(462),r=n(922),l=n(955),c=n(669),y=n(923);t.pointsToPolygons=e=>{let t=[],n=[];if(e.forEach((e=>{const o={points:e,aabb:s.aabb(e)};y.polygonAreaSigned(e)>0?t.push(o):n.push(o)})),t.length){if(n.length){const e=l.combineAabbs(t.map((e=>e.aabb))),o=l.combineAabbs(n.map((e=>e.aabb)));if(i.aabbContains(o,e)){const e=n;n=t,t=e}}}else{const e=n;n=t,t=e}const o=[];return t.length?(t.forEach((e=>{const t=[],s=[],i=[];i.push(...e.points),e.points.map((e=>{t.push(e.x),t.push(e.y)})),n.filter((t=>r.aabbIntersect(t.aabb,e.aabb))).forEach((e=>{i.push(...e.points),s.push(t.length/2),e.points.forEach((e=>{t.push(e.x),t.push(e.y)}))}));const l=a.default(t,s),y=[];for(let e=0;e<l.length;e+=3){let t=i[l[e]];const n=i[l[e+1]];let o=i[l[e+2]];y.push({p1:t,p2:n,p3:o,e1:c.sub(n,t),e2:c.sub(o,n),e3:c.sub(t,o),points:[t,n,o],colour:{x:Math.round(255*Math.random()),y:Math.round(255*Math.random()),z:Math.round(255*Math.random())}})}y.length&&o.push(y)})),o):o}},923:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=n(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let n=0;for(let a=0;a<t;a++)n+=o.determinant2(e[a],e[a+1]);return n+=o.determinant2(e[t],e[0]),n/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},354:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.quadraticBezierToPoints=void 0;const o=n(345),a=n(669);t.quadraticBezierToPoints=(e,t)=>{const n=[{x:e.p1.x,y:e.p1.y},{x:e.p3.x,y:e.p3.y}],s=(e,i,r,l)=>{const c=o.lerp(i,r,.5),y=a.lerp2(a.lerp2(e.p1,e.p2,c),a.lerp2(e.p2,e.p3,c),c),x=n[l-1],p=n[l];n.splice(l,0,y),a.dot(a.normalize(a.sub(x,y)),a.normalize(a.sub(p,y)))>t&&(s(e,c,r,l+1),s(e,i,c,l))};return s(e,0,1,1),n}},345:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,n)=>Math.max(Math.min(e,n),t),t.timeAtPos=(e,n,o)=>n?t.clamp((o-e)/n,0,1):0,t.lerp=(e,t,n)=>e*(1-n)+t*n},669:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=n(345);t.clamp2=(e,t,n)=>({x:o.clamp(e.x,t.x,n.x),y:o.clamp(e.y,t.y,n.y)}),t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,n)=>({x:o.lerp(e.x,t.x,n),y:o.lerp(e.y,t.y,n)}),t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const n={x:e.x,y:e.y};return t.forEach((e=>{n.x=Math.min(n.x,e.x),n.y=Math.min(n.y,e.y)})),n},t.max2=(e,...t)=>{const n={x:e.x,y:e.y};return t.forEach((e=>{n.x=Math.max(n.x,e.x),n.y=Math.max(n.y,e.y)})),n},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,n)=>!(e.x>n.x||e.x<t.x||e.y>n.y||e.y<t.y)},717:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.plotLines=void 0,t.plotLines=(e,t)=>{const n=t[0];e.moveTo(n.x,e.canvas.height-n.y);for(let n=0;n<t.length;n++){const o=t[n];e.lineTo(o.x,e.canvas.height-o.y)}}}},e=>{"use strict";e(e.s=438)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,