(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[323],{558:function(e,r,n){"use strict";var t=this&&this.__awaiter||function(e,r,n,t){return new(n||(n=Promise))((function(o,i){function a(e){try{c(t.next(e))}catch(e){i(e)}}function s(e){try{c(t.throw(e))}catch(e){i(e)}}function c(e){var r;e.done?o(e.value):(r=e.value,r instanceof n?r:new n((function(e){e(r)}))).then(a,s)}c((t=t.apply(e,r||[])).next())}))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(887),a=n(886),s=o(n(822)),c=o(n(934));let l,p,v,x,f,P,d;const u=()=>{l.clear(l.COLOR_BUFFER_BIT),i.mat4.rotateY(v,v,.04/Math.PI),i.mat4.multiply(f,p,v),i.mat4.multiply(P,x,f),l.uniformMatrix4fv(d,!1,P),l.drawArrays(l.TRIANGLES,0,3),requestAnimationFrame(u)};t(void 0,void 0,void 0,(function*(){(()=>{const e=document.getElementById("canvas1");l=e.getContext("webgl2",{antialias:!1,premultipliedAlpha:!1});const r=Math.sqrt(2)/e.width,n=new Float32Array([1,-1,0,0,1,0,-1,-1,0]),t=new Float32Array([0,1,0,-1,-1,0,1,-1,0]),o=new Float32Array([-1,-1,0,1,-1,0,0,1,0]),u=new Float32Array([1,0,0,0,1,0,0,0,1]),m=new Float32Array([0,1,2]),A=l.createBuffer();l.bindBuffer(l.ARRAY_BUFFER,A),l.bufferData(l.ARRAY_BUFFER,n,l.STATIC_DRAW);const h=l.createBuffer();l.bindBuffer(l.ARRAY_BUFFER,h),l.bufferData(l.ARRAY_BUFFER,t,l.STATIC_DRAW);const g=l.createBuffer();l.bindBuffer(l.ARRAY_BUFFER,g),l.bufferData(l.ARRAY_BUFFER,o,l.STATIC_DRAW);const b=l.createBuffer();l.bindBuffer(l.ARRAY_BUFFER,b),l.bufferData(l.ARRAY_BUFFER,m,l.STATIC_DRAW);const y=l.createBuffer();l.bindBuffer(l.ARRAY_BUFFER,y),l.bufferData(l.ARRAY_BUFFER,u,l.STATIC_DRAW);const R=a.loadShader(l,s.default,c.default);l.useProgram(R);const F=l.getAttribLocation(R,"pos");l.bindBuffer(l.ARRAY_BUFFER,A),l.vertexAttribPointer(F,3,l.FLOAT,!1,0,0),l.enableVertexAttribArray(F);const M=l.getAttribLocation(R,"colour");l.bindBuffer(l.ARRAY_BUFFER,y),l.vertexAttribPointer(M,3,l.FLOAT,!1,0,0),l.enableVertexAttribArray(M);const _=l.getAttribLocation(R,"prevPos");l.bindBuffer(l.ARRAY_BUFFER,g),l.vertexAttribPointer(_,3,l.FLOAT,!1,0,0),l.enableVertexAttribArray(_);const S=l.getAttribLocation(R,"nextPos");l.bindBuffer(l.ARRAY_BUFFER,h),l.vertexAttribPointer(S,3,l.FLOAT,!1,0,0),l.enableVertexAttribArray(S);const T=l.getUniformLocation(R,"offset");l.uniform1f(T,r);const w=l.getUniformLocation(R,"screenSize");l.uniform2fv(w,[e.width,e.height]),v=i.mat4.create(),p=i.mat4.create(),i.mat4.lookAt(p,[0,0,-5],[0,0,0],[0,1,0]),x=i.mat4.create(),i.mat4.perspective(x,.25*Math.PI,e.width/e.height,1,100),f=i.mat4.create(),P=i.mat4.create(),i.mat4.multiply(f,p,v),i.mat4.multiply(P,x,f),d=l.getUniformLocation(R,"modelViewProjection"),l.uniformMatrix4fv(d,!1,P),l.clearColor(0,0,0,0),l.viewport(0,0,e.width,e.height),l.enable(l.BLEND),l.blendFunc(l.ONE,l.ONE)})(),u()}))},886:(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.loadShader=void 0,r.loadShader=(e,r,n)=>{const t=e.createShader(e.VERTEX_SHADER);if(e.shaderSource(t,r),e.compileShader(t),""!==String(e.getShaderInfoLog(t)).trim())throw new Error(String(e.getShaderInfoLog(t)));const o=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(o,n),e.compileShader(o),""!==String(e.getShaderInfoLog(o)).trim())throw new Error(String(e.getShaderInfoLog(o)));const i=e.createProgram();if(e.attachShader(i,t),e.attachShader(i,o),e.linkProgram(i),""!==String(e.getProgramInfoLog(i)).trim())throw new Error(String(e.getProgramInfoLog(i)));return i}},934:e=>{"use strict";e.exports="#version 300 es\r\n\r\nprecision highp float;\r\n\r\nin vec3 vColour;\r\n\r\nflat in vec4 bounds;\r\nflat in vec2 vPrevPos;\r\nflat in vec2 vPos;\r\nflat in vec2 vNextPos;\r\nflat in vec2 e1;\r\nflat in vec2 e2;\r\nflat in vec2 e3;\r\n\r\nconst float delta = 0.000001;\r\n\r\nout vec4 outColor;\r\n\r\nvec4 sort(vec4 val) {\r\n  float a = min(val.x, val.y);\r\n  float b = max(val.x, val.y);\r\n  float c = min(val.z, val.w);\r\n  float d = max(val.z, val.w);\r\n\r\n  float e = min(b, c);\r\n  float f = max(b, c);\r\n  float h = max(a, e);\r\n  float i = min(f, d);\r\n\r\n  return vec4(min(a, e), min(h, i), max(h, i), max(f, d));\r\n}\r\n\r\nfloat det2(vec2 p1, vec2 p2) {\r\n  return (p1.x * p2.y) - (p1.y * p2.x);\r\n}\r\n\r\nfloat timeAtPos(float startPos, float dir, float newPos) {\r\n  if (abs(dir) < delta) {\r\n      return 0.0;\r\n  }\r\n\r\n  return clamp((newPos - startPos) / dir, 0.0, 1.0);\r\n}\r\n\r\nvoid main(void) {\r\n  //remove conservative rasterisation overdraw\r\n  if (gl_FragCoord.x < bounds.x || gl_FragCoord.y < bounds.y || gl_FragCoord.x > bounds.z || gl_FragCoord.y > bounds.w) {\r\n      discard;\r\n  }\r\n\r\n  //intersect the triangle with the pixel bounds\r\n  vec2 pixelMin = floor(gl_FragCoord.xy);\r\n  vec2 pixelMax = ceil(gl_FragCoord.xy);\r\n\r\n  vec4 firstLineTs = sort(vec4(\r\n      timeAtPos(vPrevPos.x, e1.x, pixelMin.x),\r\n      timeAtPos(vPrevPos.x, e1.x, pixelMax.x),\r\n      timeAtPos(vPrevPos.y, e1.y, pixelMin.y),\r\n      timeAtPos(vPrevPos.y, e1.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p1 = clamp(vPrevPos + e1 * firstLineTs.x, pixelMin, pixelMax);\r\n  vec2 p2 = clamp(vPrevPos + e1 * firstLineTs.y, pixelMin, pixelMax);\r\n  vec2 p3 = clamp(vPrevPos + e1 * firstLineTs.z, pixelMin, pixelMax);\r\n  vec2 p4 = clamp(vPrevPos + e1 * firstLineTs.w, pixelMin, pixelMax);\r\n\r\n  vec4 secondLineTs = sort(vec4(\r\n      timeAtPos(vPos.x, e2.x, pixelMin.x),\r\n      timeAtPos(vPos.x, e2.x, pixelMax.x),\r\n      timeAtPos(vPos.y, e2.y, pixelMin.y),\r\n      timeAtPos(vPos.y, e2.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p5 = clamp(vPos + e2 * secondLineTs.x, pixelMin, pixelMax);\r\n  vec2 p6 = clamp(vPos + e2 * secondLineTs.y, pixelMin, pixelMax);\r\n  vec2 p7 = clamp(vPos + e2 * secondLineTs.z, pixelMin, pixelMax);\r\n  vec2 p8 = clamp(vPos + e2 * secondLineTs.w, pixelMin, pixelMax);\r\n  \r\n  vec4 thirdLineTs = sort(vec4(\r\n      timeAtPos(vNextPos.x, e3.x, pixelMin.x),\r\n      timeAtPos(vNextPos.x, e3.x, pixelMax.x),\r\n      timeAtPos(vNextPos.y, e3.y, pixelMin.y),\r\n      timeAtPos(vNextPos.y, e3.y, pixelMax.y)\r\n  ));\r\n\r\n  vec2 p9  = clamp(vNextPos + e3 * thirdLineTs.x, pixelMin, pixelMax);\r\n  vec2 p10 = clamp(vNextPos + e3 * thirdLineTs.y, pixelMin, pixelMax);\r\n  vec2 p11 = clamp(vNextPos + e3 * thirdLineTs.z, pixelMin, pixelMax);\r\n  vec2 p12 = clamp(vNextPos + e3 * thirdLineTs.w, pixelMin, pixelMax);\r\n\r\n  //compute the area under the formed polygon\r\n  float polygonArea = (\r\n      det2(p1, p2) + det2(p2, p3) + det2(p3, p4) + det2(p4, p5) +\r\n      det2(p5, p6) + det2(p6, p7) + det2(p7, p8) + det2(p8, p9) + \r\n      det2(p9, p10) + det2(p10, p11) + det2(p11, p12) + det2(p12, p1)\r\n  ) / 2.0;\r\n\r\n  float alphaAmount = clamp(abs(polygonArea), 0.0, 1.0);\r\n  \r\n  outColor = vec4(vColour, alphaAmount);\r\n}\r\n"},822:e=>{"use strict";e.exports="#version 300 es\r\n\r\nuniform vec2 screenSize;\r\nuniform float offset;\r\nuniform mat4 modelViewProjection;\r\n\r\nin vec3 pos;\r\nin vec3 colour;\r\nin vec3 prevPos;\r\nin vec3 nextPos;\r\n\r\nout vec3 vColour;\r\n\r\nflat out vec4 bounds;\r\nflat out vec2 vPrevPos;\r\nflat out vec2 vPos;\r\nflat out vec2 vNextPos;\r\nflat out vec2 e1;\r\nflat out vec2 e2;\r\nflat out vec2 e3;\r\n\r\nconst float delta = 0.0000001;\r\n\r\nvec2 posToClipSpace(vec3 pos) {\r\n    vec4 proj_pos = modelViewProjection * vec4(pos, 1.0);\r\n    return proj_pos.xy / proj_pos.w;\r\n}\r\n\r\nvec2 clipToScreenSpace(vec2 pos) {\r\n    return screenSize.xy * (pos / 2.0 + 0.5);\r\n}\r\n\r\nvoid main(void) {\r\n    vec2 clipPos = posToClipSpace(pos);\r\n    vec2 clipNextPos = posToClipSpace(nextPos);\r\n    vec2 clipPrevPos = posToClipSpace(prevPos);\r\n\r\n    // determine a new vertex position such that it covers the neighbour pixel centers\r\n    vec2 a = normalize(clipPos - clipPrevPos);\r\n    vec2 b = normalize(clipPos - clipNextPos);\r\n    float angle = sqrt((1.0 - dot(a, b)) / 2.0);\r\n\r\n    vec2 vecPos;\r\n    if (abs(angle) > delta) {\r\n        vecPos = clipPos + normalize(a + b) * (offset / angle);\r\n    } else {\r\n        vecPos = clipPos;\r\n    }\r\n\r\n    // compute a bounding box and pass to the fragment shader so we dont render outside the inflated triangle bounds\r\n    vec2 screenPos = clipToScreenSpace(clipPos);\r\n    vec2 screenNextPos = clipToScreenSpace(clipNextPos);\r\n    vec2 screenPrevPos = clipToScreenSpace(clipPrevPos);\r\n    \r\n    bounds = vec4(\r\n        min(min(screenPos, screenNextPos), screenPrevPos) - 0.5,\r\n        max(max(screenPos, screenNextPos), screenPrevPos) + 0.5\r\n    );\r\n\r\n    //translate the position into screen space\r\n    vPrevPos = screenPrevPos;\r\n    vPos = screenPos;\r\n    vNextPos = screenNextPos;\r\n    e1 = vPos - vPrevPos;\r\n    e2 = vNextPos - vPos;\r\n    e3 = vPrevPos - vNextPos;\r\n    \r\n    vColour = colour;\r\n    gl_Position = vec4(vecPos, 0.0, 1.0);\r\n}\r\n"}},e=>{"use strict";e(e.s=558)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,