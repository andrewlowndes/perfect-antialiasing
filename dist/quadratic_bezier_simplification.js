"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[42],{747:(e,c,a)=>{const o=a(887),r=a(354),l=a(717),s=document.getElementById("game"),t=s.getContext("2d");if(!t)throw new Error("Could not get canvas graphics :(");const n=[{p1:o.vec2.fromValues(10,10),p2:o.vec2.fromValues(10,100),p3:o.vec2.fromValues(100,10)},{p1:o.vec2.fromValues(110,10),p2:o.vec2.fromValues(200,100),p3:o.vec2.fromValues(200,10)},{p1:o.vec2.fromValues(210,10),p2:o.vec2.fromValues(260,100),p3:o.vec2.fromValues(300,10)},{p1:o.vec2.fromValues(310,10),p2:o.vec2.fromValues(360,50),p3:o.vec2.fromValues(400,10)},{p1:o.vec2.fromValues(450,10),p2:o.vec2.fromValues(410,100),p3:o.vec2.fromValues(460,10)},{p1:o.vec2.fromValues(550,10),p2:o.vec2.fromValues(600,100),p3:o.vec2.fromValues(560,10)},{p1:o.vec2.fromValues(610,10),p2:o.vec2.fromValues(650,10),p3:o.vec2.fromValues(700,10)},{p1:o.vec2.fromValues(10,200),p2:o.vec2.fromValues(10,110),p3:o.vec2.fromValues(100,200)},{p1:o.vec2.fromValues(110,200),p2:o.vec2.fromValues(200,110),p3:o.vec2.fromValues(200,200)},{p1:o.vec2.fromValues(210,200),p2:o.vec2.fromValues(260,110),p3:o.vec2.fromValues(300,200)},{p1:o.vec2.fromValues(310,200),p2:o.vec2.fromValues(360,150),p3:o.vec2.fromValues(400,200)},{p1:o.vec2.fromValues(450,200),p2:o.vec2.fromValues(410,110),p3:o.vec2.fromValues(460,200)},{p1:o.vec2.fromValues(550,200),p2:o.vec2.fromValues(600,110),p3:o.vec2.fromValues(560,200)},{p1:o.vec2.fromValues(610,110),p2:o.vec2.fromValues(650,110),p3:o.vec2.fromValues(700,110)}];requestAnimationFrame((()=>{t.clearRect(0,0,s.width,s.height);for(const e of n){t.setLineDash([1,2]),t.strokeStyle="blue",t.beginPath(),(0,l.plotLines)(t,[e.p1,e.p2,e.p3]),t.stroke();const c=(0,r.quadraticBezierToPoints)(e,-.99);t.setLineDash([]),t.strokeStyle="green",t.beginPath(),(0,l.plotLines)(t,c),t.stroke()}}))},354:(e,c,a)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.quadraticBezierToPoints=void 0;const o=a(887),r=a(345),l=a(669);c.quadraticBezierToPoints=(e,c)=>{const a=[o.vec2.clone(e.p1),o.vec2.clone(e.p3)],s=(e,o,t,n)=>{const v=(0,r.lerp)(o,t,.5),p=(0,l.lerp2)((0,l.lerp2)(e.p1,e.p2,v),(0,l.lerp2)(e.p2,e.p3,v),v),i=a[n-1],u=a[n];a.splice(n,0,p),(0,l.dot)((0,l.normalize)((0,l.sub)(i,p)),(0,l.normalize)((0,l.sub)(u,p)))>c&&(s(e,v,t,n+1),s(e,o,v,n))};return s(e,0,1,1),a}},345:(e,c)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.lerp=c.timeAtPos=c.clamp=c.fract=c.negFract=c.EPSILON=void 0,c.EPSILON=1e-6,c.negFract=e=>1-e+Math.floor(e),c.fract=e=>e-Math.floor(e),c.clamp=(e,c,a)=>Math.max(Math.min(e,a),c),c.timeAtPos=(e,a,o)=>a?(0,c.clamp)((o-e)/a,0,1):0,c.lerp=(e,c,a)=>e*(1-a)+c*a},669:(e,c,a)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.inside=c.inRange=c.avg=c.max2=c.min2=c.toPrecision2=c.lerp2=c.normalize=c.length=c.dot=c.sign=c.abs=c.ceil=c.floor=c.sub=c.adds=c.add=c.divide=c.multiply=c.scale=c.equals=c.determinant2=c.clamp2=void 0;const o=a(887),r=a(345);c.clamp2=(e,c,a)=>{const r=o.vec2.clone(e);return o.vec2.min(r,r,a),o.vec2.max(r,r,c),r},c.determinant2=(e,c)=>e[0]*c[1]-e[1]*c[0],c.equals=o.vec2.equals,c.scale=(e,c)=>o.vec2.scale(o.vec2.create(),e,c),c.multiply=(e,c)=>o.vec2.multiply(o.vec2.create(),e,c),c.divide=(e,c)=>o.vec2.divide(o.vec2.create(),e,c),c.add=(e,c)=>o.vec2.add(o.vec2.create(),e,c),c.adds=(e,c)=>o.vec2.fromValues(e[0]+c,e[1]+c),c.sub=(e,c)=>o.vec2.sub(o.vec2.create(),e,c),c.floor=e=>o.vec2.floor(o.vec2.create(),e),c.ceil=e=>o.vec2.ceil(o.vec2.create(),e),c.abs=e=>o.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),c.sign=e=>o.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),c.dot=(e,c)=>o.vec2.dot(e,c),c.length=e=>o.vec2.length(e),c.normalize=e=>(0,c.scale)(e,1/(0,c.length)(e)),c.lerp2=(e,c,a)=>o.vec2.lerp(o.vec2.create(),e,c,a),c.toPrecision2=(e,c)=>(e[0]=parseFloat(e[0].toPrecision(c)),e[1]=parseFloat(e[1].toPrecision(c)),e),c.min2=(...e)=>{const[c,...a]=e,r=o.vec2.clone(c);return a.forEach((e=>{o.vec2.min(r,r,e)})),r},c.max2=(...e)=>{const[c,...a]=e,r=o.vec2.clone(c);return a.forEach((e=>{o.vec2.max(r,r,e)})),r},c.avg=(...e)=>{const c=o.vec2.create();return e.length&&(e.forEach((e=>{o.vec2.add(c,c,e)})),o.vec2.scale(c,c,1/e.length)),c},c.inRange=(e,c,a)=>!(e[0]>a[0]||e[0]<c[0]||e[1]>a[1]||e[1]<c[1]),c.inside=(e,c)=>{let a=0,o=e[e.length-1];return e.forEach((e=>{const l=o[1]<e[1]?o:e,s=o[1]<e[1]?e:o;l[1]<c[1]+r.EPSILON&&s[1]>c[1]+r.EPSILON&&(s[0]-l[0])*(c[1]-l[1])>(c[0]-l[0])*(s[1]-l[1])&&(a+=1),o=e})),a%2!=0}},717:(e,c)=>{Object.defineProperty(c,"__esModule",{value:!0}),c.plotLines=void 0,c.plotLines=(e,c)=>{const a=c[0];e.moveTo(a[0],e.canvas.height-a[1]);for(let a=0;a<c.length;a++){const o=c[a];e.lineTo(o[0],e.canvas.height-o[1])}}}},e=>{e(e.s=747)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,