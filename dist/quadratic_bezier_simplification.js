(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[42],{747:(e,c,a)=>{"use strict";const r=a(887),o=a(354),s=a(717),l=document.getElementById("game"),t=l.getContext("2d");if(!t)throw new Error("Could not get canvas graphics :(");const v=[{p1:r.vec2.fromValues(10,10),p2:r.vec2.fromValues(10,100),p3:r.vec2.fromValues(100,10)},{p1:r.vec2.fromValues(110,10),p2:r.vec2.fromValues(200,100),p3:r.vec2.fromValues(200,10)},{p1:r.vec2.fromValues(210,10),p2:r.vec2.fromValues(260,100),p3:r.vec2.fromValues(300,10)},{p1:r.vec2.fromValues(310,10),p2:r.vec2.fromValues(360,50),p3:r.vec2.fromValues(400,10)},{p1:r.vec2.fromValues(450,10),p2:r.vec2.fromValues(410,100),p3:r.vec2.fromValues(460,10)},{p1:r.vec2.fromValues(550,10),p2:r.vec2.fromValues(600,100),p3:r.vec2.fromValues(560,10)},{p1:r.vec2.fromValues(610,10),p2:r.vec2.fromValues(650,10),p3:r.vec2.fromValues(700,10)},{p1:r.vec2.fromValues(10,200),p2:r.vec2.fromValues(10,110),p3:r.vec2.fromValues(100,200)},{p1:r.vec2.fromValues(110,200),p2:r.vec2.fromValues(200,110),p3:r.vec2.fromValues(200,200)},{p1:r.vec2.fromValues(210,200),p2:r.vec2.fromValues(260,110),p3:r.vec2.fromValues(300,200)},{p1:r.vec2.fromValues(310,200),p2:r.vec2.fromValues(360,150),p3:r.vec2.fromValues(400,200)},{p1:r.vec2.fromValues(450,200),p2:r.vec2.fromValues(410,110),p3:r.vec2.fromValues(460,200)},{p1:r.vec2.fromValues(550,200),p2:r.vec2.fromValues(600,110),p3:r.vec2.fromValues(560,200)},{p1:r.vec2.fromValues(610,110),p2:r.vec2.fromValues(650,110),p3:r.vec2.fromValues(700,110)}];requestAnimationFrame((()=>{t.clearRect(0,0,l.width,l.height);for(let e of v){t.setLineDash([1,2]),t.strokeStyle="blue",t.beginPath(),s.plotLines(t,[e.p1,e.p2,e.p3]),t.stroke();const c=o.quadraticBezierToPoints(e,-.99);t.setLineDash([]),t.strokeStyle="green",t.beginPath(),s.plotLines(t,c),t.stroke()}}))},354:(e,c,a)=>{"use strict";Object.defineProperty(c,"__esModule",{value:!0}),c.quadraticBezierToPoints=void 0;const r=a(887),o=a(345),s=a(669);c.quadraticBezierToPoints=(e,c)=>{const a=[r.vec2.clone(e.p1),r.vec2.clone(e.p3)],l=(e,r,t,v)=>{const n=o.lerp(r,t,.5),u=s.lerp2(s.lerp2(e.p1,e.p2,n),s.lerp2(e.p2,e.p3,n),n),p=a[v-1],i=a[v];a.splice(v,0,u),s.dot(s.normalize(s.sub(p,u)),s.normalize(s.sub(i,u)))>c&&(l(e,n,t,v+1),l(e,r,n,v))};return l(e,0,1,1),a}},345:(e,c)=>{"use strict";Object.defineProperty(c,"__esModule",{value:!0}),c.lerp=c.timeAtPos=c.clamp=c.fract=c.negFract=c.EPSILON=void 0,c.EPSILON=1e-6,c.negFract=e=>1-e+Math.floor(e),c.fract=e=>e-Math.floor(e),c.clamp=(e,c,a)=>Math.max(Math.min(e,a),c),c.timeAtPos=(e,a,r)=>a?c.clamp((r-e)/a,0,1):0,c.lerp=(e,c,a)=>e*(1-a)+c*a},669:(e,c,a)=>{"use strict";Object.defineProperty(c,"__esModule",{value:!0}),c.inRange=c.avg=c.max2=c.min2=c.toPrecision2=c.lerp2=c.normalize=c.length=c.dot=c.sign=c.abs=c.ceil=c.floor=c.sub=c.adds=c.add=c.divide=c.multiply=c.scale=c.equals=c.determinant2=c.clamp2=void 0;const r=a(887);c.clamp2=(e,c,a)=>{const o=r.vec2.clone(e);return r.vec2.min(o,o,a),r.vec2.max(o,o,c),o},c.determinant2=(e,c)=>e[0]*c[1]-e[1]*c[0],c.equals=r.vec2.equals,c.scale=(e,c)=>r.vec2.scale(r.vec2.create(),e,c),c.multiply=(e,c)=>r.vec2.multiply(r.vec2.create(),e,c),c.divide=(e,c)=>r.vec2.divide(r.vec2.create(),e,c),c.add=(e,c)=>r.vec2.add(r.vec2.create(),e,c),c.adds=(e,c)=>r.vec2.fromValues(e[0]+c,e[1]+c),c.sub=(e,c)=>r.vec2.sub(r.vec2.create(),e,c),c.floor=e=>r.vec2.floor(r.vec2.create(),e),c.ceil=e=>r.vec2.ceil(r.vec2.create(),e),c.abs=e=>r.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),c.sign=e=>r.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),c.dot=(e,c)=>r.vec2.dot(e,c),c.length=e=>r.vec2.length(e),c.normalize=e=>c.scale(e,1/c.length(e)),c.lerp2=(e,c,a)=>r.vec2.lerp(r.vec2.create(),e,c,a),c.toPrecision2=(e,c)=>(e[0]=parseFloat(e[0].toPrecision(c)),e[1]=parseFloat(e[1].toPrecision(c)),e),c.min2=(...e)=>{const[c,...a]=e,o=r.vec2.clone(c);return a.forEach((e=>{r.vec2.min(o,o,e)})),o},c.max2=(...e)=>{const[c,...a]=e,o=r.vec2.clone(c);return a.forEach((e=>{r.vec2.max(o,o,e)})),o},c.avg=(...e)=>{const c=r.vec2.create();return e.length&&(e.forEach((e=>{r.vec2.add(c,c,e)})),r.vec2.scale(c,c,1/e.length)),c},c.inRange=(e,c,a)=>!(e[0]>a[0]||e[0]<c[0]||e[1]>a[1]||e[1]<c[1])},717:(e,c)=>{"use strict";Object.defineProperty(c,"__esModule",{value:!0}),c.plotLines=void 0,c.plotLines=(e,c)=>{const a=c[0];e.moveTo(a[0],e.canvas.height-a[1]);for(let a=0;a<c.length;a++){const r=c[a];e.lineTo(r[0],e.canvas.height-r[1])}}}},e=>{"use strict";e(e.s=747)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,