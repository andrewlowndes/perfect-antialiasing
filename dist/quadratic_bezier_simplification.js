(()=>{"use strict";var e={354:(e,x,t)=>{Object.defineProperty(x,"__esModule",{value:!0}),x.quadraticBezierToPoints=void 0;const y=t(345),a=t(669);x.quadraticBezierToPoints=(e,x)=>{const t=[{x:e.p1.x,y:e.p1.y},{x:e.p3.x,y:e.p3.y}],o=(e,p,r,n)=>{const i=y.lerp(p,r,.5),l=a.lerp2(a.lerp2(e.p1,e.p2,i),a.lerp2(e.p2,e.p3,i),i),s=t[n-1],c=t[n];t.splice(n,0,l),a.dot(a.normalize(a.sub(s,l)),a.normalize(a.sub(c,l)))>x&&(o(e,i,r,n+1),o(e,p,i,n))};return o(e,0,1,1),t}},345:(e,x)=>{Object.defineProperty(x,"__esModule",{value:!0}),x.lerp=x.timeAtPos=x.clamp=x.fract=x.negFract=x.EPSILON=void 0,x.EPSILON=1e-6,x.negFract=e=>1-e+Math.floor(e),x.fract=e=>e-Math.floor(e),x.clamp=(e,x,t)=>Math.max(Math.min(e,t),x),x.timeAtPos=(e,t,y)=>t?x.clamp((y-e)/t,0,1):0,x.lerp=(e,x,t)=>e*(1-t)+x*t},669:(e,x,t)=>{Object.defineProperty(x,"__esModule",{value:!0}),x.inRange=x.avg=x.max2=x.min2=x.toPrecision2=x.lerp2=x.normalize=x.length=x.equal=x.dot=x.sign=x.abs=x.ceil=x.floor=x.sub=x.adds=x.add=x.divide=x.multiply=x.scale=x.equals=x.determinant2=x.clamp2=void 0;const y=t(345);x.clamp2=(e,x,t)=>({x:y.clamp(e.x,x.x,t.x),y:y.clamp(e.y,x.y,t.y)}),x.determinant2=(e,x)=>e.x*x.y-e.y*x.x,x.equals=(e,x)=>e.x===x.x&&e.y===x.y,x.scale=(e,x)=>({x:x*e.x,y:x*e.y}),x.multiply=(e,x)=>({x:x.x*e.x,y:x.y*e.y}),x.divide=(e,x)=>({x:e.x/x.x,y:e.y/x.y}),x.add=(e,x)=>({x:e.x+x.x,y:e.y+x.y}),x.adds=(e,x)=>({x:e.x+x,y:e.y+x}),x.sub=(e,x)=>({x:e.x-x.x,y:e.y-x.y}),x.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),x.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),x.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),x.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),x.dot=(e,x)=>e.x*x.x+e.y*x.y,x.equal=(e,x)=>e.x==x.x&&e.y==x.y,x.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),x.normalize=e=>x.scale(e,1/x.length(e)),x.lerp2=(e,x,t)=>({x:y.lerp(e.x,x.x,t),y:y.lerp(e.y,x.y,t)}),x.toPrecision2=(e,x)=>(e.x=parseFloat(e.x.toPrecision(x)),e.y=parseFloat(e.y.toPrecision(x)),e),x.min2=(e,...x)=>{const t={x:e.x,y:e.y};return x.forEach((e=>{t.x=Math.min(t.x,e.x),t.y=Math.min(t.y,e.y)})),t},x.max2=(e,...x)=>{const t={x:e.x,y:e.y};return x.forEach((e=>{t.x=Math.max(t.x,e.x),t.y=Math.max(t.y,e.y)})),t},x.avg=e=>{const x=e.reduce(((e,x)=>(e.x+=x.x,e.y+=x.y,e)),{x:0,y:0});return x.x/=e.length,x.y/=e.length,x},x.inRange=(e,x,t)=>!(e.x>t.x||e.x<x.x||e.y>t.y||e.y<x.y)},717:(e,x)=>{Object.defineProperty(x,"__esModule",{value:!0}),x.plotLines=void 0,x.plotLines=(e,x)=>{const t=x[0];e.moveTo(t.x,e.canvas.height-t.y);for(let t=0;t<x.length;t++){const y=x[t];e.lineTo(y.x,e.canvas.height-y.y)}}}},x={};function t(y){var a=x[y];if(void 0!==a)return a.exports;var o=x[y]={exports:{}};return e[y](o,o.exports,t),o.exports}(()=>{const e=t(354),x=t(717),y=document.getElementById("game"),a=y.getContext("2d");if(!a)throw new Error("Could not get canvas graphics :(");const o=[{p1:{x:10,y:10},p2:{x:10,y:100},p3:{x:100,y:10}},{p1:{x:110,y:10},p2:{x:200,y:100},p3:{x:200,y:10}},{p1:{x:210,y:10},p2:{x:260,y:100},p3:{x:300,y:10}},{p1:{x:310,y:10},p2:{x:360,y:50},p3:{x:400,y:10}},{p1:{x:450,y:10},p2:{x:410,y:100},p3:{x:460,y:10}},{p1:{x:550,y:10},p2:{x:600,y:100},p3:{x:560,y:10}},{p1:{x:610,y:10},p2:{x:650,y:10},p3:{x:700,y:10}},{p1:{x:10,y:200},p2:{x:10,y:110},p3:{x:100,y:200}},{p1:{x:110,y:200},p2:{x:200,y:110},p3:{x:200,y:200}},{p1:{x:210,y:200},p2:{x:260,y:110},p3:{x:300,y:200}},{p1:{x:310,y:200},p2:{x:360,y:150},p3:{x:400,y:200}},{p1:{x:450,y:200},p2:{x:410,y:110},p3:{x:460,y:200}},{p1:{x:550,y:200},p2:{x:600,y:110},p3:{x:560,y:200}},{p1:{x:610,y:110},p2:{x:650,y:110},p3:{x:700,y:110}}];requestAnimationFrame((()=>{a.clearRect(0,0,y.width,y.height);for(let t of o){a.setLineDash([1,2]),a.strokeStyle="blue",a.beginPath(),x.plotLines(a,[t.p1,t.p2,t.p3]),a.stroke();const y=e.quadraticBezierToPoints(t,-.99);a.setLineDash([]),a.strokeStyle="green",a.beginPath(),x.plotLines(a,y),a.stroke()}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,