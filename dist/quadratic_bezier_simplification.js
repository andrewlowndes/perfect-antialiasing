(()=>{"use strict";var e={354:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.quadraticBezierToPoints=void 0;const o=a(345);t.quadraticBezierToPoints=(e,t)=>{const a=[{x:e.p1.x,y:e.p1.y},{x:e.p3.x,y:e.p3.y}],x=(e,r,y,n)=>{const i=o.lerp(r,y,.5),l=o.lerp2(o.lerp2(e.p1,e.p2,i),o.lerp2(e.p2,e.p3,i),i),s=a[n-1],c=a[n];a.splice(n,0,l),o.dot(o.normalize(o.sub(s,l)),o.normalize(o.sub(c,l)))>t&&(x(e,i,y,n+1),x(e,r,i,n))};return x(e,0,1,1),a}},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.lerp=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.timeAtPos=t.clamp2=t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.clamp2=(e,a,o)=>({x:t.clamp(e.x,a.x,o.x),y:t.clamp(e.y,a.y,o.y)}),t.timeAtPos=(e,a,o)=>a?t.clamp((o-e)/a,0,1):0,t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp=(e,t,a)=>e*(1-a)+t*a,t.lerp2=(e,a,o)=>({x:t.lerp(e.x,a.x,o),y:t.lerp(e.y,a.y,o)}),t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.min(a.x,e.x),a.y=Math.min(a.y,e.y)})),a},t.max2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.max(a.x,e.x),a.y=Math.max(a.y,e.y)})),a},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,a)=>!(e.x>a.x||e.x<t.x||e.y>a.y||e.y<t.y)},717:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.plotLines=void 0,t.plotLines=(e,t)=>{const a=t[0];e.moveTo(a.x,e.canvas.height-a.y);for(let a=0;a<t.length;a++){const o=t[a];e.lineTo(o.x,e.canvas.height-o.y)}}}},t={};function a(o){var x=t[o];if(void 0!==x)return x.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,a),r.exports}(()=>{const e=a(354),t=a(717),o=document.getElementById("game"),x=o.getContext("2d");if(!x)throw new Error("Could not get canvas graphics :(");const r={x:40,y:40},y={x:200,y:140},n={x:300,y:80},i={p1:r,p2:y,p3:n,points:[r,y,n]},l=e.quadraticBezierToPoints(i,-.99),s=()=>{x.clearRect(0,0,o.width,o.height),x.strokeStyle="blue",x.beginPath(),t.plotLines(x,i.points),x.closePath(),x.stroke(),x.strokeStyle="green",x.beginPath(),t.plotLines(x,l),x.stroke(),requestAnimationFrame(s)};requestAnimationFrame(s)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,