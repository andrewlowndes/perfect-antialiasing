(()=>{"use strict";var e={815:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bitCode=void 0,t.bitCode=(e,t)=>{let n=0;return e.x<t.min.x?n|=1:e.x>t.max.x&&(n|=2),e.y<t.min.y?n|=4:e.y>t.max.y&&(n|=8),n}},796:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersect=void 0,t.intersect=(e,t,n,o)=>8&n?{x:e.x+(t.x-e.x)*(o.max.y-e.y)/(t.y-e.y),y:o.max.y}:4&n?{x:e.x+(t.x-e.x)*(o.min.y-e.y)/(t.y-e.y),y:o.min.y}:2&n?{x:o.max.x,y:e.y+(t.y-e.y)*(o.max.x-e.x)/(t.x-e.x)}:1&n?{x:o.min.x,y:e.y+(t.y-e.y)*(o.min.x-e.x)/(t.x-e.x)}:void 0},558:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const o=n(345),x=n(857);t.intersectCellTriangle=(e,t)=>{const n=[],i=o.timeAtPos(e.p1.x,e.e1.x,t.min.x),a=o.timeAtPos(e.p1.x,e.e1.x,t.max.x),y=o.timeAtPos(e.p1.y,e.e1.y,t.min.y),r=o.timeAtPos(e.p1.y,e.e1.y,t.max.y);n.push(...x.sort(i,a,y,r).map((n=>o.clamp2(o.add(e.p1,o.scale(e.e1,n)),t.min,t.max))));const s=o.timeAtPos(e.p2.x,e.e2.x,t.min.x),l=o.timeAtPos(e.p2.x,e.e2.x,t.max.x),m=o.timeAtPos(e.p2.y,e.e2.y,t.min.y),c=o.timeAtPos(e.p2.y,e.e2.y,t.max.y);n.push(...x.sort(s,l,m,c).map((n=>o.clamp2(o.add(e.p2,o.scale(e.e2,n)),t.min,t.max))));const p=o.timeAtPos(e.p3.x,e.e3.x,t.min.x),d=o.timeAtPos(e.p3.x,e.e3.x,t.max.x),h=o.timeAtPos(e.p3.y,e.e3.y,t.min.y),u=o.timeAtPos(e.p3.y,e.e3.y,t.max.y);return n.push(...x.sort(p,d,h,u).map((n=>o.clamp2(o.add(e.p3,o.scale(e.e3,n)),t.min,t.max)))),n}},923:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=n(345);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let n=0;for(let x=0;x<t;x++)n+=o.determinant2(e[x],e[x+1]);return n+=o.determinant2(e[t],e[0]),n/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},69:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonclip=void 0;const o=n(796),x=n(815);t.polygonclip=(e,t)=>{let n=new Array;for(let i=1;i<=8;i*=2){n=[];let a=e[e.length-1],y=!(x.bitCode(a,t)&i);for(let r=0;r<e.length;r++){const s=e[r],l=!(x.bitCode(s,t)&i);l!==y&&n.push(o.intersect(a,s,i,t)),l&&n.push(s),a=s,y=l}if(!(e=n).length)break}return n}},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.lerp=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.timeAtPos=t.clamp2=t.clamp=void 0,t.clamp=(e,t,n)=>Math.max(Math.min(e,n),t),t.clamp2=(e,n,o)=>({x:t.clamp(e.x,n.x,o.x),y:t.clamp(e.y,n.y,o.y)}),t.timeAtPos=(e,n,o)=>n?t.clamp((o-e)/n,0,1):0,t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp=(e,t,n)=>e*(1-n)+t*n,t.lerp2=(e,n,o)=>({x:t.lerp(e.x,n.x,o),y:t.lerp(e.y,n.y,o)}),t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const n={x:e.x,y:e.y};return t.forEach((e=>{n.x=Math.min(n.x,e.x),n.y=Math.min(n.y,e.y)})),n},t.max2=(e,...t)=>{const n={x:e.x,y:e.y};return t.forEach((e=>{n.x=Math.max(n.x,e.x),n.y=Math.max(n.y,e.y)})),n},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,n)=>!(e.x>n.x||e.x<t.x||e.y>n.y||e.y<t.y)},857:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,n,o)=>{const x=Math.min(e,t),i=Math.max(e,t),a=Math.min(n,o),y=Math.max(n,o),r=Math.min(i,a),s=Math.max(i,a),l=Math.max(x,r),m=Math.min(s,y);return[Math.min(x,r),Math.min(l,m),Math.max(l,m),Math.max(s,y)]}},713:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonPath=void 0,t.polygonPath=(e,t)=>{if(!t||!t.length)return;const n=t[0];e.moveTo(n.x,e.canvas.height-n.y);for(let n=1;n<t.length;n++){const o=t[n];e.lineTo(o.x,e.canvas.height-o.y)}e.closePath()}}},t={};function n(o){var x=t[o];if(void 0!==x)return x.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}(()=>{const e=n(558),t=n(923),o=n(69),x=n(345),i=n(713),a={x:117.00665,y:155.76694999999998},y={x:216.7078,y:155.76},r={x:216.7078,y:255.42639999999997},s={p1:a,p2:y,p3:r,e1:x.sub(y,a),e2:x.sub(r,y),e3:x.sub(a,r)};s.points=[s.p1,s.p2,s.p3],s.center=x.avg(s.points);const l={x:100,y:50},m={x:250,y:250},c={min:l,size:m,max:x.add(l,m)},p=document.getElementById("game"),d=p.getContext("2d");if(!d)throw new Error("No canvas :(");let h,u,g;p.onwheel=function(e){e.deltaY>0?(c.size.x*=.9,c.size.y*=.9):e.deltaY<0&&(c.size.x*=1.1,c.size.y*=1.1);const t=(c.size.x-(c.max.x-c.min.x))/2,n=(c.size.y-(c.max.y-c.min.y))/2;return c.min.x-=t,c.min.y-=n,c.max.x+=t,c.max.y+=n,!1},p.onmousemove=function(e){const t=p.getBoundingClientRect(),n=e.pageX-t.left-document.documentElement.scrollLeft,o=p.height-(e.pageY-t.top-document.documentElement.scrollTop),x=c.size.x/2,i=c.size.y/2;c.min.x=n-x,c.min.y=o-i,c.max.x=n+x,c.max.y=o+i};const M=Math.cos(.01),b=Math.sin(.01),P=e=>e.size.x*e.size.y,f=()=>{s.points.forEach((e=>{const t=e.x-s.center.x,n=e.y-s.center.y;e.x=s.center.x+t*M-n*b,e.y=s.center.y+t*b+n*M})),s.e1=x.sub(s.p2,s.p1),s.e2=x.sub(s.p3,s.p2),s.e3=x.sub(s.p1,s.p3),h=e.intersectCellTriangle(s,c),u=x.clamp(Number(t.polygonArea(h).toFixed(5))/P(c),0,1),g=Math.floor(255*(1-u));const n=o.polygonclip(s.points,c),a=x.clamp(Number(t.polygonArea(n).toFixed(5))/P(c),0,1);a!==u&&console.error("Incorrect area, expected "+a+" but got "+u),d.clearRect(0,0,p.width,p.height),d.fillStyle="rgb("+g+","+g+","+g+")",d.fillRect(c.min.x,p.height-c.min.y-c.size.y,c.size.x,c.size.y),d.strokeStyle="green",d.strokeRect(c.min.x,p.height-c.min.y-c.size.y,c.size.x,c.size.y),d.strokeStyle="red",d.beginPath(),i.polygonPath(d,[s.p1,s.p2,s.p3]),d.stroke(),d.strokeStyle="blue",d.beginPath(),i.polygonPath(d,h),d.stroke(),requestAnimationFrame(f)};requestAnimationFrame(f)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,