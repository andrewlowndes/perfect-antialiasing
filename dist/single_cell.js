(()=>{"use strict";var e={815:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bitCode=void 0,t.bitCode=(e,t)=>{let n=0;return e.x<t.min.x?n|=1:e.x>t.max.x&&(n|=2),e.y<t.min.y?n|=4:e.y>t.max.y&&(n|=8),n}},796:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersect=void 0,t.intersect=(e,t,n,o)=>8&n?{x:e.x+(t.x-e.x)*(o.max.y-e.y)/(t.y-e.y),y:o.max.y}:4&n?{x:e.x+(t.x-e.x)*(o.min.y-e.y)/(t.y-e.y),y:o.min.y}:2&n?{x:o.max.x,y:e.y+(t.y-e.y)*(o.max.x-e.x)/(t.x-e.x)}:1&n?{x:o.min.x,y:e.y+(t.y-e.y)*(o.min.x-e.x)/(t.x-e.x)}:void 0},558:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const o=n(669),a=n(345),i=n(857);t.intersectCellTriangle=(e,t)=>{const n=[],x=a.timeAtPos(e.p1.x,e.e1.x,t.min.x),y=a.timeAtPos(e.p1.x,e.e1.x,t.max.x),r=a.timeAtPos(e.p1.y,e.e1.y,t.min.y),s=a.timeAtPos(e.p1.y,e.e1.y,t.max.y);n.push(...i.sort(x,y,r,s).map((n=>o.clamp2(o.add(e.p1,o.scale(e.e1,n)),t.min,t.max))));const l=a.timeAtPos(e.p2.x,e.e2.x,t.min.x),m=a.timeAtPos(e.p2.x,e.e2.x,t.max.x),c=a.timeAtPos(e.p2.y,e.e2.y,t.min.y),p=a.timeAtPos(e.p2.y,e.e2.y,t.max.y);n.push(...i.sort(l,m,c,p).map((n=>o.clamp2(o.add(e.p2,o.scale(e.e2,n)),t.min,t.max))));const d=a.timeAtPos(e.p3.x,e.e3.x,t.min.x),h=a.timeAtPos(e.p3.x,e.e3.x,t.max.x),u=a.timeAtPos(e.p3.y,e.e3.y,t.min.y),g=a.timeAtPos(e.p3.y,e.e3.y,t.max.y);return n.push(...i.sort(d,h,u,g).map((n=>o.clamp2(o.add(e.p3,o.scale(e.e3,n)),t.min,t.max)))),n}},923:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=n(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let n=0;for(let a=0;a<t;a++)n+=o.determinant2(e[a],e[a+1]);return n+=o.determinant2(e[t],e[0]),n/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},69:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonclip=void 0;const o=n(796),a=n(815);t.polygonclip=(e,t)=>{let n=new Array;for(let i=1;i<=8;i*=2){n=[];let x=e[e.length-1],y=!(a.bitCode(x,t)&i);for(let r=0;r<e.length;r++){const s=e[r],l=!(a.bitCode(s,t)&i);l!==y&&n.push(o.intersect(x,s,i,t)),l&&n.push(s),x=s,y=l}if(!(e=n).length)break}return n}},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,n)=>Math.max(Math.min(e,n),t),t.timeAtPos=(e,n,o)=>n?t.clamp((o-e)/n,0,1):0,t.lerp=(e,t,n)=>e*(1-n)+t*n},669:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=n(345);t.clamp2=(e,t,n)=>({x:o.clamp(e.x,t.x,n.x),y:o.clamp(e.y,t.y,n.y)}),t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,n)=>({x:o.lerp(e.x,t.x,n),y:o.lerp(e.y,t.y,n)}),t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const n={x:e.x,y:e.y};return t.forEach((e=>{n.x=Math.min(n.x,e.x),n.y=Math.min(n.y,e.y)})),n},t.max2=(e,...t)=>{const n={x:e.x,y:e.y};return t.forEach((e=>{n.x=Math.max(n.x,e.x),n.y=Math.max(n.y,e.y)})),n},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,n)=>!(e.x>n.x||e.x<t.x||e.y>n.y||e.y<t.y)},857:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,n,o)=>{const a=Math.min(e,t),i=Math.max(e,t),x=Math.min(n,o),y=Math.max(n,o),r=Math.min(i,x),s=Math.max(i,x),l=Math.max(a,r),m=Math.min(s,y);return[Math.min(a,r),Math.min(l,m),Math.max(l,m),Math.max(s,y)]}},713:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonPath=void 0,t.polygonPath=(e,t)=>{if(!t||!t.length)return;const n=t[0];e.moveTo(n.x,e.canvas.height-n.y);for(let n=1;n<t.length;n++){const o=t[n];e.lineTo(o.x,e.canvas.height-o.y)}e.closePath()}}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}(()=>{const e=n(558),t=n(923),o=n(69),a=n(345),i=n(669),x=n(713),y={x:117.00665,y:155.76694999999998},r={x:216.7078,y:155.76},s={x:216.7078,y:255.42639999999997},l={p1:y,p2:r,p3:s,e1:i.sub(r,y),e2:i.sub(s,r),e3:i.sub(y,s)};l.points=[l.p1,l.p2,l.p3],l.center=i.avg(l.points);const m={x:100,y:50},c={x:250,y:250},p={min:m,size:c,max:i.add(m,c)},d=document.getElementById("game"),h=d.getContext("2d");if(!h)throw new Error("No canvas :(");let u,g,M;d.onwheel=function(e){e.deltaY>0?(p.size.x*=.9,p.size.y*=.9):e.deltaY<0&&(p.size.x*=1.1,p.size.y*=1.1);const t=(p.size.x-(p.max.x-p.min.x))/2,n=(p.size.y-(p.max.y-p.min.y))/2;return p.min.x-=t,p.min.y-=n,p.max.x+=t,p.max.y+=n,!1},d.onmousemove=function(e){const t=d.getBoundingClientRect(),n=e.pageX-t.left-document.documentElement.scrollLeft,o=d.height-(e.pageY-t.top-document.documentElement.scrollTop),a=p.size.x/2,i=p.size.y/2;p.min.x=n-a,p.min.y=o-i,p.max.x=n+a,p.max.y=o+i};const f=Math.cos(.01),P=Math.sin(.01),b=e=>e.size.x*e.size.y,v=()=>{l.points.forEach((e=>{const t=e.x-l.center.x,n=e.y-l.center.y;e.x=l.center.x+t*f-n*P,e.y=l.center.y+t*P+n*f})),l.e1=i.sub(l.p2,l.p1),l.e2=i.sub(l.p3,l.p2),l.e3=i.sub(l.p1,l.p3),u=e.intersectCellTriangle(l,p),g=a.clamp(Number(t.polygonArea(u).toFixed(5))/b(p),0,1),M=Math.floor(255*(1-g));const n=o.polygonclip(l.points,p),y=a.clamp(Number(t.polygonArea(n).toFixed(5))/b(p),0,1);y!==g&&console.error("Incorrect area, expected "+y+" but got "+g),h.clearRect(0,0,d.width,d.height),h.fillStyle="rgb("+M+","+M+","+M+")",h.fillRect(p.min.x,d.height-p.min.y-p.size.y,p.size.x,p.size.y),h.strokeStyle="green",h.strokeRect(p.min.x,d.height-p.min.y-p.size.y,p.size.x,p.size.y),h.strokeStyle="red",h.beginPath(),x.polygonPath(h,[l.p1,l.p2,l.p3]),h.stroke(),h.strokeStyle="blue",h.beginPath(),x.polygonPath(h,u),h.stroke(),requestAnimationFrame(v)};requestAnimationFrame(v)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,