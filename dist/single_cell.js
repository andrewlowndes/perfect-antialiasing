"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[320],{479:(e,t,a)=>{const n=a(887),o=a(923),c=a(345),i=a(669),s=a(713),l=a(395),r=(e,t,a)=>({p1:e,p2:t,p3:a,e1:(0,i.sub)(t,e),e2:(0,i.sub)(a,t),e3:(0,i.sub)(e,a),points:[e,t,a],center:(0,i.avg)(e,t,a)}),m=(e,t)=>({min:e,size:t,max:(0,i.add)(e,t)}),d=(e,t,a,n,o,c=[0,0])=>[m((0,i.add)(e,c),t),r((0,i.add)(a,c),(0,i.add)(n,c),(0,i.add)(o,c))],p=[d([100,50],[50,50],[717.01,355.77],[816.7078,355.76],[816.7078,455.43])],h=[0,0],u=[40,40],v=[25,25],g=(0,i.add)(h,(0,i.scale)(u,.5)),f=2*Math.PI/8;[[[-10,-10],[20,30],[50,-10]],[[-10,-10],[20,10],[50,-10]],[[-10,-10],[20,20],[50,-10]],[[-10,0],[20,0],[50,0]],[[10,-10],[20,20],[30,-10]],[[10,0],[20,20],[30,0]],[[0,0],[20,20],[40,0]],[[-10,0],[20,20],[50,0]],[[-10,0],[20,2],[50,0]],[[10,-20],[20,-20],[20,-10]],[[10,20],[20,20],[20,10]],[[0,0],[0,0],[0,0]],[[-10,10],[20,50],[50,10]],[[-10,10],[20,50],[45,-5]]].forEach(((e,t)=>{for(let a=0;a<8;a++){const[o,c,i]=e.map((e=>n.vec2.rotate(n.vec2.create(),e,g,a*f))),s=[a*(u[0]+v[0])+v[0],t*(u[1]+v[1])+v[1]];p.push(d(h,u,o,c,i,s))}}));const P=p[0][0],b=p[0][1],M=document.getElementById("game"),x=M.getContext("2d");M.onwheel=e=>{n.vec2.scale(P.size,P.size,1+.1*Math.sign(e.deltaY));const t=(0,i.scale)((0,i.sub)(P.size,(0,i.sub)(P.max,P.min)),.5);return n.vec2.subtract(P.min,P.min,t),n.vec2.add(P.max,P.max,t),!1},M.onmousemove=e=>{const t=M.getBoundingClientRect(),a=n.vec2.fromValues(e.pageX-t.left-document.documentElement.scrollLeft,M.height-(e.pageY-t.top-document.documentElement.scrollTop)),o=(0,i.scale)(P.size,.5);n.vec2.copy(P.min,(0,i.sub)(a,o)),n.vec2.copy(P.max,(0,i.add)(a,o))};const y=()=>{x.clearRect(0,0,M.width,M.height),b.points.forEach((e=>{n.vec2.rotate(e,e,b.center,.01)})),b.e1=(0,i.sub)(b.p2,b.p1),b.e2=(0,i.sub)(b.p3,b.p2),b.e3=(0,i.sub)(b.p1,b.p3);for(const[e,t]of p){const a=(0,l.intersectCellTriangle)(t,e),n=(0,c.clamp)((0,o.polygonArea)(a)/(e.size[0]*e.size[1]),0,1),i=Math.floor(255*(1-n));x.fillStyle="rgb("+i+","+i+","+i+")",x.fillRect(e.min[0],M.height-e.min[1]-e.size[1],e.size[0],e.size[1]),x.strokeStyle="green",x.strokeRect(e.min[0],M.height-e.min[1]-e.size[1],e.size[0],e.size[1]),x.strokeStyle="red",x.fillStyle="red",t.points.forEach((e=>{x.beginPath(),x.arc(e[0],M.height-e[1],.5,0,2*Math.PI),x.fill()})),x.beginPath(),(0,s.polygonPath)(x,[t.p1,t.p2,t.p3]),x.stroke(),x.strokeStyle="blue",x.fillStyle="blue",a.forEach((e=>{x.beginPath(),x.arc(e[0],M.height-e[1],.5,0,2*Math.PI),x.fill()})),x.beginPath(),(0,s.polygonPath)(x,a),x.stroke()}requestAnimationFrame(y)};requestAnimationFrame(y)},395:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const n=a(669),o=a(345),c=a(857);t.intersectCellTriangle=(e,t)=>{const a=[],i=(0,o.timeAtPos)(e.p1[0],e.e1[0],t.min[0]),s=(0,o.timeAtPos)(e.p1[0],e.e1[0],t.max[0]),l=(0,o.timeAtPos)(e.p1[1],e.e1[1],t.min[1]),r=(0,o.timeAtPos)(e.p1[1],e.e1[1],t.max[1]);a.push(...(0,c.sort)(i,s,l,r).map((a=>(0,n.clamp2)((0,n.add)(e.p1,(0,n.scale)(e.e1,a)),t.min,t.max))));const m=(0,o.timeAtPos)(e.p2[0],e.e2[0],t.min[0]),d=(0,o.timeAtPos)(e.p2[0],e.e2[0],t.max[0]),p=(0,o.timeAtPos)(e.p2[1],e.e2[1],t.min[1]),h=(0,o.timeAtPos)(e.p2[1],e.e2[1],t.max[1]);a.push(...(0,c.sort)(m,d,p,h).map((a=>(0,n.clamp2)((0,n.add)(e.p2,(0,n.scale)(e.e2,a)),t.min,t.max))));const u=(0,o.timeAtPos)(e.p3[0],e.e3[0],t.min[0]),v=(0,o.timeAtPos)(e.p3[0],e.e3[0],t.max[0]),g=(0,o.timeAtPos)(e.p3[1],e.e3[1],t.min[1]),f=(0,o.timeAtPos)(e.p3[1],e.e3[1],t.max[1]);return a.push(...(0,c.sort)(u,v,g,f).map((a=>(0,n.clamp2)((0,n.add)(e.p3,(0,n.scale)(e.e3,a)),t.min,t.max)))),a}},923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=a(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let o=0;o<t;o++)a+=(0,n.determinant2)(e[o],e[o+1]);return a+=(0,n.determinant2)(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs((0,t.polygonAreaSigned)(e))},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,n)=>a?(0,t.clamp)((n-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inside=t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const n=a(887),o=a(345);t.clamp2=(e,t,a)=>{const o=n.vec2.clone(e);return n.vec2.min(o,o,a),n.vec2.max(o,o,t),o},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=n.vec2.equals,t.scale=(e,t)=>n.vec2.scale(n.vec2.create(),e,t),t.multiply=(e,t)=>n.vec2.multiply(n.vec2.create(),e,t),t.divide=(e,t)=>n.vec2.divide(n.vec2.create(),e,t),t.add=(e,t)=>n.vec2.add(n.vec2.create(),e,t),t.adds=(e,t)=>n.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>n.vec2.sub(n.vec2.create(),e,t),t.floor=e=>n.vec2.floor(n.vec2.create(),e),t.ceil=e=>n.vec2.ceil(n.vec2.create(),e),t.abs=e=>n.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>n.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>n.vec2.dot(e,t),t.length=e=>n.vec2.length(e),t.normalize=e=>(0,t.scale)(e,1/(0,t.length)(e)),t.lerp2=(e,t,a)=>n.vec2.lerp(n.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,o=n.vec2.clone(t);return a.forEach((e=>{n.vec2.min(o,o,e)})),o},t.max2=(...e)=>{const[t,...a]=e,o=n.vec2.clone(t);return a.forEach((e=>{n.vec2.max(o,o,e)})),o},t.avg=(...e)=>{const t=n.vec2.create();return e.length&&(e.forEach((e=>{n.vec2.add(t,t,e)})),n.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1]),t.inside=(e,t)=>{let a=0,n=e[e.length-1];return e.forEach((e=>{const c=n[1]<e[1]?n:e,i=n[1]<e[1]?e:n;c[1]<t[1]+o.EPSILON&&i[1]>t[1]+o.EPSILON&&(i[0]-c[0])*(t[1]-c[1])>(t[0]-c[0])*(i[1]-c[1])&&(a+=1),n=e})),a%2!=0}},857:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,a,n)=>{const o=Math.min(e,t),c=Math.max(e,t),i=Math.min(a,n),s=Math.max(a,n),l=Math.max(o,Math.min(c,i)),r=Math.min(s,Math.max(c,i));return[Math.min(o,i),Math.min(l,r),Math.max(l,r),Math.max(c,s)]}},713:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonPath=void 0,t.polygonPath=(e,t)=>{if(!t||!t.length)return;const a=t[0];e.moveTo(a[0],e.canvas.height-a[1]);for(let a=1;a<t.length;a++){const n=t[a];e.lineTo(n[0],e.canvas.height-n[1])}e.closePath()}}},e=>{e(e.s=479)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,