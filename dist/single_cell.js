(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[320],{479:(e,t,a)=>{"use strict";const n=a(395),o=a(923),s=a(345),c=a(669),i=a(713),r=a(887),l=r.vec2.fromValues(117.00665,155.76694999999998),m=r.vec2.fromValues(216.7078,155.76),p=r.vec2.fromValues(216.7078,255.42639999999997),u={p1:l,p2:m,p3:p,e1:c.sub(m,l),e2:c.sub(p,m),e3:c.sub(l,p)};u.points=[u.p1,u.p2,u.p3],u.center=c.avg(...u.points);const d=r.vec2.fromValues(100,50),v=r.vec2.fromValues(250,250),h={min:d,size:v,max:c.add(d,v)},g=document.getElementById("game"),f=g.getContext("2d");if(!f)throw new Error("No canvas :(");let P,b,x;g.onwheel=function(e){e.deltaY>0?r.vec2.scale(h.size,h.size,.9):e.deltaY<0&&r.vec2.scale(h.size,h.size,1.1);const t=c.scale(c.sub(h.size,c.sub(h.max,h.min)),.5);return r.vec2.subtract(h.min,h.min,t),r.vec2.add(h.max,h.max,t),!1},g.onmousemove=function(e){const t=g.getBoundingClientRect(),a=r.vec2.fromValues(e.pageX-t.left-document.documentElement.scrollLeft,g.height-(e.pageY-t.top-document.documentElement.scrollTop)),n=c.scale(h.size,.5);r.vec2.copy(h.min,c.sub(a,n)),r.vec2.copy(h.max,c.add(a,n))};const M=()=>{u.points.forEach((e=>{r.vec2.rotate(e,e,u.center,.01)})),u.e1=c.sub(u.p2,u.p1),u.e2=c.sub(u.p3,u.p2),u.e3=c.sub(u.p1,u.p3),P=n.intersectCellTriangle(u,h),b=s.clamp(o.polygonArea(P)/(e=>e.size[0]*e.size[1])(h),0,1),x=Math.floor(255*(1-b)),f.clearRect(0,0,g.width,g.height),f.fillStyle="rgb("+x+","+x+","+x+")",f.fillRect(h.min[0],g.height-h.min[1]-h.size[1],h.size[0],h.size[1]),f.strokeStyle="green",f.strokeRect(h.min[0],g.height-h.min[1]-h.size[1],h.size[0],h.size[1]),f.strokeStyle="red",f.beginPath(),i.polygonPath(f,[u.p1,u.p2,u.p3]),f.stroke(),f.strokeStyle="blue",f.beginPath(),i.polygonPath(f,P),f.stroke(),requestAnimationFrame(M)};requestAnimationFrame(M)},395:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const n=a(669),o=a(345),s=a(857);t.intersectCellTriangle=(e,t)=>{const a=[],c=o.timeAtPos(e.p1[0],e.e1[0],t.min[0]),i=o.timeAtPos(e.p1[0],e.e1[0],t.max[0]),r=o.timeAtPos(e.p1[1],e.e1[1],t.min[1]),l=o.timeAtPos(e.p1[1],e.e1[1],t.max[1]);a.push(...s.sort(c,i,r,l).map((a=>n.clamp2(n.add(e.p1,n.scale(e.e1,a)),t.min,t.max))));const m=o.timeAtPos(e.p2[0],e.e2[0],t.min[0]),p=o.timeAtPos(e.p2[0],e.e2[0],t.max[0]),u=o.timeAtPos(e.p2[1],e.e2[1],t.min[1]),d=o.timeAtPos(e.p2[1],e.e2[1],t.max[1]);a.push(...s.sort(m,p,u,d).map((a=>n.clamp2(n.add(e.p2,n.scale(e.e2,a)),t.min,t.max))));const v=o.timeAtPos(e.p3[0],e.e3[0],t.min[0]),h=o.timeAtPos(e.p3[0],e.e3[0],t.max[0]),g=o.timeAtPos(e.p3[1],e.e3[1],t.min[1]),f=o.timeAtPos(e.p3[1],e.e3[1],t.max[1]);return a.push(...s.sort(v,h,g,f).map((a=>n.clamp2(n.add(e.p3,n.scale(e.e3,a)),t.min,t.max)))),a}},923:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=a(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let o=0;o<t;o++)a+=n.determinant2(e[o],e[o+1]);return a+=n.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},345:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,n)=>a?t.clamp((n-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},669:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const n=a(887);t.clamp2=(e,t,a)=>{const o=n.vec2.clone(e);return n.vec2.min(o,o,a),n.vec2.max(o,o,t),o},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=n.vec2.equals,t.scale=(e,t)=>n.vec2.scale(n.vec2.create(),e,t),t.multiply=(e,t)=>n.vec2.multiply(n.vec2.create(),e,t),t.divide=(e,t)=>n.vec2.divide(n.vec2.create(),e,t),t.add=(e,t)=>n.vec2.add(n.vec2.create(),e,t),t.adds=(e,t)=>n.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>n.vec2.sub(n.vec2.create(),e,t),t.floor=e=>n.vec2.floor(n.vec2.create(),e),t.ceil=e=>n.vec2.ceil(n.vec2.create(),e),t.abs=e=>n.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>n.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>n.vec2.dot(e,t),t.length=e=>n.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,a)=>n.vec2.lerp(n.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,o=n.vec2.clone(t);return a.forEach((e=>{n.vec2.min(o,o,e)})),o},t.max2=(...e)=>{const[t,...a]=e,o=n.vec2.clone(t);return a.forEach((e=>{n.vec2.max(o,o,e)})),o},t.avg=(...e)=>{const t=n.vec2.create();return e.length&&(e.forEach((e=>{n.vec2.add(t,t,e)})),n.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1])},857:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,a,n)=>{const o=Math.min(e,t),s=Math.max(e,t),c=Math.min(a,n),i=Math.max(a,n),r=Math.min(s,c),l=Math.max(s,c),m=Math.max(o,r),p=Math.min(l,i);return[Math.min(o,r),Math.min(m,p),Math.max(m,p),Math.max(l,i)]}},713:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.polygonPath=void 0,t.polygonPath=(e,t)=>{if(!t||!t.length)return;const a=t[0];e.moveTo(a[0],e.canvas.height-a[1]);for(let a=1;a<t.length;a++){const n=t[a];e.lineTo(n[0],e.canvas.height-n[1])}e.closePath()}}},e=>{"use strict";e(e.s=479)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,