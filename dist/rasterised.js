(()=>{"use strict";var e={89:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0,t.aabb=e=>{const t=e[0],a={x:t.x,y:t.y},n={x:t.x,y:t.y};for(let t=1;t<e.length;t++){const o=e[t];a.x=Math.min(a.x,o.x),a.y=Math.min(a.y,o.y),n.x=Math.max(n.x,o.x),n.y=Math.max(n.y,o.y)}return{min:a,max:n}}},815:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bitCode=void 0,t.bitCode=(e,t)=>{let a=0;return e.x<t.min.x?a|=1:e.x>t.max.x&&(a|=2),e.y<t.min.y?a|=4:e.y>t.max.y&&(a|=8),a}},796:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersect=void 0,t.intersect=(e,t,a,n)=>8&a?{x:e.x+(t.x-e.x)*(n.max.y-e.y)/(t.y-e.y),y:n.max.y}:4&a?{x:e.x+(t.x-e.x)*(n.min.y-e.y)/(t.y-e.y),y:n.min.y}:2&a?{x:n.max.x,y:e.y+(t.y-e.y)*(n.max.x-e.x)/(t.x-e.x)}:1&a?{x:n.min.x,y:e.y+(t.y-e.y)*(n.min.x-e.x)/(t.x-e.x)}:void 0},558:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const n=a(669),o=a(345),x=a(857);t.intersectCellTriangle=(e,t)=>{const a=[],r=o.timeAtPos(e.p1.x,e.e1.x,t.min.x),i=o.timeAtPos(e.p1.x,e.e1.x,t.max.x),y=o.timeAtPos(e.p1.y,e.e1.y,t.min.y),s=o.timeAtPos(e.p1.y,e.e1.y,t.max.y);a.push(...x.sort(r,i,y,s).map((a=>n.clamp2(n.add(e.p1,n.scale(e.e1,a)),t.min,t.max))));const l=o.timeAtPos(e.p2.x,e.e2.x,t.min.x),m=o.timeAtPos(e.p2.x,e.e2.x,t.max.x),c=o.timeAtPos(e.p2.y,e.e2.y,t.min.y),p=o.timeAtPos(e.p2.y,e.e2.y,t.max.y);a.push(...x.sort(l,m,c,p).map((a=>n.clamp2(n.add(e.p2,n.scale(e.e2,a)),t.min,t.max))));const d=o.timeAtPos(e.p3.x,e.e3.x,t.min.x),u=o.timeAtPos(e.p3.x,e.e3.x,t.max.x),h=o.timeAtPos(e.p3.y,e.e3.y,t.min.y),g=o.timeAtPos(e.p3.y,e.e3.y,t.max.y);return a.push(...x.sort(d,u,h,g).map((a=>n.clamp2(n.add(e.p3,n.scale(e.e3,a)),t.min,t.max)))),a}},923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=a(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let o=0;o<t;o++)a+=n.determinant2(e[o],e[o+1]);return a+=n.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},69:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonclip=void 0;const n=a(796),o=a(815);t.polygonclip=(e,t)=>{let a=new Array;for(let x=1;x<=8;x*=2){a=[];let r=e[e.length-1],i=!(o.bitCode(r,t)&x);for(let y=0;y<e.length;y++){const s=e[y],l=!(o.bitCode(s,t)&x);l!==i&&a.push(n.intersect(r,s,x,t)),l&&a.push(s),r=s,i=l}if(!(e=a).length)break}return a}},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,n)=>a?t.clamp((n-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const n=a(345);t.clamp2=(e,t,a)=>({x:n.clamp(e.x,t.x,a.x),y:n.clamp(e.y,t.y,a.y)}),t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,a)=>({x:n.lerp(e.x,t.x,a),y:n.lerp(e.y,t.y,a)}),t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.min(a.x,e.x),a.y=Math.min(a.y,e.y)})),a},t.max2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.max(a.x,e.x),a.y=Math.max(a.y,e.y)})),a},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,a)=>!(e.x>a.x||e.x<t.x||e.y>a.y||e.y<t.y)},857:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,a,n)=>{const o=Math.min(e,t),x=Math.max(e,t),r=Math.min(a,n),i=Math.max(a,n),y=Math.min(x,r),s=Math.max(x,r),l=Math.max(o,y),m=Math.min(s,i);return[Math.min(o,y),Math.min(l,m),Math.max(l,m),Math.max(s,i)]}},848:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rasterizeTriangle=void 0;const n=a(264);t.rasterizeTriangle=(e,t,a,o)=>{const x=[{from:e[0],to:e[1]},{from:e[1],to:e[2]},{from:e[2],to:e[0]}],r={},i=new Set;x.forEach((e=>{n.traverse(e.from,e.to,t,(e=>{let t=r[e.y];const n=e.x+","+e.y;i.has(n)||(t?(t.min=Math.min(t.min,e.x),t.max=Math.max(t.max,e.x)):t={min:e.x,max:e.x},r[e.y]=t,a(e),i.add(n))}))}));const y={x:0,y:0};for(let e in r)if(r.hasOwnProperty(e)){y.y=parseInt(e,10);const t=r[e];for(y.x=t.min+1;y.x<t.max;y.x++)i.has(y.x+","+y.y)||o(y)}return r}},264:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.traverse=void 0;const n=a(345),o=a(669);t.traverse=(e,t,a,x)=>{const r=o.sub(e,a.pos),i=o.sub(t,e),y=o.floor(o.divide(r,a.cellSize)),s=o.floor(o.divide(o.sub(t,a.pos),a.cellSize));if(Math.abs(i.y)<n.EPSILON){for(let e=Math.min(y.x,s.x),t=Math.max(y.x,s.x);e<=t;e++)if(y.x=e,!1===x(y))return!1;return}if(Math.abs(i.x)<n.EPSILON){for(let e=Math.min(y.y,s.y),t=Math.max(y.y,s.y);e<=t;e++)if(y.y=e,!1===x(y))return!1;return}const l=o.sign(i),m=o.multiply(o.divide(l,i),a.cellSize),c=o.divide(r,a.cellSize),p={x:l.x>0?m.x*n.negFract(c.x):m.x*n.fract(c.x),y:l.y>0?m.y*n.negFract(c.y):m.y*n.fract(c.y)};for(;;){if(!1===x(y))return!1;if(p.x>1&&p.y>1)return;p.x<p.y?(y.x+=l.x,p.x+=m.x):(y.y+=l.y,p.y+=m.y)}}}},t={};function a(n){var o=t[n];if(void 0!==o)return o.exports;var x=t[n]={exports:{}};return e[n](x,x.exports,a),x.exports}(()=>{const e=a(89),t=a(558),n=a(923),o=a(69),x=a(345),r=a(669),i=a(848),y={x:60,y:160},s={x:150,y:170},l={x:250,y:130},m={p1:y,p2:s,p3:l,points:[y,s,l],e1:r.sub(s,y),e2:r.sub(l,s),e3:r.sub(y,l)};m.center=r.avg(m.points);const c=document.getElementById("game"),p=c.getContext("2d");if(!p)throw new Error("Could not get canvas graphics :(");c.onmousemove=function(e){const t=c.getBoundingClientRect(),a={x:e.pageX-t.left-document.documentElement.scrollLeft,y:e.pageY-t.top-document.documentElement.scrollTop},n=a.x-m.center.x,o=a.y-m.center.y;m.center.x=a.x,m.center.y=a.y,m.points.forEach((e=>{e.x+=n,e.y+=o}))};const d=Math.cos(.01),u=Math.sin(.01),h=()=>{p.clearRect(0,0,c.width,c.height);const a=p.getImageData(0,0,c.width,c.height),y=a.data;m.points.forEach((e=>{const t=e.x-m.center.x,a=e.y-m.center.y;e.x=m.center.x+t*d-a*u,e.y=m.center.y+t*u+a*d})),m.e1=r.sub(m.p2,m.p1),m.e2=r.sub(m.p3,m.p2),m.e3=r.sub(m.p1,m.p3);const s=e.aabb(m.points);m.aabb={min:r.floor(s.min),max:r.ceil(s.max)},i.rasterizeTriangle(m.points,{pos:{x:0,y:0},cellSize:{x:1,y:1}},(e=>{const a={min:{x:e.x,y:e.y},size:{x:1,y:1},max:{x:e.x+1,y:e.y+1}},r=t.intersectCellTriangle(m,a),i=o.polygonclip(m.points,a),s=x.clamp(Number(n.polygonArea(i).toFixed(5))/1,0,1),l=x.clamp(Number(n.polygonArea(r).toFixed(5)),0,1);s!==l&&console.error("Incorrect coverage",m.points);const p=Math.floor(255*l),d=4*(c.width*e.y+e.x);y[d]=0,y[d+1]=0,y[d+2]=0,y[d+3]=p}),(e=>{const t=4*(c.width*e.y+e.x);y[t]=0,y[t+1]=0,y[t+2]=0,y[t+3]=255})),p.putImageData(a,0,0),requestAnimationFrame(h)};requestAnimationFrame(h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,