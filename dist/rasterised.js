(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[660],{89:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0;const r=a(669);t.aabb=(...e)=>({min:r.min2(...e),max:r.max2(...e)})},226:(e,t,a)=>{"use strict";const r=a(89),n=a(395),o=a(923),c=a(345),s=a(669),i=a(848),l=a(887),m=l.vec2.fromValues(60,160),u=l.vec2.fromValues(150,170),p=l.vec2.fromValues(250,130),d={p1:m,p2:u,p3:p,points:[m,u,p],e1:s.sub(u,m),e2:s.sub(p,u),e3:s.sub(m,p)};d.center=s.avg(...d.points);const v=document.getElementById("game"),h=v.getContext("2d");if(!h)throw new Error("Could not get canvas graphics :(");v.onmousemove=function(e){const t=v.getBoundingClientRect(),a=l.vec2.fromValues(e.pageX-t.left-document.documentElement.scrollLeft,e.pageY-t.top-document.documentElement.scrollTop),r=l.vec2.fromValues(a[0]-d.center[0],a[1]-d.center[1]);d.center[0]=a[0],d.center[1]=a[1],d.points.forEach((e=>{e[0]+=r[0],e[1]+=r[1]}))};const f=Math.cos(.01),g=Math.sin(.01),M=()=>{h.clearRect(0,0,v.width,v.height);const e=h.getImageData(0,0,v.width,v.height),t=e.data;d.points.forEach((e=>{const t=e[0]-d.center[0],a=e[1]-d.center[1];e[0]=d.center[0]+t*f-a*g,e[1]=d.center[1]+t*g+a*f})),d.e1=s.sub(d.p2,d.p1),d.e2=s.sub(d.p3,d.p2),d.e3=s.sub(d.p1,d.p3);const a=r.aabb(...d.points);d.aabb={min:s.floor(a.min),max:s.ceil(a.max)},i.rasterizeTriangle(d.points,{pos:l.vec2.create(),cellSize:l.vec2.fromValues(1,1)},(e=>{const a={min:l.vec2.fromValues(e[0],e[1]),size:l.vec2.fromValues(1,1),max:l.vec2.fromValues(e[0]+1,e[1]+1)},r=n.intersectCellTriangle(d,a),s=c.clamp(o.polygonArea(r),0,1),i=Math.floor(255*s),m=4*(v.width*e[1]+e[0]);t[m]=0,t[m+1]=0,t[m+2]=0,t[m+3]=i}),(e=>{const a=4*(v.width*e[1]+e[0]);t[a]=0,t[a+1]=0,t[a+2]=0,t[a+3]=255})),h.putImageData(e,0,0),requestAnimationFrame(M)};requestAnimationFrame(M)},395:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const r=a(669),n=a(345),o=a(857);t.intersectCellTriangle=(e,t)=>{const a=[],c=n.timeAtPos(e.p1[0],e.e1[0],t.min[0]),s=n.timeAtPos(e.p1[0],e.e1[0],t.max[0]),i=n.timeAtPos(e.p1[1],e.e1[1],t.min[1]),l=n.timeAtPos(e.p1[1],e.e1[1],t.max[1]);a.push(...o.sort(c,s,i,l).map((a=>r.clamp2(r.add(e.p1,r.scale(e.e1,a)),t.min,t.max))));const m=n.timeAtPos(e.p2[0],e.e2[0],t.min[0]),u=n.timeAtPos(e.p2[0],e.e2[0],t.max[0]),p=n.timeAtPos(e.p2[1],e.e2[1],t.min[1]),d=n.timeAtPos(e.p2[1],e.e2[1],t.max[1]);a.push(...o.sort(m,u,p,d).map((a=>r.clamp2(r.add(e.p2,r.scale(e.e2,a)),t.min,t.max))));const v=n.timeAtPos(e.p3[0],e.e3[0],t.min[0]),h=n.timeAtPos(e.p3[0],e.e3[0],t.max[0]),f=n.timeAtPos(e.p3[1],e.e3[1],t.min[1]),g=n.timeAtPos(e.p3[1],e.e3[1],t.max[1]);return a.push(...o.sort(v,h,f,g).map((a=>r.clamp2(r.add(e.p3,r.scale(e.e3,a)),t.min,t.max)))),a}},923:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const r=a(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let n=0;n<t;n++)a+=r.determinant2(e[n],e[n+1]);return a+=r.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},345:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,r)=>a?t.clamp((r-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},669:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const r=a(887);t.clamp2=(e,t,a)=>{const n=r.vec2.clone(e);return r.vec2.min(n,n,a),r.vec2.max(n,n,t),n},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=r.vec2.equals,t.scale=(e,t)=>r.vec2.scale(r.vec2.create(),e,t),t.multiply=(e,t)=>r.vec2.multiply(r.vec2.create(),e,t),t.divide=(e,t)=>r.vec2.divide(r.vec2.create(),e,t),t.add=(e,t)=>r.vec2.add(r.vec2.create(),e,t),t.adds=(e,t)=>r.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>r.vec2.sub(r.vec2.create(),e,t),t.floor=e=>r.vec2.floor(r.vec2.create(),e),t.ceil=e=>r.vec2.ceil(r.vec2.create(),e),t.abs=e=>r.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>r.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>r.vec2.dot(e,t),t.length=e=>r.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,a)=>r.vec2.lerp(r.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,n=r.vec2.clone(t);return a.forEach((e=>{r.vec2.min(n,n,e)})),n},t.max2=(...e)=>{const[t,...a]=e,n=r.vec2.clone(t);return a.forEach((e=>{r.vec2.max(n,n,e)})),n},t.avg=(...e)=>{const t=r.vec2.create();return e.length&&(e.forEach((e=>{r.vec2.add(t,t,e)})),r.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1])},857:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,a,r)=>{const n=Math.min(e,t),o=Math.max(e,t),c=Math.min(a,r),s=Math.max(a,r),i=Math.min(o,c),l=Math.max(o,c),m=Math.max(n,i),u=Math.min(l,s);return[Math.min(n,i),Math.min(m,u),Math.max(m,u),Math.max(l,s)]}},848:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.rasterizeTriangle=void 0;const r=a(887),n=a(264);t.rasterizeTriangle=(e,t,a,o)=>{const c=[{from:e[0],to:e[1]},{from:e[1],to:e[2]},{from:e[2],to:e[0]}],s={},i=new Set;c.forEach((e=>{n.traverse(e.from,e.to,t,(e=>{let t=s[e[1]];const r=e[0]+","+e[1];i.has(r)||(t?(t.min=Math.min(t.min,e[0]),t.max=Math.max(t.max,e[0])):t={min:e[0],max:e[0]},s[e[1]]=t,a(e),i.add(r))}))}));const l=r.vec2.create();for(let e in s)if(s.hasOwnProperty(e)){l[1]=parseInt(e,10);const t=s[e];for(l[0]=t.min+1;l[0]<t.max;l[0]++)i.has(l[0]+","+l[1])||o(l)}return s}},264:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.traverse=void 0;const r=a(887),n=a(345),o=a(669);t.traverse=(e,t,a,c)=>{const s=o.sub(e,a.pos),i=o.sub(t,e),l=o.floor(o.divide(s,a.cellSize)),m=o.floor(o.divide(o.sub(t,a.pos),a.cellSize));if(Math.abs(i[1])<n.EPSILON){for(let e=Math.min(l[0],m[0]),t=Math.max(l[0],m[0]);e<=t;e++)if(l[0]=e,!1===c(l))return!1;return}if(Math.abs(i[0])<n.EPSILON){for(let e=Math.min(l[1],m[1]),t=Math.max(l[1],m[1]);e<=t;e++)if(l[1]=e,!1===c(l))return!1;return}const u=o.sign(i),p=o.multiply(o.divide(u,i),a.cellSize),d=o.divide(s,a.cellSize),v=r.vec2.fromValues(u[0]>0?p[0]*n.negFract(d[0]):p[0]*n.fract(d[0]),u[1]>0?p[1]*n.negFract(d[1]):p[1]*n.fract(d[1]));for(;;){if(!1===c(l))return!1;if(v[0]>1&&v[1]>1)return;v[0]<v[1]?(l[0]+=u[0],v[0]+=p[0]):(l[1]+=u[1],v[1]+=p[1])}}}},e=>{"use strict";e(e.s=226)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,