"use strict";(self.webpackChunksubpixel_rendering=self.webpackChunksubpixel_rendering||[]).push([[660],{89:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0;const n=a(669);t.aabb=(...e)=>({min:n.min2(...e),max:n.max2(...e)})},226:(e,t,a)=>{const n=a(887),o=a(89),i=a(923),c=a(345),r=a(669),s=a(916),l=a(395),m=n.vec2.fromValues(60,160),p=n.vec2.fromValues(150,170),d=n.vec2.fromValues(250,130),u={p1:m,p2:p,p3:d,points:[m,p,d],e1:r.sub(p,m),e2:r.sub(d,p),e3:r.sub(m,d)};u.center=r.avg(...u.points);const h=document.getElementById("game"),v=h.getContext("2d");if(!v)throw new Error("Could not get canvas graphics :(");h.onmousemove=function(e){const t=h.getBoundingClientRect(),a=n.vec2.fromValues(e.pageX-t.left-document.documentElement.scrollLeft,e.pageY-t.top-document.documentElement.scrollTop),o=n.vec2.fromValues(a[0]-u.center[0],a[1]-u.center[1]);u.center[0]=a[0],u.center[1]=a[1],u.points.forEach((e=>{e[0]+=o[0],e[1]+=o[1]}))};const g=Math.cos(.01),f=Math.sin(.01),M=()=>{v.clearRect(0,0,h.width,h.height);const e=v.getImageData(0,0,h.width,h.height),t=e.data;u.points.forEach((e=>{const t=e[0]-u.center[0],a=e[1]-u.center[1];e[0]=u.center[0]+t*g-a*f,e[1]=u.center[1]+t*f+a*g})),u.e1=r.sub(u.p2,u.p1),u.e2=r.sub(u.p3,u.p2),u.e3=r.sub(u.p1,u.p3);const a=o.aabb(...u.points);u.aabb={min:r.floor(a.min),max:r.ceil(a.max)},s.rasterise(u.points,((e,a,n,o)=>{if(o){let o=4*(h.width*n+e);for(let n=e;n<=a;n++,o+=4)t[o]=0,t[o+1]=0,t[o+2]=0,t[o+3]=255}else{const o=n+1;let r=4*(h.width*n+e);for(let s=e;s<=a;s++,r+=4){const e=l.intersectCellTriangle(u,{min:[s,n],max:[s+1,o]}),a=255*c.clamp(i.polygonArea(e),0,1);t[r]=0,t[r+1]=0,t[r+2]=0,t[r+3]+=a}}})),v.putImageData(e,0,0),requestAnimationFrame(M)};requestAnimationFrame(M)},395:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const n=a(669),o=a(345),i=a(857);t.intersectCellTriangle=(e,t)=>{const a=[],c=o.timeAtPos(e.p1[0],e.e1[0],t.min[0]),r=o.timeAtPos(e.p1[0],e.e1[0],t.max[0]),s=o.timeAtPos(e.p1[1],e.e1[1],t.min[1]),l=o.timeAtPos(e.p1[1],e.e1[1],t.max[1]);a.push(...i.sort(c,r,s,l).map((a=>n.clamp2(n.add(e.p1,n.scale(e.e1,a)),t.min,t.max))));const m=o.timeAtPos(e.p2[0],e.e2[0],t.min[0]),p=o.timeAtPos(e.p2[0],e.e2[0],t.max[0]),d=o.timeAtPos(e.p2[1],e.e2[1],t.min[1]),u=o.timeAtPos(e.p2[1],e.e2[1],t.max[1]);a.push(...i.sort(m,p,d,u).map((a=>n.clamp2(n.add(e.p2,n.scale(e.e2,a)),t.min,t.max))));const h=o.timeAtPos(e.p3[0],e.e3[0],t.min[0]),v=o.timeAtPos(e.p3[0],e.e3[0],t.max[0]),g=o.timeAtPos(e.p3[1],e.e3[1],t.min[1]),f=o.timeAtPos(e.p3[1],e.e3[1],t.max[1]);return a.push(...i.sort(h,v,g,f).map((a=>n.clamp2(n.add(e.p3,n.scale(e.e3,a)),t.min,t.max)))),a}},923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=a(669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let o=0;o<t;o++)a+=n.determinant2(e[o],e[o+1]);return a+=n.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},841:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getLineEquation=void 0;const n=a(669);t.getLineEquation=e=>{const t=n.sub(e.p2,e.p1),a=t[1]/t[0];return{gradient:a,intersect:e.p1[1]-e.p1[0]*a}}},952:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveLineX=void 0,t.solveLineX=(e,t)=>(t-e.intersect)/e.gradient},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,n)=>a?t.clamp((n-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inside=t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const n=a(887),o=a(345);t.clamp2=(e,t,a)=>{const o=n.vec2.clone(e);return n.vec2.min(o,o,a),n.vec2.max(o,o,t),o},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=n.vec2.equals,t.scale=(e,t)=>n.vec2.scale(n.vec2.create(),e,t),t.multiply=(e,t)=>n.vec2.multiply(n.vec2.create(),e,t),t.divide=(e,t)=>n.vec2.divide(n.vec2.create(),e,t),t.add=(e,t)=>n.vec2.add(n.vec2.create(),e,t),t.adds=(e,t)=>n.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>n.vec2.sub(n.vec2.create(),e,t),t.floor=e=>n.vec2.floor(n.vec2.create(),e),t.ceil=e=>n.vec2.ceil(n.vec2.create(),e),t.abs=e=>n.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>n.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>n.vec2.dot(e,t),t.length=e=>n.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,a)=>n.vec2.lerp(n.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,o=n.vec2.clone(t);return a.forEach((e=>{n.vec2.min(o,o,e)})),o},t.max2=(...e)=>{const[t,...a]=e,o=n.vec2.clone(t);return a.forEach((e=>{n.vec2.max(o,o,e)})),o},t.avg=(...e)=>{const t=n.vec2.create();return e.length&&(e.forEach((e=>{n.vec2.add(t,t,e)})),n.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1]),t.inside=(e,t)=>{let a=0,n=e[e.length-1];return e.forEach((e=>{const i=n[1]<e[1]?n:e,c=n[1]<e[1]?e:n;i[1]<t[1]+o.EPSILON&&c[1]>t[1]+o.EPSILON&&(c[0]-i[0])*(t[1]-i[1])>(t[0]-i[0])*(c[1]-i[1])&&(a+=1),n=e})),a%2!=0}},857:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,a,n)=>{const o=Math.min(e,t),i=Math.max(e,t),c=Math.min(a,n),r=Math.max(a,n),s=Math.min(i,c),l=Math.max(i,c),m=Math.max(o,s),p=Math.min(l,r);return[Math.min(o,s),Math.min(m,p),Math.max(m,p),Math.max(l,r)]}},916:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rasterise=void 0;const n=a(345),o=a(952),i=a(669),c=a(841),r=e=>{let t,a;return e.p1[1]<e.p2[1]?(t=e.p1,a=e.p2):e.p1[1]>e.p2[1]?(t=e.p2,a=e.p1):e.p1[0]<e.p2[0]?(t=e.p1,a=e.p2):(t=e.p2,a=e.p1),{pStart:t,pEnd:a,xRange:[Math.min(e.p1[0],e.p2[0]),Math.max(e.p1[0],e.p2[0])],equation:c.getLineEquation(e)}};t.rasterise=(e,t)=>{const a=[{p1:e[0],p2:e[1]},{p1:e[1],p2:e[2]},{p1:e[2],p2:e[0]}],c=i.min2(...e),s=i.max2(...e),l=[r(a[0]),r(a[1]),r(a[2])];let m=Math.floor(c[1]);const p=Math.ceil(s[1]);if(p-m<1)t(Math.floor(c[0]),Math.floor(s[0]),m,!1);else for(let e=m+1;e<=p;e++){const a=[-1,-1,-1,-1];for(let t=0;t<3;t++){const i=l[t];if(i.pEnd[1]>=m&&i.pStart[1]<=e){let t=o.solveLineX(i.equation,m);t=isFinite(t)?n.clamp(t,i.xRange[0],i.xRange[1]):i.pStart[0],t=Math.floor(t);let c=o.solveLineX(i.equation,e);c=isFinite(c)?n.clamp(c,i.xRange[0],i.xRange[1]):i.pEnd[0],c=Math.floor(c);const r=[Math.min(t,c),Math.max(t,c)];a[0]<0?(a[0]=r[0],a[1]=r[1]):r[0]<=a[1]+1&&r[0]>=a[0]-1||r[1]<=a[1]+1&&r[1]>=a[0]-1?(a[0]=Math.min(a[0],r[0]),a[1]=Math.max(a[1],r[1])):a[2]<0?r[0]>a[1]?(a[2]=r[0],a[3]=r[1]):(a[2]=a[0],a[3]=a[1],a[0]=r[0],a[1]=r[1]):(a[2]=Math.min(a[2],r[0]),a[3]=Math.max(a[3],r[1]))}}a[2]>a[1]?(t(a[0],a[1],m,!1),t(a[1]+1,a[2]-1,m,!0),t(a[2],a[3],m,!1)):t(a[0],Math.max(a[1],a[3]),m,!1),m=e}}}},e=>{e(e.s=226)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,