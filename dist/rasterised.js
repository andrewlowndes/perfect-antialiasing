(()=>{"use strict";var e={89:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0,t.aabb=e=>{const t=e[0],a={x:t.x,y:t.y},n={x:t.x,y:t.y};for(let t=1;t<e.length;t++){const o=e[t];a.x=Math.min(a.x,o.x),a.y=Math.min(a.y,o.y),n.x=Math.max(n.x,o.x),n.y=Math.max(n.y,o.y)}return{min:a,max:n}}},815:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bitCode=void 0,t.bitCode=(e,t)=>{let a=0;return e.x<t.min.x?a|=1:e.x>t.max.x&&(a|=2),e.y<t.min.y?a|=4:e.y>t.max.y&&(a|=8),a}},796:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersect=void 0,t.intersect=(e,t,a,n)=>8&a?{x:e.x+(t.x-e.x)*(n.max.y-e.y)/(t.y-e.y),y:n.max.y}:4&a?{x:e.x+(t.x-e.x)*(n.min.y-e.y)/(t.y-e.y),y:n.min.y}:2&a?{x:n.max.x,y:e.y+(t.y-e.y)*(n.max.x-e.x)/(t.x-e.x)}:1&a?{x:n.min.x,y:e.y+(t.y-e.y)*(n.min.x-e.x)/(t.x-e.x)}:void 0},558:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const n=a(345),o=a(857);t.intersectCellTriangle=(e,t)=>{const a=[],x=n.timeAtPos(e.p1.x,e.e1.x,t.min.x),i=n.timeAtPos(e.p1.x,e.e1.x,t.max.x),r=n.timeAtPos(e.p1.y,e.e1.y,t.min.y),y=n.timeAtPos(e.p1.y,e.e1.y,t.max.y);a.push(...o.sort(x,i,r,y).map((a=>n.clamp2(n.add(e.p1,n.scale(e.e1,a)),t.min,t.max))));const s=n.timeAtPos(e.p2.x,e.e2.x,t.min.x),m=n.timeAtPos(e.p2.x,e.e2.x,t.max.x),l=n.timeAtPos(e.p2.y,e.e2.y,t.min.y),c=n.timeAtPos(e.p2.y,e.e2.y,t.max.y);a.push(...o.sort(s,m,l,c).map((a=>n.clamp2(n.add(e.p2,n.scale(e.e2,a)),t.min,t.max))));const p=n.timeAtPos(e.p3.x,e.e3.x,t.min.x),d=n.timeAtPos(e.p3.x,e.e3.x,t.max.x),u=n.timeAtPos(e.p3.y,e.e3.y,t.min.y),h=n.timeAtPos(e.p3.y,e.e3.y,t.max.y);return a.push(...o.sort(p,d,u,h).map((a=>n.clamp2(n.add(e.p3,n.scale(e.e3,a)),t.min,t.max)))),a}},923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=a(345);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let o=0;o<t;o++)a+=n.determinant2(e[o],e[o+1]);return a+=n.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},69:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonclip=void 0;const n=a(796),o=a(815);t.polygonclip=(e,t)=>{let a=new Array;for(let x=1;x<=8;x*=2){a=[];let i=e[e.length-1],r=!(o.bitCode(i,t)&x);for(let y=0;y<e.length;y++){const s=e[y],m=!(o.bitCode(s,t)&x);m!==r&&a.push(n.intersect(i,s,x,t)),m&&a.push(s),i=s,r=m}if(!(e=a).length)break}return a}},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.lerp=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.timeAtPos=t.clamp2=t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.clamp2=(e,a,n)=>({x:t.clamp(e.x,a.x,n.x),y:t.clamp(e.y,a.y,n.y)}),t.timeAtPos=(e,a,n)=>a?t.clamp((n-e)/a,0,1):0,t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp=(e,t,a)=>e*(1-a)+t*a,t.lerp2=(e,a,n)=>({x:t.lerp(e.x,a.x,n),y:t.lerp(e.y,a.y,n)}),t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.min(a.x,e.x),a.y=Math.min(a.y,e.y)})),a},t.max2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.max(a.x,e.x),a.y=Math.max(a.y,e.y)})),a},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,a)=>!(e.x>a.x||e.x<t.x||e.y>a.y||e.y<t.y)},857:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,a,n)=>{const o=Math.min(e,t),x=Math.max(e,t),i=Math.min(a,n),r=Math.max(a,n),y=Math.min(x,i),s=Math.max(x,i),m=Math.max(o,y),l=Math.min(s,r);return[Math.min(o,y),Math.min(m,l),Math.max(m,l),Math.max(s,r)]}},314:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dda=void 0;const n=a(345);t.dda=(e,t,a,o)=>{const x=n.normalize(n.sub(t,e)),i=n.sub(e,a.pos),r=n.floor(n.divide(i,a.cellSize)),y=n.abs(n.divide(a.cellSize,x)),s=n.sign(x),m=n.multiply(a.cellSize,n.add(r,n.sign(n.adds(s,1)))),l=n.divide(n.sub(m,i),x),c=n.floor(n.divide(n.sub(t,a.pos),a.cellSize));for(let e=0;e<a.maxSteps;e++){if(a.min&&a.max&&!n.inRange(r,a.min,a.max))return!0;if(!1===o(r))return!1;if(n.equal(c,r))return!0;l.x<l.y?(l.x+=y.x,r.x+=s.x):(l.y+=y.y,r.y+=s.y)}return!0}},848:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rasterizeTriangle=void 0;const n=a(314);t.rasterizeTriangle=(e,t,a,o)=>{const x=[{from:e[0],to:e[1]},{from:e[1],to:e[2]},{from:e[2],to:e[0]}],i={},r=new Set;x.forEach((e=>{n.dda(e.from,e.to,t,(e=>{let t=i[e.y];const n=e.x+","+e.y;r.has(n)||(t?(t.min=Math.min(t.min,e.x),t.max=Math.max(t.max,e.x)):t={min:e.x,max:e.x},i[e.y]=t,a(e),r.add(n))}))}));const y={x:0,y:0};for(let e in i)if(i.hasOwnProperty(e)){y.y=parseInt(e,10);const t=i[e];for(y.x=t.min+1;y.x<t.max;y.x++)r.has(y.x+","+y.y)||o(y)}return i}}},t={};function a(n){var o=t[n];if(void 0!==o)return o.exports;var x=t[n]={exports:{}};return e[n](x,x.exports,a),x.exports}(()=>{const e=a(89),t=a(558),n=a(923),o=a(69),x=a(345),i=a(848),r={x:60,y:160},y={x:150,y:170},s={x:250,y:130},m={p1:r,p2:y,p3:s,points:[r,y,s],e1:x.sub(y,r),e2:x.sub(s,y),e3:x.sub(r,s)};m.center=x.avg(m.points);const l=document.getElementById("game"),c=l.getContext("2d");if(!c)throw new Error("Could not get canvas graphics :(");l.onmousemove=function(e){const t=l.getBoundingClientRect(),a={x:e.pageX-t.left-document.documentElement.scrollLeft,y:e.pageY-t.top-document.documentElement.scrollTop},n=a.x-m.center.x,o=a.y-m.center.y;m.center.x=a.x,m.center.y=a.y,m.points.forEach((e=>{e.x+=n,e.y+=o}))};const p=Math.cos(.01),d=Math.sin(.01),u=()=>{c.clearRect(0,0,l.width,l.height);const a=c.getImageData(0,0,l.width,l.height),r=a.data;m.points.forEach((e=>{const t=e.x-m.center.x,a=e.y-m.center.y;e.x=m.center.x+t*p-a*d,e.y=m.center.y+t*d+a*p})),m.e1=x.sub(m.p2,m.p1),m.e2=x.sub(m.p3,m.p2),m.e3=x.sub(m.p1,m.p3);const y=e.aabb(m.points);m.aabb={min:x.floor(y.min),max:x.ceil(y.max)},i.rasterizeTriangle(m.points,{pos:{x:0,y:0},cellSize:{x:1,y:1},maxSteps:1e5,min:m.aabb.min,max:m.aabb.max},(e=>{const a={min:{x:e.x,y:e.y},size:{x:1,y:1},max:{x:e.x+1,y:e.y+1}},i=t.intersectCellTriangle(m,a),y=o.polygonclip(m.points,a),s=x.clamp(Number(n.polygonArea(y).toFixed(5))/1,0,1),c=x.clamp(Number(n.polygonArea(i).toFixed(5)),0,1);s!==c&&console.error("Incorrect coverage",m.points);const p=Math.floor(255*c),d=4*(l.width*e.y+e.x);r[d]=0,r[d+1]=0,r[d+2]=0,r[d+3]=p}),(e=>{const t=4*(l.width*e.y+e.x);r[t]=0,r[t+1]=0,r[t+2]=0,r[t+3]=255})),c.putImageData(a,0,0),requestAnimationFrame(u)};requestAnimationFrame(u)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,